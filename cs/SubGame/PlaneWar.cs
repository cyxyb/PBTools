// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/PlaneWar.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PlaneWar {

  /// <summary>Holder for reflection information generated from Proto/SubGame/PlaneWar.proto</summary>
  public static partial class PlaneWarReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/PlaneWar.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlaneWarReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxQcm90by9TdWJHYW1lL1BsYW5lV2FyLnByb3RvEghQbGFuZVdhciIoChNN",
            "aXNzaWxlRmlzaExpc3RJbmZvEhEKCWZpc2hfbGlzdBgBIAMoBSIlCgdEZWNp",
            "bWFsEgsKA251bRgBIAEoBRINCgVkZW5vbRgCIAEoBSKEAQoMU0NfU2NlbmVJ",
            "bmZvEhAKCGJldF9saXN0GAEgAygFEikKC3BsYXllcl9pbmZvGAIgAygLMhQu",
            "UGxhbmVXYXIuUGxheWVySW5mbxIkCghyb29tSW5mbxgDIAEoCzISLlBsYW5l",
            "V2FyLlJvb21JbmZvEhEKCXBpZWNlX3BheRgEIAMoBSIqCgdDU0xvZ2luEhAK",
            "CHBsYXllcklkGAEgASgFEg0KBXRva2VuGAIgASgJIisKB1NDTG9naW4SDwoH",
            "c2NlbmVJZBgBIAEoBRIPCgdhcmVuYUlEGAIgASgFIgoKCENTTG9nb3V0Ii0K",
            "CFNDTG9nb3V0EhIKCmxvZ291dFR5cGUYASABKAUSDQoFY2hhaXIYAiABKAUi",
            "LQoOQ29tbW9uUHJvcEluZm8SDgoGcHJvcElEGAEgASgFEgsKA251bRgCIAEo",
            "BSImCgNQb3MSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIijwEK",
            "CEJ1ZmZJbmZvEg8KB2J1ZmZVSUQYASABKAUSCwoDbnVtGAIgASgFEg0KBXJh",
            "dGlvGAMgASgFEg4KBmlzQ3JpdBgEIAEoCBIPCgdjb21wb3NlGAUgAygFEgwK",
            "BGRlc2MYBiADKAUSFAoMc3BlZWRVcFJhdGlvGAcgASgFEhEKCW9yaWdpblVJ",
            "RBgIIAEoBSKMAQoNQmxhY2tIb2xlSW5mbxILCgN1aWQYASABKAUSCwoDbnVt",
            "GAIgASgFEg0KBXJhdGlvGAMgASgFEhoKA3BvcxgEIAEoCzINLlBsYW5lV2Fy",
            "LlBvcxIOCgZpc0NyaXQYBSABKAgSEwoLbW9uc3Rlckxpc3QYBiADKAUSEQoJ",
            "b3JpZ2luVUlEGAcgASgFIjQKCEZvcm1JbmZvEgwKBGZvcm0YASABKAUSGgoD",
            "cG9zGAIgASgLMg0uUGxhbmVXYXIuUG9zIjIKCExvY2tJbmZvEg8KB2xvY2tV",
            "SUQYASABKAUSFQoNY29sbGlkZXJJbmRleBgCIAEoBSIwCgdIaXRNb2RlEg8K",
            "B2hpdFR5cGUYASABKAUSFAoMaGl0RGlyZWN0aW9uGAIgASgFImAKC1dlYXBv",
            "blN0YXRlEgwKBHN0ZXAYASABKAUSHwoIcG9zaXRpb24YAiABKAsyDS5QbGFu",
            "ZVdhci5Qb3MSEAoIZHVyYXRpb24YAyABKAUSEAoIbW92ZU1vZGUYBCABKAUi",
            "VQoKU2V0dGxlSW5mbxIRCglvcmlnaW5VSUQYASABKAUSEgoKYnVsbGV0VHlw",
            "ZRgCIAEoBRIOCgZyZXdhcmQYAyABKAUSEAoId2VhcG9uSUQYBCABKAUiSwoH",
            "R3VuSW5mbxIRCglzb3VyY2VVSUQYASABKAUSEQoJb3JpZ2luVUlEGAIgASgF",
            "Eg0KBXJhdGlvGAMgASgFEgsKA251bRgEIAEoBSJECglGbGFtZUluZm8SEQoJ",
            "b3JpZ2luVUlEGAEgASgFEg0KBXJhdGlvGAIgASgFEhUKDXNvdXJjZVVJRExp",
            "c3QYAyADKAUiMAoHQmVlSW5mbxIRCglyYXRpb0xpc3QYASADKAUSEgoKdG90",
            "YWxSYXRpbxgCIAEoBSK1AQoKV2VhcG9uSW5mbxIQCgh3ZWFwb25JRBgBIAEo",
            "BRIRCglzb3VyY2VVSUQYAiABKAUSEQoJb3JpZ2luVUlEGAMgASgFEg0KBXJh",
            "dGlvGAQgASgFEgsKA251bRgFIAEoBRISCgp3ZWFwb25OYW1lGAYgASgJEhMK",
            "C3dlYXBvblJhdGlvGAcgASgFEioKC3dlYXBvblN0YXRlGAggASgLMhUuUGxh",
            "bmVXYXIuV2VhcG9uU3RhdGUifwoKU3BlY0VmZmVjdBIRCgljb3N0TW9uZXkY",
            "ASABKAUSEQoJZWFybk1vbmV5GAIgASgFEhAKCHZpb2xlbmNlGAMgASgCEhAK",
            "CGR1cmF0aW9uGAQgASgFEhMKC21heER1cmF0aW9uGAUgASgFEhIKCnNvdXJj",
            "ZVR5cGUYBiABKAUiPQoERGljZRINCgVyYXRpbxgBIAEoBRIKCgJ0cBgCIAEo",
            "BRIaCgNwb3MYAyABKAsyDS5QbGFuZVdhci5Qb3MiRwoIRGljZUluZm8SDAoE",
            "bW9kZRgBIAEoBRILCgNtdWwYAiABKAUSIAoIZGljZUxpc3QYAyADKAsyDi5Q",
            "bGFuZVdhci5EaWNlIsgDCglTdGF0ZUluZm8SDgoGaXNCYWNrGAEgASgIEiQK",
            "CGJ1ZmZMaXN0GAIgAygLMhIuUGxhbmVXYXIuQnVmZkluZm8SLgoNYmxhY2tI",
            "b2xlTGlzdBgDIAMoCzIXLlBsYW5lV2FyLkJsYWNrSG9sZUluZm8SJAoIZm9y",
            "bUluZm8YBCABKAsyEi5QbGFuZVdhci5Gb3JtSW5mbxIkCghsb2NrSW5mbxgF",
            "IAEoCzISLlBsYW5lV2FyLkxvY2tJbmZvEigKCndlYXBvbkluZm8YBiABKAsy",
            "FC5QbGFuZVdhci5XZWFwb25JbmZvEiwKDnByb3BXZWFwb25JbmZvGAcgASgL",
            "MhQuUGxhbmVXYXIuV2VhcG9uSW5mbxIoCgpzZXR0bGVMaXN0GAggAygLMhQu",
            "UGxhbmVXYXIuU2V0dGxlSW5mbxIiCgdndW5JbmZvGAkgASgLMhEuUGxhbmVX",
            "YXIuR3VuSW5mbxImCglmbGFtZUluZm8YCiABKAsyEy5QbGFuZVdhci5GbGFt",
            "ZUluZm8SKAoKc3BlY0VmZmVjdBgLIAEoCzIULlBsYW5lV2FyLlNwZWNFZmZl",
            "Y3QSEQoJZXh0cmFfbXVsGAwgASgIIiYKC01pc3NpbGVJbmZvEgoKAmlkGAEg",
            "ASgFEgsKA251bRgCIAEoBSKiAQoJUGlnZ3lJbmZvEg4KBnN0YXR1cxgBIAEo",
            "BRITCgtyZXdhcmRWYWx1ZRgCIAEoBRIZChFhY2N1bXVsYXRpbmdWYWx1ZRgD",
            "IAEoBRISCgpzZXR0bGVUaW1lGAQgASgJEhcKD3NldHRsZVRocmVzaG9sZBgF",
            "IAEoBRIRCgltYXhSZXdhcmQYBiABKAUSFQoNbmV4dE1heFJld2FyZBgHIAEo",
            "BSJWCg5BcmVuYVBpZWNlSW5mbxIPCgdhcmVuYUlEGAEgASgFEhEKCWhhdmVQ",
            "aWVjZRgCIAEoBRIRCgluZWVkUGllY2UYAyABKAUSDQoFcmF0aW8YBCABKAUi",
            "kgEKCVBpZWNlSW5mbxIrCglhcmVuYUluZm8YASADKAsyGC5QbGFuZVdhci5B",
            "cmVuYVBpZWNlSW5mbxITCgtoYXZlRGlhbW9uZBgCIAEoBRITCgtuZWVkRGlh",
            "bW9uZBgDIAEoBRIXCg9waWVjZVN0YWNrTGltaXQYBCABKAUSFQoNZXhjaGFu",
            "Z2VQaWVjZRgFIAEoBSInCgxSb3VsZXR0ZUluZm8SCgoCaWQYASABKAUSCwoD",
            "bnVtGAIgASgFIjAKCkVmZmVjdEluZm8SEAoIZWZmZWN0SUQYASABKAUSEAoI",
            "aXNHbG9iYWwYAiABKAginAUKClBsYXllckluZm8SDQoFcmF0aW8YASABKAUS",
            "DwoHcGxhbmVJRBgCIAEoBRINCgVzY29yZRgDIAEoAxINCgVjaGFpchgEIAEo",
            "BRISCgpwbGF5ZXJOYW1lGAUgASgJEhAKCHBsYXllcklEGAYgASgFEgsKA3Zp",
            "cBgHIAEoBRImCglzdGF0ZUluZm8YCCABKAsyEy5QbGFuZVdhci5TdGF0ZUlu",
            "Zm8SEgoKbWVtYmVyRGF5cxgJIAEoBRIUCgxsYXN0VmlwTGV2ZWwYCiABKAUS",
            "FgoOc2NyYXRjaENhcmROdW0YCyABKAUSDgoGdGlja2V0GAwgASgFEhMKC3Jh",
            "dGlvVW5Mb2NrGA0gASgIEiYKCXBpZ2d5SW5mbxgOIAEoCzITLlBsYW5lV2Fy",
            "LlBpZ2d5SW5mbxIqCgttaXNzaWxlTGlzdBgPIAMoCzIVLlBsYW5lV2FyLk1p",
            "c3NpbGVJbmZvEg8KB2NhbGxOdW0YECABKAUSFQoNc2VsZWN0ZWRUaXRsZRgR",
            "IAEoBRIsCg93ZWFwb25QaWVjZUluZm8YEiABKAsyEy5QbGFuZVdhci5QaWVj",
            "ZUluZm8SEAoIZWZmZWN0SUQYEyABKAUSDAoEaWNvbhgUIAEoCRIsCgxyb3Vs",
            "ZXR0ZUxpc3QYFSADKAsyFi5QbGFuZVdhci5Sb3VsZXR0ZUluZm8SDwoHd2lu",
            "Z3NJZBgWIAEoBRIoCgplZmZlY3RJbmZvGBcgASgLMhQuUGxhbmVXYXIuRWZm",
            "ZWN0SW5mbxITCgtjdXJyZW50UmFuaxgYIAEoBRIMCgRzdGFyGBkgASgFEhIK",
            "CmlzTGFzdFJhbmsYGiABKAgSJAoJcmVkUGFja2V0GBsgASgLMhEuUGxhbmVX",
            "YXIuRGVjaW1hbCKMAQoPUGxhbmVTcGVjRWZmZWN0EhIKCnJhdGlvTGltaXQY",
            "ASABKAUSFQoNaGl0Q2hhbmdlUmF0ZRgCIAEoAhIXCg9tb25leUNoYW5nZVJh",
            "dGUYAyABKAISFAoMdmlvbGVuY2VSYXRlGAQgASgCEhEKCXNwZWVkUmF0ZRgF",
            "IAEoAhIMCgR0eXBlGAYgASgFInYKD1dpbmdzU3BlY0VmZmVjdBIRCglzcGVl",
            "ZFJhdGUYASABKAISEgoKcmF0aW9MaW1pdBgCIAEoBRIVCg1oaXRDaGFuZ2VS",
            "YXRlGAMgASgCEhcKD21vbmV5Q2hhbmdlUmF0ZRgEIAEoAhIMCgR0eXBlGAUg",
            "ASgFIpgCCglQbGFuZUluZm8SDwoHcGxhbmVJRBgBIAEoBRINCgVpc1ZpcBgC",
            "IAEoCBIQCgh2aXBMZXZlbBgDIAEoBRIQCghpc01lbWJlchgEIAEoCBISCgpp",
            "c1Rhc2tMb2NrGAUgASgIEhIKCnJlcXVpcmVBY3QYBiABKAUSDgoGZW5hYmxl",
            "GAcgASgIEjIKD3BsYW5lU3BlY0VmZmVjdBgIIAEoCzIZLlBsYW5lV2FyLlBs",
            "YW5lU3BlY0VmZmVjdBIRCgl0aW1lc3RhbXAYCSABKAUSEAoIcmFua0ZsYWcY",
            "CiABKAUSDQoFcHJpY2UYCyABKAUSJwoEYnVmZhgMIAEoCzIZLlBsYW5lV2Fy",
            "LlBsYW5lU3BlY0VmZmVjdCIrCg9JbnRlcmFjdGlvbkl0ZW0SCgoCaWQYASAB",
            "KAUSDAoEY29zdBgCIAEoBSI7Cg5SYW5rU3RhdHVzSW5mbxISCgpyYW5rRW5h",
            "YmxlGAEgASgIEhUKDWFsbG93VHlwZUxpc3QYAiADKAUivQEKCVdpbmdzSW5m",
            "bxIPCgd3aW5nc0lkGAEgASgFEg4KBmVuYWJsZRgCIAEoCBIRCgl0aW1lc3Rh",
            "bXAYAyABKAUSMgoPd2luZ3NTcGVjRWZmZWN0GAQgASgLMhkuUGxhbmVXYXIu",
            "V2luZ3NTcGVjRWZmZWN0EhAKCHJhbmtGbGFnGAUgASgFEg0KBXByaWNlGAYg",
            "ASgFEicKBGJ1ZmYYByABKAsyGS5QbGFuZVdhci5XaW5nc1NwZWNFZmZlY3Qi",
            "ugIKCFJvb21JbmZvEiYKCXBsYW5lTGlzdBgBIAMoCzITLlBsYW5lV2FyLlBs",
            "YW5lSW5mbxIZChFzY3JhdGNoQ2FyZEVuYWJsZRgCIAEoCBIyCg9pbnRlcmFj",
            "dGlvbkxpc3QYAyADKAsyGS5QbGFuZVdhci5JbnRlcmFjdGlvbkl0ZW0SFwoP",
            "cGlnZ3lCYW5rRW5hYmxlGAQgASgIEhoKEnBlcnNvbmFsUG9vbEVuYWJsZRgF",
            "IAEoCBIZChFyZXdhcmRNb25zdGVyTGlzdBgGIAMoBRIsCgpyYW5rU3RhdHVz",
            "GAcgASgLMhguUGxhbmVXYXIuUmFua1N0YXR1c0luZm8SJgoJd2luZ3NMaXN0",
            "GAggAygLMhMuUGxhbmVXYXIuV2luZ3NJbmZvEhEKCXJhdGlvTGlzdBgJIAMo",
            "BSIJCgdDU1JlYWR5IlkKB1NDUmVhZHkSKAoKcGxheWVyTGlzdBgBIAMoCzIU",
            "LlBsYW5lV2FyLlBsYXllckluZm8SJAoIcm9vbUluZm8YAiABKAsyEi5QbGFu",
            "ZVdhci5Sb29tSW5mbyI5ChFTQ1VzZXJFbnRlck5vdGlmeRIkCgZwbGF5ZXIY",
            "ASABKAsyFC5QbGFuZVdhci5QbGF5ZXJJbmZvIkkKC01vbnN0ZXJJbmZvEhMK",
            "C21vbnN0ZXJUeXBlGAEgASgFEhIKCm1vbnN0ZXJVSUQYAiABKAUSEQoJaXND",
            "b25uZWN0GAMgASgIIl4KDlNDTW9uc3RlclNwYXduEhAKCGNvbmZpZ0lEGAEg",
            "ASgFEioKC21vbnN0ZXJMaXN0GAIgAygLMhUuUGxhbmVXYXIuTW9uc3Rlcklu",
            "Zm8SDgoGaXNDYWxsGAMgASgIIl4KBkNTU2hvdBINCgVhbmdsZRgBIAEoBRIN",
            "CgVyYXRpbxgCIAEoBRISCgpidWxsZXRUeXBlGAMgASgFEg8KB3NjYXR0ZXIY",
            "BCABKAUSEQoJc291cmNlVUlEGAUgASgFIloKBlNDU2hvdBINCgVjaGFpchgB",
            "IAEoBRINCgVhbmdsZRgCIAEoBRINCgVzY29yZRgDIAEoBRISCgpidWxsZXRU",
            "eXBlGAQgASgFEg8KB3NjYXR0ZXIYBSABKAUiMwoGQ1NMb2NrEhIKCm1vbnN0",
            "ZXJVSUQYASABKAUSFQoNY29sbGlkZXJJbmRleBgCIAEoBSJCCgZTQ0xvY2sS",
            "DQoFY2hhaXIYASABKAUSEgoKbW9uc3RlclVJRBgCIAEoBRIVCg1jb2xsaWRl",
            "ckluZGV4GAMgASgFIigKBVBva2VyEg0KBXZhbHVlGAEgASgFEhAKCG11bHRp",
            "cGxlGAIgASgFImEKCURyb3BQb2tlchIiCglwb2tlckxpc3QYASADKAsyDy5Q",
            "bGFuZVdhci5Qb2tlchIMCgRkaWNlGAIgASgFEgwKBGtpbmQYAyABKAUSFAoM",
            "a2luZE11bHRpcGxlGAQgASgFIowCCg1UcmlnZ2VyQnVsbGV0EhIKCmJ1bGxl",
            "dFR5cGUYASABKAUSDwoHc3ViVHlwZRgCIAEoBRILCgNudW0YAyABKAUSDgoG",
            "cGFyYW1zGAQgAygFEg8KB3BhcmFtczIYBSADKAUSEQoJc291cmNlVUlEGAYg",
            "ASgFEhIKCmdlbmVyYXRpb24YByABKAUSGgoDcG9zGAggASgLMg0uUGxhbmVX",
            "YXIuUG9zEg0KBWRlbGF5GAkgASgCEg0KBXJhbmdlGAogASgFEg0KBXNwZWVk",
            "GAsgASgCEhAKCG1vbmV0YXJ5GAwgASgJEhQKDGRlc3Ryb3lEZWxheRgNIAEo",
            "AhIQCghoaXRSYXRpbxgOIAEoBSJaCghSb3VsZXR0ZRISCgpvdXRlckluZGV4",
            "GAEgASgFEhIKCmlubmVySW5kZXgYAiABKAUSEgoKb3V0ZXJSb3VuZBgDIAMo",
            "BRISCgppbm5lclJvdW5kGAQgAygFIl0KCERyb3BCdWZmEg8KB2J1ZmZVSUQY",
            "ASABKAUSCwoDbnVtGAIgASgFEg8KB2NvbXBvc2UYAyADKAUSDAoEZGVzYxgE",
            "IAMoBRIUCgxzcGVlZFVwUmF0aW8YBSABKAUiPAoPRmFrZVRyZXN1cmVJbmZv",
            "EgwKBHR5cGUYASABKAUSDgoGcHJvcElEGAIgASgFEgsKA251bRgDIAEoBSKK",
            "AQoMVHJlYXN1cmVJbmZvEhAKCHNob3dUeXBlGAEgASgFEgwKBHR5cGUYAiAB",
            "KAUSDgoGcHJvcElEGAMgASgFEgsKA251bRgEIAEoBRIQCghmYWtlVHlwZRgF",
            "IAEoBRIrCghmYWtlSW5mbxgGIAEoCzIZLlBsYW5lV2FyLkZha2VUcmVzdXJl",
            "SW5mbyJNChBGb3J0dW5lV2hlZWxJbmZvEg0KBXN0YWdlGAEgASgFEg0KBXJh",
            "dGlvGAIgASgFEgwKBG5leHQYAyABKAgSDQoFY29sb3IYBCABKAUiLwoIVG9h",
            "ZEluZm8SEQoJcmF0aW9MaXN0GAEgAygFEhAKCGNyaXRpY2FsGAIgASgFIkUK",
            "DUZvcnR1bmVDb25maWcSNAoQZm9ydHVuZVdoZWVsSW5mbxgBIAMoCzIaLlBs",
            "YW5lV2FyLkZvcnR1bmVXaGVlbEluZm8iOAoJQmVlQ29uZmlnEg0KBWFMaXN0",
            "GAEgAygFEg0KBWJMaXN0GAIgAygFEg0KBWNMaXN0GAMgAygFIksKEkNvbW1v",
            "blJlcGxheUNvbmZpZxIOCgZtYXhMZW4YASABKAUSEwoLbGltaXRSZXdhcmQY",
            "AiABKAUSEAoIbGltaXRNdWwYAyABKAUiYwoSR2xvYmFsUmVwbGF5Q29uZmln",
            "EjgKEmNvbW1vblJlcGxheUNvbmZpZxgBIAEoCzIcLlBsYW5lV2FyLkNvbW1v",
            "blJlcGxheUNvbmZpZxITCgtyZWZyZXNoVGltZRgCIAEoBSJQChRQZXJzb25h",
            "bFJlcGxheUNvbmZpZxI4ChJjb21tb25SZXBsYXlDb25maWcYASABKAsyHC5Q",
            "bGFuZVdhci5Db21tb25SZXBsYXlDb25maWcilAEKDFJlcGxheUNvbmZpZxI4",
            "ChJnbG9iYWxSZXBsYXlDb25maWcYASABKAsyHC5QbGFuZVdhci5HbG9iYWxS",
            "ZXBsYXlDb25maWcSPAoUcGVyc29uYWxSZXBsYXlDb25maWcYAiABKAsyHi5Q",
            "bGFuZVdhci5QZXJzb25hbFJlcGxheUNvbmZpZxIMCgRvcGVuGAMgASgIIl8K",
            "D0Nvbm5Nb25zdGVySW5mbxIRCglzb3VyY2VVSUQYASABKAUSEQoJb3JpZ2lu",
            "VUlEGAIgASgFEg0KBXJhdGlvGAMgASgFEhcKD2Nvbm5Nb25zdGVyTGlzdBgE",
            "IAMoBSKfAQoFQ1NIaXQSEgoKbW9uc3RlclVJRBgBIAEoBRINCgVyYXRpbxgC",
            "IAEoBRISCgpidWxsZXRUeXBlGAMgASgFEhEKCXNvdXJjZVVJRBgEIAEoBRIS",
            "CgpnZW5lcmF0aW9uGAUgASgFEhUKDWRlZHVjdGVkTW9uZXkYBiABKAUSEQoJ",
            "b3JpZ2luVUlEGAcgASgFEg4KBmlzX2VuZBgIIAEoCCL4BgoFU0NIaXQSEgoK",
            "aXNDYXB0dXJlZBgBIAEoCBINCgVjaGFpchgCIAEoBRISCgptb25zdGVyVUlE",
            "GAMgASgFEg0KBXJhdGlvGAQgASgFEhIKCmJ1bGxldFR5cGUYBSABKAUSDAoE",
            "ZWFybhgGIAEoBRINCgVzY29yZRgHIAEoAxIRCgliYXNlVmFsdWUYCCABKAUS",
            "FAoMbXVsdGlwbGVMaXN0GAkgAygFEigKDGRyb3BCdWZmTGlzdBgKIAMoCzIS",
            "LlBsYW5lV2FyLkJ1ZmZJbmZvEi4KDXRyaWdnZXJCdWxsZXQYCyADKAsyFy5Q",
            "bGFuZVdhci5UcmlnZ2VyQnVsbGV0EiYKCWRyb3BQb2tlchgMIAEoCzITLlBs",
            "YW5lV2FyLkRyb3BQb2tlchIkCghyb3VsZXR0ZRgNIAEoCzISLlBsYW5lV2Fy",
            "LlJvdWxldHRlEg0KBXN0YWdlGA4gASgFEhAKCGRyb3BDYXJkGA8gASgFEhEK",
            "CW9yaWdpblVJRBgQIAEoBRIQCghkcm9wQ2FsbBgRIAEoBRIXCg9kcm9wV2Vh",
            "cG9uUGllY2UYEiABKAUSLAoMdHJlYXN1cmVMaXN0GBMgAygLMhYuUGxhbmVX",
            "YXIuVHJlYXN1cmVJbmZvEhAKCHdlYXBvbklEGBQgASgFEigKCndlYXBvbklu",
            "Zm8YFSABKAsyFC5QbGFuZVdhci5XZWFwb25JbmZvEiIKB2d1bkluZm8YFiAB",
            "KAsyES5QbGFuZVdhci5HdW5JbmZvEjQKEGZvcnR1bmVXaGVlbExpc3QYFyAD",
            "KAsyGi5QbGFuZVdhci5Gb3J0dW5lV2hlZWxJbmZvEiQKCHRvYWRJbmZvGBgg",
            "ASgLMhIuUGxhbmVXYXIuVG9hZEluZm8SJgoJZmxhbWVJbmZvGBkgASgLMhMu",
            "UGxhbmVXYXIuRmxhbWVJbmZvEiIKB2JlZUluZm8YGiABKAsyES5QbGFuZVdh",
            "ci5CZWVJbmZvEjIKD2Nvbm5Nb25zdGVySW5mbxgbIAEoCzIZLlBsYW5lV2Fy",
            "LkNvbm5Nb25zdGVySW5mbxIoCgpzcGVjRWZmZWN0GBwgAygLMhQuUGxhbmVX",
            "YXIuU3BlY0VmZmVjdBIkCghkaWNlSW5mbxgdIAEoCzISLlBsYW5lV2FyLkRp",
            "Y2VJbmZvEg4KBmlzUHJvcBgeIAEoCCImChBDU01vbnN0ZXJEZXN0b3J5EhIK",
            "Cm1vbnN0ZXJVSUQYASABKAUiEgoQU0NNb25zdGVyRGVzdG9yeSIbCgtDU1Ry",
            "YW5zZm9ybRIMCgRmb3JtGAEgASgFIioKC1NDVHJhbnNmb3JtEg0KBWNoYWly",
            "GAEgASgFEgwKBGZvcm0YAiABKAUiLAoOQ1NQbGFuZVBvc1N5bmMSGgoDcG9z",
            "GAEgASgLMg0uUGxhbmVXYXIuUG9zIjsKDlNDUGxhbmVQb3NTeW5jEg0KBWNo",
            "YWlyGAEgASgFEhoKA3BvcxgCIAEoCzINLlBsYW5lV2FyLlBvcyI8CgpTQ1N0",
            "YXRlRW5kEg0KBWNoYWlyGAEgASgFEgwKBHR5cGUYAiABKAUSEQoJc291cmNl",
            "VUlEGAMgASgFIh4KCkNTTW9kUmF0aW8SEAoIbW9kTGV2ZWwYASABKAUiPAoK",
            "U0NNb2RSYXRpbxINCgVjaGFpchgBIAEoBRINCgVyYXRpbxgCIAEoBRIQCghp",
            "c1VubG9jaxgDIAEoCCK7AQoMU0NHYWluTm90aWZ5Eg4KBnNvdXJjZRgBIAEo",
            "BRIQCghjdXJNb25leRgCIAEoBRIMCgRnYWluGAMgASgFEhEKCWN1clRpY2tl",
            "dBgEIAEoBRIUCgxjaGFuZ2VUaWNrZXQYBSABKAUSFQoNY2hhbmdlRGlhbW9u",
            "ZBgGIAEoBRISCgpjdXJEaWFtb25kGAcgASgFEicKDGN1clJlZFBhY2tldBgI",
            "IAEoCzIRLlBsYW5lV2FyLkRlY2ltYWwiUgoMU0NHYWluU2V0dGxlEg0KBWNo",
            "YWlyGAEgASgFEhEKCW9yaWdpblVJRBgCIAEoBRINCgVyYXRpbxgDIAEoBRIR",
            "Cglzb3VyY2VVSUQYBCABKAUiHQoKQ1NTZXRQbGFuZRIPCgdwbGFuZUlEGAEg",
            "ASgFIiwKClNDU2V0UGxhbmUSDQoFY2hhaXIYASABKAUSDwoHcGxhbmVJRBgC",
            "IAEoBSIUChJDU1N3aXRjaEJhY2tHcm91bmQiIwoSU0NTd2l0Y2hCYWNrR3Jv",
            "dW5kEg0KBWNoYWlyGAEgASgFIqwBCgtNb25zdGVyUGF0aBImCgdtb25zdGVy",
            "GAEgASgLMhUuUGxhbmVXYXIuTW9uc3RlckluZm8SEAoIY29uZmlnSUQYAiAB",
            "KAUSEQoJc3RlcEluZGV4GAMgASgFEhEKCXJvYWRJbmRleBgEIAEoBRINCgVt",
            "b3ZlVBgFIAEoAhIQCghkb3RJbmRleBgGIAEoBRINCgVkZWxheRgHIAEoAhIN",
            "CgVzdGFnZRgIIAEoBSJDChFTQ1N5bmNNb25zdGVySW5mbxIuCg9jcmVhdGVk",
            "UGF0aExpc3QYASADKAsyFS5QbGFuZVdhci5Nb25zdGVyUGF0aCItCgtTY3Jh",
            "dGNoSW5mbxIMCgRiYXNlGAEgASgFEhAKCG11bHRpcGxlGAIgASgFIhMKEUNT",
            "U2NyYXRjaENhcmRMaXN0IkoKEVNDU2NyYXRjaENhcmRMaXN0EgsKA251bRgB",
            "IAEoBRIoCglmaXJzdENhcmQYAiABKAsyFS5QbGFuZVdhci5TY3JhdGNoSW5m",
            "byIfChBDU1VzZVNjcmF0Y2hDYXJkEgsKA251bRgBIAEoBSJ7ChBTQ1VzZVNj",
            "cmF0Y2hDYXJkEg0KBWNoYWlyGAEgASgFEicKCGNhcmRMaXN0GAIgAygLMhUu",
            "UGxhbmVXYXIuU2NyYXRjaEluZm8SDQoFdG90YWwYAyABKAUSDgoGcmVtYWlu",
            "GAQgASgFEhAKCGN1ck1vbmV5GAUgASgFIiQKD0NTRXhwbG9kZVNldHRsZRIR",
            "Cglzb3VyY2VVSUQYASABKAUiVgoPU0NFeHBsb2RlU2V0dGxlEg0KBWNoYWly",
            "GAEgASgFEhEKCXNvdXJjZVVJRBgCIAEoBRIRCglvcmlnaW5VSUQYAyABKAUS",
            "DgoGcmVtYWluGAQgASgFIjwKE0NTRmFsbEludG9CbGFja0hvbGUSEgoKbW9u",
            "c3RlclVJRBgBIAEoBRIRCglzb3VyY2VVSUQYAiABKAUiSwoTU0NGYWxsSW50",
            "b0JsYWNrSG9sZRINCgVjaGFpchgBIAEoBRISCgptb25zdGVyVUlEGAIgASgF",
            "EhEKCXNvdXJjZVVJRBgDIAEoBSJDChJDU1N5bmNCbGFja0hvbGVQb3MSEQoJ",
            "c291cmNlVUlEGAEgASgFEhoKA3BvcxgCIAEoCzINLlBsYW5lV2FyLlBvcyJS",
            "ChJTQ1N5bmNCbGFja0hvbGVQb3MSDQoFY2hhaXIYASABKAUSEQoJc291cmNl",
            "VUlEGAIgASgFEhoKA3BvcxgDIAEoCzINLlBsYW5lV2FyLlBvcyIyCg1DU0lu",
            "dGVyYWN0aW9uEhMKC3RhcmdldENoYWlyGAEgASgFEgwKBHR5cGUYAiABKAUi",
            "awoNU0NJbnRlcmFjdGlvbhITCgtzb3VyY2VDaGFpchgBIAEoBRITCgt0YXJn",
            "ZXRDaGFpchgCIAEoBRIMCgR0eXBlGAMgASgFEhAKCGNvb2xkb3duGAQgASgF",
            "EhAKCGN1ck1vbmV5GAUgASgDIm0KDUp1bXBIaWdoQXJlbmESDgoGaXNPcGVu",
            "GAEgASgIEgsKA3ZpcBgCIAEoBRIMCgRjb2luGAMgASgFEhAKCGdhbWVUaW1l",
            "GAQgASgFEgwKBHRpcHMYBSABKAkSEQoJbW9uc3RlcklkGAYgAygFIi4KDlBv",
            "b2xBcmVuYUxpbWl0Eg0KBWxldmVsGAEgASgFEg0KBWFyZW5hGAIgASgFInMK",
            "DlNDQWN0aXZpdHlJbmZvEiUKBGp1bXAYASABKAsyFy5QbGFuZVdhci5KdW1w",
            "SGlnaEFyZW5hEg0KBWxpbWl0GAIgASgFEisKCXBvb2xMaW1pdBgDIAMoCzIY",
            "LlBsYW5lV2FyLlBvb2xBcmVuYUxpbWl0IhEKD0NTR2V0VGFza1Jld2FyZCJC",
            "Cg9TQ0dldFRhc2tSZXdhcmQSEAoIZ3VuUmF0aW8YASABKAUSDQoFYXdhcmQY",
            "AiABKAUSDgoGdGlja2V0GAMgASgFIg8KDUNTR2V0VGFza0luZm8imwEKDVND",
            "R2V0VGFza0luZm8SEAoIZ3VuUmF0aW8YASABKAUSDgoGY3VyTnVtGAIgASgF",
            "EhAKCHRvdGFsTnVtGAMgASgFEhAKCHZpcExldmVsGAQgASgFEhAKCGlzVW5s",
            "b2NrGAUgASgFEg0KBWF3YXJkGAYgASgFEhMKC2lzVmlwVW5sb2NrGAcgASgI",
            "Eg4KBnRpY2tldBgIIAEoBSJpChJTQ05vdGljZUluZm9DaGFuZ2USFgoOaXND",
            "b21wbGV0ZVRhc2sYASABKAgSKgoLbWlzc2lsZUxpc3QYAiADKAsyFS5QbGFu",
            "ZVdhci5NaXNzaWxlSW5mbxIPCgdjYWxsTnVtGAMgASgFIjUKCFByb3NJbmZv",
            "EgoKAmlkGAEgASgFEg4KBmNoYW5nZRgCIAEoBRINCgV2YWx1ZRgDIAEoBSJN",
            "ChZTQ05vdGljZUhhbGxQcm9zQ2hhbmdlEg0KBWNoYWlyGAEgASgFEiQKCHBy",
            "b3NMaXN0GAIgAygLMhIuUGxhbmVXYXIuUHJvc0luZm8iKAoNVGltaW5nTW9u",
            "c3RlchILCgNzZWMYASABKAUSCgoCaWQYAiABKAUiRgoVU0NOb3RpY2VUaW1p",
            "bmdNb25zdGVyEi0KDG1vbnN0ZXJfbGlzdBgBIAMoCzIXLlBsYW5lV2FyLlRp",
            "bWluZ01vbnN0ZXIiIQoPQ1NQaWdneUJhbmtJbmZvEg4KBmlzT3BlbhgBIAEo",
            "CCJYCg9TQ1BpZ2d5QmFua0luZm8SDQoFY2hhaXIYASABKAUSDgoGaXNPcGVu",
            "GAIgASgIEiYKCXBpZ2d5SW5mbxgDIAEoCzITLlBsYW5lV2FyLlBpZ2d5SW5m",
            "byIpCgtQaWdneVJld2FyZBIKCgJpZBgBIAEoBRIOCgZyZXdhcmQYAiABKAUi",
            "EQoPQ1NPcGVuUGlnZ3lCYW5rIl0KD1NDT3BlblBpZ2d5QmFuaxINCgVjaGFp",
            "chgBIAEoBRIpCgpyZXdhcmRMaXN0GAIgAygLMhUuUGxhbmVXYXIuUGlnZ3lS",
            "ZXdhcmQSEAoIY3VyTW9uZXkYAyABKAUiFwoVQ1NQaWdneUJhbmtPcGVuRmlu",
            "aXNoIiYKFVNDUGlnZ3lCYW5rT3BlbkZpbmlzaBINCgVjaGFpchgBIAEoBSJB",
            "ChdTQ1BpZ2d5QmFua0NoYW5nZU5vdGlmeRImCglwaWdneUluZm8YASABKAsy",
            "Ey5QbGFuZVdhci5QaWdneUluZm8iKQoXQ1NTZXRQZXJzb25hbFBvb2xFbmFi",
            "bGUSDgoGZW5hYmxlGAEgASgIIikKF1NDU2V0UGVyc29uYWxQb29sRW5hYmxl",
            "Eg4KBmVuYWJsZRgBIAEoCCIkChJDU1BlcnNvbmFsUG9vbEluZm8SDgoGaXNP",
            "cGVuGAEgASgIIlsKElBlcnNvbmFsUG9vbFJld2FyZBIMCgR0eXBlGAEgASgF",
            "EgoKAmlkGAIgASgFEgsKA251bRgDIAEoBRIQCghjbGllbnRJRBgEIAEoBRIM",
            "CgRuYW1lGAUgASgJIn0KFVBlcnNvbmFsUG9vbExldmVsSW5mbxINCgVsZXZl",
            "bBgBIAEoBRITCgt0YXJnZXRWYWx1ZRgCIAEoBRIwCgpyZXdhcmRMaXN0GAMg",
            "AygLMhwuUGxhbmVXYXIuUGVyc29uYWxQb29sUmV3YXJkEg4KBnJld2FyZBgE",
            "IAEoCCI0ChVQZXJzb25hbFBvb2xMdWNreUluZm8SDQoFdG90YWwYASABKAUS",
            "DAoEY29zdBgCIAEoBSLiAQoSU0NQZXJzb25hbFBvb2xJbmZvEg0KBWNoYWly",
            "GAEgASgFEg4KBmlzT3BlbhgCIAEoCBIOCgZlbmFibGUYAyABKAgSEQoJcG9v",
            "bFZhbHVlGAQgASgFEhAKCG1heFZhbHVlGAUgASgFEhAKCGN1ckxldmVsGAYg",
            "ASgFEjIKCWxldmVsTGlzdBgHIAMoCzIfLlBsYW5lV2FyLlBlcnNvbmFsUG9v",
            "bExldmVsSW5mbxIyCglsdWNreUluZm8YCCABKAsyHy5QbGFuZVdhci5QZXJz",
            "b25hbFBvb2xMdWNreUluZm8iFAoSQ1NEcmF3UGVyc29uYWxQb29sIrkBChJT",
            "Q0RyYXdQZXJzb25hbFBvb2wSDQoFY2hhaXIYASABKAUSLAoGcmV3YXJkGAIg",
            "ASgLMhwuUGxhbmVXYXIuUGVyc29uYWxQb29sUmV3YXJkEjAKCm1pc3NSZXdh",
            "cmQYAyADKAsyHC5QbGFuZVdhci5QZXJzb25hbFBvb2xSZXdhcmQSEAoIY3Vy",
            "TW9uZXkYBCABKAMSEwoLdXBncmFkZUNvc3QYBSABKAUSDQoFaW5kZXgYBiAB",
            "KAUiKAoTQ1NVcGdyYWRlUG9vbFJld2FyZBIRCglpc1VwZ3JhZGUYASABKAgi",
            "wgEKE1NDVXBncmFkZVBvb2xSZXdhcmQSDQoFY2hhaXIYASABKAUSDgoGcmVz",
            "dWx0GAIgASgFEhAKCGN1ck1vbmV5GAMgASgDEjAKCmJhc2VSZXdhcmQYBCAB",
            "KAsyHC5QbGFuZVdhci5QZXJzb25hbFBvb2xSZXdhcmQSMQoLZXh0cmFSZXdh",
            "cmQYBSABKAsyHC5QbGFuZVdhci5QZXJzb25hbFBvb2xSZXdhcmQSFQoNYWRk",
            "THVja3lWYWx1ZRgGIAEoBSIWChRDU0dldFBvb2xMdWNreVJld2FyZCJzChRT",
            "Q0dldFBvb2xMdWNreVJld2FyZBINCgVjaGFpchgBIAEoBRIQCghjdXJNb25l",
            "eRgCIAEoAxIMCgRjb3N0GAMgASgFEiwKCnJld2FyZExpc3QYBCADKAsyGC5Q",
            "bGFuZVdhci5Db21tb25Qcm9wSW5mbyJ3ChpTQ1BlcnNvbmFsUG9vbENoYW5n",
            "ZU5vdGlmeRIOCgZlbmFibGUYASABKAgSEAoIY3VyVmFsdWUYAiABKAUSEAoI",
            "Y3VyTGV2ZWwYAyABKAUSEAoIbWF4VmFsdWUYBCABKAUSEwoLdGFyZ2V0VmFs",
            "dWUYBSABKAUiGgoMQ1NVc2VNaXNzaWxlEgoKAmlkGAEgASgFIl4KDFNDVXNl",
            "TWlzc2lsZRINCgVjaGFpchgBIAEoBRIKCgJpZBgCIAEoBRIOCgZyZXdhcmQY",
            "AyABKAUSEQoJcmVtYWluTnVtGAQgASgFEhAKCGN1ck1vbmV5GAUgASgDIg8K",
            "DUNTTW9uc3RlckNhbGwiOwoNU0NNb25zdGVyQ2FsbBINCgVjaGFpchgBIAEo",
            "BRINCgVjb3VudBgCIAEoBRIMCgRjb2RlGAMgASgFIh0KDUNTQ2xpY2tTdGF0",
            "aWMSDAoEdHlwZRgBIAEoBSIPCg1TQ0NsaWNrU3RhdGljIkcKCFJhbmtJbmZv",
            "EhAKCHBsYXllcklkGAEgASgFEg0KBXBvaW50GAIgASgFEgwKBG5pY2sYAyAB",
            "KAkSDAoEaWNvbhgEIAEoCSJFCgpNeVJhbmtJbmZvEgwKBHJhbmsYASABKAUS",
            "DQoFcG9pbnQYAiABKAUSDAoEbmljaxgDIAEoCRIMCgRpY29uGAQgASgJIhoK",
            "CkNTUmFua0xpc3QSDAoEdHlwZRgBIAEoBSKHAQoKU0NSYW5rTGlzdBIMCgR0",
            "eXBlGAEgASgFEiAKBHJhbmsYAiABKAsyEi5QbGFuZVdhci5SYW5rSW5mbxIk",
            "CgZteVJhbmsYAyABKAsyFC5QbGFuZVdhci5NeVJhbmtJbmZvEiMKB2xhc3RU",
            "b3AYBCABKAsyEi5QbGFuZVdhci5SYW5rSW5mbyJGCglUaXRsZUluZm8SCgoC",
            "aWQYASABKAUSDgoGc3RhdHVzGAIgASgFEgwKBG5hbWUYAyABKAkSDwoHZW5k",
            "VGltZRgEIAEoBSJOCgtTQ1RpdGxlTGlzdBImCgl0aXRsZUxpc3QYASADKAsy",
            "Ey5QbGFuZVdhci5UaXRsZUluZm8SFwoPc2VsZWN0ZWRUaXRsZUlkGAIgASgF",
            "IhsKDUNTU2VsZWN0VGl0bGUSCgoCaWQYASABKAUiKgoNU0NTZWxlY3RUaXRs",
            "ZRIKCgJpZBgBIAEoBRINCgVjaGFpchgCIAEoBSIhChNTQ1RpdGxlQWN0aXZl",
            "Tm90aWZ5EgoKAmlkGAEgASgFIj4KFlNDUm9vbUluZm9DaGFuZ2VOb3RpZnkS",
            "JAoIcm9vbUluZm8YASABKAsyEi5QbGFuZVdhci5Sb29tSW5mbyIOCgxDU01h",
            "dGNoQnJpZWYitAEKDFNDTWF0Y2hCcmllZhIOCgZzdGF0dXMYASABKAUSEQoJ",
            "bWF0Y2hUeXBlGAIgASgFEhEKCW1hdGNoTmFtZRgDIAEoCRIRCgljb3VudERv",
            "d24YBCABKAUSEAoIdG90YWxOdW0YBSABKAUSEQoJcmV3YXJkTnVtGAYgASgF",
            "Eg4KBm15UmFuaxgHIAEoBRIPCgdteVBvaW50GAggASgFEhUKDW5leHRSYW5r",
            "UG9pbnQYCSABKAUiDwoNQ1NNYXRjaERldGFpbCJYCgxNYXRjaFN1YkluZm8S",
            "DwoHaW5NYXRjaBgBIAEoCBIUCgxzdWJNYXRjaE5hbWUYAiABKAkSDwoHamFj",
            "a3BvdBgDIAEoBRIQCgh0b3RhbE51bRgEIAEoBSIqCg9NYXRjaFJld2FyZEl0",
            "ZW0SCgoCaWQYASABKAUSCwoDbnVtGAIgASgFIrEBCg1NYXRjaFJhbmtJbmZv",
            "EhAKCHBsYXllcklkGAEgASgFEg0KBXBvaW50GAIgASgFEgwKBG5pY2sYAyAB",
            "KAkSDAoEaWNvbhgEIAEoCRIMCgRyYW5rGAUgASgFEhIKCnBvaW50Qm9udXMY",
            "BiABKAUSEgoKbW9uZXlCb251cxgHIAEoBRItCgpyZXdhcmRMaXN0GAggASgL",
            "MhkuUGxhbmVXYXIuTWF0Y2hSZXdhcmRJdGVtIjsKCU1hdGNoVGFzaxIOCgZz",
            "dGF0dXMYASABKAUSDgoGdGFyZ2V0GAIgASgFEg4KBnJld2FyZBgDIAEoBSLc",
            "AQoNU0NNYXRjaERldGFpbBIrCgtzdWJJbmZvTGlzdBgBIAMoCzIWLlBsYW5l",
            "V2FyLk1hdGNoU3ViSW5mbxIpCghyYW5rTGlzdBgCIAMoCzIXLlBsYW5lV2Fy",
            "Lk1hdGNoUmFua0luZm8SJwoGbXlSYW5rGAMgASgLMhcuUGxhbmVXYXIuTWF0",
            "Y2hSYW5rSW5mbxIPCgd0aXBMaXN0GAQgAygFEhIKCmx1Y2t5U3RhZ2UYBSAD",
            "KAUSJQoIdGFza0xpc3QYBiADKAsyEy5QbGFuZVdhci5NYXRjaFRhc2siDwoN",
            "Q1NNYXRjaFJld2FyZCJVCgpSYW5rUmV3YXJkEgwKBGZyb20YASABKAUSCgoC",
            "dG8YAiABKAUSLQoKcmV3YXJkTGlzdBgDIAEoCzIZLlBsYW5lV2FyLk1hdGNo",
            "UmV3YXJkSXRlbSJSCg1TQ01hdGNoUmV3YXJkEiwKDnJhbmtSZXdhcmRMaXN0",
            "GAEgAygLMhQuUGxhbmVXYXIuUmFua1Jld2FyZBITCgtsdWNreVJld2FyZBgC",
            "IAMoBSJuCg1NeU1hdGNoUmV3YXJkEgwKBHJhbmsYASABKAUSKwoIbXlSZXdh",
            "cmQYAiADKAsyGS5QbGFuZVdhci5NYXRjaFJld2FyZEl0ZW0SDQoFYm9udXMY",
            "AyABKAUSEwoLbHVja3lSZXdhcmQYBCABKAUibQoTU0NNYXRjaFJld2FyZE5v",
            "dGlmeRIrCgpyZXdhcmRMaXN0GAEgASgLMhcuUGxhbmVXYXIuTWF0Y2hSYW5r",
            "SW5mbxIpCghteVJld2FyZBgCIAEoCzIXLlBsYW5lV2FyLk15TWF0Y2hSZXdh",
            "cmQiDAoKQ1NHaWZ0TGlzdCJkCghHaWZ0SW5mbxIKCgJpZBgBIAEoBRISCgpw",
            "b2ludEJvbnVzGAIgASgFEhIKCm1vbmV5Qm9udXMYAyABKAUSDgoGY2FuQnV5",
            "GAQgASgIEhQKDGJ1eUNvdW50RG93bhgFIAEoBSIyCgpTQ0dpZnRMaXN0EiQK",
            "CGdpZnRMaXN0GAEgAygLMhIuUGxhbmVXYXIuR2lmdEluZm8iMQoSU0NHaWZ0",
            "RXhwaXJlTm90aWZ5Eg4KBmdpZnRJRBgBIAEoBRILCgNtc2cYAiABKAkiJQoU",
            "Q1NHZXRNYXRjaFRhc2tSZXdhcmQSDQoFaW5kZXgYASABKAUiNQoUU0NHZXRN",
            "YXRjaFRhc2tSZXdhcmQSDQoFaW5kZXgYASABKAUSDgoGcmV3YXJkGAIgASgF",
            "IiYKEldlYXBvblVzZUNvbmRpdGlvbhIQCgh2aXBMZXZlbBgBIAEoBSJfCgxX",
            "ZWFwb25Db25maWcSEAoId2VhcG9uSUQYASABKAUSDAoEbmFtZRgCIAEoCRIv",
            "Cgljb25kaXRpb24YAyABKAsyHC5QbGFuZVdhci5XZWFwb25Vc2VDb25kaXRp",
            "b24iJwoRQ1NXZWFwb25QaWVjZUluZm8SEgoKaXNCcm93c2luZxgBIAEoCCJS",
            "ChRQaWVjZXNTdGFja0xpbWl0SW5mbxIUCgxmcm9tVmlwTGV2ZWwYASABKAUS",
            "EgoKdG9WaXBMZXZlbBgCIAEoBRIQCghzdGFja051bRgDIAEoBSLCAQoRU0NX",
            "ZWFwb25QaWVjZUluZm8SEgoKaXNCcm93c2luZxgBIAEoCBINCgVjaGFpchgC",
            "IAEoBRImCglwaWVjZUluZm8YAyABKAsyEy5QbGFuZVdhci5QaWVjZUluZm8S",
            "KgoKY29uZmlnTGlzdBgEIAMoCzIWLlBsYW5lV2FyLldlYXBvbkNvbmZpZxI2",
            "Cg5zdGFja0xpbWl0TGlzdBgFIAMoCzIeLlBsYW5lV2FyLlBpZWNlc1N0YWNr",
            "TGltaXRJbmZvIg0KC0NTQnV5V2VhcG9uIrEBCgtTQ0J1eVdlYXBvbhINCgVj",
            "aGFpchgBIAEoBRIQCgh3ZWFwb25JRBgCIAEoBRIoCgp3ZWFwb25JbmZvGAMg",
            "ASgLMhQuUGxhbmVXYXIuV2VhcG9uSW5mbxImCglwaWVjZUluZm8YBCABKAsy",
            "Ey5QbGFuZVdhci5QaWVjZUluZm8SLwoJY29uZGl0aW9uGAUgASgLMhwuUGxh",
            "bmVXYXIuV2VhcG9uVXNlQ29uZGl0aW9uInwKCkVhcm5SZWNvcmQSEAoIcGxh",
            "eWVySUQYASABKAUSDAoEbmljaxgCIAEoCRIMCgRpY29uGAMgASgJEhAKCHZp",
            "cExldmVsGAQgASgFEhIKCndlYXBvbk5hbWUYBSABKAkSDAoEdGltZRgGIAEo",
            "BRIMCgRlYXJuGAcgASgFIiIKEkNTV2VhcG9uRWFyblJlY29yZBIMCgRwYWdl",
            "GAEgASgFIkwKElNDV2VhcG9uRWFyblJlY29yZBIoCgpyZWNvcmRMaXN0GAEg",
            "AygLMhQuUGxhbmVXYXIuRWFyblJlY29yZBIMCgRwYWdlGAIgASgFIicKEkNT",
            "U3RhdGVGb3JjZVNldHRsZRIRCglzb3VyY2VVSUQYASABKAUiWQoSU0NTdGF0",
            "ZUZvcmNlU2V0dGxlEg0KBWNoYWlyGAEgASgFEhEKCXNvdXJjZVVJRBgCIAEo",
            "BRIRCglvcmlnaW5VSUQYAyABKAUSDgoGcmVtYWluGAQgASgFIlkKEVNDQWRk",
            "TWlzc2VkQnVsbGV0Eg0KBWNoYWlyGAEgASgFEhIKCmJ1bGxldFR5cGUYAiAB",
            "KAUSEQoJc291cmNlVUlEGAMgASgFEg4KBmFkZE51bRgEIAEoBSJuChJDU1Vw",
            "ZGF0ZUJ1bGxldERhdGESDQoFYW5nbGUYASABKAISEgoKYnVsbGV0VHlwZRgC",
            "IAEoBRIRCglzb3VyY2VVSUQYAyABKAUSDgoGY29uZklEGAQgASgFEhIKCmlz",
            "U2hvb3RpbmcYBSABKAgifQoSU0NVcGRhdGVCdWxsZXREYXRhEg0KBWNoYWly",
            "GAEgASgFEg0KBWFuZ2xlGAIgASgCEhIKCmJ1bGxldFR5cGUYAyABKAUSEQoJ",
            "c291cmNlVUlEGAQgASgFEg4KBmNvbmZJRBgFIAEoBRISCgppc1Nob290aW5n",
            "GAYgASgIIhMKEUNTVXNlTWlzc2lsZUJhdGNoIncKEVNDVXNlTWlzc2lsZUJh",
            "dGNoEg0KBWNoYWlyGAEgASgFEhMKC3RvdGFsUmV3YXJkGAIgASgFEhAKCGN1",
            "ck1vbmV5GAMgASgDEiwKDXJlbWFpbk1pc3NpbGUYBCADKAsyFS5QbGFuZVdh",
            "ci5NaXNzaWxlSW5mbyITChFDU1N5bmNQcm9wc1RvSGFsbCITChFTQ1N5bmNQ",
            "cm9wc1RvSGFsbCIPCg1DU0NoYW5nZVRhYmxlIg8KDVNDQ2hhbmdlVGFibGUi",
            "GwoNQ1NVc2VSb3VsZXR0ZRIKCgJpRBgBIAEoBSKSAQoNU0NVc2VSb3VsZXR0",
            "ZRINCgVjaGFpchgBIAEoBRIKCgJpZBgCIAEoBRIPCgdjb3N0TnVtGAMgASgF",
            "Eg0KBXJhdGlvGAQgASgFEiQKCHJvdWxldHRlGAUgASgLMhIuUGxhbmVXYXIu",
            "Um91bGV0dGUSDgoGcmV3YXJkGAYgASgFEhAKCGN1ck1vbmV5GAcgASgDIhQK",
            "EkNTUmVkRW52ZWxvcGVQb2ludCJOCgtSZWRPcGVuSW5mbxInCgZzdGF0dXMY",
            "ASABKA4yFy5QbGFuZVdhci5SZWRPcGVuU3RhdHVzEhYKDnVuTG9ja1ZpcExl",
            "dmVsGAIgASgFIncKElNDUmVkRW52ZWxvcGVQb2ludBIQCghjdXJQb2ludBgB",
            "IAEoBRIQCghtYXhQb2ludBgCIAEoBRIRCgljb3N0UG9pbnQYAyABKAUSKgoL",
            "cmVkT3Blbkxpc3QYBCADKAsyFS5QbGFuZVdhci5SZWRPcGVuSW5mbyIjChFD",
            "U1JlZEVudmVsb3BlSW5mbxIOCgZpc09wZW4YASABKAgiFwoHUmVkSW5mbxIM",
            "CgRjb3N0GAEgASgFIjcKEVNDUmVkRW52ZWxvcGVJbmZvEiIKB3JlZExpc3QY",
            "ASADKAsyES5QbGFuZVdhci5SZWRJbmZvIiIKEUNTT3BlblJlZEVudmVsb3Bl",
            "Eg0KBWluZGV4GAEgASgFImwKDlJlZFVwZ3JhZGVJbmZvEhMKC2xlYXN0UmV3",
            "YXJkGAEgASgFEhQKDG1heUFkZFJld2FyZBgCIAEoBRIVCg1tYXhVcGdyYWRl",
            "TnVtGAMgASgFEhgKEHJlbWFpblVwZ3JhZGVOdW0YBCABKAUibQoRU0NPcGVu",
            "UmVkRW52ZWxvcGUSEQoJcmF3UmV3YXJkGAEgASgFEhYKDmdyYW50VGhyZXNo",
            "b2xkGAIgASgFEi0KC3VwZ3JhZGVJbmZvGAMgASgLMhguUGxhbmVXYXIuUmVk",
            "VXBncmFkZUluZm8iKQoUQ1NVcGdyYWRlUmVkRW52ZWxvcGUSEQoJaXNVcGdy",
            "YWRlGAEgASgIIq8BChRTQ1VwZ3JhZGVSZWRFbnZlbG9wZRIqCgZyZXN1bHQY",
            "ASABKA4yGi5QbGFuZVdhci5VcGdyYWRlUmVkUmVzdWx0EhEKCWN1clJld2Fy",
            "ZBgCIAEoBRIWCg5ncmFudFRocmVzaG9sZBgDIAEoBRIRCglhZGRSZXdhcmQY",
            "BCABKAUSLQoLdXBncmFkZUluZm8YBSABKAsyGC5QbGFuZVdhci5SZWRVcGdy",
            "YWRlSW5mbyIpChdDU0NvbW1vblJlZEVudmVsb3BlSW5mbxIOCgZpc09wZW4Y",
            "ASABKAgijAEKDUNvbW1vblJlZEluZm8SCgoCaWQYASABKAkSDgoGcmV3YXJk",
            "GAIgASgFEg4KBmV4cGlyZRgDIAEoBRIYChBzb3VyY2VQbGF5ZXJOaWNrGAQg",
            "ASgJEhIKCnRyeU9wZW5OdW0YBSABKAUSDAoEY29zdBgGIAEoBRITCgtpc1Nl",
            "bGZHcmFudBgHIAEoCCKaAQoXU0NDb21tb25SZWRFbnZlbG9wZUluZm8SKAoH",
            "cmVkTGlzdBgBIAMoCzIXLlBsYW5lV2FyLkNvbW1vblJlZEluZm8SFgoOZ3Jh",
            "bnRUaHJlc2hvbGQYAiABKAUSEgoKbWF4U2hvd051bRgDIAEoBRISCgptYXhP",
            "cGVuTnVtGAQgASgFEhUKDXJlbWFpbk9wZW5OdW0YBSABKAUiJQoXQ1NPcGVu",
            "Q29tbW9uUmVkRW52ZWxvcGUSCgoCaWQYASABKAkiXAoXU0NPcGVuQ29tbW9u",
            "UmVkRW52ZWxvcGUSCgoCaWQYASABKAkSDgoGcmVzdWx0GAIgASgIEhUKDXJl",
            "bWFpbk9wZW5OdW0YAyABKAUSDgoGcmV3YXJkGAQgASgFIlMKEVJlZFJhbmtQ",
            "bGF5ZXJJbmZvEhAKCHBsYXllcklEGAEgASgFEgwKBG5pY2sYAiABKAkSDAoE",
            "aWNvbhgDIAEoCRIQCgh2aXBMZXZlbBgEIAEoBSI4ChxDU0dyYW50Q29tbW9u",
            "UmVkRW52ZWxvcGVSYW5rEgwKBGZyb20YASABKAUSCgoCdG8YAiABKAUicgoN",
            "R3JhbnRSYW5rSXRlbRIMCgRyYW5rGAEgASgFEi8KCnBsYXllckluZm8YAiAB",
            "KAsyGy5QbGFuZVdhci5SZWRSYW5rUGxheWVySW5mbxISCgp1cGdyYWRlTnVt",
            "GAMgASgFEg4KBnJld2FyZBgEIAEoBSJ0ChxTQ0dyYW50Q29tbW9uUmVkRW52",
            "ZWxvcGVSYW5rEikKCHJhbmtMaXN0GAEgAygLMhcuUGxhbmVXYXIuR3JhbnRS",
            "YW5rSXRlbRIpCghzZWxmUmFuaxgCIAEoCzIXLlBsYW5lV2FyLkdyYW50UmFu",
            "a0l0ZW0iNwobQ1NPcGVuQ29tbW9uUmVkRW52ZWxvcGVSYW5rEgwKBGZyb20Y",
            "ASABKAUSCgoCdG8YAiABKAUicwoMT3BlblJhbmtJdGVtEgwKBHJhbmsYASAB",
            "KAUSLwoKcGxheWVySW5mbxgCIAEoCzIbLlBsYW5lV2FyLlJlZFJhbmtQbGF5",
            "ZXJJbmZvEhMKC3RvdGFsUmV3YXJkGAMgASgFEg8KB29wZW5OdW0YBCABKAUi",
            "cQobU0NPcGVuQ29tbW9uUmVkRW52ZWxvcGVSYW5rEigKCHJhbmtMaXN0GAEg",
            "AygLMhYuUGxhbmVXYXIuT3BlblJhbmtJdGVtEigKCHNlbGZSYW5rGAIgASgL",
            "MhYuUGxhbmVXYXIuT3BlblJhbmtJdGVtIiAKHkNTR3JhbnRDb21tb25SZWRF",
            "bnZlbG9wZVJlY29yZCKGAQoLR3JhbnRSZWNvcmQSEQoJZ3JhbnRUaW1lGAEg",
            "ASgFEhIKCmV4cGlyZVRpbWUYAiABKAUSDgoGcmV3YXJkGAMgASgFEigKBnN0",
            "YXR1cxgEIAEoDjIYLlBsYW5lV2FyLkdyYW50UmVkU3RhdHVzEhYKDm9wZW5Q",
            "bGF5ZXJOaWNrGAUgASgJIksKHlNDR3JhbnRDb21tb25SZWRFbnZlbG9wZVJl",
            "Y29yZBIpCgpyZWNvcmRMaXN0GAEgAygLMhUuUGxhbmVXYXIuR3JhbnRSZWNv",
            "cmQiHwodQ1NPcGVuQ29tbW9uUmVkRW52ZWxvcGVSZWNvcmQiSAoKT3BlblJl",
            "Y29yZBIYChBzb3VyY2VQbGF5ZXJOaWNrGAEgASgJEg4KBnJld2FyZBgCIAEo",
            "BRIQCghvcGVuVGltZRgDIAEoBSJgCh1TQ09wZW5Db21tb25SZWRFbnZlbG9w",
            "ZVJlY29yZBIoCgpyZWNvcmRMaXN0GAEgAygLMhQuUGxhbmVXYXIuT3BlblJl",
            "Y29yZBIVCg1zaG93UmVjb3JkTnVtGAIgASgFIqQBChtTQ1JlZEVudmVsb3Bl",
            "T3BTdGF0dXNOb3RpZnkSDQoFY2hhaXIYASABKAUSJQoGc3RhdHVzGAIgASgO",
            "MhUuUGxhbmVXYXIuUmVkT3BTdGF0dXMSEAoIY3VyTW9uZXkYAyABKAMSLQoL",
            "dXBncmFkZUluZm8YBCABKAsyGC5QbGFuZVdhci5SZWRVcGdyYWRlSW5mbxIO",
            "CgZyZXdhcmQYBSABKAUidQoRQ1NTeW5jV2VhcG9uU3RhdGUSEAoId2VhcG9u",
            "SWQYASABKAUSDwoHY2hhaXJJZBgCIAEoBRIRCgl3ZWFwb25VSUQYAyABKAUS",
            "KgoLd2VhcG9uU3RhdGUYBCABKAsyFS5QbGFuZVdhci5XZWFwb25TdGF0ZSIT",
            "ChFTQ1N5bmNXZWFwb25TdGF0ZSJACghDU1ByZUhpdBINCgVyYXRpbxgBIAEo",
            "BRISCgpidWxsZXRUeXBlGAIgASgFEhEKCXNvdXJjZVVJRBgDIAEoBSJBCghT",
            "Q1ByZUhpdBIRCgl3ZWFwb25VSUQYASABKAUSIgoHaGl0TW9kZRgCIAEoCzIR",
            "LlBsYW5lV2FyLkhpdE1vZGUivAIKCUFuaW1hdGlvbhITCgthbmltYXRpb25J",
            "RBgBIAEoBRIUCgxhbmltYXRpb25Nc2cYAiABKAkSDQoFY2hhaXIYAyABKAUS",
            "EgoKbW9uc3RlclVJRBgEIAEoBRISCgpidWxsZXRUeXBlGAUgASgFEgwKBGVh",
            "cm4YBiABKAUSEQoJb3JpZ2luVUlEGAcgASgFEhQKDG11bHRpcGxlTGlzdBgI",
            "IAMoBRINCgVyYXRpbxgJIAEoBRIvCgtmb3J0dW5lSnNvbhgKIAEoCzIaLlBs",
            "YW5lV2FyLkZvcnR1bmVXaGVlbEpzb24SMAoOZ29sZGVuVG9hZEpzb24YCyAB",
            "KAsyGC5QbGFuZVdhci5Hb2xkZW5Ub2FkSnNvbhIkCghkaWNlSnNvbhgMIAEo",
            "CzISLlBsYW5lV2FyLkRpY2VKc29uInoKCERpY2VKc29uEgwKBHN0ZXAYASAB",
            "KAUSHAoEZGljZRgCIAMoCzIOLlBsYW5lV2FyLkRpY2USHwoHbXVsTGlzdBgD",
            "IAMoCzIOLlBsYW5lV2FyLkRpY2USIQoKbXVsUG9zTGlzdBgEIAMoCzINLlBs",
            "YW5lV2FyLlBvcyJMChBGb3J0dW5lV2hlZWxKc29uEioKBnJlc3VsdBgBIAMo",
            "CzIaLlBsYW5lV2FyLkZvcnR1bmVXaGVlbEluZm8SDAoEc2l0ZRgCIAEoBSJp",
            "Cg5Hb2xkZW5Ub2FkSnNvbhImCglvcmRlckxpc3QYASADKAsyEy5QbGFuZVdh",
            "ci5PcmRlckRhdGESEgoKdG90YWxSYXRpbxgCIAEoBRINCgVyYXRpbxgDIAEo",
            "BRIMCgRzdGVwGAQgASgFIigKCU9yZGVyRGF0YRIMCgR0eXBlGAEgASgFEg0K",
            "BXJhdGlvGAIgASgFIk0KD0NTU3luY0FuaW1hdGlvbhImCglhbmltYXRpb24Y",
            "ASABKAsyEy5QbGFuZVdhci5BbmltYXRpb24SEgoKaXNDb21wbGV0ZRgCIAEo",
            "CCJNCg9TQ1N5bmNBbmltYXRpb24SJgoJYW5pbWF0aW9uGAEgASgLMhMuUGxh",
            "bmVXYXIuQW5pbWF0aW9uEhIKCmlzQ29tcGxldGUYAiABKAgiOgoPU0NHZXRB",
            "bmltYXRpb25zEicKCmFuaW1hdGlvbnMYASADKAsyEy5QbGFuZVdhci5Bbmlt",
            "YXRpb24iNgoPR3JhZGVSYW5rRGV0YWlsEhEKCXJhbmtJbmRleBgBIAEoBRIQ",
            "CghyYW5rTmFtZRgCIAEoCSJaCg9HcmFkZVJhbmtDb25maWcSMgoPZ3JhZGVS",
            "YW5rRGV0YWlsGAEgAygLMhkuUGxhbmVXYXIuR3JhZGVSYW5rRGV0YWlsEhMK",
            "C3JhbmtMaXN0TGVuGAIgASgFIlMKDldhcmVHaXZpbmdJbmZvEg4KBnByb3BJ",
            "ZBgBIAEoBRIQCghwcm9wTmFtZRgCIAEoCRINCgVyYXRpbxgDIAEoAhIQCghu",
            "b1JlcGVhdBgEIAEoCCK8AQoIV2FyZUluZm8SDgoGd2FyZUlkGAEgASgJEjQK",
            "EndhcmVHaXZpbmdJbmZvTGlzdBgCIAMoCzIYLlBsYW5lV2FyLldhcmVHaXZp",
            "bmdJbmZvEhAKCG1pbk1vbmV5GAMgASgFEhAKCG1heE1vbmV5GAQgASgFEg0K",
            "BXByaWNlGAUgASgFEjcKFXdhcmVHaXZpbmdQcm9JbmZvTGlzdBgGIAMoCzIY",
            "LlBsYW5lV2FyLldhcmVHaXZpbmdJbmZvIkUKFEV4dHJhR3JhZGVSZXdhcmRJ",
            "bmZvEg0KBXRpdGxlGAEgASgJEgwKBGRlc2MYAiABKAkSEAoIZXh0cmFFeHAY",
            "AyABKAIi0gEKDlJhbmtXYXJlQ29uZmlnEigKDGNvbW1XYXJlSW5mbxgBIAEo",
            "CzISLlBsYW5lV2FyLldhcmVJbmZvEisKD2FkdmFuY2VXYXJlSW5mbxgCIAEo",
            "CzISLlBsYW5lV2FyLldhcmVJbmZvEjwKFGV4dHJhR3JhZGVSZXdhcmRJbmZv",
            "GAMgASgLMh4uUGxhbmVXYXIuRXh0cmFHcmFkZVJld2FyZEluZm8SFAoMd2Fy",
            "ZURlc2NMaXN0GAQgAygFEhUKDWdyYWRlRGVzY0xpc3QYBSADKAUiLwoKRGlj",
            "ZUNvbmZpZxIRCglyYXRpb0xpc3QYASADKAUSDgoGbWF4TXVsGAIgASgFIg8K",
            "DUNTU3luY0NvbmZpZ3MioQIKDVNDU3luY0NvbmZpZ3MSLgoNZm9ydHVuZUNv",
            "bmZpZxgBIAMoCzIXLlBsYW5lV2FyLkZvcnR1bmVDb25maWcSJgoJYmVlQ29u",
            "ZmlnGAIgASgLMhMuUGxhbmVXYXIuQmVlQ29uZmlnEiwKDHJlcGxheUNvbmZp",
            "ZxgDIAEoCzIWLlBsYW5lV2FyLlJlcGxheUNvbmZpZxIyCg9ncmFkZVJhbmtD",
            "b25maWcYBCABKAsyGS5QbGFuZVdhci5HcmFkZVJhbmtDb25maWcSLAoKd2Fy",
            "ZUNvbmZpZxgFIAEoCzIYLlBsYW5lV2FyLlJhbmtXYXJlQ29uZmlnEigKCmRp",
            "Y2VDb25maWcYBiABKAsyFC5QbGFuZVdhci5EaWNlQ29uZmlnIikKFENTQ29u",
            "ZmlybVdlYXBvbkV4aXN0EhEKCXNvdXJjZVVJRBgBIAEoBSIlChRTQ0NvbmZp",
            "cm1XZWFwb25FeGlzdBINCgVleGlzdBgBIAEoCCIwCgpDU0dldFZpZGVvEg8K",
            "B3ZpZGVvSWQYASABKAkSEQoJdmlkZW9UeXBlGAIgASgFItIBCgpTQ0dldFZp",
            "ZGVvEi4KD2NyZWF0ZWRQYXRoTGlzdBgBIAMoCzIVLlBsYW5lV2FyLk1vbnN0",
            "ZXJQYXRoEhIKCnJld2FyZFR5cGUYAiABKAUSEQoJdGltZXN0YW1wGAMgASgD",
            "Eg4KBnJld2FyZBgEIAEoBRINCgVjaGFpchgFIAEoBRINCgVtb25leRgGIAEo",
            "AxINCgVyYXRpbxgHIAEoBRIPCgdndW5UeXBlGAggASgFEg0KBWFyZW5hGAkg",
            "ASgFEhAKCHdlYXBvbklkGAogASgFIogBCgtWaWRlb0NvbW1vbhIOCgZyZXdh",
            "cmQYASABKAUSEgoKcmV3YXJkVHlwZRgCIAEoBRIRCgl0aW1lc3RhbXAYAyAB",
            "KAMSDwoHdmlkZW9JZBgEIAEoCRIOCgZ1bnJlYWQYBSABKAgSEAoId2VhcG9u",
            "SWQYBiABKAUSDwoHYXJlbmFJZBgHIAEoBSJYCg9HbG9iYWxWaWRlb0luZm8S",
            "EAoIbmljZU5hbWUYASABKAkSDAoEc2VsZhgCIAEoCBIlCgZjb21tb24YAyAB",
            "KAsyFS5QbGFuZVdhci5WaWRlb0NvbW1vbiJFCg1TZWxmVmlkZW9JbmZvEg0K",
            "BXJhdGlvGAEgASgFEiUKBmNvbW1vbhgCIAEoCzIVLlBsYW5lV2FyLlZpZGVv",
            "Q29tbW9uIi0KEUNTU2VsZlZpZGVvUmVjb3JkEgwKBGZyb20YASABKAUSCgoC",
            "dG8YAiABKAUiVAoRU0NTZWxmVmlkZW9SZWNvcmQSKgoJdmlkZW9MaXN0GAEg",
            "AygLMhcuUGxhbmVXYXIuU2VsZlZpZGVvSW5mbxITCgtyZWZyZXNoVGltZRgC",
            "IAEoBSInCgtDU1ZpZGVvUmFuaxIMCgRmcm9tGAEgASgFEgoKAnRvGAIgASgF",
            "IlAKC1NDVmlkZW9SYW5rEiwKCXZpZGVvTGlzdBgBIAMoCzIZLlBsYW5lV2Fy",
            "Lkdsb2JhbFZpZGVvSW5mbxITCgtyZWZyZXNoVGltZRgCIAEoBSLPAQoNUmVj",
            "ZWl2ZVJld2FyZBIOCgZwcm9wSWQYASABKAUSCwoDbnVtGAIgASgFEg8KB2Fk",
            "dmFuY2UYAyABKAgSDgoGbWluTnVtGAQgASgFEg4KBm1heE51bRgFIAEoBRIL",
            "CgNib3gYBiABKAgSEAoIdW5pcXVlSWQYByABKAUSDAoEZGVzYxgIIAEoCRIR",
            "Cgl0aW1lTGltaXQYCSABKAUSDQoFdGl0bGUYCiABKAkSEAoIcHJvcFR5cGUY",
            "CyABKAUSDwoHc3BlY2lhbBgMIAEoBSIWChRDU1JlY2VpdmVHcmFkZVJld2Fy",
            "ZCKTAQoUU0NSZWNlaXZlR3JhZGVSZXdhcmQSMgoRcmVjZWl2ZVJld2FyZExp",
            "c3QYASADKAsyFy5QbGFuZVdhci5SZWNlaXZlUmV3YXJkEjQKE3VuUmVjZWl2",
            "ZVJld2FyZExpc3QYAiADKAsyFy5QbGFuZVdhci5SZWNlaXZlUmV3YXJkEhEK",
            "CXNlYXNvbkVuZBgDIAEoCCJgChFHcmFkZVJld2FyZERldGFpbBIrCgpyZXdh",
            "cmRJbmZvGAEgASgLMhcuUGxhbmVXYXIuUmVjZWl2ZVJld2FyZBINCgVyZWFj",
            "aBgCIAEoCBIPCgdyZWNlaXZlGAMgASgIIp8BCg9HcmFkZVJld2FyZEluZm8S",
            "EAoIcmFua05hbWUYASABKAkSMwoOY29tbVJld2FyZExpc3QYAiADKAsyGy5Q",
            "bGFuZVdhci5HcmFkZVJld2FyZERldGFpbBI2ChFhZHZhbmNlUmV3YXJkTGlz",
            "dBgDIAMoCzIbLlBsYW5lV2FyLkdyYWRlUmV3YXJkRGV0YWlsEg0KBWZpcnN0",
            "GAQgASgIIoUCCg1HcmFkZVJhbmtJbmZvEhMKC2N1cnJlbnRSYW5rGAEgASgF",
            "EgwKBHN0YXIYAiABKAUSEAoIcmFua05hbWUYAyABKAkSEwoLaGlzdG9yeVJh",
            "bmsYBCABKAUSFwoPaGlzdG9yeVJhbmtOYW1lGAUgASgJEg8KB2tpbmdUYWcY",
            "BiABKAUSEgoKY3VycmVudEV4cBgHIAEoAhIPCgduZXh0RXhwGAggASgCEhAK",
            "CGV4dHJhRXhwGAkgASgCEhIKCnBsYXllck5hbWUYCiABKAkSFQoNYXZhaWxh",
            "YmxlR2lmdBgLIAEoBRIOCgZpc0xhc3QYDCABKAgSDgoGaXNTZWxmGA0gASgI",
            "IiUKEkNTR2V0VGFibGVVc2VySW5mbxIPCgdjaGFpcklkGAEgASgFIm4KElND",
            "R2V0VGFibGVVc2VySW5mbxIoCgpwbGF5ZXJJbmZvGAEgASgLMhQuUGxhbmVX",
            "YXIuUGxheWVySW5mbxIuCg1ncmFkZVJhbmtJbmZvGAIgASgLMhcuUGxhbmVX",
            "YXIuR3JhZGVSYW5rSW5mbyI4ChRDU0dldEdyYWRlUmV3YXJkSW5mbxIQCghz",
            "dGFydElkeBgBIAEoBRIOCgZlbmRJZHgYAiABKAUiTgoUU0NHZXRHcmFkZVJl",
            "d2FyZEluZm8SNgoTZ3JhZGVSZXdhcmRJbmZvTGlzdBgBIAMoCzIZLlBsYW5l",
            "V2FyLkdyYWRlUmV3YXJkSW5mbyIUChJDU0dldEdyYWRlUmFua0luZm8iRAoS",
            "U0NHZXRHcmFkZVJhbmtJbmZvEi4KDWdyYWRlUmFua0luZm8YASABKAsyFy5Q",
            "bGFuZVdhci5HcmFkZVJhbmtJbmZvIl8KDVNDUmFua1VwZ3JhZGUSLgoNZ3Jh",
            "ZGVSYW5rSW5mbxgBIAEoCzIXLlBsYW5lV2FyLkdyYWRlUmFua0luZm8SDwoH",
            "YWR2YW5jZRgCIAEoCBINCgVjaGFpchgDIAEoBSIUChJDU1JhbmtTZWFzb25T",
            "dGF0dXMibAoSU0NSYW5rU2Vhc29uU3RhdHVzEg4KBmVuYWJsZRgBIAEoCBIR",
            "CglzdGFydFRpbWUYAiABKAUSDwoHZW5kVGltZRgDIAEoBRISCgpzZWFzb25O",
            "YW1lGAQgASgJEg4KBnNlYXNvbhgFIAEoBSIaCgpTQ1N5bmNUaW1lEgwKBHRp",
            "bWUYASABKAUiJgoUU0NOb3RpY2VQcm9wc092ZXJkdWUSDgoGcHJvcElkGAEg",
            "ASgFIjAKDlB1cmNoYXNlUmVzdWx0Eg4KBndhcmVJZBgBIAEoCRIOCgZzdGF0",
            "dXMYAiABKAgiLAoWQ1NRdWVyeVBhY2thZ2VQdXJjaGFzZRISCgp3YXJlSWRM",
            "aXN0GAEgAygFIksKFlNDUXVlcnlQYWNrYWdlUHVyY2hhc2USMQoPcHVyY2hh",
            "c2VSZXNMaXN0GAEgAygLMhguUGxhbmVXYXIuUHVyY2hhc2VSZXN1bHQiKAoJ",
            "UHJvcHNJbmZvEg4KBnByb3BJZBgBIAEoBRILCgNudW0YAiABKAUiPAoSU0NH",
            "YW1lUHVyY2hhc2VQdXNoEiYKCXByb3BzTGlzdBgBIAMoCzITLlBsYW5lV2Fy",
            "LlByb3BzSW5mbyJWCg5QYWNrYWdlTWFycXVlZRIQCghuaWNrbmFtZRgBIAEo",
            "CRIOCgZ3YXJlSWQYAiABKAkSIgoFcHJvcHMYAyABKAsyEy5QbGFuZVdhci5Q",
            "cm9wc0luZm8iFwoVQ1NRdWVyeVBhY2thZ2VNYXJxdWVlImMKFVNDUXVlcnlQ",
            "YWNrYWdlTWFycXVlZRIUCgxtYXJxdWVlTW9kZWwYASABKAkSNAoScGFja2Fn",
            "ZU1hcnF1ZWVMaXN0GAIgAygLMhguUGxhbmVXYXIuUGFja2FnZU1hcnF1ZWUi",
            "HAoKQ1NTZXRXaW5ncxIOCgZ3aW5nSWQYASABKAUiKwoKU0NTZXRXaW5ncxIN",
            "CgVjaGFpchgBIAEoBRIOCgZ3aW5nSWQYAiABKAUiFgoUQ1NWZXJpZnlTZWFz",
            "b25DaGFuZ2UiwAEKFFNDVmVyaWZ5U2Vhc29uQ2hhbmdlEg4KBmNoYW5nZRgB",
            "IAEoCBI0ChNiZWZvcmVHcmFkZVJhbmtJbmZvGAIgASgLMhcuUGxhbmVXYXIu",
            "R3JhZGVSYW5rSW5mbxI1ChRjdXJyZW50R3JhZGVSYW5rSW5mbxgDIAEoCzIX",
            "LlBsYW5lV2FyLkdyYWRlUmFua0luZm8SFAoMYmVmb3JlU2Vhc29uGAQgASgF",
            "EhUKDWN1cnJlbnRTZWFzb24YBSABKAUiHAoaQ1NFeGlzdFVuUmVjZWl2ZVJh",
            "bmtSZXdhcmQiKwoaU0NFeGlzdFVuUmVjZWl2ZVJhbmtSZXdhcmQSDQoFZXhp",
            "c3QYASABKAgiKAoZQ1NSZWNlaXZlRXh0cmFHcmFkZVJld2FyZBILCgNudW0Y",
            "ASABKAUiXAoZU0NSZWNlaXZlRXh0cmFHcmFkZVJld2FyZBIyChFyZWNlaXZl",
            "UmV3YXJkTGlzdBgBIAMoCzIXLlBsYW5lV2FyLlJlY2VpdmVSZXdhcmQSCwoD",
            "bnVtGAIgASgFIj4KEkNTR2V0R3JhZGVSYW5rTGlzdBIMCgRmcm9tGAEgASgF",
            "EgoKAnRvGAIgASgFEg4KBnNlYXNvbhgDIAEoBSKAAQoSU0NHZXRHcmFkZVJh",
            "bmtMaXN0Ei4KDWdyYWRlUmFua0xpc3QYASADKAsyFy5QbGFuZVdhci5HcmFk",
            "ZVJhbmtJbmZvEi0KDHNlbGZSYW5rSW5mbxgCIAEoCzIXLlBsYW5lV2FyLkdy",
            "YWRlUmFua0luZm8SCwoDb3JkGAMgASgFIh4KCkNTQnV5UGxhbmUSEAoIcGxh",
            "bmVfaWQYASABKAUiHgoKU0NCdXlQbGFuZRIQCghwbGFuZV9pZBgBIAEoBSIe",
            "CgpDU0J1eVdpbmdzEhAKCHdpbmdzX2lkGAEgASgFIh4KClNDQnV5V2luZ3MS",
            "EAoId2luZ3NfaWQYASABKAUiPQoPT3BlbkNoZXN0UmV3YXJkEgoKAmlkGAEg",
            "ASgFEh4KA251bRgCIAEoCzIRLlBsYW5lV2FyLkRlY2ltYWwiqwEKE1NDVXBk",
            "YXRlQ2hlc3RTdGF0dXMSEQoJaXNfYWN0aXZlGAEgASgIEicKCmNoZXN0X3R5",
            "cGUYAiABKA4yEy5QbGFuZVdhci5DaGVzdFR5cGUSFgoOdG90YWxfcHJvZ3Jl",
            "c3MYAyABKAUSFwoPcmVtYWluX3Byb2dyZXNzGAQgASgFEg0KBWd1aWRlGAUg",
            "ASgIEhgKEGF2YWlsYWJsZV9yZXdhcmQYBiABKAUiYAoKQ2hlc3RCcmllZhIn",
            "CgpjaGVzdF90eXBlGAEgASgOMhMuUGxhbmVXYXIuQ2hlc3RUeXBlEikKBnJl",
            "d2FyZBgCIAMoCzIZLlBsYW5lV2FyLk9wZW5DaGVzdFJld2FyZCLAAQoNU0ND",
            "aGVzdENvbmZpZxIQCghlbmRfdGltZRgBIAEoBRIuChBjaGVzdF9icmllZl9s",
            "aXN0GAIgAygLMhQuUGxhbmVXYXIuQ2hlc3RCcmllZhIRCgltaW5fcmF0aW8Y",
            "AyABKAUSEQoJYXV0b19vcGVuGAQgASgIEjQKC2F1dG9fb3B0aW9uGAUgASgO",
            "Mh8uUGxhbmVXYXIuQ2hlc3RBdXRvU2VsZWN0T3B0aW9uEhEKCWlzX2VuYWJs",
            "ZRgGIAEoCCJzCgtTQ09wZW5DaGVzdBIuCgtyZXdhcmRfbGlzdBgBIAMoCzIZ",
            "LlBsYW5lV2FyLk9wZW5DaGVzdFJld2FyZBI0CgthdXRvX29wdGlvbhgCIAEo",
            "DjIfLlBsYW5lV2FyLkNoZXN0QXV0b1NlbGVjdE9wdGlvbiJWChNDU1NlbGVj",
            "dENoZXN0UmV3YXJkEhQKDHNlbGVjdF9pbmRleBgBIAEoBRIpCgZyZXdhcmQY",
            "AiABKAsyGS5QbGFuZVdhci5PcGVuQ2hlc3RSZXdhcmQiXwoUQ1NDaGVzdFNl",
            "dEF1dG9TZWxlY3QSNAoLYXV0b19vcHRpb24YASABKA4yHy5QbGFuZVdhci5D",
            "aGVzdEF1dG9TZWxlY3RPcHRpb24SEQoJYXV0b19vcGVuGAIgASgIIl8KFFND",
            "Q2hlc3RTZXRBdXRvU2VsZWN0EjQKC2F1dG9fb3B0aW9uGAEgASgOMh8uUGxh",
            "bmVXYXIuQ2hlc3RBdXRvU2VsZWN0T3B0aW9uEhEKCWF1dG9fb3BlbhgCIAEo",
            "CCIlChBDU0NoZXN0U2V0RW5hYmxlEhEKCWlzX2VuYWJsZRgBIAEoCCIlChBT",
            "Q0NoZXN0U2V0RW5hYmxlEhEKCWlzX2VuYWJsZRgBIAEoCCJLCg9TQ1dhdGVy",
            "RHJvcEluZm8SDgoGZW5hYmxlGAEgASgIEhEKCWRyb3BDb3VudBgCIAEoBRIV",
            "Cg1mcmFnbWVudENvdW50GAMgASgFIicKCFRleHRJbmZvEg0KBWluZGV4GAEg",
            "ASgFEgwKBHRleHQYAiABKAkiNAoQQ1NTeW5jVGV4dENvbmZpZxIQCghzdGFy",
            "dElkeBgBIAEoBRIOCgZlbmRJZHgYAiABKAUiOAoQU0NTeW5jVGV4dENvbmZp",
            "ZxIkCgh0ZXh0TGlzdBgBIAMoCzISLlBsYW5lV2FyLlRleHRJbmZvIh8KCkNT",
            "RXh0cmFNdWwSEQoJZXh0cmFfbXVsGAEgASgIIjAKClNDRXh0cmFNdWwSDwoH",
            "Y2hhaXJJZBgBIAEoBRIRCglleHRyYV9tdWwYAiABKAgqtxIKDUVNc2dJRFN1",
            "YkdhbWUSCQoFTG9naW4QABIKCgZMb2dvdXQQAhIJCgVSZWFkeRADEhAKDE1v",
            "bnN0ZXJTcGF3bhAEEggKBFNob3QQBRIHCgNIaXQQBhISCg5Nb25zdGVyRGVz",
            "dG9yeRAHEggKBExvY2sQCBINCglUcmFuc2Zvcm0QCRIQCgxQbGFuZVBvc1N5",
            "bmMQChIMCghTdGF0ZUVuZBALEgwKCE1vZFJhdGlvEAwSDgoKR2Fpbk5vdGlm",
            "eRANEg4KCkdhaW5TZXR0bGUQDhIMCghTZXRQbGFuZRAPEhMKD1VzZXJFbnRl",
            "ck5vdGlmeRAQEhQKEFN3aXRjaEJhY2tHcm91bmQQERITCg9TeW5jTW9uc3Rl",
            "ckluZm8QEhITCg9TY3JhdGNoQ2FyZExpc3QQExISCg5Vc2VTY3JhdGNoQ2Fy",
            "ZBAUEhEKDUV4cGxvZGVTZXR0bGUQFRIVChFGYWxsSW50b0JsYWNrSG9sZRAW",
            "EhQKEFN5bmNCbGFja0hvbGVQb3MQFxIPCgtJbnRlcmFjdGlvbhAYEhAKDEFj",
            "dGl2aXR5SW5mbxAZEhEKDUdldFRhc2tSZXdhcmQQGhIPCgtHZXRUYXNrSW5m",
            "bxAbEhQKEE5vdGljZUluZm9DaGFuZ2UQHBIYChROb3RpY2VIYWxsUHJvc0No",
            "YW5nZRAdEhcKE05vdGljZVRpbWluZ01vbnN0ZXIQHhIRCg1QaWdneUJhbmtJ",
            "bmZvEB8SEQoNT3BlblBpZ2d5QmFuaxAgEhcKE1BpZ2d5QmFua09wZW5GaW5p",
            "c2gQIRIZChVQaWdneUJhbmtDaGFuZ2VOb3RpZnkQIhIZChVTZXRQZXJzb25h",
            "bFBvb2xFbmFibGUQIxIUChBQZXJzb25hbFBvb2xJbmZvECQSFAoQRHJhd1Bl",
            "cnNvbmFsUG9vbBAlEhwKGFBlcnNvbmFsUG9vbENoYW5nZU5vdGlmeRAmEg4K",
            "ClVzZU1pc3NpbGUQJxIPCgtNb25zdGVyQ2FsbBAoEg8KC0NsaWNrU3RhdGlj",
            "ECkSDAoIUmFua0xpc3QQKhIQCgxMYXN0UmFua0xpc3QQKxINCglUaXRsZUxp",
            "c3QQLBIPCgtTZWxlY3RUaXRsZRAtEhUKEVRpdGxlQWN0aXZlTm90aWZ5EC4S",
            "GAoUUm9vbUluZm9DaGFuZ2VOb3RpZnkQLxIOCgpNYXRjaEJyaWVmEDASDwoL",
            "TWF0Y2hEZXRhaWwQMRIPCgtNYXRjaFJld2FyZBAyEhUKEU1hdGNoUmV3YXJk",
            "Tm90aWZ5EDMSDAoIR2lmdExpc3QQNBIUChBHaWZ0RXhwaXJlTm90aWZ5EDUS",
            "FgoSR2V0TWF0Y2hUYXNrUmV3YXJkEDYSEwoPV2VhcG9uUGllY2VJbmZvEDcS",
            "DQoJQnV5V2VhcG9uEDgSFAoQV2VhcG9uRWFyblJlY29yZBA5EhQKEFN0YXRl",
            "Rm9yY2VTZXR0bGUQOhITCg9BZGRNaXNzZWRCdWxsZXQQOxIUChBVcGRhdGVC",
            "dWxsZXREYXRhEDwSEwoPVXNlTWlzc2lsZUJhdGNoED0SEwoPU3luY1Byb3Bz",
            "VG9IYWxsED4SDwoLQ2hhbmdlVGFibGUQPxIVChFVcGdyYWRlUG9vbFJld2Fy",
            "ZBBAEhYKEkdldFBvb2xMdWNreVJld2FyZBBBEg8KC1VzZVJvdWxldHRlEEIS",
            "FAoQUmVkRW52ZWxvcGVQb2ludBBDEhMKD1JlZEVudmVsb3BlSW5mbxBEEhMK",
            "D09wZW5SZWRFbnZlbG9wZRBFEhYKElVwZ3JhZGVSZWRFbnZlbG9wZRBGEhkK",
            "FUNvbW1vblJlZEVudmVsb3BlSW5mbxBHEhkKFU9wZW5Db21tb25SZWRFbnZl",
            "bG9wZRBIEh4KGkdyYW50Q29tbW9uUmVkRW52ZWxvcGVSYW5rEEkSHQoZT3Bl",
            "bkNvbW1vblJlZEVudmVsb3BlUmFuaxBKEiAKHEdyYW50Q29tbW9uUmVkRW52",
            "ZWxvcGVSZWNvcmQQSxIfChtPcGVuQ29tbW9uUmVkRW52ZWxvcGVSZWNvcmQQ",
            "TBIdChlSZWRFbnZlbG9wZU9wU3RhdHVzTm90aWZ5EE0SEwoPU3luY1dlYXBv",
            "blN0YXRlEE4SCgoGUHJlSGl0EE8SEQoNU3luY0FuaW1hdGlvbhBQEhEKDUdl",
            "dEFuaW1hdGlvbnMQURIPCgtTeW5jQ29uZmlncxBSEhYKEkNvbmZpcm1XZWFw",
            "b25FeGlzdBBTEgwKCEdldFZpZGVvEFQSEwoPU2VsZlZpZGVvUmVjb3JkEFUS",
            "DQoJVmlkZW9SYW5rEFYSFAoQR2V0R3JhZGVSYW5rSW5mbxBXEhYKElJlY2Vp",
            "dmVHcmFkZVJld2FyZBBYEgwKCFN5bmNUaW1lEFkSDwoLUmFua1VwZ3JhZGUQ",
            "WhIUChBSYW5rU2Vhc29uU3RhdHVzEFsSFgoSTm90aWNlUHJvcHNPdmVyZHVl",
            "EFwSGAoUUXVlcnlQYWNrYWdlUHVyY2hhc2UQXRIMCghTZXRXaW5ncxBeEhQK",
            "EEdldFRhYmxlVXNlckluZm8QXxIWChJWZXJpZnlTZWFzb25DaGFuZ2UQYBIc",
            "ChhFeGlzdFVuUmVjZWl2ZVJhbmtSZXdhcmQQYRIWChJHZXRHcmFkZVJld2Fy",
            "ZEluZm8QYhIUChBHYW1lUHVyY2hhc2VQdXNoEGMSFwoTUXVlcnlQYWNrYWdl",
            "TWFycXVlZRBkEhQKEEdldEdyYWRlUmFua0xpc3QQZRIbChdSZWNlaXZlRXh0",
            "cmFHcmFkZVJld2FyZBBmEgwKCEJ1eVBsYW5lEGcSDAoIQnV5V2luZ3MQaBIV",
            "ChFVcGRhdGVDaGVzdFN0YXR1cxBpEg8KC0NoZXN0Q29uZmlnEGoSDQoJT3Bl",
            "bkNoZXN0EGsSFQoRU2VsZWN0Q2hlc3RSZXdhcmQQbBIWChJDaGVzdFNldEF1",
            "dG9TZWxlY3QQbRISCg5DaGVzdFNldEVuYWJsZRBuEhEKDVdhdGVyRHJvcElu",
            "Zm8QeBISCg5TeW5jVGV4dENvbmZpZxB5EhEKDUZpbmlzaFNwZWNpYWwQehIW",
            "ChJGaW5pc2hSZWNvdmVyU2NvcmUQexIQCgxNaXNzaWxlU2NvcmUQfBIMCghF",
            "eHRyYU11bBB9KrAPCglFcnJvckNvZGUSCwoHU3VjY2VzcxAAEgkKBEZhaWwQ",
            "6AcSEgoNRW50ZXJSb29tRmFpbBDpBxIVChBMb2FkQmFzZUluZm9GYWlsEOoH",
            "EhQKD0xvYWRWaXBJbmZvRmFpbBDrBxIWChFMb2FkRXh0cmFJbmZvRmFpbBDs",
            "BxIWChFDcmVhdGVQbGF5ZXJFcnJvchDtBxITCg5QbGF5ZXJOb3RFeGlzdBDu",
            "BxISCg1UYWJsZU5vdEV4aXN0EO8HEhMKDk1vbmV5Tm90RW5vdWdoEPAHEhAK",
            "C0J1bGxldEVycm9yEPEHEhQKD01vbnN0ZXJOb3RFeGlzdBDyBxIVChBQbGF5",
            "ZXJOb3RJblRhYmxlEPMHEhkKFFNjcmF0Y2hDYXJkTm90RW5vdWdoEPQHEhwK",
            "F0ludGVyYWN0aW9uVHlwZU5vdEV4aXN0EPUHEhsKFkludGVyYWN0aW9uTm90",
            "Q29vbGRvd24Q9gcSGwoWSW50ZXJhY3Rpb25UYXJnZXRFcnJvchD3BxIWChFU",
            "b2tlblZlcmlmeUZhaWxlZBD4BxISCg1UYXNrTm90RW5vdWdoEPkHEhUKEERp",
            "YW1vbmROb3RFbm91Z2gQ+gcSFAoPQ29uY3VycmVudExvZ2luEPsHEhEKDEFs",
            "cmVhZHlMb2dpbhD8BxIRCgxTZXJ2ZXJDbG9zZWQQ/QcSFQoQTWlzc2lsZU5v",
            "dEVub3VnaBD4ChIYChNQZXJzb25hbFBvb2xEaXNhYmxlENwLEhoKFVBlcnNv",
            "bmFsUG9vbE5vdEVub3VnaBDdCxIaChVQZXJzb25hbFBvb2xTYXZlRXJyb3IQ",
            "3gsSHwoaUGVyc29uYWxQb29sR2V0UmV3YXJkRXJyb3IQ3wsSFAoPTm9UbXBQ",
            "b29sUmV3YXJkEOALEhQKD1Bvb2xVcGdyYWRlRmFpbBDhCxIcChdQb29sTHVj",
            "a3lWYWx1ZU5vdEVub3VnaBDiCxIXChJQaWdneUJhbmtOb3RFbmFibGUQ7A4S",
            "FgoRUGlnZ3lCYW5rTm9SZXdhcmQQ7Q4SGQoUUGlnZ3lCYW5rUmV3YXJkRXJy",
            "b3IQ7g4SGgoVUGlnZ3lCYW5rUGFja2FnZUVycm9yEO8OEhIKDUNhbGxOb3RF",
            "bm91Z2gQ0A8SGwoWQ2FsbFNwZWNpYWxNb25zdGVyRnVsbBDRDxIbChZDYWxs",
            "TW9uc3RlclNjcmVlbkxpbWl0ENIPEhEKDENhbGxDb29sRG93bhDTDxISCg1D",
            "YWxsRXhjZWVkTWF4ENQPEhIKDVJhbmtUeXBlRXJyb3IQtBASEwoOUmFua0lu",
            "ZGV4RXJyb3IQtRASFgoRVGl0bGVDb25mTm90RXhpc3QQmBESEwoOVGl0bGVO",
            "b3RBY3RpdmUQmRESDwoKTm90SW5NYXRjaBD8ERIPCgpOb1N1Y2hUYXNrEP0R",
            "EhYKEUhhdmVHb3RUYXNrUmV3YXJkEP4REhMKDk5vdEFjaGlldmVUYXNrEP8R",
            "EhkKFFdlYXBvblBpZWNlTm90RW5vdWdoEOASEhgKE0dldFdlYXBvblJlY29y",
            "ZEZhaWwQ4RISFwoSV2VhcG9uQ29uZk5vdEV4aXN0EOISEhIKDUNhbnRCdXlX",
            "ZWFwb24Q4xISEgoNT3BlbkNoZXN0RmFpbBDkEhIaChVTZWxlY3RDaGVzdFJl",
            "d2FyZEZhaWwQ5RISFgoRUm91bGV0dGVOb3RFbm91Z2gQxBMSGQoUUm91bGV0",
            "dGVDb25mTm90RXhpc3QQxRMSIgodT3BlblJlZEVudmVsb3BlUG9pbnROb3RF",
            "bm91Z2gQqBQSHgoZT3BlblJlZEVudmVsb3BlSW5kZXhFcnJvchCpFBIbChZO",
            "b1RtcFJlZEVudmVsb3BlUmV3YXJkEKoUEiIKHVJlZEVudmVsb3BlVXBncmFk",
            "ZU51bU5vRW5vdWdoEKsUEiEKHEdldENvbW1vblJlZEVudmVsb3BlSW5mb0Zh",
            "aWwQrBQSJgohT3BlbkNvbW1vblJlZEVudmVsb3BlTnVtTm90RW5vdWdoEK0U",
            "Eh4KGU9wZW5Db21tb25SZWRFbnZlbG9wZUZhaWwQrhQSHQoYQ29tbW9uUmVk",
            "RW52ZWxvcGVJbnZhbGlkEK8UEiAKG0dldFJlZEVudmVsb3BlR3JhbnRSYW5r",
            "RmFpbBCwFBIfChpHZXRSZWRFbnZlbG9wZU9wZW5SYW5rRmFpbBCxFBIiCh1H",
            "ZXRSZWRFbnZlbG9wZUdyYW50UmVjb3JkRmFpbBCyFBIhChxHZXRSZWRFbnZl",
            "bG9wZU9wZW5SZWNvcmRGYWlsELMUEhIKDVZpZGVvTm90RXhpc3QQjBUSEwoO",
            "VmlkZW9MaXN0TGltaXQQjRUSEwoOR3JhZGVJc05vdE9wZW4QjhUSFgoRR2V0",
            "R3JhZGVJbmZvRXJyb3IQjxUSFQoQV2luZ3NOb3RPYnRhaW5lZBCQFRISCg1V",
            "bmlxdWVJZEVycm9yEJEVEhgKE0FscmVhZHlSZWNlaXZlRXJyb3IQkhUSFQoQ",
            "Tm90RW5vdWdoR2lmdEJhZxCTFRIcChdBbHJlYWR5SGF2ZVRoaXNQcm9wc0Vy",
            "chCUFRIPCgpQcm9wc0lkRXJyEJUVEhYKEUNhbk5vdEJ1eVByb3BzRXJyEJYV",
            "Kl4KDVJlZE9wZW5TdGF0dXMSDwoLUmVkT3BlbkxvY2sQABITCg9SZWRPcGVu",
            "VW5Mb2NrZWQQARIUChBSZWRPcGVuTm90QWN0aXZlEAISEQoNUmVkT3BlbkFj",
            "dGl2ZRADKksKEFVwZ3JhZGVSZWRSZXN1bHQSEgoOVXBncmFkZUFiYW5kb24Q",
            "ABIPCgtVcGdyYWRlRmFpbBABEhIKDlVwZ3JhZGVTdWNjZXNzEAIqYgoOR3Jh",
            "bnRSZWRTdGF0dXMSDQoJUmVkT3BlbmVkEAASDwoLUmVkTm9PcGVuZWQQARIO",
            "CgpSZWROb3RTaG93EAISEAoMUmVkQ291bnREb3duEAMSDgoKUmVkRXhwaXJl",
            "ZBAEKmkKC1JlZE9wU3RhdHVzEg4KClJlZE9wQ2xvc2UQABINCglSZWRPcE9w",
            "ZW4QARIQCgxSZWRPcFVwZ3JhZGUQAhIUChBSZWRPcEdyYW50UmV3YXJkEAMS",
            "EwoPUmVkT3BPcGVuUmV3YXJkEAQqYAoJQ2hlc3RUeXBlEhYKEkNoZXN0VHlw",
            "ZVBvcmNlbGFpbhAAEhMKD0NoZXN0VHlwZUJyb256ZRABEhMKD0NoZXN0VHlw",
            "ZVNpbHZlchACEhEKDUNoZXN0VHlwZUdvbGQQAypBChVDaGVzdEF1dG9TZWxl",
            "Y3RPcHRpb24SCAoETm9uZRAAEhMKD1JlZFBhY2tldFRpY2tldBABEgkKBU1v",
            "bmV5EAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PlaneWar.EMsgIDSubGame), typeof(global::PlaneWar.ErrorCode), typeof(global::PlaneWar.RedOpenStatus), typeof(global::PlaneWar.UpgradeRedResult), typeof(global::PlaneWar.GrantRedStatus), typeof(global::PlaneWar.RedOpStatus), typeof(global::PlaneWar.ChestType), typeof(global::PlaneWar.ChestAutoSelectOption), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.MissileFishListInfo), global::PlaneWar.MissileFishListInfo.Parser, new[]{ "FishList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.Decimal), global::PlaneWar.Decimal.Parser, new[]{ "Num", "Denom" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SC_SceneInfo), global::PlaneWar.SC_SceneInfo.Parser, new[]{ "BetList", "PlayerInfo", "RoomInfo", "PiecePay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSLogin), global::PlaneWar.CSLogin.Parser, new[]{ "PlayerId", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCLogin), global::PlaneWar.SCLogin.Parser, new[]{ "SceneId", "ArenaID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSLogout), global::PlaneWar.CSLogout.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCLogout), global::PlaneWar.SCLogout.Parser, new[]{ "LogoutType", "Chair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CommonPropInfo), global::PlaneWar.CommonPropInfo.Parser, new[]{ "PropID", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.Pos), global::PlaneWar.Pos.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.BuffInfo), global::PlaneWar.BuffInfo.Parser, new[]{ "BuffUID", "Num", "Ratio", "IsCrit", "Compose", "Desc", "SpeedUpRatio", "OriginUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.BlackHoleInfo), global::PlaneWar.BlackHoleInfo.Parser, new[]{ "Uid", "Num", "Ratio", "Pos", "IsCrit", "MonsterList", "OriginUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.FormInfo), global::PlaneWar.FormInfo.Parser, new[]{ "Form", "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.LockInfo), global::PlaneWar.LockInfo.Parser, new[]{ "LockUID", "ColliderIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.HitMode), global::PlaneWar.HitMode.Parser, new[]{ "HitType", "HitDirection" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.WeaponState), global::PlaneWar.WeaponState.Parser, new[]{ "Step", "Position", "Duration", "MoveMode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SettleInfo), global::PlaneWar.SettleInfo.Parser, new[]{ "OriginUID", "BulletType", "Reward", "WeaponID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GunInfo), global::PlaneWar.GunInfo.Parser, new[]{ "SourceUID", "OriginUID", "Ratio", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.FlameInfo), global::PlaneWar.FlameInfo.Parser, new[]{ "OriginUID", "Ratio", "SourceUIDList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.BeeInfo), global::PlaneWar.BeeInfo.Parser, new[]{ "RatioList", "TotalRatio" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.WeaponInfo), global::PlaneWar.WeaponInfo.Parser, new[]{ "WeaponID", "SourceUID", "OriginUID", "Ratio", "Num", "WeaponName", "WeaponRatio", "WeaponState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SpecEffect), global::PlaneWar.SpecEffect.Parser, new[]{ "CostMoney", "EarnMoney", "Violence", "Duration", "MaxDuration", "SourceType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.Dice), global::PlaneWar.Dice.Parser, new[]{ "Ratio", "Tp", "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.DiceInfo), global::PlaneWar.DiceInfo.Parser, new[]{ "Mode", "Mul", "DiceList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.StateInfo), global::PlaneWar.StateInfo.Parser, new[]{ "IsBack", "BuffList", "BlackHoleList", "FormInfo", "LockInfo", "WeaponInfo", "PropWeaponInfo", "SettleList", "GunInfo", "FlameInfo", "SpecEffect", "ExtraMul" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.MissileInfo), global::PlaneWar.MissileInfo.Parser, new[]{ "Id", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PiggyInfo), global::PlaneWar.PiggyInfo.Parser, new[]{ "Status", "RewardValue", "AccumulatingValue", "SettleTime", "SettleThreshold", "MaxReward", "NextMaxReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.ArenaPieceInfo), global::PlaneWar.ArenaPieceInfo.Parser, new[]{ "ArenaID", "HavePiece", "NeedPiece", "Ratio" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PieceInfo), global::PlaneWar.PieceInfo.Parser, new[]{ "ArenaInfo", "HaveDiamond", "NeedDiamond", "PieceStackLimit", "ExchangePiece" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.RouletteInfo), global::PlaneWar.RouletteInfo.Parser, new[]{ "Id", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.EffectInfo), global::PlaneWar.EffectInfo.Parser, new[]{ "EffectID", "IsGlobal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PlayerInfo), global::PlaneWar.PlayerInfo.Parser, new[]{ "Ratio", "PlaneID", "Score", "Chair", "PlayerName", "PlayerID", "Vip", "StateInfo", "MemberDays", "LastVipLevel", "ScratchCardNum", "Ticket", "RatioUnLock", "PiggyInfo", "MissileList", "CallNum", "SelectedTitle", "WeaponPieceInfo", "EffectID", "Icon", "RouletteList", "WingsId", "EffectInfo", "CurrentRank", "Star", "IsLastRank", "RedPacket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PlaneSpecEffect), global::PlaneWar.PlaneSpecEffect.Parser, new[]{ "RatioLimit", "HitChangeRate", "MoneyChangeRate", "ViolenceRate", "SpeedRate", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.WingsSpecEffect), global::PlaneWar.WingsSpecEffect.Parser, new[]{ "SpeedRate", "RatioLimit", "HitChangeRate", "MoneyChangeRate", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PlaneInfo), global::PlaneWar.PlaneInfo.Parser, new[]{ "PlaneID", "IsVip", "VipLevel", "IsMember", "IsTaskLock", "RequireAct", "Enable", "PlaneSpecEffect", "Timestamp", "RankFlag", "Price", "Buff" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.InteractionItem), global::PlaneWar.InteractionItem.Parser, new[]{ "Id", "Cost" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.RankStatusInfo), global::PlaneWar.RankStatusInfo.Parser, new[]{ "RankEnable", "AllowTypeList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.WingsInfo), global::PlaneWar.WingsInfo.Parser, new[]{ "WingsId", "Enable", "Timestamp", "WingsSpecEffect", "RankFlag", "Price", "Buff" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.RoomInfo), global::PlaneWar.RoomInfo.Parser, new[]{ "PlaneList", "ScratchCardEnable", "InteractionList", "PiggyBankEnable", "PersonalPoolEnable", "RewardMonsterList", "RankStatus", "WingsList", "RatioList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSReady), global::PlaneWar.CSReady.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCReady), global::PlaneWar.SCReady.Parser, new[]{ "PlayerList", "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCUserEnterNotify), global::PlaneWar.SCUserEnterNotify.Parser, new[]{ "Player" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.MonsterInfo), global::PlaneWar.MonsterInfo.Parser, new[]{ "MonsterType", "MonsterUID", "IsConnect" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCMonsterSpawn), global::PlaneWar.SCMonsterSpawn.Parser, new[]{ "ConfigID", "MonsterList", "IsCall" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSShot), global::PlaneWar.CSShot.Parser, new[]{ "Angle", "Ratio", "BulletType", "Scatter", "SourceUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCShot), global::PlaneWar.SCShot.Parser, new[]{ "Chair", "Angle", "Score", "BulletType", "Scatter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSLock), global::PlaneWar.CSLock.Parser, new[]{ "MonsterUID", "ColliderIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCLock), global::PlaneWar.SCLock.Parser, new[]{ "Chair", "MonsterUID", "ColliderIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.Poker), global::PlaneWar.Poker.Parser, new[]{ "Value", "Multiple" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.DropPoker), global::PlaneWar.DropPoker.Parser, new[]{ "PokerList", "Dice", "Kind", "KindMultiple" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.TriggerBullet), global::PlaneWar.TriggerBullet.Parser, new[]{ "BulletType", "SubType", "Num", "Params", "Params2", "SourceUID", "Generation", "Pos", "Delay", "Range", "Speed", "Monetary", "DestroyDelay", "HitRatio" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.Roulette), global::PlaneWar.Roulette.Parser, new[]{ "OuterIndex", "InnerIndex", "OuterRound", "InnerRound" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.DropBuff), global::PlaneWar.DropBuff.Parser, new[]{ "BuffUID", "Num", "Compose", "Desc", "SpeedUpRatio" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.FakeTresureInfo), global::PlaneWar.FakeTresureInfo.Parser, new[]{ "Type", "PropID", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.TreasureInfo), global::PlaneWar.TreasureInfo.Parser, new[]{ "ShowType", "Type", "PropID", "Num", "FakeType", "FakeInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.FortuneWheelInfo), global::PlaneWar.FortuneWheelInfo.Parser, new[]{ "Stage", "Ratio", "Next", "Color" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.ToadInfo), global::PlaneWar.ToadInfo.Parser, new[]{ "RatioList", "Critical" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.FortuneConfig), global::PlaneWar.FortuneConfig.Parser, new[]{ "FortuneWheelInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.BeeConfig), global::PlaneWar.BeeConfig.Parser, new[]{ "AList", "BList", "CList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CommonReplayConfig), global::PlaneWar.CommonReplayConfig.Parser, new[]{ "MaxLen", "LimitReward", "LimitMul" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GlobalReplayConfig), global::PlaneWar.GlobalReplayConfig.Parser, new[]{ "CommonReplayConfig", "RefreshTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PersonalReplayConfig), global::PlaneWar.PersonalReplayConfig.Parser, new[]{ "CommonReplayConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.ReplayConfig), global::PlaneWar.ReplayConfig.Parser, new[]{ "GlobalReplayConfig", "PersonalReplayConfig", "Open" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.ConnMonsterInfo), global::PlaneWar.ConnMonsterInfo.Parser, new[]{ "SourceUID", "OriginUID", "Ratio", "ConnMonsterList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSHit), global::PlaneWar.CSHit.Parser, new[]{ "MonsterUID", "Ratio", "BulletType", "SourceUID", "Generation", "DeductedMoney", "OriginUID", "IsEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCHit), global::PlaneWar.SCHit.Parser, new[]{ "IsCaptured", "Chair", "MonsterUID", "Ratio", "BulletType", "Earn", "Score", "BaseValue", "MultipleList", "DropBuffList", "TriggerBullet", "DropPoker", "Roulette", "Stage", "DropCard", "OriginUID", "DropCall", "DropWeaponPiece", "TreasureList", "WeaponID", "WeaponInfo", "GunInfo", "FortuneWheelList", "ToadInfo", "FlameInfo", "BeeInfo", "ConnMonsterInfo", "SpecEffect", "DiceInfo", "IsProp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSMonsterDestory), global::PlaneWar.CSMonsterDestory.Parser, new[]{ "MonsterUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCMonsterDestory), global::PlaneWar.SCMonsterDestory.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSTransform), global::PlaneWar.CSTransform.Parser, new[]{ "Form" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCTransform), global::PlaneWar.SCTransform.Parser, new[]{ "Chair", "Form" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSPlanePosSync), global::PlaneWar.CSPlanePosSync.Parser, new[]{ "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCPlanePosSync), global::PlaneWar.SCPlanePosSync.Parser, new[]{ "Chair", "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCStateEnd), global::PlaneWar.SCStateEnd.Parser, new[]{ "Chair", "Type", "SourceUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSModRatio), global::PlaneWar.CSModRatio.Parser, new[]{ "ModLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCModRatio), global::PlaneWar.SCModRatio.Parser, new[]{ "Chair", "Ratio", "IsUnlock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGainNotify), global::PlaneWar.SCGainNotify.Parser, new[]{ "Source", "CurMoney", "Gain", "CurTicket", "ChangeTicket", "ChangeDiamond", "CurDiamond", "CurRedPacket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGainSettle), global::PlaneWar.SCGainSettle.Parser, new[]{ "Chair", "OriginUID", "Ratio", "SourceUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSetPlane), global::PlaneWar.CSSetPlane.Parser, new[]{ "PlaneID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSetPlane), global::PlaneWar.SCSetPlane.Parser, new[]{ "Chair", "PlaneID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSwitchBackGround), global::PlaneWar.CSSwitchBackGround.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSwitchBackGround), global::PlaneWar.SCSwitchBackGround.Parser, new[]{ "Chair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.MonsterPath), global::PlaneWar.MonsterPath.Parser, new[]{ "Monster", "ConfigID", "StepIndex", "RoadIndex", "MoveT", "DotIndex", "Delay", "Stage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSyncMonsterInfo), global::PlaneWar.SCSyncMonsterInfo.Parser, new[]{ "CreatedPathList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.ScratchInfo), global::PlaneWar.ScratchInfo.Parser, new[]{ "Base", "Multiple" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSScratchCardList), global::PlaneWar.CSScratchCardList.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCScratchCardList), global::PlaneWar.SCScratchCardList.Parser, new[]{ "Num", "FirstCard" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSUseScratchCard), global::PlaneWar.CSUseScratchCard.Parser, new[]{ "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCUseScratchCard), global::PlaneWar.SCUseScratchCard.Parser, new[]{ "Chair", "CardList", "Total", "Remain", "CurMoney" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSExplodeSettle), global::PlaneWar.CSExplodeSettle.Parser, new[]{ "SourceUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCExplodeSettle), global::PlaneWar.SCExplodeSettle.Parser, new[]{ "Chair", "SourceUID", "OriginUID", "Remain" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSFallIntoBlackHole), global::PlaneWar.CSFallIntoBlackHole.Parser, new[]{ "MonsterUID", "SourceUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCFallIntoBlackHole), global::PlaneWar.SCFallIntoBlackHole.Parser, new[]{ "Chair", "MonsterUID", "SourceUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSyncBlackHolePos), global::PlaneWar.CSSyncBlackHolePos.Parser, new[]{ "SourceUID", "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSyncBlackHolePos), global::PlaneWar.SCSyncBlackHolePos.Parser, new[]{ "Chair", "SourceUID", "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSInteraction), global::PlaneWar.CSInteraction.Parser, new[]{ "TargetChair", "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCInteraction), global::PlaneWar.SCInteraction.Parser, new[]{ "SourceChair", "TargetChair", "Type", "Cooldown", "CurMoney" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.JumpHighArena), global::PlaneWar.JumpHighArena.Parser, new[]{ "IsOpen", "Vip", "Coin", "GameTime", "Tips", "MonsterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PoolArenaLimit), global::PlaneWar.PoolArenaLimit.Parser, new[]{ "Level", "Arena" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCActivityInfo), global::PlaneWar.SCActivityInfo.Parser, new[]{ "Jump", "Limit", "PoolLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGetTaskReward), global::PlaneWar.CSGetTaskReward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGetTaskReward), global::PlaneWar.SCGetTaskReward.Parser, new[]{ "GunRatio", "Award", "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGetTaskInfo), global::PlaneWar.CSGetTaskInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGetTaskInfo), global::PlaneWar.SCGetTaskInfo.Parser, new[]{ "GunRatio", "CurNum", "TotalNum", "VipLevel", "IsUnlock", "Award", "IsVipUnlock", "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCNoticeInfoChange), global::PlaneWar.SCNoticeInfoChange.Parser, new[]{ "IsCompleteTask", "MissileList", "CallNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.ProsInfo), global::PlaneWar.ProsInfo.Parser, new[]{ "Id", "Change", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCNoticeHallProsChange), global::PlaneWar.SCNoticeHallProsChange.Parser, new[]{ "Chair", "ProsList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.TimingMonster), global::PlaneWar.TimingMonster.Parser, new[]{ "Sec", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCNoticeTimingMonster), global::PlaneWar.SCNoticeTimingMonster.Parser, new[]{ "MonsterList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSPiggyBankInfo), global::PlaneWar.CSPiggyBankInfo.Parser, new[]{ "IsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCPiggyBankInfo), global::PlaneWar.SCPiggyBankInfo.Parser, new[]{ "Chair", "IsOpen", "PiggyInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PiggyReward), global::PlaneWar.PiggyReward.Parser, new[]{ "Id", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSOpenPiggyBank), global::PlaneWar.CSOpenPiggyBank.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCOpenPiggyBank), global::PlaneWar.SCOpenPiggyBank.Parser, new[]{ "Chair", "RewardList", "CurMoney" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSPiggyBankOpenFinish), global::PlaneWar.CSPiggyBankOpenFinish.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCPiggyBankOpenFinish), global::PlaneWar.SCPiggyBankOpenFinish.Parser, new[]{ "Chair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCPiggyBankChangeNotify), global::PlaneWar.SCPiggyBankChangeNotify.Parser, new[]{ "PiggyInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSetPersonalPoolEnable), global::PlaneWar.CSSetPersonalPoolEnable.Parser, new[]{ "Enable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSetPersonalPoolEnable), global::PlaneWar.SCSetPersonalPoolEnable.Parser, new[]{ "Enable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSPersonalPoolInfo), global::PlaneWar.CSPersonalPoolInfo.Parser, new[]{ "IsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PersonalPoolReward), global::PlaneWar.PersonalPoolReward.Parser, new[]{ "Type", "Id", "Num", "ClientID", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PersonalPoolLevelInfo), global::PlaneWar.PersonalPoolLevelInfo.Parser, new[]{ "Level", "TargetValue", "RewardList", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PersonalPoolLuckyInfo), global::PlaneWar.PersonalPoolLuckyInfo.Parser, new[]{ "Total", "Cost" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCPersonalPoolInfo), global::PlaneWar.SCPersonalPoolInfo.Parser, new[]{ "Chair", "IsOpen", "Enable", "PoolValue", "MaxValue", "CurLevel", "LevelList", "LuckyInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSDrawPersonalPool), global::PlaneWar.CSDrawPersonalPool.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCDrawPersonalPool), global::PlaneWar.SCDrawPersonalPool.Parser, new[]{ "Chair", "Reward", "MissReward", "CurMoney", "UpgradeCost", "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSUpgradePoolReward), global::PlaneWar.CSUpgradePoolReward.Parser, new[]{ "IsUpgrade" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCUpgradePoolReward), global::PlaneWar.SCUpgradePoolReward.Parser, new[]{ "Chair", "Result", "CurMoney", "BaseReward", "ExtraReward", "AddLuckyValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGetPoolLuckyReward), global::PlaneWar.CSGetPoolLuckyReward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGetPoolLuckyReward), global::PlaneWar.SCGetPoolLuckyReward.Parser, new[]{ "Chair", "CurMoney", "Cost", "RewardList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCPersonalPoolChangeNotify), global::PlaneWar.SCPersonalPoolChangeNotify.Parser, new[]{ "Enable", "CurValue", "CurLevel", "MaxValue", "TargetValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSUseMissile), global::PlaneWar.CSUseMissile.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCUseMissile), global::PlaneWar.SCUseMissile.Parser, new[]{ "Chair", "Id", "Reward", "RemainNum", "CurMoney" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSMonsterCall), global::PlaneWar.CSMonsterCall.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCMonsterCall), global::PlaneWar.SCMonsterCall.Parser, new[]{ "Chair", "Count", "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSClickStatic), global::PlaneWar.CSClickStatic.Parser, new[]{ "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCClickStatic), global::PlaneWar.SCClickStatic.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.RankInfo), global::PlaneWar.RankInfo.Parser, new[]{ "PlayerId", "Point", "Nick", "Icon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.MyRankInfo), global::PlaneWar.MyRankInfo.Parser, new[]{ "Rank", "Point", "Nick", "Icon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSRankList), global::PlaneWar.CSRankList.Parser, new[]{ "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCRankList), global::PlaneWar.SCRankList.Parser, new[]{ "Type", "Rank", "MyRank", "LastTop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.TitleInfo), global::PlaneWar.TitleInfo.Parser, new[]{ "Id", "Status", "Name", "EndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCTitleList), global::PlaneWar.SCTitleList.Parser, new[]{ "TitleList", "SelectedTitleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSelectTitle), global::PlaneWar.CSSelectTitle.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSelectTitle), global::PlaneWar.SCSelectTitle.Parser, new[]{ "Id", "Chair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCTitleActiveNotify), global::PlaneWar.SCTitleActiveNotify.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCRoomInfoChangeNotify), global::PlaneWar.SCRoomInfoChangeNotify.Parser, new[]{ "RoomInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSMatchBrief), global::PlaneWar.CSMatchBrief.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCMatchBrief), global::PlaneWar.SCMatchBrief.Parser, new[]{ "Status", "MatchType", "MatchName", "CountDown", "TotalNum", "RewardNum", "MyRank", "MyPoint", "NextRankPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSMatchDetail), global::PlaneWar.CSMatchDetail.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.MatchSubInfo), global::PlaneWar.MatchSubInfo.Parser, new[]{ "InMatch", "SubMatchName", "Jackpot", "TotalNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.MatchRewardItem), global::PlaneWar.MatchRewardItem.Parser, new[]{ "Id", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.MatchRankInfo), global::PlaneWar.MatchRankInfo.Parser, new[]{ "PlayerId", "Point", "Nick", "Icon", "Rank", "PointBonus", "MoneyBonus", "RewardList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.MatchTask), global::PlaneWar.MatchTask.Parser, new[]{ "Status", "Target", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCMatchDetail), global::PlaneWar.SCMatchDetail.Parser, new[]{ "SubInfoList", "RankList", "MyRank", "TipList", "LuckyStage", "TaskList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSMatchReward), global::PlaneWar.CSMatchReward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.RankReward), global::PlaneWar.RankReward.Parser, new[]{ "From", "To", "RewardList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCMatchReward), global::PlaneWar.SCMatchReward.Parser, new[]{ "RankRewardList", "LuckyReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.MyMatchReward), global::PlaneWar.MyMatchReward.Parser, new[]{ "Rank", "MyReward", "Bonus", "LuckyReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCMatchRewardNotify), global::PlaneWar.SCMatchRewardNotify.Parser, new[]{ "RewardList", "MyReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGiftList), global::PlaneWar.CSGiftList.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GiftInfo), global::PlaneWar.GiftInfo.Parser, new[]{ "Id", "PointBonus", "MoneyBonus", "CanBuy", "BuyCountDown" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGiftList), global::PlaneWar.SCGiftList.Parser, new[]{ "GiftList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGiftExpireNotify), global::PlaneWar.SCGiftExpireNotify.Parser, new[]{ "GiftID", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGetMatchTaskReward), global::PlaneWar.CSGetMatchTaskReward.Parser, new[]{ "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGetMatchTaskReward), global::PlaneWar.SCGetMatchTaskReward.Parser, new[]{ "Index", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.WeaponUseCondition), global::PlaneWar.WeaponUseCondition.Parser, new[]{ "VipLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.WeaponConfig), global::PlaneWar.WeaponConfig.Parser, new[]{ "WeaponID", "Name", "Condition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSWeaponPieceInfo), global::PlaneWar.CSWeaponPieceInfo.Parser, new[]{ "IsBrowsing" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PiecesStackLimitInfo), global::PlaneWar.PiecesStackLimitInfo.Parser, new[]{ "FromVipLevel", "ToVipLevel", "StackNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCWeaponPieceInfo), global::PlaneWar.SCWeaponPieceInfo.Parser, new[]{ "IsBrowsing", "Chair", "PieceInfo", "ConfigList", "StackLimitList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSBuyWeapon), global::PlaneWar.CSBuyWeapon.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCBuyWeapon), global::PlaneWar.SCBuyWeapon.Parser, new[]{ "Chair", "WeaponID", "WeaponInfo", "PieceInfo", "Condition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.EarnRecord), global::PlaneWar.EarnRecord.Parser, new[]{ "PlayerID", "Nick", "Icon", "VipLevel", "WeaponName", "Time", "Earn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSWeaponEarnRecord), global::PlaneWar.CSWeaponEarnRecord.Parser, new[]{ "Page" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCWeaponEarnRecord), global::PlaneWar.SCWeaponEarnRecord.Parser, new[]{ "RecordList", "Page" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSStateForceSettle), global::PlaneWar.CSStateForceSettle.Parser, new[]{ "SourceUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCStateForceSettle), global::PlaneWar.SCStateForceSettle.Parser, new[]{ "Chair", "SourceUID", "OriginUID", "Remain" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCAddMissedBullet), global::PlaneWar.SCAddMissedBullet.Parser, new[]{ "Chair", "BulletType", "SourceUID", "AddNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSUpdateBulletData), global::PlaneWar.CSUpdateBulletData.Parser, new[]{ "Angle", "BulletType", "SourceUID", "ConfID", "IsShooting" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCUpdateBulletData), global::PlaneWar.SCUpdateBulletData.Parser, new[]{ "Chair", "Angle", "BulletType", "SourceUID", "ConfID", "IsShooting" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSUseMissileBatch), global::PlaneWar.CSUseMissileBatch.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCUseMissileBatch), global::PlaneWar.SCUseMissileBatch.Parser, new[]{ "Chair", "TotalReward", "CurMoney", "RemainMissile" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSyncPropsToHall), global::PlaneWar.CSSyncPropsToHall.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSyncPropsToHall), global::PlaneWar.SCSyncPropsToHall.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSChangeTable), global::PlaneWar.CSChangeTable.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCChangeTable), global::PlaneWar.SCChangeTable.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSUseRoulette), global::PlaneWar.CSUseRoulette.Parser, new[]{ "ID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCUseRoulette), global::PlaneWar.SCUseRoulette.Parser, new[]{ "Chair", "Id", "CostNum", "Ratio", "Roulette", "Reward", "CurMoney" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSRedEnvelopePoint), global::PlaneWar.CSRedEnvelopePoint.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.RedOpenInfo), global::PlaneWar.RedOpenInfo.Parser, new[]{ "Status", "UnLockVipLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCRedEnvelopePoint), global::PlaneWar.SCRedEnvelopePoint.Parser, new[]{ "CurPoint", "MaxPoint", "CostPoint", "RedOpenList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSRedEnvelopeInfo), global::PlaneWar.CSRedEnvelopeInfo.Parser, new[]{ "IsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.RedInfo), global::PlaneWar.RedInfo.Parser, new[]{ "Cost" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCRedEnvelopeInfo), global::PlaneWar.SCRedEnvelopeInfo.Parser, new[]{ "RedList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSOpenRedEnvelope), global::PlaneWar.CSOpenRedEnvelope.Parser, new[]{ "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.RedUpgradeInfo), global::PlaneWar.RedUpgradeInfo.Parser, new[]{ "LeastReward", "MayAddReward", "MaxUpgradeNum", "RemainUpgradeNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCOpenRedEnvelope), global::PlaneWar.SCOpenRedEnvelope.Parser, new[]{ "RawReward", "GrantThreshold", "UpgradeInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSUpgradeRedEnvelope), global::PlaneWar.CSUpgradeRedEnvelope.Parser, new[]{ "IsUpgrade" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCUpgradeRedEnvelope), global::PlaneWar.SCUpgradeRedEnvelope.Parser, new[]{ "Result", "CurReward", "GrantThreshold", "AddReward", "UpgradeInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSCommonRedEnvelopeInfo), global::PlaneWar.CSCommonRedEnvelopeInfo.Parser, new[]{ "IsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CommonRedInfo), global::PlaneWar.CommonRedInfo.Parser, new[]{ "Id", "Reward", "Expire", "SourcePlayerNick", "TryOpenNum", "Cost", "IsSelfGrant" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCCommonRedEnvelopeInfo), global::PlaneWar.SCCommonRedEnvelopeInfo.Parser, new[]{ "RedList", "GrantThreshold", "MaxShowNum", "MaxOpenNum", "RemainOpenNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSOpenCommonRedEnvelope), global::PlaneWar.CSOpenCommonRedEnvelope.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCOpenCommonRedEnvelope), global::PlaneWar.SCOpenCommonRedEnvelope.Parser, new[]{ "Id", "Result", "RemainOpenNum", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.RedRankPlayerInfo), global::PlaneWar.RedRankPlayerInfo.Parser, new[]{ "PlayerID", "Nick", "Icon", "VipLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGrantCommonRedEnvelopeRank), global::PlaneWar.CSGrantCommonRedEnvelopeRank.Parser, new[]{ "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GrantRankItem), global::PlaneWar.GrantRankItem.Parser, new[]{ "Rank", "PlayerInfo", "UpgradeNum", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGrantCommonRedEnvelopeRank), global::PlaneWar.SCGrantCommonRedEnvelopeRank.Parser, new[]{ "RankList", "SelfRank" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSOpenCommonRedEnvelopeRank), global::PlaneWar.CSOpenCommonRedEnvelopeRank.Parser, new[]{ "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.OpenRankItem), global::PlaneWar.OpenRankItem.Parser, new[]{ "Rank", "PlayerInfo", "TotalReward", "OpenNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCOpenCommonRedEnvelopeRank), global::PlaneWar.SCOpenCommonRedEnvelopeRank.Parser, new[]{ "RankList", "SelfRank" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGrantCommonRedEnvelopeRecord), global::PlaneWar.CSGrantCommonRedEnvelopeRecord.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GrantRecord), global::PlaneWar.GrantRecord.Parser, new[]{ "GrantTime", "ExpireTime", "Reward", "Status", "OpenPlayerNick" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGrantCommonRedEnvelopeRecord), global::PlaneWar.SCGrantCommonRedEnvelopeRecord.Parser, new[]{ "RecordList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSOpenCommonRedEnvelopeRecord), global::PlaneWar.CSOpenCommonRedEnvelopeRecord.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.OpenRecord), global::PlaneWar.OpenRecord.Parser, new[]{ "SourcePlayerNick", "Reward", "OpenTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCOpenCommonRedEnvelopeRecord), global::PlaneWar.SCOpenCommonRedEnvelopeRecord.Parser, new[]{ "RecordList", "ShowRecordNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCRedEnvelopeOpStatusNotify), global::PlaneWar.SCRedEnvelopeOpStatusNotify.Parser, new[]{ "Chair", "Status", "CurMoney", "UpgradeInfo", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSyncWeaponState), global::PlaneWar.CSSyncWeaponState.Parser, new[]{ "WeaponId", "ChairId", "WeaponUID", "WeaponState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSyncWeaponState), global::PlaneWar.SCSyncWeaponState.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSPreHit), global::PlaneWar.CSPreHit.Parser, new[]{ "Ratio", "BulletType", "SourceUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCPreHit), global::PlaneWar.SCPreHit.Parser, new[]{ "WeaponUID", "HitMode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.Animation), global::PlaneWar.Animation.Parser, new[]{ "AnimationID", "AnimationMsg", "Chair", "MonsterUID", "BulletType", "Earn", "OriginUID", "MultipleList", "Ratio", "FortuneJson", "GoldenToadJson", "DiceJson" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.DiceJson), global::PlaneWar.DiceJson.Parser, new[]{ "Step", "Dice", "MulList", "MulPosList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.FortuneWheelJson), global::PlaneWar.FortuneWheelJson.Parser, new[]{ "Result", "Site" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GoldenToadJson), global::PlaneWar.GoldenToadJson.Parser, new[]{ "OrderList", "TotalRatio", "Ratio", "Step" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.OrderData), global::PlaneWar.OrderData.Parser, new[]{ "Type", "Ratio" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSyncAnimation), global::PlaneWar.CSSyncAnimation.Parser, new[]{ "Animation", "IsComplete" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSyncAnimation), global::PlaneWar.SCSyncAnimation.Parser, new[]{ "Animation", "IsComplete" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGetAnimations), global::PlaneWar.SCGetAnimations.Parser, new[]{ "Animations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GradeRankDetail), global::PlaneWar.GradeRankDetail.Parser, new[]{ "RankIndex", "RankName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GradeRankConfig), global::PlaneWar.GradeRankConfig.Parser, new[]{ "GradeRankDetail", "RankListLen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.WareGivingInfo), global::PlaneWar.WareGivingInfo.Parser, new[]{ "PropId", "PropName", "Ratio", "NoRepeat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.WareInfo), global::PlaneWar.WareInfo.Parser, new[]{ "WareId", "WareGivingInfoList", "MinMoney", "MaxMoney", "Price", "WareGivingProInfoList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.ExtraGradeRewardInfo), global::PlaneWar.ExtraGradeRewardInfo.Parser, new[]{ "Title", "Desc", "ExtraExp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.RankWareConfig), global::PlaneWar.RankWareConfig.Parser, new[]{ "CommWareInfo", "AdvanceWareInfo", "ExtraGradeRewardInfo", "WareDescList", "GradeDescList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.DiceConfig), global::PlaneWar.DiceConfig.Parser, new[]{ "RatioList", "MaxMul" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSyncConfigs), global::PlaneWar.CSSyncConfigs.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSyncConfigs), global::PlaneWar.SCSyncConfigs.Parser, new[]{ "FortuneConfig", "BeeConfig", "ReplayConfig", "GradeRankConfig", "WareConfig", "DiceConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSConfirmWeaponExist), global::PlaneWar.CSConfirmWeaponExist.Parser, new[]{ "SourceUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCConfirmWeaponExist), global::PlaneWar.SCConfirmWeaponExist.Parser, new[]{ "Exist" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGetVideo), global::PlaneWar.CSGetVideo.Parser, new[]{ "VideoId", "VideoType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGetVideo), global::PlaneWar.SCGetVideo.Parser, new[]{ "CreatedPathList", "RewardType", "Timestamp", "Reward", "Chair", "Money", "Ratio", "GunType", "Arena", "WeaponId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.VideoCommon), global::PlaneWar.VideoCommon.Parser, new[]{ "Reward", "RewardType", "Timestamp", "VideoId", "Unread", "WeaponId", "ArenaId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GlobalVideoInfo), global::PlaneWar.GlobalVideoInfo.Parser, new[]{ "NiceName", "Self", "Common" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SelfVideoInfo), global::PlaneWar.SelfVideoInfo.Parser, new[]{ "Ratio", "Common" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSelfVideoRecord), global::PlaneWar.CSSelfVideoRecord.Parser, new[]{ "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSelfVideoRecord), global::PlaneWar.SCSelfVideoRecord.Parser, new[]{ "VideoList", "RefreshTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSVideoRank), global::PlaneWar.CSVideoRank.Parser, new[]{ "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCVideoRank), global::PlaneWar.SCVideoRank.Parser, new[]{ "VideoList", "RefreshTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.ReceiveReward), global::PlaneWar.ReceiveReward.Parser, new[]{ "PropId", "Num", "Advance", "MinNum", "MaxNum", "Box", "UniqueId", "Desc", "TimeLimit", "Title", "PropType", "Special" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSReceiveGradeReward), global::PlaneWar.CSReceiveGradeReward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCReceiveGradeReward), global::PlaneWar.SCReceiveGradeReward.Parser, new[]{ "ReceiveRewardList", "UnReceiveRewardList", "SeasonEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GradeRewardDetail), global::PlaneWar.GradeRewardDetail.Parser, new[]{ "RewardInfo", "Reach", "Receive" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GradeRewardInfo), global::PlaneWar.GradeRewardInfo.Parser, new[]{ "RankName", "CommRewardList", "AdvanceRewardList", "First" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.GradeRankInfo), global::PlaneWar.GradeRankInfo.Parser, new[]{ "CurrentRank", "Star", "RankName", "HistoryRank", "HistoryRankName", "KingTag", "CurrentExp", "NextExp", "ExtraExp", "PlayerName", "AvailableGift", "IsLast", "IsSelf" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGetTableUserInfo), global::PlaneWar.CSGetTableUserInfo.Parser, new[]{ "ChairId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGetTableUserInfo), global::PlaneWar.SCGetTableUserInfo.Parser, new[]{ "PlayerInfo", "GradeRankInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGetGradeRewardInfo), global::PlaneWar.CSGetGradeRewardInfo.Parser, new[]{ "StartIdx", "EndIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGetGradeRewardInfo), global::PlaneWar.SCGetGradeRewardInfo.Parser, new[]{ "GradeRewardInfoList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGetGradeRankInfo), global::PlaneWar.CSGetGradeRankInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGetGradeRankInfo), global::PlaneWar.SCGetGradeRankInfo.Parser, new[]{ "GradeRankInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCRankUpgrade), global::PlaneWar.SCRankUpgrade.Parser, new[]{ "GradeRankInfo", "Advance", "Chair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSRankSeasonStatus), global::PlaneWar.CSRankSeasonStatus.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCRankSeasonStatus), global::PlaneWar.SCRankSeasonStatus.Parser, new[]{ "Enable", "StartTime", "EndTime", "SeasonName", "Season" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSyncTime), global::PlaneWar.SCSyncTime.Parser, new[]{ "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCNoticePropsOverdue), global::PlaneWar.SCNoticePropsOverdue.Parser, new[]{ "PropId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PurchaseResult), global::PlaneWar.PurchaseResult.Parser, new[]{ "WareId", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSQueryPackagePurchase), global::PlaneWar.CSQueryPackagePurchase.Parser, new[]{ "WareIdList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCQueryPackagePurchase), global::PlaneWar.SCQueryPackagePurchase.Parser, new[]{ "PurchaseResList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PropsInfo), global::PlaneWar.PropsInfo.Parser, new[]{ "PropId", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGamePurchasePush), global::PlaneWar.SCGamePurchasePush.Parser, new[]{ "PropsList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.PackageMarquee), global::PlaneWar.PackageMarquee.Parser, new[]{ "Nickname", "WareId", "Props" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSQueryPackageMarquee), global::PlaneWar.CSQueryPackageMarquee.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCQueryPackageMarquee), global::PlaneWar.SCQueryPackageMarquee.Parser, new[]{ "MarqueeModel", "PackageMarqueeList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSetWings), global::PlaneWar.CSSetWings.Parser, new[]{ "WingId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSetWings), global::PlaneWar.SCSetWings.Parser, new[]{ "Chair", "WingId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSVerifySeasonChange), global::PlaneWar.CSVerifySeasonChange.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCVerifySeasonChange), global::PlaneWar.SCVerifySeasonChange.Parser, new[]{ "Change", "BeforeGradeRankInfo", "CurrentGradeRankInfo", "BeforeSeason", "CurrentSeason" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSExistUnReceiveRankReward), global::PlaneWar.CSExistUnReceiveRankReward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCExistUnReceiveRankReward), global::PlaneWar.SCExistUnReceiveRankReward.Parser, new[]{ "Exist" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSReceiveExtraGradeReward), global::PlaneWar.CSReceiveExtraGradeReward.Parser, new[]{ "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCReceiveExtraGradeReward), global::PlaneWar.SCReceiveExtraGradeReward.Parser, new[]{ "ReceiveRewardList", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSGetGradeRankList), global::PlaneWar.CSGetGradeRankList.Parser, new[]{ "From", "To", "Season" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCGetGradeRankList), global::PlaneWar.SCGetGradeRankList.Parser, new[]{ "GradeRankList", "SelfRankInfo", "Ord" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSBuyPlane), global::PlaneWar.CSBuyPlane.Parser, new[]{ "PlaneId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCBuyPlane), global::PlaneWar.SCBuyPlane.Parser, new[]{ "PlaneId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSBuyWings), global::PlaneWar.CSBuyWings.Parser, new[]{ "WingsId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCBuyWings), global::PlaneWar.SCBuyWings.Parser, new[]{ "WingsId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.OpenChestReward), global::PlaneWar.OpenChestReward.Parser, new[]{ "Id", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCUpdateChestStatus), global::PlaneWar.SCUpdateChestStatus.Parser, new[]{ "IsActive", "ChestType", "TotalProgress", "RemainProgress", "Guide", "AvailableReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.ChestBrief), global::PlaneWar.ChestBrief.Parser, new[]{ "ChestType", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCChestConfig), global::PlaneWar.SCChestConfig.Parser, new[]{ "EndTime", "ChestBriefList", "MinRatio", "AutoOpen", "AutoOption", "IsEnable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCOpenChest), global::PlaneWar.SCOpenChest.Parser, new[]{ "RewardList", "AutoOption" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSelectChestReward), global::PlaneWar.CSSelectChestReward.Parser, new[]{ "SelectIndex", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSChestSetAutoSelect), global::PlaneWar.CSChestSetAutoSelect.Parser, new[]{ "AutoOption", "AutoOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCChestSetAutoSelect), global::PlaneWar.SCChestSetAutoSelect.Parser, new[]{ "AutoOption", "AutoOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSChestSetEnable), global::PlaneWar.CSChestSetEnable.Parser, new[]{ "IsEnable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCChestSetEnable), global::PlaneWar.SCChestSetEnable.Parser, new[]{ "IsEnable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCWaterDropInfo), global::PlaneWar.SCWaterDropInfo.Parser, new[]{ "Enable", "DropCount", "FragmentCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.TextInfo), global::PlaneWar.TextInfo.Parser, new[]{ "Index", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSSyncTextConfig), global::PlaneWar.CSSyncTextConfig.Parser, new[]{ "StartIdx", "EndIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCSyncTextConfig), global::PlaneWar.SCSyncTextConfig.Parser, new[]{ "TextList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.CSExtraMul), global::PlaneWar.CSExtraMul.Parser, new[]{ "ExtraMul" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlaneWar.SCExtraMul), global::PlaneWar.SCExtraMul.Parser, new[]{ "ChairId", "ExtraMul" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDSubGame {
    [pbr::OriginalName("Login")] Login = 0,
    [pbr::OriginalName("Logout")] Logout = 2,
    [pbr::OriginalName("Ready")] Ready = 3,
    [pbr::OriginalName("MonsterSpawn")] MonsterSpawn = 4,
    [pbr::OriginalName("Shot")] Shot = 5,
    [pbr::OriginalName("Hit")] Hit = 6,
    [pbr::OriginalName("MonsterDestory")] MonsterDestory = 7,
    [pbr::OriginalName("Lock")] Lock = 8,
    [pbr::OriginalName("Transform")] Transform = 9,
    [pbr::OriginalName("PlanePosSync")] PlanePosSync = 10,
    [pbr::OriginalName("StateEnd")] StateEnd = 11,
    [pbr::OriginalName("ModRatio")] ModRatio = 12,
    [pbr::OriginalName("GainNotify")] GainNotify = 13,
    [pbr::OriginalName("GainSettle")] GainSettle = 14,
    [pbr::OriginalName("SetPlane")] SetPlane = 15,
    [pbr::OriginalName("UserEnterNotify")] UserEnterNotify = 16,
    [pbr::OriginalName("SwitchBackGround")] SwitchBackGround = 17,
    [pbr::OriginalName("SyncMonsterInfo")] SyncMonsterInfo = 18,
    [pbr::OriginalName("ScratchCardList")] ScratchCardList = 19,
    [pbr::OriginalName("UseScratchCard")] UseScratchCard = 20,
    [pbr::OriginalName("ExplodeSettle")] ExplodeSettle = 21,
    [pbr::OriginalName("FallIntoBlackHole")] FallIntoBlackHole = 22,
    [pbr::OriginalName("SyncBlackHolePos")] SyncBlackHolePos = 23,
    [pbr::OriginalName("Interaction")] Interaction = 24,
    [pbr::OriginalName("ActivityInfo")] ActivityInfo = 25,
    [pbr::OriginalName("GetTaskReward")] GetTaskReward = 26,
    [pbr::OriginalName("GetTaskInfo")] GetTaskInfo = 27,
    [pbr::OriginalName("NoticeInfoChange")] NoticeInfoChange = 28,
    [pbr::OriginalName("NoticeHallProsChange")] NoticeHallProsChange = 29,
    [pbr::OriginalName("NoticeTimingMonster")] NoticeTimingMonster = 30,
    [pbr::OriginalName("PiggyBankInfo")] PiggyBankInfo = 31,
    [pbr::OriginalName("OpenPiggyBank")] OpenPiggyBank = 32,
    [pbr::OriginalName("PiggyBankOpenFinish")] PiggyBankOpenFinish = 33,
    [pbr::OriginalName("PiggyBankChangeNotify")] PiggyBankChangeNotify = 34,
    [pbr::OriginalName("SetPersonalPoolEnable")] SetPersonalPoolEnable = 35,
    [pbr::OriginalName("PersonalPoolInfo")] PersonalPoolInfo = 36,
    [pbr::OriginalName("DrawPersonalPool")] DrawPersonalPool = 37,
    [pbr::OriginalName("PersonalPoolChangeNotify")] PersonalPoolChangeNotify = 38,
    [pbr::OriginalName("UseMissile")] UseMissile = 39,
    [pbr::OriginalName("MonsterCall")] MonsterCall = 40,
    [pbr::OriginalName("ClickStatic")] ClickStatic = 41,
    [pbr::OriginalName("RankList")] RankList = 42,
    [pbr::OriginalName("LastRankList")] LastRankList = 43,
    [pbr::OriginalName("TitleList")] TitleList = 44,
    [pbr::OriginalName("SelectTitle")] SelectTitle = 45,
    [pbr::OriginalName("TitleActiveNotify")] TitleActiveNotify = 46,
    [pbr::OriginalName("RoomInfoChangeNotify")] RoomInfoChangeNotify = 47,
    [pbr::OriginalName("MatchBrief")] MatchBrief = 48,
    [pbr::OriginalName("MatchDetail")] MatchDetail = 49,
    [pbr::OriginalName("MatchReward")] MatchReward = 50,
    [pbr::OriginalName("MatchRewardNotify")] MatchRewardNotify = 51,
    [pbr::OriginalName("GiftList")] GiftList = 52,
    [pbr::OriginalName("GiftExpireNotify")] GiftExpireNotify = 53,
    [pbr::OriginalName("GetMatchTaskReward")] GetMatchTaskReward = 54,
    [pbr::OriginalName("WeaponPieceInfo")] WeaponPieceInfo = 55,
    [pbr::OriginalName("BuyWeapon")] BuyWeapon = 56,
    [pbr::OriginalName("WeaponEarnRecord")] WeaponEarnRecord = 57,
    [pbr::OriginalName("StateForceSettle")] StateForceSettle = 58,
    [pbr::OriginalName("AddMissedBullet")] AddMissedBullet = 59,
    [pbr::OriginalName("UpdateBulletData")] UpdateBulletData = 60,
    [pbr::OriginalName("UseMissileBatch")] UseMissileBatch = 61,
    [pbr::OriginalName("SyncPropsToHall")] SyncPropsToHall = 62,
    [pbr::OriginalName("ChangeTable")] ChangeTable = 63,
    [pbr::OriginalName("UpgradePoolReward")] UpgradePoolReward = 64,
    [pbr::OriginalName("GetPoolLuckyReward")] GetPoolLuckyReward = 65,
    [pbr::OriginalName("UseRoulette")] UseRoulette = 66,
    [pbr::OriginalName("RedEnvelopePoint")] RedEnvelopePoint = 67,
    [pbr::OriginalName("RedEnvelopeInfo")] RedEnvelopeInfo = 68,
    [pbr::OriginalName("OpenRedEnvelope")] OpenRedEnvelope = 69,
    [pbr::OriginalName("UpgradeRedEnvelope")] UpgradeRedEnvelope = 70,
    [pbr::OriginalName("CommonRedEnvelopeInfo")] CommonRedEnvelopeInfo = 71,
    [pbr::OriginalName("OpenCommonRedEnvelope")] OpenCommonRedEnvelope = 72,
    [pbr::OriginalName("GrantCommonRedEnvelopeRank")] GrantCommonRedEnvelopeRank = 73,
    [pbr::OriginalName("OpenCommonRedEnvelopeRank")] OpenCommonRedEnvelopeRank = 74,
    [pbr::OriginalName("GrantCommonRedEnvelopeRecord")] GrantCommonRedEnvelopeRecord = 75,
    [pbr::OriginalName("OpenCommonRedEnvelopeRecord")] OpenCommonRedEnvelopeRecord = 76,
    [pbr::OriginalName("RedEnvelopeOpStatusNotify")] RedEnvelopeOpStatusNotify = 77,
    [pbr::OriginalName("SyncWeaponState")] SyncWeaponState = 78,
    [pbr::OriginalName("PreHit")] PreHit = 79,
    [pbr::OriginalName("SyncAnimation")] SyncAnimation = 80,
    [pbr::OriginalName("GetAnimations")] GetAnimations = 81,
    [pbr::OriginalName("SyncConfigs")] SyncConfigs = 82,
    [pbr::OriginalName("ConfirmWeaponExist")] ConfirmWeaponExist = 83,
    [pbr::OriginalName("GetVideo")] GetVideo = 84,
    [pbr::OriginalName("SelfVideoRecord")] SelfVideoRecord = 85,
    [pbr::OriginalName("VideoRank")] VideoRank = 86,
    [pbr::OriginalName("GetGradeRankInfo")] GetGradeRankInfo = 87,
    [pbr::OriginalName("ReceiveGradeReward")] ReceiveGradeReward = 88,
    [pbr::OriginalName("SyncTime")] SyncTime = 89,
    [pbr::OriginalName("RankUpgrade")] RankUpgrade = 90,
    [pbr::OriginalName("RankSeasonStatus")] RankSeasonStatus = 91,
    [pbr::OriginalName("NoticePropsOverdue")] NoticePropsOverdue = 92,
    [pbr::OriginalName("QueryPackagePurchase")] QueryPackagePurchase = 93,
    [pbr::OriginalName("SetWings")] SetWings = 94,
    [pbr::OriginalName("GetTableUserInfo")] GetTableUserInfo = 95,
    [pbr::OriginalName("VerifySeasonChange")] VerifySeasonChange = 96,
    [pbr::OriginalName("ExistUnReceiveRankReward")] ExistUnReceiveRankReward = 97,
    [pbr::OriginalName("GetGradeRewardInfo")] GetGradeRewardInfo = 98,
    [pbr::OriginalName("GamePurchasePush")] GamePurchasePush = 99,
    [pbr::OriginalName("QueryPackageMarquee")] QueryPackageMarquee = 100,
    [pbr::OriginalName("GetGradeRankList")] GetGradeRankList = 101,
    [pbr::OriginalName("ReceiveExtraGradeReward")] ReceiveExtraGradeReward = 102,
    [pbr::OriginalName("BuyPlane")] BuyPlane = 103,
    [pbr::OriginalName("BuyWings")] BuyWings = 104,
    [pbr::OriginalName("UpdateChestStatus")] UpdateChestStatus = 105,
    [pbr::OriginalName("ChestConfig")] ChestConfig = 106,
    [pbr::OriginalName("OpenChest")] OpenChest = 107,
    [pbr::OriginalName("SelectChestReward")] SelectChestReward = 108,
    [pbr::OriginalName("ChestSetAutoSelect")] ChestSetAutoSelect = 109,
    [pbr::OriginalName("ChestSetEnable")] ChestSetEnable = 110,
    [pbr::OriginalName("WaterDropInfo")] WaterDropInfo = 120,
    [pbr::OriginalName("SyncTextConfig")] SyncTextConfig = 121,
    [pbr::OriginalName("FinishSpecial")] FinishSpecial = 122,
    [pbr::OriginalName("FinishRecoverScore")] FinishRecoverScore = 123,
    [pbr::OriginalName("MissileScore")] MissileScore = 124,
    [pbr::OriginalName("ExtraMul")] ExtraMul = 125,
  }

  public enum ErrorCode {
    [pbr::OriginalName("Success")] Success = 0,
    [pbr::OriginalName("Fail")] Fail = 1000,
    [pbr::OriginalName("EnterRoomFail")] EnterRoomFail = 1001,
    [pbr::OriginalName("LoadBaseInfoFail")] LoadBaseInfoFail = 1002,
    [pbr::OriginalName("LoadVipInfoFail")] LoadVipInfoFail = 1003,
    [pbr::OriginalName("LoadExtraInfoFail")] LoadExtraInfoFail = 1004,
    [pbr::OriginalName("CreatePlayerError")] CreatePlayerError = 1005,
    [pbr::OriginalName("PlayerNotExist")] PlayerNotExist = 1006,
    [pbr::OriginalName("TableNotExist")] TableNotExist = 1007,
    [pbr::OriginalName("MoneyNotEnough")] MoneyNotEnough = 1008,
    [pbr::OriginalName("BulletError")] BulletError = 1009,
    [pbr::OriginalName("MonsterNotExist")] MonsterNotExist = 1010,
    [pbr::OriginalName("PlayerNotInTable")] PlayerNotInTable = 1011,
    [pbr::OriginalName("ScratchCardNotEnough")] ScratchCardNotEnough = 1012,
    [pbr::OriginalName("InteractionTypeNotExist")] InteractionTypeNotExist = 1013,
    [pbr::OriginalName("InteractionNotCooldown")] InteractionNotCooldown = 1014,
    [pbr::OriginalName("InteractionTargetError")] InteractionTargetError = 1015,
    [pbr::OriginalName("TokenVerifyFailed")] TokenVerifyFailed = 1016,
    [pbr::OriginalName("TaskNotEnough")] TaskNotEnough = 1017,
    [pbr::OriginalName("DiamondNotEnough")] DiamondNotEnough = 1018,
    [pbr::OriginalName("ConcurrentLogin")] ConcurrentLogin = 1019,
    [pbr::OriginalName("AlreadyLogin")] AlreadyLogin = 1020,
    [pbr::OriginalName("ServerClosed")] ServerClosed = 1021,
    [pbr::OriginalName("MissileNotEnough")] MissileNotEnough = 1400,
    [pbr::OriginalName("PersonalPoolDisable")] PersonalPoolDisable = 1500,
    [pbr::OriginalName("PersonalPoolNotEnough")] PersonalPoolNotEnough = 1501,
    [pbr::OriginalName("PersonalPoolSaveError")] PersonalPoolSaveError = 1502,
    [pbr::OriginalName("PersonalPoolGetRewardError")] PersonalPoolGetRewardError = 1503,
    [pbr::OriginalName("NoTmpPoolReward")] NoTmpPoolReward = 1504,
    [pbr::OriginalName("PoolUpgradeFail")] PoolUpgradeFail = 1505,
    [pbr::OriginalName("PoolLuckyValueNotEnough")] PoolLuckyValueNotEnough = 1506,
    [pbr::OriginalName("PiggyBankNotEnable")] PiggyBankNotEnable = 1900,
    [pbr::OriginalName("PiggyBankNoReward")] PiggyBankNoReward = 1901,
    [pbr::OriginalName("PiggyBankRewardError")] PiggyBankRewardError = 1902,
    [pbr::OriginalName("PiggyBankPackageError")] PiggyBankPackageError = 1903,
    [pbr::OriginalName("CallNotEnough")] CallNotEnough = 2000,
    [pbr::OriginalName("CallSpecialMonsterFull")] CallSpecialMonsterFull = 2001,
    [pbr::OriginalName("CallMonsterScreenLimit")] CallMonsterScreenLimit = 2002,
    [pbr::OriginalName("CallCoolDown")] CallCoolDown = 2003,
    [pbr::OriginalName("CallExceedMax")] CallExceedMax = 2004,
    [pbr::OriginalName("RankTypeError")] RankTypeError = 2100,
    [pbr::OriginalName("RankIndexError")] RankIndexError = 2101,
    [pbr::OriginalName("TitleConfNotExist")] TitleConfNotExist = 2200,
    [pbr::OriginalName("TitleNotActive")] TitleNotActive = 2201,
    [pbr::OriginalName("NotInMatch")] NotInMatch = 2300,
    [pbr::OriginalName("NoSuchTask")] NoSuchTask = 2301,
    [pbr::OriginalName("HaveGotTaskReward")] HaveGotTaskReward = 2302,
    [pbr::OriginalName("NotAchieveTask")] NotAchieveTask = 2303,
    [pbr::OriginalName("WeaponPieceNotEnough")] WeaponPieceNotEnough = 2400,
    [pbr::OriginalName("GetWeaponRecordFail")] GetWeaponRecordFail = 2401,
    [pbr::OriginalName("WeaponConfNotExist")] WeaponConfNotExist = 2402,
    [pbr::OriginalName("CantBuyWeapon")] CantBuyWeapon = 2403,
    [pbr::OriginalName("OpenChestFail")] OpenChestFail = 2404,
    [pbr::OriginalName("SelectChestRewardFail")] SelectChestRewardFail = 2405,
    [pbr::OriginalName("RouletteNotEnough")] RouletteNotEnough = 2500,
    [pbr::OriginalName("RouletteConfNotExist")] RouletteConfNotExist = 2501,
    [pbr::OriginalName("OpenRedEnvelopePointNotEnough")] OpenRedEnvelopePointNotEnough = 2600,
    [pbr::OriginalName("OpenRedEnvelopeIndexError")] OpenRedEnvelopeIndexError = 2601,
    [pbr::OriginalName("NoTmpRedEnvelopeReward")] NoTmpRedEnvelopeReward = 2602,
    [pbr::OriginalName("RedEnvelopeUpgradeNumNoEnough")] RedEnvelopeUpgradeNumNoEnough = 2603,
    [pbr::OriginalName("GetCommonRedEnvelopeInfoFail")] GetCommonRedEnvelopeInfoFail = 2604,
    [pbr::OriginalName("OpenCommonRedEnvelopeNumNotEnough")] OpenCommonRedEnvelopeNumNotEnough = 2605,
    [pbr::OriginalName("OpenCommonRedEnvelopeFail")] OpenCommonRedEnvelopeFail = 2606,
    [pbr::OriginalName("CommonRedEnvelopeInvalid")] CommonRedEnvelopeInvalid = 2607,
    [pbr::OriginalName("GetRedEnvelopeGrantRankFail")] GetRedEnvelopeGrantRankFail = 2608,
    [pbr::OriginalName("GetRedEnvelopeOpenRankFail")] GetRedEnvelopeOpenRankFail = 2609,
    [pbr::OriginalName("GetRedEnvelopeGrantRecordFail")] GetRedEnvelopeGrantRecordFail = 2610,
    [pbr::OriginalName("GetRedEnvelopeOpenRecordFail")] GetRedEnvelopeOpenRecordFail = 2611,
    [pbr::OriginalName("VideoNotExist")] VideoNotExist = 2700,
    [pbr::OriginalName("VideoListLimit")] VideoListLimit = 2701,
    [pbr::OriginalName("GradeIsNotOpen")] GradeIsNotOpen = 2702,
    [pbr::OriginalName("GetGradeInfoError")] GetGradeInfoError = 2703,
    [pbr::OriginalName("WingsNotObtained")] WingsNotObtained = 2704,
    [pbr::OriginalName("UniqueIdError")] UniqueIdError = 2705,
    [pbr::OriginalName("AlreadyReceiveError")] AlreadyReceiveError = 2706,
    [pbr::OriginalName("NotEnoughGiftBag")] NotEnoughGiftBag = 2707,
    [pbr::OriginalName("AlreadyHaveThisPropsErr")] AlreadyHaveThisPropsErr = 2708,
    [pbr::OriginalName("PropsIdErr")] PropsIdErr = 2709,
    [pbr::OriginalName("CanNotBuyPropsErr")] CanNotBuyPropsErr = 2710,
  }

  public enum RedOpenStatus {
    [pbr::OriginalName("RedOpenLock")] RedOpenLock = 0,
    [pbr::OriginalName("RedOpenUnLocked")] RedOpenUnLocked = 1,
    [pbr::OriginalName("RedOpenNotActive")] RedOpenNotActive = 2,
    [pbr::OriginalName("RedOpenActive")] RedOpenActive = 3,
  }

  public enum UpgradeRedResult {
    [pbr::OriginalName("UpgradeAbandon")] UpgradeAbandon = 0,
    [pbr::OriginalName("UpgradeFail")] UpgradeFail = 1,
    [pbr::OriginalName("UpgradeSuccess")] UpgradeSuccess = 2,
  }

  public enum GrantRedStatus {
    [pbr::OriginalName("RedOpened")] RedOpened = 0,
    [pbr::OriginalName("RedNoOpened")] RedNoOpened = 1,
    [pbr::OriginalName("RedNotShow")] RedNotShow = 2,
    [pbr::OriginalName("RedCountDown")] RedCountDown = 3,
    [pbr::OriginalName("RedExpired")] RedExpired = 4,
  }

  public enum RedOpStatus {
    [pbr::OriginalName("RedOpClose")] RedOpClose = 0,
    [pbr::OriginalName("RedOpOpen")] RedOpOpen = 1,
    [pbr::OriginalName("RedOpUpgrade")] RedOpUpgrade = 2,
    [pbr::OriginalName("RedOpGrantReward")] RedOpGrantReward = 3,
    [pbr::OriginalName("RedOpOpenReward")] RedOpOpenReward = 4,
  }

  public enum ChestType {
    [pbr::OriginalName("ChestTypePorcelain")] Porcelain = 0,
    [pbr::OriginalName("ChestTypeBronze")] Bronze = 1,
    [pbr::OriginalName("ChestTypeSilver")] Silver = 2,
    [pbr::OriginalName("ChestTypeGold")] Gold = 3,
  }

  public enum ChestAutoSelectOption {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("RedPacketTicket")] RedPacketTicket = 1,
    [pbr::OriginalName("Money")] Money = 2,
  }

  #endregion

  #region Messages
  public sealed partial class MissileFishListInfo : pb::IMessage<MissileFishListInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MissileFishListInfo> _parser = new pb::MessageParser<MissileFishListInfo>(() => new MissileFishListInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissileFishListInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileFishListInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileFishListInfo(MissileFishListInfo other) : this() {
      fishList_ = other.fishList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileFishListInfo Clone() {
      return new MissileFishListInfo(this);
    }

    /// <summary>Field number for the "fish_list" field.</summary>
    public const int FishListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_fishList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> fishList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///鱼列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FishList {
      get { return fishList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissileFishListInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissileFishListInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fishList_.Equals(other.fishList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fishList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      fishList_.WriteTo(output, _repeated_fishList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      fishList_.WriteTo(ref output, _repeated_fishList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fishList_.CalculateSize(_repeated_fishList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissileFishListInfo other) {
      if (other == null) {
        return;
      }
      fishList_.Add(other.fishList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            fishList_.AddEntriesFrom(input, _repeated_fishList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            fishList_.AddEntriesFrom(ref input, _repeated_fishList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Decimal : pb::IMessage<Decimal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Decimal> _parser = new pb::MessageParser<Decimal>(() => new Decimal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decimal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal(Decimal other) : this() {
      num_ = other.num_;
      denom_ = other.denom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal Clone() {
      return new Decimal(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "denom" field.</summary>
    public const int DenomFieldNumber = 2;
    private int denom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Denom {
      get { return denom_; }
      set {
        denom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decimal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decimal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      if (Denom != other.Denom) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Denom != 0) hash ^= Denom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (Denom != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Denom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (Denom != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Denom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Denom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Denom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decimal other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Denom != 0) {
        Denom = other.Denom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 16: {
            Denom = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 16: {
            Denom = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      betList_ = other.betList_.Clone();
      playerInfo_ = other.playerInfo_.Clone();
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      piecePay_ = other.piecePay_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "bet_list" field.</summary>
    public const int BetListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_betList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> betList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///押注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BetList {
      get { return betList_; }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.PlayerInfo> _repeated_playerInfo_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PlayerInfo> playerInfo_ = new pbc::RepeatedField<global::PlaneWar.PlayerInfo>();
    /// <summary>
    ///玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PlayerInfo> PlayerInfo {
      get { return playerInfo_; }
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 3;
    private global::PlaneWar.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "piece_pay" field.</summary>
    public const int PiecePayFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_piecePay_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> piecePay_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PiecePay {
      get { return piecePay_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!betList_.Equals(other.betList_)) return false;
      if(!playerInfo_.Equals(other.playerInfo_)) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if(!piecePay_.Equals(other.piecePay_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= betList_.GetHashCode();
      hash ^= playerInfo_.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      hash ^= piecePay_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      betList_.WriteTo(output, _repeated_betList_codec);
      playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      piecePay_.WriteTo(output, _repeated_piecePay_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      betList_.WriteTo(ref output, _repeated_betList_codec);
      playerInfo_.WriteTo(ref output, _repeated_playerInfo_codec);
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      piecePay_.WriteTo(ref output, _repeated_piecePay_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += betList_.CalculateSize(_repeated_betList_codec);
      size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      size += piecePay_.CalculateSize(_repeated_piecePay_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      betList_.Add(other.betList_);
      playerInfo_.Add(other.playerInfo_);
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::PlaneWar.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      piecePay_.Add(other.piecePay_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            betList_.AddEntriesFrom(input, _repeated_betList_codec);
            break;
          }
          case 18: {
            playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              RoomInfo = new global::PlaneWar.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
          case 34:
          case 32: {
            piecePay_.AddEntriesFrom(input, _repeated_piecePay_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            betList_.AddEntriesFrom(ref input, _repeated_betList_codec);
            break;
          }
          case 18: {
            playerInfo_.AddEntriesFrom(ref input, _repeated_playerInfo_codec);
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              RoomInfo = new global::PlaneWar.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
          case 34:
          case 32: {
            piecePay_.AddEntriesFrom(ref input, _repeated_piecePay_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSLogin : pb::IMessage<CSLogin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSLogin> _parser = new pb::MessageParser<CSLogin>(() => new CSLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLogin(CSLogin other) : this() {
      playerId_ = other.playerId_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLogin Clone() {
      return new CSLogin(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLogin other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCLogin : pb::IMessage<SCLogin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCLogin> _parser = new pb::MessageParser<SCLogin>(() => new SCLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLogin(SCLogin other) : this() {
      sceneId_ = other.sceneId_;
      arenaID_ = other.arenaID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLogin Clone() {
      return new SCLogin(this);
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "arenaID" field.</summary>
    public const int ArenaIDFieldNumber = 2;
    private int arenaID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArenaID {
      get { return arenaID_; }
      set {
        arenaID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (ArenaID != other.ArenaID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (ArenaID != 0) hash ^= ArenaID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneId);
      }
      if (ArenaID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ArenaID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneId);
      }
      if (ArenaID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ArenaID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (ArenaID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArenaID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLogin other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.ArenaID != 0) {
        ArenaID = other.ArenaID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneId = input.ReadInt32();
            break;
          }
          case 16: {
            ArenaID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SceneId = input.ReadInt32();
            break;
          }
          case 16: {
            ArenaID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSLogout : pb::IMessage<CSLogout>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSLogout> _parser = new pb::MessageParser<CSLogout>(() => new CSLogout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLogout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLogout(CSLogout other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLogout Clone() {
      return new CSLogout(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLogout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLogout other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCLogout : pb::IMessage<SCLogout>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCLogout> _parser = new pb::MessageParser<SCLogout>(() => new SCLogout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLogout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLogout(SCLogout other) : this() {
      logoutType_ = other.logoutType_;
      chair_ = other.chair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLogout Clone() {
      return new SCLogout(this);
    }

    /// <summary>Field number for the "logoutType" field.</summary>
    public const int LogoutTypeFieldNumber = 1;
    private int logoutType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LogoutType {
      get { return logoutType_; }
      set {
        logoutType_ = value;
      }
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 2;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLogout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogoutType != other.LogoutType) return false;
      if (Chair != other.Chair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LogoutType != 0) hash ^= LogoutType.GetHashCode();
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LogoutType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LogoutType);
      }
      if (Chair != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LogoutType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LogoutType);
      }
      if (Chair != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LogoutType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LogoutType);
      }
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLogout other) {
      if (other == null) {
        return;
      }
      if (other.LogoutType != 0) {
        LogoutType = other.LogoutType;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LogoutType = input.ReadInt32();
            break;
          }
          case 16: {
            Chair = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LogoutType = input.ReadInt32();
            break;
          }
          case 16: {
            Chair = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommonPropInfo : pb::IMessage<CommonPropInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommonPropInfo> _parser = new pb::MessageParser<CommonPropInfo>(() => new CommonPropInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonPropInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonPropInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonPropInfo(CommonPropInfo other) : this() {
      propID_ = other.propID_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonPropInfo Clone() {
      return new CommonPropInfo(this);
    }

    /// <summary>Field number for the "propID" field.</summary>
    public const int PropIDFieldNumber = 1;
    private int propID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropID {
      get { return propID_; }
      set {
        propID_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonPropInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonPropInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropID != other.PropID) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropID != 0) hash ^= PropID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PropID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PropID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonPropInfo other) {
      if (other == null) {
        return;
      }
      if (other.PropID != 0) {
        PropID = other.PropID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Pos : pb::IMessage<Pos>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Pos> _parser = new pb::MessageParser<Pos>(() => new Pos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pos(Pos other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pos Clone() {
      return new Pos(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pos other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BuffInfo : pb::IMessage<BuffInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BuffInfo> _parser = new pb::MessageParser<BuffInfo>(() => new BuffInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuffInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffInfo(BuffInfo other) : this() {
      buffUID_ = other.buffUID_;
      num_ = other.num_;
      ratio_ = other.ratio_;
      isCrit_ = other.isCrit_;
      compose_ = other.compose_.Clone();
      desc_ = other.desc_.Clone();
      speedUpRatio_ = other.speedUpRatio_;
      originUID_ = other.originUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuffInfo Clone() {
      return new BuffInfo(this);
    }

    /// <summary>Field number for the "buffUID" field.</summary>
    public const int BuffUIDFieldNumber = 1;
    private int buffUID_;
    /// <summary>
    ///打死鱼ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffUID {
      get { return buffUID_; }
      set {
        buffUID_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///子弹个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 3;
    private int ratio_;
    /// <summary>
    ///子弹倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "isCrit" field.</summary>
    public const int IsCritFieldNumber = 4;
    private bool isCrit_;
    /// <summary>
    ///是否暴击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCrit {
      get { return isCrit_; }
      set {
        isCrit_ = value;
      }
    }

    /// <summary>Field number for the "compose" field.</summary>
    public const int ComposeFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_compose_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> compose_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///1:分裂 2:连电 3:暴击 4:加速
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Compose {
      get { return compose_; }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_desc_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> desc_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Desc {
      get { return desc_; }
    }

    /// <summary>Field number for the "speedUpRatio" field.</summary>
    public const int SpeedUpRatioFieldNumber = 7;
    private int speedUpRatio_;
    /// <summary>
    ///加速
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedUpRatio {
      get { return speedUpRatio_; }
      set {
        speedUpRatio_ = value;
      }
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 8;
    private int originUID_;
    /// <summary>
    ///打死鱼ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuffInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuffInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuffUID != other.BuffUID) return false;
      if (Num != other.Num) return false;
      if (Ratio != other.Ratio) return false;
      if (IsCrit != other.IsCrit) return false;
      if(!compose_.Equals(other.compose_)) return false;
      if(!desc_.Equals(other.desc_)) return false;
      if (SpeedUpRatio != other.SpeedUpRatio) return false;
      if (OriginUID != other.OriginUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuffUID != 0) hash ^= BuffUID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (IsCrit != false) hash ^= IsCrit.GetHashCode();
      hash ^= compose_.GetHashCode();
      hash ^= desc_.GetHashCode();
      if (SpeedUpRatio != 0) hash ^= SpeedUpRatio.GetHashCode();
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BuffUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffUID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (IsCrit != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsCrit);
      }
      compose_.WriteTo(output, _repeated_compose_codec);
      desc_.WriteTo(output, _repeated_desc_codec);
      if (SpeedUpRatio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SpeedUpRatio);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OriginUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BuffUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffUID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (IsCrit != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsCrit);
      }
      compose_.WriteTo(ref output, _repeated_compose_codec);
      desc_.WriteTo(ref output, _repeated_desc_codec);
      if (SpeedUpRatio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SpeedUpRatio);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OriginUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffUID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (IsCrit != false) {
        size += 1 + 1;
      }
      size += compose_.CalculateSize(_repeated_compose_codec);
      size += desc_.CalculateSize(_repeated_desc_codec);
      if (SpeedUpRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedUpRatio);
      }
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuffInfo other) {
      if (other == null) {
        return;
      }
      if (other.BuffUID != 0) {
        BuffUID = other.BuffUID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.IsCrit != false) {
        IsCrit = other.IsCrit;
      }
      compose_.Add(other.compose_);
      desc_.Add(other.desc_);
      if (other.SpeedUpRatio != 0) {
        SpeedUpRatio = other.SpeedUpRatio;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuffUID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            IsCrit = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            compose_.AddEntriesFrom(input, _repeated_compose_codec);
            break;
          }
          case 50:
          case 48: {
            desc_.AddEntriesFrom(input, _repeated_desc_codec);
            break;
          }
          case 56: {
            SpeedUpRatio = input.ReadInt32();
            break;
          }
          case 64: {
            OriginUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BuffUID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            IsCrit = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            compose_.AddEntriesFrom(ref input, _repeated_compose_codec);
            break;
          }
          case 50:
          case 48: {
            desc_.AddEntriesFrom(ref input, _repeated_desc_codec);
            break;
          }
          case 56: {
            SpeedUpRatio = input.ReadInt32();
            break;
          }
          case 64: {
            OriginUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BlackHoleInfo : pb::IMessage<BlackHoleInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BlackHoleInfo> _parser = new pb::MessageParser<BlackHoleInfo>(() => new BlackHoleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlackHoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackHoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackHoleInfo(BlackHoleInfo other) : this() {
      uid_ = other.uid_;
      num_ = other.num_;
      ratio_ = other.ratio_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      isCrit_ = other.isCrit_;
      monsterList_ = other.monsterList_.Clone();
      originUID_ = other.originUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackHoleInfo Clone() {
      return new BlackHoleInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 3;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private global::PlaneWar.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "isCrit" field.</summary>
    public const int IsCritFieldNumber = 5;
    private bool isCrit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCrit {
      get { return isCrit_; }
      set {
        isCrit_ = value;
      }
    }

    /// <summary>Field number for the "monsterList" field.</summary>
    public const int MonsterListFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_monsterList_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> monsterList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MonsterList {
      get { return monsterList_; }
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 7;
    private int originUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlackHoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlackHoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Num != other.Num) return false;
      if (Ratio != other.Ratio) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (IsCrit != other.IsCrit) return false;
      if(!monsterList_.Equals(other.monsterList_)) return false;
      if (OriginUID != other.OriginUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (IsCrit != false) hash ^= IsCrit.GetHashCode();
      hash ^= monsterList_.GetHashCode();
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (IsCrit != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsCrit);
      }
      monsterList_.WriteTo(output, _repeated_monsterList_codec);
      if (OriginUID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OriginUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (pos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pos);
      }
      if (IsCrit != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsCrit);
      }
      monsterList_.WriteTo(ref output, _repeated_monsterList_codec);
      if (OriginUID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OriginUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (IsCrit != false) {
        size += 1 + 1;
      }
      size += monsterList_.CalculateSize(_repeated_monsterList_codec);
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlackHoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::PlaneWar.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.IsCrit != false) {
        IsCrit = other.IsCrit;
      }
      monsterList_.Add(other.monsterList_);
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 34: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 40: {
            IsCrit = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            monsterList_.AddEntriesFrom(input, _repeated_monsterList_codec);
            break;
          }
          case 56: {
            OriginUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 34: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 40: {
            IsCrit = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            monsterList_.AddEntriesFrom(ref input, _repeated_monsterList_codec);
            break;
          }
          case 56: {
            OriginUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FormInfo : pb::IMessage<FormInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FormInfo> _parser = new pb::MessageParser<FormInfo>(() => new FormInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormInfo(FormInfo other) : this() {
      form_ = other.form_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormInfo Clone() {
      return new FormInfo(this);
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 1;
    private int form_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::PlaneWar.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FormInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FormInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Form != other.Form) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Form != 0) hash ^= Form.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Form != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Form);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Form != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Form);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Form != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Form);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FormInfo other) {
      if (other == null) {
        return;
      }
      if (other.Form != 0) {
        Form = other.Form;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::PlaneWar.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Form = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Form = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LockInfo : pb::IMessage<LockInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LockInfo> _parser = new pb::MessageParser<LockInfo>(() => new LockInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInfo(LockInfo other) : this() {
      lockUID_ = other.lockUID_;
      colliderIndex_ = other.colliderIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInfo Clone() {
      return new LockInfo(this);
    }

    /// <summary>Field number for the "lockUID" field.</summary>
    public const int LockUIDFieldNumber = 1;
    private int lockUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockUID {
      get { return lockUID_; }
      set {
        lockUID_ = value;
      }
    }

    /// <summary>Field number for the "colliderIndex" field.</summary>
    public const int ColliderIndexFieldNumber = 2;
    private int colliderIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColliderIndex {
      get { return colliderIndex_; }
      set {
        colliderIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LockUID != other.LockUID) return false;
      if (ColliderIndex != other.ColliderIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LockUID != 0) hash ^= LockUID.GetHashCode();
      if (ColliderIndex != 0) hash ^= ColliderIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LockUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LockUID);
      }
      if (ColliderIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColliderIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LockUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LockUID);
      }
      if (ColliderIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColliderIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LockUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockUID);
      }
      if (ColliderIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColliderIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockInfo other) {
      if (other == null) {
        return;
      }
      if (other.LockUID != 0) {
        LockUID = other.LockUID;
      }
      if (other.ColliderIndex != 0) {
        ColliderIndex = other.ColliderIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LockUID = input.ReadInt32();
            break;
          }
          case 16: {
            ColliderIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LockUID = input.ReadInt32();
            break;
          }
          case 16: {
            ColliderIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HitMode : pb::IMessage<HitMode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HitMode> _parser = new pb::MessageParser<HitMode>(() => new HitMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitMode(HitMode other) : this() {
      hitType_ = other.hitType_;
      hitDirection_ = other.hitDirection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitMode Clone() {
      return new HitMode(this);
    }

    /// <summary>Field number for the "hitType" field.</summary>
    public const int HitTypeFieldNumber = 1;
    private int hitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitType {
      get { return hitType_; }
      set {
        hitType_ = value;
      }
    }

    /// <summary>Field number for the "hitDirection" field.</summary>
    public const int HitDirectionFieldNumber = 2;
    private int hitDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitDirection {
      get { return hitDirection_; }
      set {
        hitDirection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HitType != other.HitType) return false;
      if (HitDirection != other.HitDirection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HitType != 0) hash ^= HitType.GetHashCode();
      if (HitDirection != 0) hash ^= HitDirection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HitType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitType);
      }
      if (HitDirection != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HitType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HitType);
      }
      if (HitDirection != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitType);
      }
      if (HitDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitDirection);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitMode other) {
      if (other == null) {
        return;
      }
      if (other.HitType != 0) {
        HitType = other.HitType;
      }
      if (other.HitDirection != 0) {
        HitDirection = other.HitDirection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HitType = input.ReadInt32();
            break;
          }
          case 16: {
            HitDirection = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HitType = input.ReadInt32();
            break;
          }
          case 16: {
            HitDirection = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WeaponState : pb::IMessage<WeaponState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WeaponState> _parser = new pb::MessageParser<WeaponState>(() => new WeaponState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponState(WeaponState other) : this() {
      step_ = other.step_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      duration_ = other.duration_;
      moveMode_ = other.moveMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponState Clone() {
      return new WeaponState(this);
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 1;
    private int step_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::PlaneWar.Pos position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Pos Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "moveMode" field.</summary>
    public const int MoveModeFieldNumber = 4;
    private int moveMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveMode {
      get { return moveMode_; }
      set {
        moveMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Step != other.Step) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Duration != other.Duration) return false;
      if (MoveMode != other.MoveMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Step != 0) hash ^= Step.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (MoveMode != 0) hash ^= MoveMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Step != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Step);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (Duration != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Duration);
      }
      if (MoveMode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MoveMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Step != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Step);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (Duration != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Duration);
      }
      if (MoveMode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MoveMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (MoveMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponState other) {
      if (other == null) {
        return;
      }
      if (other.Step != 0) {
        Step = other.Step;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::PlaneWar.Pos();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.MoveMode != 0) {
        MoveMode = other.MoveMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Step = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Position);
            break;
          }
          case 24: {
            Duration = input.ReadInt32();
            break;
          }
          case 32: {
            MoveMode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Step = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Position);
            break;
          }
          case 24: {
            Duration = input.ReadInt32();
            break;
          }
          case 32: {
            MoveMode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SettleInfo : pb::IMessage<SettleInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SettleInfo> _parser = new pb::MessageParser<SettleInfo>(() => new SettleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleInfo(SettleInfo other) : this() {
      originUID_ = other.originUID_;
      bulletType_ = other.bulletType_;
      reward_ = other.reward_;
      weaponID_ = other.weaponID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleInfo Clone() {
      return new SettleInfo(this);
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 1;
    private int originUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 2;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "weaponID" field.</summary>
    public const int WeaponIDFieldNumber = 4;
    private int weaponID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponID {
      get { return weaponID_; }
      set {
        weaponID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginUID != other.OriginUID) return false;
      if (BulletType != other.BulletType) return false;
      if (Reward != other.Reward) return false;
      if (WeaponID != other.WeaponID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (WeaponID != 0) hash ^= WeaponID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OriginUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OriginUID);
      }
      if (BulletType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletType);
      }
      if (Reward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reward);
      }
      if (WeaponID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WeaponID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OriginUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OriginUID);
      }
      if (BulletType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletType);
      }
      if (Reward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reward);
      }
      if (WeaponID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WeaponID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (WeaponID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettleInfo other) {
      if (other == null) {
        return;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      if (other.WeaponID != 0) {
        WeaponID = other.WeaponID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 16: {
            BulletType = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt32();
            break;
          }
          case 32: {
            WeaponID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 16: {
            BulletType = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt32();
            break;
          }
          case 32: {
            WeaponID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GunInfo : pb::IMessage<GunInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GunInfo> _parser = new pb::MessageParser<GunInfo>(() => new GunInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GunInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunInfo(GunInfo other) : this() {
      sourceUID_ = other.sourceUID_;
      originUID_ = other.originUID_;
      ratio_ = other.ratio_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunInfo Clone() {
      return new GunInfo(this);
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 1;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 2;
    private int originUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 3;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 4;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GunInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GunInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceUID != other.SourceUID) return false;
      if (OriginUID != other.OriginUID) return false;
      if (Ratio != other.Ratio) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (Num != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (Num != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GunInfo other) {
      if (other == null) {
        return;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 16: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 16: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FlameInfo : pb::IMessage<FlameInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlameInfo> _parser = new pb::MessageParser<FlameInfo>(() => new FlameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlameInfo(FlameInfo other) : this() {
      originUID_ = other.originUID_;
      ratio_ = other.ratio_;
      sourceUIDList_ = other.sourceUIDList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlameInfo Clone() {
      return new FlameInfo(this);
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 1;
    private int originUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 2;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "sourceUIDList" field.</summary>
    public const int SourceUIDListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_sourceUIDList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> sourceUIDList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SourceUIDList {
      get { return sourceUIDList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginUID != other.OriginUID) return false;
      if (Ratio != other.Ratio) return false;
      if(!sourceUIDList_.Equals(other.sourceUIDList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      hash ^= sourceUIDList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OriginUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OriginUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      sourceUIDList_.WriteTo(output, _repeated_sourceUIDList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OriginUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OriginUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      sourceUIDList_.WriteTo(ref output, _repeated_sourceUIDList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      size += sourceUIDList_.CalculateSize(_repeated_sourceUIDList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlameInfo other) {
      if (other == null) {
        return;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      sourceUIDList_.Add(other.sourceUIDList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            sourceUIDList_.AddEntriesFrom(input, _repeated_sourceUIDList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            sourceUIDList_.AddEntriesFrom(ref input, _repeated_sourceUIDList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BeeInfo : pb::IMessage<BeeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BeeInfo> _parser = new pb::MessageParser<BeeInfo>(() => new BeeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeeInfo(BeeInfo other) : this() {
      ratioList_ = other.ratioList_.Clone();
      totalRatio_ = other.totalRatio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeeInfo Clone() {
      return new BeeInfo(this);
    }

    /// <summary>Field number for the "ratioList" field.</summary>
    public const int RatioListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ratioList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ratioList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RatioList {
      get { return ratioList_; }
    }

    /// <summary>Field number for the "totalRatio" field.</summary>
    public const int TotalRatioFieldNumber = 2;
    private int totalRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRatio {
      get { return totalRatio_; }
      set {
        totalRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ratioList_.Equals(other.ratioList_)) return false;
      if (TotalRatio != other.TotalRatio) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ratioList_.GetHashCode();
      if (TotalRatio != 0) hash ^= TotalRatio.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ratioList_.WriteTo(output, _repeated_ratioList_codec);
      if (TotalRatio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ratioList_.WriteTo(ref output, _repeated_ratioList_codec);
      if (TotalRatio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ratioList_.CalculateSize(_repeated_ratioList_codec);
      if (TotalRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRatio);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeeInfo other) {
      if (other == null) {
        return;
      }
      ratioList_.Add(other.ratioList_);
      if (other.TotalRatio != 0) {
        TotalRatio = other.TotalRatio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            ratioList_.AddEntriesFrom(input, _repeated_ratioList_codec);
            break;
          }
          case 16: {
            TotalRatio = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            ratioList_.AddEntriesFrom(ref input, _repeated_ratioList_codec);
            break;
          }
          case 16: {
            TotalRatio = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WeaponInfo : pb::IMessage<WeaponInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WeaponInfo> _parser = new pb::MessageParser<WeaponInfo>(() => new WeaponInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponInfo(WeaponInfo other) : this() {
      weaponID_ = other.weaponID_;
      sourceUID_ = other.sourceUID_;
      originUID_ = other.originUID_;
      ratio_ = other.ratio_;
      num_ = other.num_;
      weaponName_ = other.weaponName_;
      weaponRatio_ = other.weaponRatio_;
      weaponState_ = other.weaponState_ != null ? other.weaponState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponInfo Clone() {
      return new WeaponInfo(this);
    }

    /// <summary>Field number for the "weaponID" field.</summary>
    public const int WeaponIDFieldNumber = 1;
    private int weaponID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponID {
      get { return weaponID_; }
      set {
        weaponID_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 2;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 3;
    private int originUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 4;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 5;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "weaponName" field.</summary>
    public const int WeaponNameFieldNumber = 6;
    private string weaponName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponName {
      get { return weaponName_; }
      set {
        weaponName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weaponRatio" field.</summary>
    public const int WeaponRatioFieldNumber = 7;
    private int weaponRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponRatio {
      get { return weaponRatio_; }
      set {
        weaponRatio_ = value;
      }
    }

    /// <summary>Field number for the "weaponState" field.</summary>
    public const int WeaponStateFieldNumber = 8;
    private global::PlaneWar.WeaponState weaponState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WeaponState WeaponState {
      get { return weaponState_; }
      set {
        weaponState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeaponID != other.WeaponID) return false;
      if (SourceUID != other.SourceUID) return false;
      if (OriginUID != other.OriginUID) return false;
      if (Ratio != other.Ratio) return false;
      if (Num != other.Num) return false;
      if (WeaponName != other.WeaponName) return false;
      if (WeaponRatio != other.WeaponRatio) return false;
      if (!object.Equals(WeaponState, other.WeaponState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeaponID != 0) hash ^= WeaponID.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (WeaponName.Length != 0) hash ^= WeaponName.GetHashCode();
      if (WeaponRatio != 0) hash ^= WeaponRatio.GetHashCode();
      if (weaponState_ != null) hash ^= WeaponState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WeaponID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WeaponID);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceUID);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ratio);
      }
      if (Num != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Num);
      }
      if (WeaponName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WeaponName);
      }
      if (WeaponRatio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WeaponRatio);
      }
      if (weaponState_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(WeaponState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WeaponID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WeaponID);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceUID);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ratio);
      }
      if (Num != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Num);
      }
      if (WeaponName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(WeaponName);
      }
      if (WeaponRatio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WeaponRatio);
      }
      if (weaponState_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(WeaponState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeaponID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponID);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (WeaponName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WeaponName);
      }
      if (WeaponRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponRatio);
      }
      if (weaponState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeaponState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponInfo other) {
      if (other == null) {
        return;
      }
      if (other.WeaponID != 0) {
        WeaponID = other.WeaponID;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.WeaponName.Length != 0) {
        WeaponName = other.WeaponName;
      }
      if (other.WeaponRatio != 0) {
        WeaponRatio = other.WeaponRatio;
      }
      if (other.weaponState_ != null) {
        if (weaponState_ == null) {
          WeaponState = new global::PlaneWar.WeaponState();
        }
        WeaponState.MergeFrom(other.WeaponState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WeaponID = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 24: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 32: {
            Ratio = input.ReadInt32();
            break;
          }
          case 40: {
            Num = input.ReadInt32();
            break;
          }
          case 50: {
            WeaponName = input.ReadString();
            break;
          }
          case 56: {
            WeaponRatio = input.ReadInt32();
            break;
          }
          case 66: {
            if (weaponState_ == null) {
              WeaponState = new global::PlaneWar.WeaponState();
            }
            input.ReadMessage(WeaponState);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WeaponID = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 24: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 32: {
            Ratio = input.ReadInt32();
            break;
          }
          case 40: {
            Num = input.ReadInt32();
            break;
          }
          case 50: {
            WeaponName = input.ReadString();
            break;
          }
          case 56: {
            WeaponRatio = input.ReadInt32();
            break;
          }
          case 66: {
            if (weaponState_ == null) {
              WeaponState = new global::PlaneWar.WeaponState();
            }
            input.ReadMessage(WeaponState);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SpecEffect : pb::IMessage<SpecEffect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpecEffect> _parser = new pb::MessageParser<SpecEffect>(() => new SpecEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecEffect(SpecEffect other) : this() {
      costMoney_ = other.costMoney_;
      earnMoney_ = other.earnMoney_;
      violence_ = other.violence_;
      duration_ = other.duration_;
      maxDuration_ = other.maxDuration_;
      sourceType_ = other.sourceType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecEffect Clone() {
      return new SpecEffect(this);
    }

    /// <summary>Field number for the "costMoney" field.</summary>
    public const int CostMoneyFieldNumber = 1;
    private int costMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostMoney {
      get { return costMoney_; }
      set {
        costMoney_ = value;
      }
    }

    /// <summary>Field number for the "earnMoney" field.</summary>
    public const int EarnMoneyFieldNumber = 2;
    private int earnMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EarnMoney {
      get { return earnMoney_; }
      set {
        earnMoney_ = value;
      }
    }

    /// <summary>Field number for the "violence" field.</summary>
    public const int ViolenceFieldNumber = 3;
    private float violence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Violence {
      get { return violence_; }
      set {
        violence_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "maxDuration" field.</summary>
    public const int MaxDurationFieldNumber = 5;
    private int maxDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDuration {
      get { return maxDuration_; }
      set {
        maxDuration_ = value;
      }
    }

    /// <summary>Field number for the "sourceType" field.</summary>
    public const int SourceTypeFieldNumber = 6;
    private int sourceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceType {
      get { return sourceType_; }
      set {
        sourceType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CostMoney != other.CostMoney) return false;
      if (EarnMoney != other.EarnMoney) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Violence, other.Violence)) return false;
      if (Duration != other.Duration) return false;
      if (MaxDuration != other.MaxDuration) return false;
      if (SourceType != other.SourceType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CostMoney != 0) hash ^= CostMoney.GetHashCode();
      if (EarnMoney != 0) hash ^= EarnMoney.GetHashCode();
      if (Violence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Violence);
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (MaxDuration != 0) hash ^= MaxDuration.GetHashCode();
      if (SourceType != 0) hash ^= SourceType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CostMoney != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CostMoney);
      }
      if (EarnMoney != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EarnMoney);
      }
      if (Violence != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Violence);
      }
      if (Duration != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Duration);
      }
      if (MaxDuration != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxDuration);
      }
      if (SourceType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SourceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CostMoney != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CostMoney);
      }
      if (EarnMoney != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EarnMoney);
      }
      if (Violence != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Violence);
      }
      if (Duration != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Duration);
      }
      if (MaxDuration != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxDuration);
      }
      if (SourceType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SourceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CostMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostMoney);
      }
      if (EarnMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EarnMoney);
      }
      if (Violence != 0F) {
        size += 1 + 4;
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (MaxDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDuration);
      }
      if (SourceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecEffect other) {
      if (other == null) {
        return;
      }
      if (other.CostMoney != 0) {
        CostMoney = other.CostMoney;
      }
      if (other.EarnMoney != 0) {
        EarnMoney = other.EarnMoney;
      }
      if (other.Violence != 0F) {
        Violence = other.Violence;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.MaxDuration != 0) {
        MaxDuration = other.MaxDuration;
      }
      if (other.SourceType != 0) {
        SourceType = other.SourceType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CostMoney = input.ReadInt32();
            break;
          }
          case 16: {
            EarnMoney = input.ReadInt32();
            break;
          }
          case 29: {
            Violence = input.ReadFloat();
            break;
          }
          case 32: {
            Duration = input.ReadInt32();
            break;
          }
          case 40: {
            MaxDuration = input.ReadInt32();
            break;
          }
          case 48: {
            SourceType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CostMoney = input.ReadInt32();
            break;
          }
          case 16: {
            EarnMoney = input.ReadInt32();
            break;
          }
          case 29: {
            Violence = input.ReadFloat();
            break;
          }
          case 32: {
            Duration = input.ReadInt32();
            break;
          }
          case 40: {
            MaxDuration = input.ReadInt32();
            break;
          }
          case 48: {
            SourceType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Dice : pb::IMessage<Dice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Dice> _parser = new pb::MessageParser<Dice>(() => new Dice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dice(Dice other) : this() {
      ratio_ = other.ratio_;
      tp_ = other.tp_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dice Clone() {
      return new Dice(this);
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 1;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "tp" field.</summary>
    public const int TpFieldNumber = 2;
    private int tp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tp {
      get { return tp_; }
      set {
        tp_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::PlaneWar.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ratio != other.Ratio) return false;
      if (Tp != other.Tp) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (Tp != 0) hash ^= Tp.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ratio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ratio);
      }
      if (Tp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tp);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ratio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ratio);
      }
      if (Tp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tp);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (Tp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tp);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dice other) {
      if (other == null) {
        return;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.Tp != 0) {
        Tp = other.Tp;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::PlaneWar.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ratio = input.ReadInt32();
            break;
          }
          case 16: {
            Tp = input.ReadInt32();
            break;
          }
          case 26: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ratio = input.ReadInt32();
            break;
          }
          case 16: {
            Tp = input.ReadInt32();
            break;
          }
          case 26: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DiceInfo : pb::IMessage<DiceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiceInfo> _parser = new pb::MessageParser<DiceInfo>(() => new DiceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceInfo(DiceInfo other) : this() {
      mode_ = other.mode_;
      mul_ = other.mul_;
      diceList_ = other.diceList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceInfo Clone() {
      return new DiceInfo(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private int mode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "mul" field.</summary>
    public const int MulFieldNumber = 2;
    private int mul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mul {
      get { return mul_; }
      set {
        mul_ = value;
      }
    }

    /// <summary>Field number for the "diceList" field.</summary>
    public const int DiceListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PlaneWar.Dice> _repeated_diceList_codec
        = pb::FieldCodec.ForMessage(26, global::PlaneWar.Dice.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.Dice> diceList_ = new pbc::RepeatedField<global::PlaneWar.Dice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.Dice> DiceList {
      get { return diceList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (Mul != other.Mul) return false;
      if(!diceList_.Equals(other.diceList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (Mul != 0) hash ^= Mul.GetHashCode();
      hash ^= diceList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mode);
      }
      if (Mul != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mul);
      }
      diceList_.WriteTo(output, _repeated_diceList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mode);
      }
      if (Mul != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mul);
      }
      diceList_.WriteTo(ref output, _repeated_diceList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      if (Mul != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mul);
      }
      size += diceList_.CalculateSize(_repeated_diceList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.Mul != 0) {
        Mul = other.Mul;
      }
      diceList_.Add(other.diceList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mode = input.ReadInt32();
            break;
          }
          case 16: {
            Mul = input.ReadInt32();
            break;
          }
          case 26: {
            diceList_.AddEntriesFrom(input, _repeated_diceList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mode = input.ReadInt32();
            break;
          }
          case 16: {
            Mul = input.ReadInt32();
            break;
          }
          case 26: {
            diceList_.AddEntriesFrom(ref input, _repeated_diceList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StateInfo : pb::IMessage<StateInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StateInfo> _parser = new pb::MessageParser<StateInfo>(() => new StateInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfo(StateInfo other) : this() {
      isBack_ = other.isBack_;
      buffList_ = other.buffList_.Clone();
      blackHoleList_ = other.blackHoleList_.Clone();
      formInfo_ = other.formInfo_ != null ? other.formInfo_.Clone() : null;
      lockInfo_ = other.lockInfo_ != null ? other.lockInfo_.Clone() : null;
      weaponInfo_ = other.weaponInfo_ != null ? other.weaponInfo_.Clone() : null;
      propWeaponInfo_ = other.propWeaponInfo_ != null ? other.propWeaponInfo_.Clone() : null;
      settleList_ = other.settleList_.Clone();
      gunInfo_ = other.gunInfo_ != null ? other.gunInfo_.Clone() : null;
      flameInfo_ = other.flameInfo_ != null ? other.flameInfo_.Clone() : null;
      specEffect_ = other.specEffect_ != null ? other.specEffect_.Clone() : null;
      extraMul_ = other.extraMul_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateInfo Clone() {
      return new StateInfo(this);
    }

    /// <summary>Field number for the "isBack" field.</summary>
    public const int IsBackFieldNumber = 1;
    private bool isBack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBack {
      get { return isBack_; }
      set {
        isBack_ = value;
      }
    }

    /// <summary>Field number for the "buffList" field.</summary>
    public const int BuffListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.BuffInfo> _repeated_buffList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.BuffInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.BuffInfo> buffList_ = new pbc::RepeatedField<global::PlaneWar.BuffInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.BuffInfo> BuffList {
      get { return buffList_; }
    }

    /// <summary>Field number for the "blackHoleList" field.</summary>
    public const int BlackHoleListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PlaneWar.BlackHoleInfo> _repeated_blackHoleList_codec
        = pb::FieldCodec.ForMessage(26, global::PlaneWar.BlackHoleInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.BlackHoleInfo> blackHoleList_ = new pbc::RepeatedField<global::PlaneWar.BlackHoleInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.BlackHoleInfo> BlackHoleList {
      get { return blackHoleList_; }
    }

    /// <summary>Field number for the "formInfo" field.</summary>
    public const int FormInfoFieldNumber = 4;
    private global::PlaneWar.FormInfo formInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.FormInfo FormInfo {
      get { return formInfo_; }
      set {
        formInfo_ = value;
      }
    }

    /// <summary>Field number for the "lockInfo" field.</summary>
    public const int LockInfoFieldNumber = 5;
    private global::PlaneWar.LockInfo lockInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.LockInfo LockInfo {
      get { return lockInfo_; }
      set {
        lockInfo_ = value;
      }
    }

    /// <summary>Field number for the "weaponInfo" field.</summary>
    public const int WeaponInfoFieldNumber = 6;
    private global::PlaneWar.WeaponInfo weaponInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WeaponInfo WeaponInfo {
      get { return weaponInfo_; }
      set {
        weaponInfo_ = value;
      }
    }

    /// <summary>Field number for the "propWeaponInfo" field.</summary>
    public const int PropWeaponInfoFieldNumber = 7;
    private global::PlaneWar.WeaponInfo propWeaponInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WeaponInfo PropWeaponInfo {
      get { return propWeaponInfo_; }
      set {
        propWeaponInfo_ = value;
      }
    }

    /// <summary>Field number for the "settleList" field.</summary>
    public const int SettleListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::PlaneWar.SettleInfo> _repeated_settleList_codec
        = pb::FieldCodec.ForMessage(66, global::PlaneWar.SettleInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.SettleInfo> settleList_ = new pbc::RepeatedField<global::PlaneWar.SettleInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.SettleInfo> SettleList {
      get { return settleList_; }
    }

    /// <summary>Field number for the "gunInfo" field.</summary>
    public const int GunInfoFieldNumber = 9;
    private global::PlaneWar.GunInfo gunInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GunInfo GunInfo {
      get { return gunInfo_; }
      set {
        gunInfo_ = value;
      }
    }

    /// <summary>Field number for the "flameInfo" field.</summary>
    public const int FlameInfoFieldNumber = 10;
    private global::PlaneWar.FlameInfo flameInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.FlameInfo FlameInfo {
      get { return flameInfo_; }
      set {
        flameInfo_ = value;
      }
    }

    /// <summary>Field number for the "specEffect" field.</summary>
    public const int SpecEffectFieldNumber = 11;
    private global::PlaneWar.SpecEffect specEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.SpecEffect SpecEffect {
      get { return specEffect_; }
      set {
        specEffect_ = value;
      }
    }

    /// <summary>Field number for the "extra_mul" field.</summary>
    public const int ExtraMulFieldNumber = 12;
    private bool extraMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExtraMul {
      get { return extraMul_; }
      set {
        extraMul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsBack != other.IsBack) return false;
      if(!buffList_.Equals(other.buffList_)) return false;
      if(!blackHoleList_.Equals(other.blackHoleList_)) return false;
      if (!object.Equals(FormInfo, other.FormInfo)) return false;
      if (!object.Equals(LockInfo, other.LockInfo)) return false;
      if (!object.Equals(WeaponInfo, other.WeaponInfo)) return false;
      if (!object.Equals(PropWeaponInfo, other.PropWeaponInfo)) return false;
      if(!settleList_.Equals(other.settleList_)) return false;
      if (!object.Equals(GunInfo, other.GunInfo)) return false;
      if (!object.Equals(FlameInfo, other.FlameInfo)) return false;
      if (!object.Equals(SpecEffect, other.SpecEffect)) return false;
      if (ExtraMul != other.ExtraMul) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsBack != false) hash ^= IsBack.GetHashCode();
      hash ^= buffList_.GetHashCode();
      hash ^= blackHoleList_.GetHashCode();
      if (formInfo_ != null) hash ^= FormInfo.GetHashCode();
      if (lockInfo_ != null) hash ^= LockInfo.GetHashCode();
      if (weaponInfo_ != null) hash ^= WeaponInfo.GetHashCode();
      if (propWeaponInfo_ != null) hash ^= PropWeaponInfo.GetHashCode();
      hash ^= settleList_.GetHashCode();
      if (gunInfo_ != null) hash ^= GunInfo.GetHashCode();
      if (flameInfo_ != null) hash ^= FlameInfo.GetHashCode();
      if (specEffect_ != null) hash ^= SpecEffect.GetHashCode();
      if (ExtraMul != false) hash ^= ExtraMul.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsBack != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBack);
      }
      buffList_.WriteTo(output, _repeated_buffList_codec);
      blackHoleList_.WriteTo(output, _repeated_blackHoleList_codec);
      if (formInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FormInfo);
      }
      if (lockInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LockInfo);
      }
      if (weaponInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WeaponInfo);
      }
      if (propWeaponInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PropWeaponInfo);
      }
      settleList_.WriteTo(output, _repeated_settleList_codec);
      if (gunInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(GunInfo);
      }
      if (flameInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(FlameInfo);
      }
      if (specEffect_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SpecEffect);
      }
      if (ExtraMul != false) {
        output.WriteRawTag(96);
        output.WriteBool(ExtraMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsBack != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBack);
      }
      buffList_.WriteTo(ref output, _repeated_buffList_codec);
      blackHoleList_.WriteTo(ref output, _repeated_blackHoleList_codec);
      if (formInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FormInfo);
      }
      if (lockInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LockInfo);
      }
      if (weaponInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WeaponInfo);
      }
      if (propWeaponInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PropWeaponInfo);
      }
      settleList_.WriteTo(ref output, _repeated_settleList_codec);
      if (gunInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(GunInfo);
      }
      if (flameInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(FlameInfo);
      }
      if (specEffect_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SpecEffect);
      }
      if (ExtraMul != false) {
        output.WriteRawTag(96);
        output.WriteBool(ExtraMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBack != false) {
        size += 1 + 1;
      }
      size += buffList_.CalculateSize(_repeated_buffList_codec);
      size += blackHoleList_.CalculateSize(_repeated_blackHoleList_codec);
      if (formInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FormInfo);
      }
      if (lockInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockInfo);
      }
      if (weaponInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeaponInfo);
      }
      if (propWeaponInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropWeaponInfo);
      }
      size += settleList_.CalculateSize(_repeated_settleList_codec);
      if (gunInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GunInfo);
      }
      if (flameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FlameInfo);
      }
      if (specEffect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpecEffect);
      }
      if (ExtraMul != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsBack != false) {
        IsBack = other.IsBack;
      }
      buffList_.Add(other.buffList_);
      blackHoleList_.Add(other.blackHoleList_);
      if (other.formInfo_ != null) {
        if (formInfo_ == null) {
          FormInfo = new global::PlaneWar.FormInfo();
        }
        FormInfo.MergeFrom(other.FormInfo);
      }
      if (other.lockInfo_ != null) {
        if (lockInfo_ == null) {
          LockInfo = new global::PlaneWar.LockInfo();
        }
        LockInfo.MergeFrom(other.LockInfo);
      }
      if (other.weaponInfo_ != null) {
        if (weaponInfo_ == null) {
          WeaponInfo = new global::PlaneWar.WeaponInfo();
        }
        WeaponInfo.MergeFrom(other.WeaponInfo);
      }
      if (other.propWeaponInfo_ != null) {
        if (propWeaponInfo_ == null) {
          PropWeaponInfo = new global::PlaneWar.WeaponInfo();
        }
        PropWeaponInfo.MergeFrom(other.PropWeaponInfo);
      }
      settleList_.Add(other.settleList_);
      if (other.gunInfo_ != null) {
        if (gunInfo_ == null) {
          GunInfo = new global::PlaneWar.GunInfo();
        }
        GunInfo.MergeFrom(other.GunInfo);
      }
      if (other.flameInfo_ != null) {
        if (flameInfo_ == null) {
          FlameInfo = new global::PlaneWar.FlameInfo();
        }
        FlameInfo.MergeFrom(other.FlameInfo);
      }
      if (other.specEffect_ != null) {
        if (specEffect_ == null) {
          SpecEffect = new global::PlaneWar.SpecEffect();
        }
        SpecEffect.MergeFrom(other.SpecEffect);
      }
      if (other.ExtraMul != false) {
        ExtraMul = other.ExtraMul;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsBack = input.ReadBool();
            break;
          }
          case 18: {
            buffList_.AddEntriesFrom(input, _repeated_buffList_codec);
            break;
          }
          case 26: {
            blackHoleList_.AddEntriesFrom(input, _repeated_blackHoleList_codec);
            break;
          }
          case 34: {
            if (formInfo_ == null) {
              FormInfo = new global::PlaneWar.FormInfo();
            }
            input.ReadMessage(FormInfo);
            break;
          }
          case 42: {
            if (lockInfo_ == null) {
              LockInfo = new global::PlaneWar.LockInfo();
            }
            input.ReadMessage(LockInfo);
            break;
          }
          case 50: {
            if (weaponInfo_ == null) {
              WeaponInfo = new global::PlaneWar.WeaponInfo();
            }
            input.ReadMessage(WeaponInfo);
            break;
          }
          case 58: {
            if (propWeaponInfo_ == null) {
              PropWeaponInfo = new global::PlaneWar.WeaponInfo();
            }
            input.ReadMessage(PropWeaponInfo);
            break;
          }
          case 66: {
            settleList_.AddEntriesFrom(input, _repeated_settleList_codec);
            break;
          }
          case 74: {
            if (gunInfo_ == null) {
              GunInfo = new global::PlaneWar.GunInfo();
            }
            input.ReadMessage(GunInfo);
            break;
          }
          case 82: {
            if (flameInfo_ == null) {
              FlameInfo = new global::PlaneWar.FlameInfo();
            }
            input.ReadMessage(FlameInfo);
            break;
          }
          case 90: {
            if (specEffect_ == null) {
              SpecEffect = new global::PlaneWar.SpecEffect();
            }
            input.ReadMessage(SpecEffect);
            break;
          }
          case 96: {
            ExtraMul = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsBack = input.ReadBool();
            break;
          }
          case 18: {
            buffList_.AddEntriesFrom(ref input, _repeated_buffList_codec);
            break;
          }
          case 26: {
            blackHoleList_.AddEntriesFrom(ref input, _repeated_blackHoleList_codec);
            break;
          }
          case 34: {
            if (formInfo_ == null) {
              FormInfo = new global::PlaneWar.FormInfo();
            }
            input.ReadMessage(FormInfo);
            break;
          }
          case 42: {
            if (lockInfo_ == null) {
              LockInfo = new global::PlaneWar.LockInfo();
            }
            input.ReadMessage(LockInfo);
            break;
          }
          case 50: {
            if (weaponInfo_ == null) {
              WeaponInfo = new global::PlaneWar.WeaponInfo();
            }
            input.ReadMessage(WeaponInfo);
            break;
          }
          case 58: {
            if (propWeaponInfo_ == null) {
              PropWeaponInfo = new global::PlaneWar.WeaponInfo();
            }
            input.ReadMessage(PropWeaponInfo);
            break;
          }
          case 66: {
            settleList_.AddEntriesFrom(ref input, _repeated_settleList_codec);
            break;
          }
          case 74: {
            if (gunInfo_ == null) {
              GunInfo = new global::PlaneWar.GunInfo();
            }
            input.ReadMessage(GunInfo);
            break;
          }
          case 82: {
            if (flameInfo_ == null) {
              FlameInfo = new global::PlaneWar.FlameInfo();
            }
            input.ReadMessage(FlameInfo);
            break;
          }
          case 90: {
            if (specEffect_ == null) {
              SpecEffect = new global::PlaneWar.SpecEffect();
            }
            input.ReadMessage(SpecEffect);
            break;
          }
          case 96: {
            ExtraMul = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MissileInfo : pb::IMessage<MissileInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MissileInfo> _parser = new pb::MessageParser<MissileInfo>(() => new MissileInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissileInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileInfo(MissileInfo other) : this() {
      id_ = other.id_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissileInfo Clone() {
      return new MissileInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissileInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissileInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissileInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PiggyInfo : pb::IMessage<PiggyInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PiggyInfo> _parser = new pb::MessageParser<PiggyInfo>(() => new PiggyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PiggyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PiggyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PiggyInfo(PiggyInfo other) : this() {
      status_ = other.status_;
      rewardValue_ = other.rewardValue_;
      accumulatingValue_ = other.accumulatingValue_;
      settleTime_ = other.settleTime_;
      settleThreshold_ = other.settleThreshold_;
      maxReward_ = other.maxReward_;
      nextMaxReward_ = other.nextMaxReward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PiggyInfo Clone() {
      return new PiggyInfo(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "rewardValue" field.</summary>
    public const int RewardValueFieldNumber = 2;
    private int rewardValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardValue {
      get { return rewardValue_; }
      set {
        rewardValue_ = value;
      }
    }

    /// <summary>Field number for the "accumulatingValue" field.</summary>
    public const int AccumulatingValueFieldNumber = 3;
    private int accumulatingValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccumulatingValue {
      get { return accumulatingValue_; }
      set {
        accumulatingValue_ = value;
      }
    }

    /// <summary>Field number for the "settleTime" field.</summary>
    public const int SettleTimeFieldNumber = 4;
    private string settleTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettleTime {
      get { return settleTime_; }
      set {
        settleTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settleThreshold" field.</summary>
    public const int SettleThresholdFieldNumber = 5;
    private int settleThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SettleThreshold {
      get { return settleThreshold_; }
      set {
        settleThreshold_ = value;
      }
    }

    /// <summary>Field number for the "maxReward" field.</summary>
    public const int MaxRewardFieldNumber = 6;
    private int maxReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxReward {
      get { return maxReward_; }
      set {
        maxReward_ = value;
      }
    }

    /// <summary>Field number for the "nextMaxReward" field.</summary>
    public const int NextMaxRewardFieldNumber = 7;
    private int nextMaxReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextMaxReward {
      get { return nextMaxReward_; }
      set {
        nextMaxReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PiggyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PiggyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (RewardValue != other.RewardValue) return false;
      if (AccumulatingValue != other.AccumulatingValue) return false;
      if (SettleTime != other.SettleTime) return false;
      if (SettleThreshold != other.SettleThreshold) return false;
      if (MaxReward != other.MaxReward) return false;
      if (NextMaxReward != other.NextMaxReward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RewardValue != 0) hash ^= RewardValue.GetHashCode();
      if (AccumulatingValue != 0) hash ^= AccumulatingValue.GetHashCode();
      if (SettleTime.Length != 0) hash ^= SettleTime.GetHashCode();
      if (SettleThreshold != 0) hash ^= SettleThreshold.GetHashCode();
      if (MaxReward != 0) hash ^= MaxReward.GetHashCode();
      if (NextMaxReward != 0) hash ^= NextMaxReward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (RewardValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RewardValue);
      }
      if (AccumulatingValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AccumulatingValue);
      }
      if (SettleTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SettleTime);
      }
      if (SettleThreshold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SettleThreshold);
      }
      if (MaxReward != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxReward);
      }
      if (NextMaxReward != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NextMaxReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (RewardValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RewardValue);
      }
      if (AccumulatingValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AccumulatingValue);
      }
      if (SettleTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SettleTime);
      }
      if (SettleThreshold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SettleThreshold);
      }
      if (MaxReward != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxReward);
      }
      if (NextMaxReward != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NextMaxReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (RewardValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardValue);
      }
      if (AccumulatingValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccumulatingValue);
      }
      if (SettleTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettleTime);
      }
      if (SettleThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SettleThreshold);
      }
      if (MaxReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxReward);
      }
      if (NextMaxReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextMaxReward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PiggyInfo other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RewardValue != 0) {
        RewardValue = other.RewardValue;
      }
      if (other.AccumulatingValue != 0) {
        AccumulatingValue = other.AccumulatingValue;
      }
      if (other.SettleTime.Length != 0) {
        SettleTime = other.SettleTime;
      }
      if (other.SettleThreshold != 0) {
        SettleThreshold = other.SettleThreshold;
      }
      if (other.MaxReward != 0) {
        MaxReward = other.MaxReward;
      }
      if (other.NextMaxReward != 0) {
        NextMaxReward = other.NextMaxReward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            RewardValue = input.ReadInt32();
            break;
          }
          case 24: {
            AccumulatingValue = input.ReadInt32();
            break;
          }
          case 34: {
            SettleTime = input.ReadString();
            break;
          }
          case 40: {
            SettleThreshold = input.ReadInt32();
            break;
          }
          case 48: {
            MaxReward = input.ReadInt32();
            break;
          }
          case 56: {
            NextMaxReward = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            RewardValue = input.ReadInt32();
            break;
          }
          case 24: {
            AccumulatingValue = input.ReadInt32();
            break;
          }
          case 34: {
            SettleTime = input.ReadString();
            break;
          }
          case 40: {
            SettleThreshold = input.ReadInt32();
            break;
          }
          case 48: {
            MaxReward = input.ReadInt32();
            break;
          }
          case 56: {
            NextMaxReward = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ArenaPieceInfo : pb::IMessage<ArenaPieceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ArenaPieceInfo> _parser = new pb::MessageParser<ArenaPieceInfo>(() => new ArenaPieceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArenaPieceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaPieceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaPieceInfo(ArenaPieceInfo other) : this() {
      arenaID_ = other.arenaID_;
      havePiece_ = other.havePiece_;
      needPiece_ = other.needPiece_;
      ratio_ = other.ratio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArenaPieceInfo Clone() {
      return new ArenaPieceInfo(this);
    }

    /// <summary>Field number for the "arenaID" field.</summary>
    public const int ArenaIDFieldNumber = 1;
    private int arenaID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArenaID {
      get { return arenaID_; }
      set {
        arenaID_ = value;
      }
    }

    /// <summary>Field number for the "havePiece" field.</summary>
    public const int HavePieceFieldNumber = 2;
    private int havePiece_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HavePiece {
      get { return havePiece_; }
      set {
        havePiece_ = value;
      }
    }

    /// <summary>Field number for the "needPiece" field.</summary>
    public const int NeedPieceFieldNumber = 3;
    private int needPiece_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedPiece {
      get { return needPiece_; }
      set {
        needPiece_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 4;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArenaPieceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArenaPieceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArenaID != other.ArenaID) return false;
      if (HavePiece != other.HavePiece) return false;
      if (NeedPiece != other.NeedPiece) return false;
      if (Ratio != other.Ratio) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArenaID != 0) hash ^= ArenaID.GetHashCode();
      if (HavePiece != 0) hash ^= HavePiece.GetHashCode();
      if (NeedPiece != 0) hash ^= NeedPiece.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ArenaID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ArenaID);
      }
      if (HavePiece != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HavePiece);
      }
      if (NeedPiece != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NeedPiece);
      }
      if (Ratio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ratio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ArenaID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ArenaID);
      }
      if (HavePiece != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HavePiece);
      }
      if (NeedPiece != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NeedPiece);
      }
      if (Ratio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ratio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArenaID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArenaID);
      }
      if (HavePiece != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HavePiece);
      }
      if (NeedPiece != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedPiece);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArenaPieceInfo other) {
      if (other == null) {
        return;
      }
      if (other.ArenaID != 0) {
        ArenaID = other.ArenaID;
      }
      if (other.HavePiece != 0) {
        HavePiece = other.HavePiece;
      }
      if (other.NeedPiece != 0) {
        NeedPiece = other.NeedPiece;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ArenaID = input.ReadInt32();
            break;
          }
          case 16: {
            HavePiece = input.ReadInt32();
            break;
          }
          case 24: {
            NeedPiece = input.ReadInt32();
            break;
          }
          case 32: {
            Ratio = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ArenaID = input.ReadInt32();
            break;
          }
          case 16: {
            HavePiece = input.ReadInt32();
            break;
          }
          case 24: {
            NeedPiece = input.ReadInt32();
            break;
          }
          case 32: {
            Ratio = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PieceInfo : pb::IMessage<PieceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PieceInfo> _parser = new pb::MessageParser<PieceInfo>(() => new PieceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PieceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PieceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PieceInfo(PieceInfo other) : this() {
      arenaInfo_ = other.arenaInfo_.Clone();
      haveDiamond_ = other.haveDiamond_;
      needDiamond_ = other.needDiamond_;
      pieceStackLimit_ = other.pieceStackLimit_;
      exchangePiece_ = other.exchangePiece_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PieceInfo Clone() {
      return new PieceInfo(this);
    }

    /// <summary>Field number for the "arenaInfo" field.</summary>
    public const int ArenaInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.ArenaPieceInfo> _repeated_arenaInfo_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.ArenaPieceInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.ArenaPieceInfo> arenaInfo_ = new pbc::RepeatedField<global::PlaneWar.ArenaPieceInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.ArenaPieceInfo> ArenaInfo {
      get { return arenaInfo_; }
    }

    /// <summary>Field number for the "haveDiamond" field.</summary>
    public const int HaveDiamondFieldNumber = 2;
    private int haveDiamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HaveDiamond {
      get { return haveDiamond_; }
      set {
        haveDiamond_ = value;
      }
    }

    /// <summary>Field number for the "needDiamond" field.</summary>
    public const int NeedDiamondFieldNumber = 3;
    private int needDiamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedDiamond {
      get { return needDiamond_; }
      set {
        needDiamond_ = value;
      }
    }

    /// <summary>Field number for the "pieceStackLimit" field.</summary>
    public const int PieceStackLimitFieldNumber = 4;
    private int pieceStackLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PieceStackLimit {
      get { return pieceStackLimit_; }
      set {
        pieceStackLimit_ = value;
      }
    }

    /// <summary>Field number for the "exchangePiece" field.</summary>
    public const int ExchangePieceFieldNumber = 5;
    private int exchangePiece_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExchangePiece {
      get { return exchangePiece_; }
      set {
        exchangePiece_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PieceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PieceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!arenaInfo_.Equals(other.arenaInfo_)) return false;
      if (HaveDiamond != other.HaveDiamond) return false;
      if (NeedDiamond != other.NeedDiamond) return false;
      if (PieceStackLimit != other.PieceStackLimit) return false;
      if (ExchangePiece != other.ExchangePiece) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= arenaInfo_.GetHashCode();
      if (HaveDiamond != 0) hash ^= HaveDiamond.GetHashCode();
      if (NeedDiamond != 0) hash ^= NeedDiamond.GetHashCode();
      if (PieceStackLimit != 0) hash ^= PieceStackLimit.GetHashCode();
      if (ExchangePiece != 0) hash ^= ExchangePiece.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      arenaInfo_.WriteTo(output, _repeated_arenaInfo_codec);
      if (HaveDiamond != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HaveDiamond);
      }
      if (NeedDiamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NeedDiamond);
      }
      if (PieceStackLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PieceStackLimit);
      }
      if (ExchangePiece != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ExchangePiece);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      arenaInfo_.WriteTo(ref output, _repeated_arenaInfo_codec);
      if (HaveDiamond != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HaveDiamond);
      }
      if (NeedDiamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NeedDiamond);
      }
      if (PieceStackLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PieceStackLimit);
      }
      if (ExchangePiece != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ExchangePiece);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += arenaInfo_.CalculateSize(_repeated_arenaInfo_codec);
      if (HaveDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HaveDiamond);
      }
      if (NeedDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedDiamond);
      }
      if (PieceStackLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PieceStackLimit);
      }
      if (ExchangePiece != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExchangePiece);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PieceInfo other) {
      if (other == null) {
        return;
      }
      arenaInfo_.Add(other.arenaInfo_);
      if (other.HaveDiamond != 0) {
        HaveDiamond = other.HaveDiamond;
      }
      if (other.NeedDiamond != 0) {
        NeedDiamond = other.NeedDiamond;
      }
      if (other.PieceStackLimit != 0) {
        PieceStackLimit = other.PieceStackLimit;
      }
      if (other.ExchangePiece != 0) {
        ExchangePiece = other.ExchangePiece;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            arenaInfo_.AddEntriesFrom(input, _repeated_arenaInfo_codec);
            break;
          }
          case 16: {
            HaveDiamond = input.ReadInt32();
            break;
          }
          case 24: {
            NeedDiamond = input.ReadInt32();
            break;
          }
          case 32: {
            PieceStackLimit = input.ReadInt32();
            break;
          }
          case 40: {
            ExchangePiece = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            arenaInfo_.AddEntriesFrom(ref input, _repeated_arenaInfo_codec);
            break;
          }
          case 16: {
            HaveDiamond = input.ReadInt32();
            break;
          }
          case 24: {
            NeedDiamond = input.ReadInt32();
            break;
          }
          case 32: {
            PieceStackLimit = input.ReadInt32();
            break;
          }
          case 40: {
            ExchangePiece = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RouletteInfo : pb::IMessage<RouletteInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RouletteInfo> _parser = new pb::MessageParser<RouletteInfo>(() => new RouletteInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RouletteInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouletteInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouletteInfo(RouletteInfo other) : this() {
      id_ = other.id_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouletteInfo Clone() {
      return new RouletteInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RouletteInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RouletteInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RouletteInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EffectInfo : pb::IMessage<EffectInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EffectInfo> _parser = new pb::MessageParser<EffectInfo>(() => new EffectInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectInfo(EffectInfo other) : this() {
      effectID_ = other.effectID_;
      isGlobal_ = other.isGlobal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectInfo Clone() {
      return new EffectInfo(this);
    }

    /// <summary>Field number for the "effectID" field.</summary>
    public const int EffectIDFieldNumber = 1;
    private int effectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectID {
      get { return effectID_; }
      set {
        effectID_ = value;
      }
    }

    /// <summary>Field number for the "isGlobal" field.</summary>
    public const int IsGlobalFieldNumber = 2;
    private bool isGlobal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGlobal {
      get { return isGlobal_; }
      set {
        isGlobal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectID != other.EffectID) return false;
      if (IsGlobal != other.IsGlobal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EffectID != 0) hash ^= EffectID.GetHashCode();
      if (IsGlobal != false) hash ^= IsGlobal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EffectID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EffectID);
      }
      if (IsGlobal != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGlobal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EffectID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EffectID);
      }
      if (IsGlobal != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGlobal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectID);
      }
      if (IsGlobal != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectInfo other) {
      if (other == null) {
        return;
      }
      if (other.EffectID != 0) {
        EffectID = other.EffectID;
      }
      if (other.IsGlobal != false) {
        IsGlobal = other.IsGlobal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EffectID = input.ReadInt32();
            break;
          }
          case 16: {
            IsGlobal = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EffectID = input.ReadInt32();
            break;
          }
          case 16: {
            IsGlobal = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      ratio_ = other.ratio_;
      planeID_ = other.planeID_;
      score_ = other.score_;
      chair_ = other.chair_;
      playerName_ = other.playerName_;
      playerID_ = other.playerID_;
      vip_ = other.vip_;
      stateInfo_ = other.stateInfo_ != null ? other.stateInfo_.Clone() : null;
      memberDays_ = other.memberDays_;
      lastVipLevel_ = other.lastVipLevel_;
      scratchCardNum_ = other.scratchCardNum_;
      ticket_ = other.ticket_;
      ratioUnLock_ = other.ratioUnLock_;
      piggyInfo_ = other.piggyInfo_ != null ? other.piggyInfo_.Clone() : null;
      missileList_ = other.missileList_.Clone();
      callNum_ = other.callNum_;
      selectedTitle_ = other.selectedTitle_;
      weaponPieceInfo_ = other.weaponPieceInfo_ != null ? other.weaponPieceInfo_.Clone() : null;
      effectID_ = other.effectID_;
      icon_ = other.icon_;
      rouletteList_ = other.rouletteList_.Clone();
      wingsId_ = other.wingsId_;
      effectInfo_ = other.effectInfo_ != null ? other.effectInfo_.Clone() : null;
      currentRank_ = other.currentRank_;
      star_ = other.star_;
      isLastRank_ = other.isLastRank_;
      redPacket_ = other.redPacket_ != null ? other.redPacket_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 1;
    private int ratio_;
    /// <summary>
    /// 押注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "planeID" field.</summary>
    public const int PlaneIDFieldNumber = 2;
    private int planeID_;
    /// <summary>
    /// 炮台类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaneID {
      get { return planeID_; }
      set {
        planeID_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private long score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 4;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 5;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 6;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 7;
    private int vip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    /// <summary>Field number for the "stateInfo" field.</summary>
    public const int StateInfoFieldNumber = 8;
    private global::PlaneWar.StateInfo stateInfo_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.StateInfo StateInfo {
      get { return stateInfo_; }
      set {
        stateInfo_ = value;
      }
    }

    /// <summary>Field number for the "memberDays" field.</summary>
    public const int MemberDaysFieldNumber = 9;
    private int memberDays_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberDays {
      get { return memberDays_; }
      set {
        memberDays_ = value;
      }
    }

    /// <summary>Field number for the "lastVipLevel" field.</summary>
    public const int LastVipLevelFieldNumber = 10;
    private int lastVipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastVipLevel {
      get { return lastVipLevel_; }
      set {
        lastVipLevel_ = value;
      }
    }

    /// <summary>Field number for the "scratchCardNum" field.</summary>
    public const int ScratchCardNumFieldNumber = 11;
    private int scratchCardNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScratchCardNum {
      get { return scratchCardNum_; }
      set {
        scratchCardNum_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 12;
    private int ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "ratioUnLock" field.</summary>
    public const int RatioUnLockFieldNumber = 13;
    private bool ratioUnLock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RatioUnLock {
      get { return ratioUnLock_; }
      set {
        ratioUnLock_ = value;
      }
    }

    /// <summary>Field number for the "piggyInfo" field.</summary>
    public const int PiggyInfoFieldNumber = 14;
    private global::PlaneWar.PiggyInfo piggyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PiggyInfo PiggyInfo {
      get { return piggyInfo_; }
      set {
        piggyInfo_ = value;
      }
    }

    /// <summary>Field number for the "missileList" field.</summary>
    public const int MissileListFieldNumber = 15;
    private static readonly pb::FieldCodec<global::PlaneWar.MissileInfo> _repeated_missileList_codec
        = pb::FieldCodec.ForMessage(122, global::PlaneWar.MissileInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.MissileInfo> missileList_ = new pbc::RepeatedField<global::PlaneWar.MissileInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.MissileInfo> MissileList {
      get { return missileList_; }
    }

    /// <summary>Field number for the "callNum" field.</summary>
    public const int CallNumFieldNumber = 16;
    private int callNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallNum {
      get { return callNum_; }
      set {
        callNum_ = value;
      }
    }

    /// <summary>Field number for the "selectedTitle" field.</summary>
    public const int SelectedTitleFieldNumber = 17;
    private int selectedTitle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectedTitle {
      get { return selectedTitle_; }
      set {
        selectedTitle_ = value;
      }
    }

    /// <summary>Field number for the "weaponPieceInfo" field.</summary>
    public const int WeaponPieceInfoFieldNumber = 18;
    private global::PlaneWar.PieceInfo weaponPieceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PieceInfo WeaponPieceInfo {
      get { return weaponPieceInfo_; }
      set {
        weaponPieceInfo_ = value;
      }
    }

    /// <summary>Field number for the "effectID" field.</summary>
    public const int EffectIDFieldNumber = 19;
    private int effectID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectID {
      get { return effectID_; }
      set {
        effectID_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 20;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rouletteList" field.</summary>
    public const int RouletteListFieldNumber = 21;
    private static readonly pb::FieldCodec<global::PlaneWar.RouletteInfo> _repeated_rouletteList_codec
        = pb::FieldCodec.ForMessage(170, global::PlaneWar.RouletteInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.RouletteInfo> rouletteList_ = new pbc::RepeatedField<global::PlaneWar.RouletteInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.RouletteInfo> RouletteList {
      get { return rouletteList_; }
    }

    /// <summary>Field number for the "wingsId" field.</summary>
    public const int WingsIdFieldNumber = 22;
    private int wingsId_;
    /// <summary>
    /// 翅膀ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingsId {
      get { return wingsId_; }
      set {
        wingsId_ = value;
      }
    }

    /// <summary>Field number for the "effectInfo" field.</summary>
    public const int EffectInfoFieldNumber = 23;
    private global::PlaneWar.EffectInfo effectInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.EffectInfo EffectInfo {
      get { return effectInfo_; }
      set {
        effectInfo_ = value;
      }
    }

    /// <summary>Field number for the "currentRank" field.</summary>
    public const int CurrentRankFieldNumber = 24;
    private int currentRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentRank {
      get { return currentRank_; }
      set {
        currentRank_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 25;
    private int star_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "isLastRank" field.</summary>
    public const int IsLastRankFieldNumber = 26;
    private bool isLastRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLastRank {
      get { return isLastRank_; }
      set {
        isLastRank_ = value;
      }
    }

    /// <summary>Field number for the "redPacket" field.</summary>
    public const int RedPacketFieldNumber = 27;
    private global::PlaneWar.Decimal redPacket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Decimal RedPacket {
      get { return redPacket_; }
      set {
        redPacket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ratio != other.Ratio) return false;
      if (PlaneID != other.PlaneID) return false;
      if (Score != other.Score) return false;
      if (Chair != other.Chair) return false;
      if (PlayerName != other.PlayerName) return false;
      if (PlayerID != other.PlayerID) return false;
      if (Vip != other.Vip) return false;
      if (!object.Equals(StateInfo, other.StateInfo)) return false;
      if (MemberDays != other.MemberDays) return false;
      if (LastVipLevel != other.LastVipLevel) return false;
      if (ScratchCardNum != other.ScratchCardNum) return false;
      if (Ticket != other.Ticket) return false;
      if (RatioUnLock != other.RatioUnLock) return false;
      if (!object.Equals(PiggyInfo, other.PiggyInfo)) return false;
      if(!missileList_.Equals(other.missileList_)) return false;
      if (CallNum != other.CallNum) return false;
      if (SelectedTitle != other.SelectedTitle) return false;
      if (!object.Equals(WeaponPieceInfo, other.WeaponPieceInfo)) return false;
      if (EffectID != other.EffectID) return false;
      if (Icon != other.Icon) return false;
      if(!rouletteList_.Equals(other.rouletteList_)) return false;
      if (WingsId != other.WingsId) return false;
      if (!object.Equals(EffectInfo, other.EffectInfo)) return false;
      if (CurrentRank != other.CurrentRank) return false;
      if (Star != other.Star) return false;
      if (IsLastRank != other.IsLastRank) return false;
      if (!object.Equals(RedPacket, other.RedPacket)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (PlaneID != 0) hash ^= PlaneID.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (Vip != 0) hash ^= Vip.GetHashCode();
      if (stateInfo_ != null) hash ^= StateInfo.GetHashCode();
      if (MemberDays != 0) hash ^= MemberDays.GetHashCode();
      if (LastVipLevel != 0) hash ^= LastVipLevel.GetHashCode();
      if (ScratchCardNum != 0) hash ^= ScratchCardNum.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      if (RatioUnLock != false) hash ^= RatioUnLock.GetHashCode();
      if (piggyInfo_ != null) hash ^= PiggyInfo.GetHashCode();
      hash ^= missileList_.GetHashCode();
      if (CallNum != 0) hash ^= CallNum.GetHashCode();
      if (SelectedTitle != 0) hash ^= SelectedTitle.GetHashCode();
      if (weaponPieceInfo_ != null) hash ^= WeaponPieceInfo.GetHashCode();
      if (EffectID != 0) hash ^= EffectID.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      hash ^= rouletteList_.GetHashCode();
      if (WingsId != 0) hash ^= WingsId.GetHashCode();
      if (effectInfo_ != null) hash ^= EffectInfo.GetHashCode();
      if (CurrentRank != 0) hash ^= CurrentRank.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (IsLastRank != false) hash ^= IsLastRank.GetHashCode();
      if (redPacket_ != null) hash ^= RedPacket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ratio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ratio);
      }
      if (PlaneID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlaneID);
      }
      if (Score != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Score);
      }
      if (Chair != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Chair);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PlayerName);
      }
      if (PlayerID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerID);
      }
      if (Vip != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Vip);
      }
      if (stateInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StateInfo);
      }
      if (MemberDays != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MemberDays);
      }
      if (LastVipLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LastVipLevel);
      }
      if (ScratchCardNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ScratchCardNum);
      }
      if (Ticket != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Ticket);
      }
      if (RatioUnLock != false) {
        output.WriteRawTag(104);
        output.WriteBool(RatioUnLock);
      }
      if (piggyInfo_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PiggyInfo);
      }
      missileList_.WriteTo(output, _repeated_missileList_codec);
      if (CallNum != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(CallNum);
      }
      if (SelectedTitle != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SelectedTitle);
      }
      if (weaponPieceInfo_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(WeaponPieceInfo);
      }
      if (EffectID != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(EffectID);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Icon);
      }
      rouletteList_.WriteTo(output, _repeated_rouletteList_codec);
      if (WingsId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(WingsId);
      }
      if (effectInfo_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(EffectInfo);
      }
      if (CurrentRank != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(CurrentRank);
      }
      if (Star != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Star);
      }
      if (IsLastRank != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsLastRank);
      }
      if (redPacket_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(RedPacket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ratio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ratio);
      }
      if (PlaneID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlaneID);
      }
      if (Score != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Score);
      }
      if (Chair != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Chair);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PlayerName);
      }
      if (PlayerID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerID);
      }
      if (Vip != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Vip);
      }
      if (stateInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StateInfo);
      }
      if (MemberDays != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MemberDays);
      }
      if (LastVipLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LastVipLevel);
      }
      if (ScratchCardNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ScratchCardNum);
      }
      if (Ticket != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Ticket);
      }
      if (RatioUnLock != false) {
        output.WriteRawTag(104);
        output.WriteBool(RatioUnLock);
      }
      if (piggyInfo_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PiggyInfo);
      }
      missileList_.WriteTo(ref output, _repeated_missileList_codec);
      if (CallNum != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(CallNum);
      }
      if (SelectedTitle != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(SelectedTitle);
      }
      if (weaponPieceInfo_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(WeaponPieceInfo);
      }
      if (EffectID != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(EffectID);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Icon);
      }
      rouletteList_.WriteTo(ref output, _repeated_rouletteList_codec);
      if (WingsId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(WingsId);
      }
      if (effectInfo_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(EffectInfo);
      }
      if (CurrentRank != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(CurrentRank);
      }
      if (Star != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Star);
      }
      if (IsLastRank != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(IsLastRank);
      }
      if (redPacket_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(RedPacket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (PlaneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaneID);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (Vip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vip);
      }
      if (stateInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateInfo);
      }
      if (MemberDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberDays);
      }
      if (LastVipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastVipLevel);
      }
      if (ScratchCardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScratchCardNum);
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (RatioUnLock != false) {
        size += 1 + 1;
      }
      if (piggyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PiggyInfo);
      }
      size += missileList_.CalculateSize(_repeated_missileList_codec);
      if (CallNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CallNum);
      }
      if (SelectedTitle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SelectedTitle);
      }
      if (weaponPieceInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WeaponPieceInfo);
      }
      if (EffectID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EffectID);
      }
      if (Icon.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      size += rouletteList_.CalculateSize(_repeated_rouletteList_codec);
      if (WingsId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WingsId);
      }
      if (effectInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EffectInfo);
      }
      if (CurrentRank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurrentRank);
      }
      if (Star != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (IsLastRank != false) {
        size += 2 + 1;
      }
      if (redPacket_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RedPacket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.PlaneID != 0) {
        PlaneID = other.PlaneID;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Vip != 0) {
        Vip = other.Vip;
      }
      if (other.stateInfo_ != null) {
        if (stateInfo_ == null) {
          StateInfo = new global::PlaneWar.StateInfo();
        }
        StateInfo.MergeFrom(other.StateInfo);
      }
      if (other.MemberDays != 0) {
        MemberDays = other.MemberDays;
      }
      if (other.LastVipLevel != 0) {
        LastVipLevel = other.LastVipLevel;
      }
      if (other.ScratchCardNum != 0) {
        ScratchCardNum = other.ScratchCardNum;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      if (other.RatioUnLock != false) {
        RatioUnLock = other.RatioUnLock;
      }
      if (other.piggyInfo_ != null) {
        if (piggyInfo_ == null) {
          PiggyInfo = new global::PlaneWar.PiggyInfo();
        }
        PiggyInfo.MergeFrom(other.PiggyInfo);
      }
      missileList_.Add(other.missileList_);
      if (other.CallNum != 0) {
        CallNum = other.CallNum;
      }
      if (other.SelectedTitle != 0) {
        SelectedTitle = other.SelectedTitle;
      }
      if (other.weaponPieceInfo_ != null) {
        if (weaponPieceInfo_ == null) {
          WeaponPieceInfo = new global::PlaneWar.PieceInfo();
        }
        WeaponPieceInfo.MergeFrom(other.WeaponPieceInfo);
      }
      if (other.EffectID != 0) {
        EffectID = other.EffectID;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      rouletteList_.Add(other.rouletteList_);
      if (other.WingsId != 0) {
        WingsId = other.WingsId;
      }
      if (other.effectInfo_ != null) {
        if (effectInfo_ == null) {
          EffectInfo = new global::PlaneWar.EffectInfo();
        }
        EffectInfo.MergeFrom(other.EffectInfo);
      }
      if (other.CurrentRank != 0) {
        CurrentRank = other.CurrentRank;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.IsLastRank != false) {
        IsLastRank = other.IsLastRank;
      }
      if (other.redPacket_ != null) {
        if (redPacket_ == null) {
          RedPacket = new global::PlaneWar.Decimal();
        }
        RedPacket.MergeFrom(other.RedPacket);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ratio = input.ReadInt32();
            break;
          }
          case 16: {
            PlaneID = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt64();
            break;
          }
          case 32: {
            Chair = input.ReadInt32();
            break;
          }
          case 42: {
            PlayerName = input.ReadString();
            break;
          }
          case 48: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 56: {
            Vip = input.ReadInt32();
            break;
          }
          case 66: {
            if (stateInfo_ == null) {
              StateInfo = new global::PlaneWar.StateInfo();
            }
            input.ReadMessage(StateInfo);
            break;
          }
          case 72: {
            MemberDays = input.ReadInt32();
            break;
          }
          case 80: {
            LastVipLevel = input.ReadInt32();
            break;
          }
          case 88: {
            ScratchCardNum = input.ReadInt32();
            break;
          }
          case 96: {
            Ticket = input.ReadInt32();
            break;
          }
          case 104: {
            RatioUnLock = input.ReadBool();
            break;
          }
          case 114: {
            if (piggyInfo_ == null) {
              PiggyInfo = new global::PlaneWar.PiggyInfo();
            }
            input.ReadMessage(PiggyInfo);
            break;
          }
          case 122: {
            missileList_.AddEntriesFrom(input, _repeated_missileList_codec);
            break;
          }
          case 128: {
            CallNum = input.ReadInt32();
            break;
          }
          case 136: {
            SelectedTitle = input.ReadInt32();
            break;
          }
          case 146: {
            if (weaponPieceInfo_ == null) {
              WeaponPieceInfo = new global::PlaneWar.PieceInfo();
            }
            input.ReadMessage(WeaponPieceInfo);
            break;
          }
          case 152: {
            EffectID = input.ReadInt32();
            break;
          }
          case 162: {
            Icon = input.ReadString();
            break;
          }
          case 170: {
            rouletteList_.AddEntriesFrom(input, _repeated_rouletteList_codec);
            break;
          }
          case 176: {
            WingsId = input.ReadInt32();
            break;
          }
          case 186: {
            if (effectInfo_ == null) {
              EffectInfo = new global::PlaneWar.EffectInfo();
            }
            input.ReadMessage(EffectInfo);
            break;
          }
          case 192: {
            CurrentRank = input.ReadInt32();
            break;
          }
          case 200: {
            Star = input.ReadInt32();
            break;
          }
          case 208: {
            IsLastRank = input.ReadBool();
            break;
          }
          case 218: {
            if (redPacket_ == null) {
              RedPacket = new global::PlaneWar.Decimal();
            }
            input.ReadMessage(RedPacket);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ratio = input.ReadInt32();
            break;
          }
          case 16: {
            PlaneID = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt64();
            break;
          }
          case 32: {
            Chair = input.ReadInt32();
            break;
          }
          case 42: {
            PlayerName = input.ReadString();
            break;
          }
          case 48: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 56: {
            Vip = input.ReadInt32();
            break;
          }
          case 66: {
            if (stateInfo_ == null) {
              StateInfo = new global::PlaneWar.StateInfo();
            }
            input.ReadMessage(StateInfo);
            break;
          }
          case 72: {
            MemberDays = input.ReadInt32();
            break;
          }
          case 80: {
            LastVipLevel = input.ReadInt32();
            break;
          }
          case 88: {
            ScratchCardNum = input.ReadInt32();
            break;
          }
          case 96: {
            Ticket = input.ReadInt32();
            break;
          }
          case 104: {
            RatioUnLock = input.ReadBool();
            break;
          }
          case 114: {
            if (piggyInfo_ == null) {
              PiggyInfo = new global::PlaneWar.PiggyInfo();
            }
            input.ReadMessage(PiggyInfo);
            break;
          }
          case 122: {
            missileList_.AddEntriesFrom(ref input, _repeated_missileList_codec);
            break;
          }
          case 128: {
            CallNum = input.ReadInt32();
            break;
          }
          case 136: {
            SelectedTitle = input.ReadInt32();
            break;
          }
          case 146: {
            if (weaponPieceInfo_ == null) {
              WeaponPieceInfo = new global::PlaneWar.PieceInfo();
            }
            input.ReadMessage(WeaponPieceInfo);
            break;
          }
          case 152: {
            EffectID = input.ReadInt32();
            break;
          }
          case 162: {
            Icon = input.ReadString();
            break;
          }
          case 170: {
            rouletteList_.AddEntriesFrom(ref input, _repeated_rouletteList_codec);
            break;
          }
          case 176: {
            WingsId = input.ReadInt32();
            break;
          }
          case 186: {
            if (effectInfo_ == null) {
              EffectInfo = new global::PlaneWar.EffectInfo();
            }
            input.ReadMessage(EffectInfo);
            break;
          }
          case 192: {
            CurrentRank = input.ReadInt32();
            break;
          }
          case 200: {
            Star = input.ReadInt32();
            break;
          }
          case 208: {
            IsLastRank = input.ReadBool();
            break;
          }
          case 218: {
            if (redPacket_ == null) {
              RedPacket = new global::PlaneWar.Decimal();
            }
            input.ReadMessage(RedPacket);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlaneSpecEffect : pb::IMessage<PlaneSpecEffect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlaneSpecEffect> _parser = new pb::MessageParser<PlaneSpecEffect>(() => new PlaneSpecEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaneSpecEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaneSpecEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaneSpecEffect(PlaneSpecEffect other) : this() {
      ratioLimit_ = other.ratioLimit_;
      hitChangeRate_ = other.hitChangeRate_;
      moneyChangeRate_ = other.moneyChangeRate_;
      violenceRate_ = other.violenceRate_;
      speedRate_ = other.speedRate_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaneSpecEffect Clone() {
      return new PlaneSpecEffect(this);
    }

    /// <summary>Field number for the "ratioLimit" field.</summary>
    public const int RatioLimitFieldNumber = 1;
    private int ratioLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RatioLimit {
      get { return ratioLimit_; }
      set {
        ratioLimit_ = value;
      }
    }

    /// <summary>Field number for the "hitChangeRate" field.</summary>
    public const int HitChangeRateFieldNumber = 2;
    private float hitChangeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitChangeRate {
      get { return hitChangeRate_; }
      set {
        hitChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "moneyChangeRate" field.</summary>
    public const int MoneyChangeRateFieldNumber = 3;
    private float moneyChangeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoneyChangeRate {
      get { return moneyChangeRate_; }
      set {
        moneyChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "violenceRate" field.</summary>
    public const int ViolenceRateFieldNumber = 4;
    private float violenceRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ViolenceRate {
      get { return violenceRate_; }
      set {
        violenceRate_ = value;
      }
    }

    /// <summary>Field number for the "speedRate" field.</summary>
    public const int SpeedRateFieldNumber = 5;
    private float speedRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedRate {
      get { return speedRate_; }
      set {
        speedRate_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaneSpecEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaneSpecEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RatioLimit != other.RatioLimit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitChangeRate, other.HitChangeRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoneyChangeRate, other.MoneyChangeRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ViolenceRate, other.ViolenceRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedRate, other.SpeedRate)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RatioLimit != 0) hash ^= RatioLimit.GetHashCode();
      if (HitChangeRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitChangeRate);
      if (MoneyChangeRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoneyChangeRate);
      if (ViolenceRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ViolenceRate);
      if (SpeedRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedRate);
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RatioLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(HitChangeRate);
      }
      if (MoneyChangeRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MoneyChangeRate);
      }
      if (ViolenceRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ViolenceRate);
      }
      if (SpeedRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SpeedRate);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RatioLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(HitChangeRate);
      }
      if (MoneyChangeRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MoneyChangeRate);
      }
      if (ViolenceRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ViolenceRate);
      }
      if (SpeedRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SpeedRate);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RatioLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        size += 1 + 4;
      }
      if (MoneyChangeRate != 0F) {
        size += 1 + 4;
      }
      if (ViolenceRate != 0F) {
        size += 1 + 4;
      }
      if (SpeedRate != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaneSpecEffect other) {
      if (other == null) {
        return;
      }
      if (other.RatioLimit != 0) {
        RatioLimit = other.RatioLimit;
      }
      if (other.HitChangeRate != 0F) {
        HitChangeRate = other.HitChangeRate;
      }
      if (other.MoneyChangeRate != 0F) {
        MoneyChangeRate = other.MoneyChangeRate;
      }
      if (other.ViolenceRate != 0F) {
        ViolenceRate = other.ViolenceRate;
      }
      if (other.SpeedRate != 0F) {
        SpeedRate = other.SpeedRate;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RatioLimit = input.ReadInt32();
            break;
          }
          case 21: {
            HitChangeRate = input.ReadFloat();
            break;
          }
          case 29: {
            MoneyChangeRate = input.ReadFloat();
            break;
          }
          case 37: {
            ViolenceRate = input.ReadFloat();
            break;
          }
          case 45: {
            SpeedRate = input.ReadFloat();
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RatioLimit = input.ReadInt32();
            break;
          }
          case 21: {
            HitChangeRate = input.ReadFloat();
            break;
          }
          case 29: {
            MoneyChangeRate = input.ReadFloat();
            break;
          }
          case 37: {
            ViolenceRate = input.ReadFloat();
            break;
          }
          case 45: {
            SpeedRate = input.ReadFloat();
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WingsSpecEffect : pb::IMessage<WingsSpecEffect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WingsSpecEffect> _parser = new pb::MessageParser<WingsSpecEffect>(() => new WingsSpecEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WingsSpecEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsSpecEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsSpecEffect(WingsSpecEffect other) : this() {
      speedRate_ = other.speedRate_;
      ratioLimit_ = other.ratioLimit_;
      hitChangeRate_ = other.hitChangeRate_;
      moneyChangeRate_ = other.moneyChangeRate_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsSpecEffect Clone() {
      return new WingsSpecEffect(this);
    }

    /// <summary>Field number for the "speedRate" field.</summary>
    public const int SpeedRateFieldNumber = 1;
    private float speedRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedRate {
      get { return speedRate_; }
      set {
        speedRate_ = value;
      }
    }

    /// <summary>Field number for the "ratioLimit" field.</summary>
    public const int RatioLimitFieldNumber = 2;
    private int ratioLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RatioLimit {
      get { return ratioLimit_; }
      set {
        ratioLimit_ = value;
      }
    }

    /// <summary>Field number for the "hitChangeRate" field.</summary>
    public const int HitChangeRateFieldNumber = 3;
    private float hitChangeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitChangeRate {
      get { return hitChangeRate_; }
      set {
        hitChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "moneyChangeRate" field.</summary>
    public const int MoneyChangeRateFieldNumber = 4;
    private float moneyChangeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoneyChangeRate {
      get { return moneyChangeRate_; }
      set {
        moneyChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WingsSpecEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WingsSpecEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedRate, other.SpeedRate)) return false;
      if (RatioLimit != other.RatioLimit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitChangeRate, other.HitChangeRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoneyChangeRate, other.MoneyChangeRate)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeedRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedRate);
      if (RatioLimit != 0) hash ^= RatioLimit.GetHashCode();
      if (HitChangeRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitChangeRate);
      if (MoneyChangeRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoneyChangeRate);
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeedRate != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SpeedRate);
      }
      if (RatioLimit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HitChangeRate);
      }
      if (MoneyChangeRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MoneyChangeRate);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeedRate != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SpeedRate);
      }
      if (RatioLimit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HitChangeRate);
      }
      if (MoneyChangeRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MoneyChangeRate);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeedRate != 0F) {
        size += 1 + 4;
      }
      if (RatioLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        size += 1 + 4;
      }
      if (MoneyChangeRate != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WingsSpecEffect other) {
      if (other == null) {
        return;
      }
      if (other.SpeedRate != 0F) {
        SpeedRate = other.SpeedRate;
      }
      if (other.RatioLimit != 0) {
        RatioLimit = other.RatioLimit;
      }
      if (other.HitChangeRate != 0F) {
        HitChangeRate = other.HitChangeRate;
      }
      if (other.MoneyChangeRate != 0F) {
        MoneyChangeRate = other.MoneyChangeRate;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SpeedRate = input.ReadFloat();
            break;
          }
          case 16: {
            RatioLimit = input.ReadInt32();
            break;
          }
          case 29: {
            HitChangeRate = input.ReadFloat();
            break;
          }
          case 37: {
            MoneyChangeRate = input.ReadFloat();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            SpeedRate = input.ReadFloat();
            break;
          }
          case 16: {
            RatioLimit = input.ReadInt32();
            break;
          }
          case 29: {
            HitChangeRate = input.ReadFloat();
            break;
          }
          case 37: {
            MoneyChangeRate = input.ReadFloat();
            break;
          }
          case 40: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlaneInfo : pb::IMessage<PlaneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlaneInfo> _parser = new pb::MessageParser<PlaneInfo>(() => new PlaneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaneInfo(PlaneInfo other) : this() {
      planeID_ = other.planeID_;
      isVip_ = other.isVip_;
      vipLevel_ = other.vipLevel_;
      isMember_ = other.isMember_;
      isTaskLock_ = other.isTaskLock_;
      requireAct_ = other.requireAct_;
      enable_ = other.enable_;
      planeSpecEffect_ = other.planeSpecEffect_ != null ? other.planeSpecEffect_.Clone() : null;
      timestamp_ = other.timestamp_;
      rankFlag_ = other.rankFlag_;
      price_ = other.price_;
      buff_ = other.buff_ != null ? other.buff_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaneInfo Clone() {
      return new PlaneInfo(this);
    }

    /// <summary>Field number for the "planeID" field.</summary>
    public const int PlaneIDFieldNumber = 1;
    private int planeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaneID {
      get { return planeID_; }
      set {
        planeID_ = value;
      }
    }

    /// <summary>Field number for the "isVip" field.</summary>
    public const int IsVipFieldNumber = 2;
    private bool isVip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVip {
      get { return isVip_; }
      set {
        isVip_ = value;
      }
    }

    /// <summary>Field number for the "vipLevel" field.</summary>
    public const int VipLevelFieldNumber = 3;
    private int vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "isMember" field.</summary>
    public const int IsMemberFieldNumber = 4;
    private bool isMember_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMember {
      get { return isMember_; }
      set {
        isMember_ = value;
      }
    }

    /// <summary>Field number for the "isTaskLock" field.</summary>
    public const int IsTaskLockFieldNumber = 5;
    private bool isTaskLock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTaskLock {
      get { return isTaskLock_; }
      set {
        isTaskLock_ = value;
      }
    }

    /// <summary>Field number for the "requireAct" field.</summary>
    public const int RequireActFieldNumber = 6;
    private int requireAct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RequireAct {
      get { return requireAct_; }
      set {
        requireAct_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 7;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "planeSpecEffect" field.</summary>
    public const int PlaneSpecEffectFieldNumber = 8;
    private global::PlaneWar.PlaneSpecEffect planeSpecEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PlaneSpecEffect PlaneSpecEffect {
      get { return planeSpecEffect_; }
      set {
        planeSpecEffect_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 9;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "rankFlag" field.</summary>
    public const int RankFlagFieldNumber = 10;
    private int rankFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankFlag {
      get { return rankFlag_; }
      set {
        rankFlag_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 11;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 12;
    private global::PlaneWar.PlaneSpecEffect buff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PlaneSpecEffect Buff {
      get { return buff_; }
      set {
        buff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlaneID != other.PlaneID) return false;
      if (IsVip != other.IsVip) return false;
      if (VipLevel != other.VipLevel) return false;
      if (IsMember != other.IsMember) return false;
      if (IsTaskLock != other.IsTaskLock) return false;
      if (RequireAct != other.RequireAct) return false;
      if (Enable != other.Enable) return false;
      if (!object.Equals(PlaneSpecEffect, other.PlaneSpecEffect)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (RankFlag != other.RankFlag) return false;
      if (Price != other.Price) return false;
      if (!object.Equals(Buff, other.Buff)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlaneID != 0) hash ^= PlaneID.GetHashCode();
      if (IsVip != false) hash ^= IsVip.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (IsMember != false) hash ^= IsMember.GetHashCode();
      if (IsTaskLock != false) hash ^= IsTaskLock.GetHashCode();
      if (RequireAct != 0) hash ^= RequireAct.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (planeSpecEffect_ != null) hash ^= PlaneSpecEffect.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (RankFlag != 0) hash ^= RankFlag.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (buff_ != null) hash ^= Buff.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlaneID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaneID);
      }
      if (IsVip != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsVip);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VipLevel);
      }
      if (IsMember != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsMember);
      }
      if (IsTaskLock != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsTaskLock);
      }
      if (RequireAct != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RequireAct);
      }
      if (Enable != false) {
        output.WriteRawTag(56);
        output.WriteBool(Enable);
      }
      if (planeSpecEffect_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PlaneSpecEffect);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Timestamp);
      }
      if (RankFlag != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RankFlag);
      }
      if (Price != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Price);
      }
      if (buff_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Buff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlaneID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaneID);
      }
      if (IsVip != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsVip);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VipLevel);
      }
      if (IsMember != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsMember);
      }
      if (IsTaskLock != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsTaskLock);
      }
      if (RequireAct != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RequireAct);
      }
      if (Enable != false) {
        output.WriteRawTag(56);
        output.WriteBool(Enable);
      }
      if (planeSpecEffect_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PlaneSpecEffect);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Timestamp);
      }
      if (RankFlag != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RankFlag);
      }
      if (Price != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Price);
      }
      if (buff_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Buff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaneID);
      }
      if (IsVip != false) {
        size += 1 + 1;
      }
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (IsMember != false) {
        size += 1 + 1;
      }
      if (IsTaskLock != false) {
        size += 1 + 1;
      }
      if (RequireAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequireAct);
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (planeSpecEffect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlaneSpecEffect);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (RankFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankFlag);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (buff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buff);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaneInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlaneID != 0) {
        PlaneID = other.PlaneID;
      }
      if (other.IsVip != false) {
        IsVip = other.IsVip;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      if (other.IsMember != false) {
        IsMember = other.IsMember;
      }
      if (other.IsTaskLock != false) {
        IsTaskLock = other.IsTaskLock;
      }
      if (other.RequireAct != 0) {
        RequireAct = other.RequireAct;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.planeSpecEffect_ != null) {
        if (planeSpecEffect_ == null) {
          PlaneSpecEffect = new global::PlaneWar.PlaneSpecEffect();
        }
        PlaneSpecEffect.MergeFrom(other.PlaneSpecEffect);
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.RankFlag != 0) {
        RankFlag = other.RankFlag;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.buff_ != null) {
        if (buff_ == null) {
          Buff = new global::PlaneWar.PlaneSpecEffect();
        }
        Buff.MergeFrom(other.Buff);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlaneID = input.ReadInt32();
            break;
          }
          case 16: {
            IsVip = input.ReadBool();
            break;
          }
          case 24: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 32: {
            IsMember = input.ReadBool();
            break;
          }
          case 40: {
            IsTaskLock = input.ReadBool();
            break;
          }
          case 48: {
            RequireAct = input.ReadInt32();
            break;
          }
          case 56: {
            Enable = input.ReadBool();
            break;
          }
          case 66: {
            if (planeSpecEffect_ == null) {
              PlaneSpecEffect = new global::PlaneWar.PlaneSpecEffect();
            }
            input.ReadMessage(PlaneSpecEffect);
            break;
          }
          case 72: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 80: {
            RankFlag = input.ReadInt32();
            break;
          }
          case 88: {
            Price = input.ReadInt32();
            break;
          }
          case 98: {
            if (buff_ == null) {
              Buff = new global::PlaneWar.PlaneSpecEffect();
            }
            input.ReadMessage(Buff);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlaneID = input.ReadInt32();
            break;
          }
          case 16: {
            IsVip = input.ReadBool();
            break;
          }
          case 24: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 32: {
            IsMember = input.ReadBool();
            break;
          }
          case 40: {
            IsTaskLock = input.ReadBool();
            break;
          }
          case 48: {
            RequireAct = input.ReadInt32();
            break;
          }
          case 56: {
            Enable = input.ReadBool();
            break;
          }
          case 66: {
            if (planeSpecEffect_ == null) {
              PlaneSpecEffect = new global::PlaneWar.PlaneSpecEffect();
            }
            input.ReadMessage(PlaneSpecEffect);
            break;
          }
          case 72: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 80: {
            RankFlag = input.ReadInt32();
            break;
          }
          case 88: {
            Price = input.ReadInt32();
            break;
          }
          case 98: {
            if (buff_ == null) {
              Buff = new global::PlaneWar.PlaneSpecEffect();
            }
            input.ReadMessage(Buff);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InteractionItem : pb::IMessage<InteractionItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InteractionItem> _parser = new pb::MessageParser<InteractionItem>(() => new InteractionItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InteractionItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionItem(InteractionItem other) : this() {
      id_ = other.id_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InteractionItem Clone() {
      return new InteractionItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InteractionItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InteractionItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InteractionItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RankStatusInfo : pb::IMessage<RankStatusInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RankStatusInfo> _parser = new pb::MessageParser<RankStatusInfo>(() => new RankStatusInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankStatusInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankStatusInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankStatusInfo(RankStatusInfo other) : this() {
      rankEnable_ = other.rankEnable_;
      allowTypeList_ = other.allowTypeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankStatusInfo Clone() {
      return new RankStatusInfo(this);
    }

    /// <summary>Field number for the "rankEnable" field.</summary>
    public const int RankEnableFieldNumber = 1;
    private bool rankEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RankEnable {
      get { return rankEnable_; }
      set {
        rankEnable_ = value;
      }
    }

    /// <summary>Field number for the "allowTypeList" field.</summary>
    public const int AllowTypeListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_allowTypeList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> allowTypeList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AllowTypeList {
      get { return allowTypeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankStatusInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankStatusInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RankEnable != other.RankEnable) return false;
      if(!allowTypeList_.Equals(other.allowTypeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RankEnable != false) hash ^= RankEnable.GetHashCode();
      hash ^= allowTypeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RankEnable != false) {
        output.WriteRawTag(8);
        output.WriteBool(RankEnable);
      }
      allowTypeList_.WriteTo(output, _repeated_allowTypeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RankEnable != false) {
        output.WriteRawTag(8);
        output.WriteBool(RankEnable);
      }
      allowTypeList_.WriteTo(ref output, _repeated_allowTypeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RankEnable != false) {
        size += 1 + 1;
      }
      size += allowTypeList_.CalculateSize(_repeated_allowTypeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankStatusInfo other) {
      if (other == null) {
        return;
      }
      if (other.RankEnable != false) {
        RankEnable = other.RankEnable;
      }
      allowTypeList_.Add(other.allowTypeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RankEnable = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            allowTypeList_.AddEntriesFrom(input, _repeated_allowTypeList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RankEnable = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            allowTypeList_.AddEntriesFrom(ref input, _repeated_allowTypeList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WingsInfo : pb::IMessage<WingsInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WingsInfo> _parser = new pb::MessageParser<WingsInfo>(() => new WingsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WingsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsInfo(WingsInfo other) : this() {
      wingsId_ = other.wingsId_;
      enable_ = other.enable_;
      timestamp_ = other.timestamp_;
      wingsSpecEffect_ = other.wingsSpecEffect_ != null ? other.wingsSpecEffect_.Clone() : null;
      rankFlag_ = other.rankFlag_;
      price_ = other.price_;
      buff_ = other.buff_ != null ? other.buff_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsInfo Clone() {
      return new WingsInfo(this);
    }

    /// <summary>Field number for the "wingsId" field.</summary>
    public const int WingsIdFieldNumber = 1;
    private int wingsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingsId {
      get { return wingsId_; }
      set {
        wingsId_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "wingsSpecEffect" field.</summary>
    public const int WingsSpecEffectFieldNumber = 4;
    private global::PlaneWar.WingsSpecEffect wingsSpecEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WingsSpecEffect WingsSpecEffect {
      get { return wingsSpecEffect_; }
      set {
        wingsSpecEffect_ = value;
      }
    }

    /// <summary>Field number for the "rankFlag" field.</summary>
    public const int RankFlagFieldNumber = 5;
    private int rankFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankFlag {
      get { return rankFlag_; }
      set {
        rankFlag_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 6;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 7;
    private global::PlaneWar.WingsSpecEffect buff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WingsSpecEffect Buff {
      get { return buff_; }
      set {
        buff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WingsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WingsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WingsId != other.WingsId) return false;
      if (Enable != other.Enable) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(WingsSpecEffect, other.WingsSpecEffect)) return false;
      if (RankFlag != other.RankFlag) return false;
      if (Price != other.Price) return false;
      if (!object.Equals(Buff, other.Buff)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WingsId != 0) hash ^= WingsId.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (wingsSpecEffect_ != null) hash ^= WingsSpecEffect.GetHashCode();
      if (RankFlag != 0) hash ^= RankFlag.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (buff_ != null) hash ^= Buff.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Timestamp);
      }
      if (wingsSpecEffect_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WingsSpecEffect);
      }
      if (RankFlag != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RankFlag);
      }
      if (Price != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Price);
      }
      if (buff_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Buff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Timestamp);
      }
      if (wingsSpecEffect_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WingsSpecEffect);
      }
      if (RankFlag != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RankFlag);
      }
      if (Price != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Price);
      }
      if (buff_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Buff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WingsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WingsId);
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (wingsSpecEffect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WingsSpecEffect);
      }
      if (RankFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankFlag);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (buff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buff);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WingsInfo other) {
      if (other == null) {
        return;
      }
      if (other.WingsId != 0) {
        WingsId = other.WingsId;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.wingsSpecEffect_ != null) {
        if (wingsSpecEffect_ == null) {
          WingsSpecEffect = new global::PlaneWar.WingsSpecEffect();
        }
        WingsSpecEffect.MergeFrom(other.WingsSpecEffect);
      }
      if (other.RankFlag != 0) {
        RankFlag = other.RankFlag;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.buff_ != null) {
        if (buff_ == null) {
          Buff = new global::PlaneWar.WingsSpecEffect();
        }
        Buff.MergeFrom(other.Buff);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 34: {
            if (wingsSpecEffect_ == null) {
              WingsSpecEffect = new global::PlaneWar.WingsSpecEffect();
            }
            input.ReadMessage(WingsSpecEffect);
            break;
          }
          case 40: {
            RankFlag = input.ReadInt32();
            break;
          }
          case 48: {
            Price = input.ReadInt32();
            break;
          }
          case 58: {
            if (buff_ == null) {
              Buff = new global::PlaneWar.WingsSpecEffect();
            }
            input.ReadMessage(Buff);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 34: {
            if (wingsSpecEffect_ == null) {
              WingsSpecEffect = new global::PlaneWar.WingsSpecEffect();
            }
            input.ReadMessage(WingsSpecEffect);
            break;
          }
          case 40: {
            RankFlag = input.ReadInt32();
            break;
          }
          case 48: {
            Price = input.ReadInt32();
            break;
          }
          case 58: {
            if (buff_ == null) {
              Buff = new global::PlaneWar.WingsSpecEffect();
            }
            input.ReadMessage(Buff);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoomInfo : pb::IMessage<RoomInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      planeList_ = other.planeList_.Clone();
      scratchCardEnable_ = other.scratchCardEnable_;
      interactionList_ = other.interactionList_.Clone();
      piggyBankEnable_ = other.piggyBankEnable_;
      personalPoolEnable_ = other.personalPoolEnable_;
      rewardMonsterList_ = other.rewardMonsterList_.Clone();
      rankStatus_ = other.rankStatus_ != null ? other.rankStatus_.Clone() : null;
      wingsList_ = other.wingsList_.Clone();
      ratioList_ = other.ratioList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "planeList" field.</summary>
    public const int PlaneListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.PlaneInfo> _repeated_planeList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.PlaneInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PlaneInfo> planeList_ = new pbc::RepeatedField<global::PlaneWar.PlaneInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PlaneInfo> PlaneList {
      get { return planeList_; }
    }

    /// <summary>Field number for the "scratchCardEnable" field.</summary>
    public const int ScratchCardEnableFieldNumber = 2;
    private bool scratchCardEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ScratchCardEnable {
      get { return scratchCardEnable_; }
      set {
        scratchCardEnable_ = value;
      }
    }

    /// <summary>Field number for the "interactionList" field.</summary>
    public const int InteractionListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PlaneWar.InteractionItem> _repeated_interactionList_codec
        = pb::FieldCodec.ForMessage(26, global::PlaneWar.InteractionItem.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.InteractionItem> interactionList_ = new pbc::RepeatedField<global::PlaneWar.InteractionItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.InteractionItem> InteractionList {
      get { return interactionList_; }
    }

    /// <summary>Field number for the "piggyBankEnable" field.</summary>
    public const int PiggyBankEnableFieldNumber = 4;
    private bool piggyBankEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PiggyBankEnable {
      get { return piggyBankEnable_; }
      set {
        piggyBankEnable_ = value;
      }
    }

    /// <summary>Field number for the "personalPoolEnable" field.</summary>
    public const int PersonalPoolEnableFieldNumber = 5;
    private bool personalPoolEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PersonalPoolEnable {
      get { return personalPoolEnable_; }
      set {
        personalPoolEnable_ = value;
      }
    }

    /// <summary>Field number for the "rewardMonsterList" field.</summary>
    public const int RewardMonsterListFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_rewardMonsterList_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> rewardMonsterList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RewardMonsterList {
      get { return rewardMonsterList_; }
    }

    /// <summary>Field number for the "rankStatus" field.</summary>
    public const int RankStatusFieldNumber = 7;
    private global::PlaneWar.RankStatusInfo rankStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RankStatusInfo RankStatus {
      get { return rankStatus_; }
      set {
        rankStatus_ = value;
      }
    }

    /// <summary>Field number for the "wingsList" field.</summary>
    public const int WingsListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::PlaneWar.WingsInfo> _repeated_wingsList_codec
        = pb::FieldCodec.ForMessage(66, global::PlaneWar.WingsInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.WingsInfo> wingsList_ = new pbc::RepeatedField<global::PlaneWar.WingsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.WingsInfo> WingsList {
      get { return wingsList_; }
    }

    /// <summary>Field number for the "ratioList" field.</summary>
    public const int RatioListFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_ratioList_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> ratioList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RatioList {
      get { return ratioList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!planeList_.Equals(other.planeList_)) return false;
      if (ScratchCardEnable != other.ScratchCardEnable) return false;
      if(!interactionList_.Equals(other.interactionList_)) return false;
      if (PiggyBankEnable != other.PiggyBankEnable) return false;
      if (PersonalPoolEnable != other.PersonalPoolEnable) return false;
      if(!rewardMonsterList_.Equals(other.rewardMonsterList_)) return false;
      if (!object.Equals(RankStatus, other.RankStatus)) return false;
      if(!wingsList_.Equals(other.wingsList_)) return false;
      if(!ratioList_.Equals(other.ratioList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= planeList_.GetHashCode();
      if (ScratchCardEnable != false) hash ^= ScratchCardEnable.GetHashCode();
      hash ^= interactionList_.GetHashCode();
      if (PiggyBankEnable != false) hash ^= PiggyBankEnable.GetHashCode();
      if (PersonalPoolEnable != false) hash ^= PersonalPoolEnable.GetHashCode();
      hash ^= rewardMonsterList_.GetHashCode();
      if (rankStatus_ != null) hash ^= RankStatus.GetHashCode();
      hash ^= wingsList_.GetHashCode();
      hash ^= ratioList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      planeList_.WriteTo(output, _repeated_planeList_codec);
      if (ScratchCardEnable != false) {
        output.WriteRawTag(16);
        output.WriteBool(ScratchCardEnable);
      }
      interactionList_.WriteTo(output, _repeated_interactionList_codec);
      if (PiggyBankEnable != false) {
        output.WriteRawTag(32);
        output.WriteBool(PiggyBankEnable);
      }
      if (PersonalPoolEnable != false) {
        output.WriteRawTag(40);
        output.WriteBool(PersonalPoolEnable);
      }
      rewardMonsterList_.WriteTo(output, _repeated_rewardMonsterList_codec);
      if (rankStatus_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RankStatus);
      }
      wingsList_.WriteTo(output, _repeated_wingsList_codec);
      ratioList_.WriteTo(output, _repeated_ratioList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      planeList_.WriteTo(ref output, _repeated_planeList_codec);
      if (ScratchCardEnable != false) {
        output.WriteRawTag(16);
        output.WriteBool(ScratchCardEnable);
      }
      interactionList_.WriteTo(ref output, _repeated_interactionList_codec);
      if (PiggyBankEnable != false) {
        output.WriteRawTag(32);
        output.WriteBool(PiggyBankEnable);
      }
      if (PersonalPoolEnable != false) {
        output.WriteRawTag(40);
        output.WriteBool(PersonalPoolEnable);
      }
      rewardMonsterList_.WriteTo(ref output, _repeated_rewardMonsterList_codec);
      if (rankStatus_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RankStatus);
      }
      wingsList_.WriteTo(ref output, _repeated_wingsList_codec);
      ratioList_.WriteTo(ref output, _repeated_ratioList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += planeList_.CalculateSize(_repeated_planeList_codec);
      if (ScratchCardEnable != false) {
        size += 1 + 1;
      }
      size += interactionList_.CalculateSize(_repeated_interactionList_codec);
      if (PiggyBankEnable != false) {
        size += 1 + 1;
      }
      if (PersonalPoolEnable != false) {
        size += 1 + 1;
      }
      size += rewardMonsterList_.CalculateSize(_repeated_rewardMonsterList_codec);
      if (rankStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RankStatus);
      }
      size += wingsList_.CalculateSize(_repeated_wingsList_codec);
      size += ratioList_.CalculateSize(_repeated_ratioList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      planeList_.Add(other.planeList_);
      if (other.ScratchCardEnable != false) {
        ScratchCardEnable = other.ScratchCardEnable;
      }
      interactionList_.Add(other.interactionList_);
      if (other.PiggyBankEnable != false) {
        PiggyBankEnable = other.PiggyBankEnable;
      }
      if (other.PersonalPoolEnable != false) {
        PersonalPoolEnable = other.PersonalPoolEnable;
      }
      rewardMonsterList_.Add(other.rewardMonsterList_);
      if (other.rankStatus_ != null) {
        if (rankStatus_ == null) {
          RankStatus = new global::PlaneWar.RankStatusInfo();
        }
        RankStatus.MergeFrom(other.RankStatus);
      }
      wingsList_.Add(other.wingsList_);
      ratioList_.Add(other.ratioList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            planeList_.AddEntriesFrom(input, _repeated_planeList_codec);
            break;
          }
          case 16: {
            ScratchCardEnable = input.ReadBool();
            break;
          }
          case 26: {
            interactionList_.AddEntriesFrom(input, _repeated_interactionList_codec);
            break;
          }
          case 32: {
            PiggyBankEnable = input.ReadBool();
            break;
          }
          case 40: {
            PersonalPoolEnable = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            rewardMonsterList_.AddEntriesFrom(input, _repeated_rewardMonsterList_codec);
            break;
          }
          case 58: {
            if (rankStatus_ == null) {
              RankStatus = new global::PlaneWar.RankStatusInfo();
            }
            input.ReadMessage(RankStatus);
            break;
          }
          case 66: {
            wingsList_.AddEntriesFrom(input, _repeated_wingsList_codec);
            break;
          }
          case 74:
          case 72: {
            ratioList_.AddEntriesFrom(input, _repeated_ratioList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            planeList_.AddEntriesFrom(ref input, _repeated_planeList_codec);
            break;
          }
          case 16: {
            ScratchCardEnable = input.ReadBool();
            break;
          }
          case 26: {
            interactionList_.AddEntriesFrom(ref input, _repeated_interactionList_codec);
            break;
          }
          case 32: {
            PiggyBankEnable = input.ReadBool();
            break;
          }
          case 40: {
            PersonalPoolEnable = input.ReadBool();
            break;
          }
          case 50:
          case 48: {
            rewardMonsterList_.AddEntriesFrom(ref input, _repeated_rewardMonsterList_codec);
            break;
          }
          case 58: {
            if (rankStatus_ == null) {
              RankStatus = new global::PlaneWar.RankStatusInfo();
            }
            input.ReadMessage(RankStatus);
            break;
          }
          case 66: {
            wingsList_.AddEntriesFrom(ref input, _repeated_wingsList_codec);
            break;
          }
          case 74:
          case 72: {
            ratioList_.AddEntriesFrom(ref input, _repeated_ratioList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSReady : pb::IMessage<CSReady>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSReady> _parser = new pb::MessageParser<CSReady>(() => new CSReady());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReady(CSReady other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReady Clone() {
      return new CSReady(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSReady other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCReady : pb::IMessage<SCReady>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCReady> _parser = new pb::MessageParser<SCReady>(() => new SCReady());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReady(SCReady other) : this() {
      playerList_ = other.playerList_.Clone();
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReady Clone() {
      return new SCReady(this);
    }

    /// <summary>Field number for the "playerList" field.</summary>
    public const int PlayerListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.PlayerInfo> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PlayerInfo> playerList_ = new pbc::RepeatedField<global::PlaneWar.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PlayerInfo> PlayerList {
      get { return playerList_; }
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 2;
    private global::PlaneWar.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerList_.Equals(other.playerList_)) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerList_.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      playerList_.WriteTo(output, _repeated_playerList_codec);
      if (roomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      playerList_.WriteTo(ref output, _repeated_playerList_codec);
      if (roomInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCReady other) {
      if (other == null) {
        return;
      }
      playerList_.Add(other.playerList_);
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::PlaneWar.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
          case 18: {
            if (roomInfo_ == null) {
              RoomInfo = new global::PlaneWar.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            playerList_.AddEntriesFrom(ref input, _repeated_playerList_codec);
            break;
          }
          case 18: {
            if (roomInfo_ == null) {
              RoomInfo = new global::PlaneWar.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserEnterNotify : pb::IMessage<SCUserEnterNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserEnterNotify> _parser = new pb::MessageParser<SCUserEnterNotify>(() => new SCUserEnterNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserEnterNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserEnterNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserEnterNotify(SCUserEnterNotify other) : this() {
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserEnterNotify Clone() {
      return new SCUserEnterNotify(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::PlaneWar.PlayerInfo player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PlayerInfo Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserEnterNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserEnterNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserEnterNotify other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::PlaneWar.PlayerInfo();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::PlaneWar.PlayerInfo();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::PlaneWar.PlayerInfo();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonsterInfo : pb::IMessage<MonsterInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonsterInfo> _parser = new pb::MessageParser<MonsterInfo>(() => new MonsterInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterInfo(MonsterInfo other) : this() {
      monsterType_ = other.monsterType_;
      monsterUID_ = other.monsterUID_;
      isConnect_ = other.isConnect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterInfo Clone() {
      return new MonsterInfo(this);
    }

    /// <summary>Field number for the "monsterType" field.</summary>
    public const int MonsterTypeFieldNumber = 1;
    private int monsterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterType {
      get { return monsterType_; }
      set {
        monsterType_ = value;
      }
    }

    /// <summary>Field number for the "monsterUID" field.</summary>
    public const int MonsterUIDFieldNumber = 2;
    private int monsterUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterUID {
      get { return monsterUID_; }
      set {
        monsterUID_ = value;
      }
    }

    /// <summary>Field number for the "isConnect" field.</summary>
    public const int IsConnectFieldNumber = 3;
    private bool isConnect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsConnect {
      get { return isConnect_; }
      set {
        isConnect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonsterType != other.MonsterType) return false;
      if (MonsterUID != other.MonsterUID) return false;
      if (IsConnect != other.IsConnect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonsterType != 0) hash ^= MonsterType.GetHashCode();
      if (MonsterUID != 0) hash ^= MonsterUID.GetHashCode();
      if (IsConnect != false) hash ^= IsConnect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MonsterType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterType);
      }
      if (MonsterUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterUID);
      }
      if (IsConnect != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsConnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MonsterType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterType);
      }
      if (MonsterUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterUID);
      }
      if (IsConnect != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsConnect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterType);
      }
      if (MonsterUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterUID);
      }
      if (IsConnect != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterInfo other) {
      if (other == null) {
        return;
      }
      if (other.MonsterType != 0) {
        MonsterType = other.MonsterType;
      }
      if (other.MonsterUID != 0) {
        MonsterUID = other.MonsterUID;
      }
      if (other.IsConnect != false) {
        IsConnect = other.IsConnect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterType = input.ReadInt32();
            break;
          }
          case 16: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 24: {
            IsConnect = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MonsterType = input.ReadInt32();
            break;
          }
          case 16: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 24: {
            IsConnect = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCMonsterSpawn : pb::IMessage<SCMonsterSpawn>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCMonsterSpawn> _parser = new pb::MessageParser<SCMonsterSpawn>(() => new SCMonsterSpawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMonsterSpawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMonsterSpawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMonsterSpawn(SCMonsterSpawn other) : this() {
      configID_ = other.configID_;
      monsterList_ = other.monsterList_.Clone();
      isCall_ = other.isCall_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMonsterSpawn Clone() {
      return new SCMonsterSpawn(this);
    }

    /// <summary>Field number for the "configID" field.</summary>
    public const int ConfigIDFieldNumber = 1;
    private int configID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigID {
      get { return configID_; }
      set {
        configID_ = value;
      }
    }

    /// <summary>Field number for the "monsterList" field.</summary>
    public const int MonsterListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.MonsterInfo> _repeated_monsterList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.MonsterInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.MonsterInfo> monsterList_ = new pbc::RepeatedField<global::PlaneWar.MonsterInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.MonsterInfo> MonsterList {
      get { return monsterList_; }
    }

    /// <summary>Field number for the "isCall" field.</summary>
    public const int IsCallFieldNumber = 3;
    private bool isCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCall {
      get { return isCall_; }
      set {
        isCall_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMonsterSpawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMonsterSpawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigID != other.ConfigID) return false;
      if(!monsterList_.Equals(other.monsterList_)) return false;
      if (IsCall != other.IsCall) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigID != 0) hash ^= ConfigID.GetHashCode();
      hash ^= monsterList_.GetHashCode();
      if (IsCall != false) hash ^= IsCall.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ConfigID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigID);
      }
      monsterList_.WriteTo(output, _repeated_monsterList_codec);
      if (IsCall != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCall);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ConfigID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigID);
      }
      monsterList_.WriteTo(ref output, _repeated_monsterList_codec);
      if (IsCall != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCall);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigID);
      }
      size += monsterList_.CalculateSize(_repeated_monsterList_codec);
      if (IsCall != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMonsterSpawn other) {
      if (other == null) {
        return;
      }
      if (other.ConfigID != 0) {
        ConfigID = other.ConfigID;
      }
      monsterList_.Add(other.monsterList_);
      if (other.IsCall != false) {
        IsCall = other.IsCall;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 18: {
            monsterList_.AddEntriesFrom(input, _repeated_monsterList_codec);
            break;
          }
          case 24: {
            IsCall = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 18: {
            monsterList_.AddEntriesFrom(ref input, _repeated_monsterList_codec);
            break;
          }
          case 24: {
            IsCall = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSShot : pb::IMessage<CSShot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSShot> _parser = new pb::MessageParser<CSShot>(() => new CSShot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSShot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSShot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSShot(CSShot other) : this() {
      angle_ = other.angle_;
      ratio_ = other.ratio_;
      bulletType_ = other.bulletType_;
      scatter_ = other.scatter_;
      sourceUID_ = other.sourceUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSShot Clone() {
      return new CSShot(this);
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 1;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 2;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 3;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "scatter" field.</summary>
    public const int ScatterFieldNumber = 4;
    private int scatter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Scatter {
      get { return scatter_; }
      set {
        scatter_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 5;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSShot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSShot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Angle != other.Angle) return false;
      if (Ratio != other.Ratio) return false;
      if (BulletType != other.BulletType) return false;
      if (Scatter != other.Scatter) return false;
      if (SourceUID != other.SourceUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (Scatter != 0) hash ^= Scatter.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Angle != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Angle);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (BulletType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletType);
      }
      if (Scatter != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Scatter);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Angle != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Angle);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (BulletType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletType);
      }
      if (Scatter != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Scatter);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (Scatter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scatter);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSShot other) {
      if (other == null) {
        return;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.Scatter != 0) {
        Scatter = other.Scatter;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Angle = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            BulletType = input.ReadInt32();
            break;
          }
          case 32: {
            Scatter = input.ReadInt32();
            break;
          }
          case 40: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Angle = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            BulletType = input.ReadInt32();
            break;
          }
          case 32: {
            Scatter = input.ReadInt32();
            break;
          }
          case 40: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCShot : pb::IMessage<SCShot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCShot> _parser = new pb::MessageParser<SCShot>(() => new SCShot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCShot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCShot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCShot(SCShot other) : this() {
      chair_ = other.chair_;
      angle_ = other.angle_;
      score_ = other.score_;
      bulletType_ = other.bulletType_;
      scatter_ = other.scatter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCShot Clone() {
      return new SCShot(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 2;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 4;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "scatter" field.</summary>
    public const int ScatterFieldNumber = 5;
    private int scatter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Scatter {
      get { return scatter_; }
      set {
        scatter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCShot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCShot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (Angle != other.Angle) return false;
      if (Score != other.Score) return false;
      if (BulletType != other.BulletType) return false;
      if (Scatter != other.Scatter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (Scatter != 0) hash ^= Scatter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Angle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Angle);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (BulletType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BulletType);
      }
      if (Scatter != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Scatter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Angle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Angle);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (BulletType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BulletType);
      }
      if (Scatter != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Scatter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (Scatter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scatter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCShot other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.Scatter != 0) {
        Scatter = other.Scatter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Angle = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            BulletType = input.ReadInt32();
            break;
          }
          case 40: {
            Scatter = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Angle = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            BulletType = input.ReadInt32();
            break;
          }
          case 40: {
            Scatter = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSLock : pb::IMessage<CSLock>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSLock> _parser = new pb::MessageParser<CSLock>(() => new CSLock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLock(CSLock other) : this() {
      monsterUID_ = other.monsterUID_;
      colliderIndex_ = other.colliderIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLock Clone() {
      return new CSLock(this);
    }

    /// <summary>Field number for the "monsterUID" field.</summary>
    public const int MonsterUIDFieldNumber = 1;
    private int monsterUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterUID {
      get { return monsterUID_; }
      set {
        monsterUID_ = value;
      }
    }

    /// <summary>Field number for the "colliderIndex" field.</summary>
    public const int ColliderIndexFieldNumber = 2;
    private int colliderIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColliderIndex {
      get { return colliderIndex_; }
      set {
        colliderIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonsterUID != other.MonsterUID) return false;
      if (ColliderIndex != other.ColliderIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonsterUID != 0) hash ^= MonsterUID.GetHashCode();
      if (ColliderIndex != 0) hash ^= ColliderIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MonsterUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterUID);
      }
      if (ColliderIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColliderIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MonsterUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterUID);
      }
      if (ColliderIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColliderIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterUID);
      }
      if (ColliderIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColliderIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLock other) {
      if (other == null) {
        return;
      }
      if (other.MonsterUID != 0) {
        MonsterUID = other.MonsterUID;
      }
      if (other.ColliderIndex != 0) {
        ColliderIndex = other.ColliderIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 16: {
            ColliderIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 16: {
            ColliderIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCLock : pb::IMessage<SCLock>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCLock> _parser = new pb::MessageParser<SCLock>(() => new SCLock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLock(SCLock other) : this() {
      chair_ = other.chair_;
      monsterUID_ = other.monsterUID_;
      colliderIndex_ = other.colliderIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLock Clone() {
      return new SCLock(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "monsterUID" field.</summary>
    public const int MonsterUIDFieldNumber = 2;
    private int monsterUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterUID {
      get { return monsterUID_; }
      set {
        monsterUID_ = value;
      }
    }

    /// <summary>Field number for the "colliderIndex" field.</summary>
    public const int ColliderIndexFieldNumber = 3;
    private int colliderIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColliderIndex {
      get { return colliderIndex_; }
      set {
        colliderIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (MonsterUID != other.MonsterUID) return false;
      if (ColliderIndex != other.ColliderIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (MonsterUID != 0) hash ^= MonsterUID.GetHashCode();
      if (ColliderIndex != 0) hash ^= ColliderIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (MonsterUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterUID);
      }
      if (ColliderIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ColliderIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (MonsterUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterUID);
      }
      if (ColliderIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ColliderIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (MonsterUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterUID);
      }
      if (ColliderIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColliderIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLock other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.MonsterUID != 0) {
        MonsterUID = other.MonsterUID;
      }
      if (other.ColliderIndex != 0) {
        ColliderIndex = other.ColliderIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 24: {
            ColliderIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 24: {
            ColliderIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Poker : pb::IMessage<Poker>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Poker> _parser = new pb::MessageParser<Poker>(() => new Poker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Poker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Poker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Poker(Poker other) : this() {
      value_ = other.value_;
      multiple_ = other.multiple_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Poker Clone() {
      return new Poker(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 2;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Poker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Poker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (Multiple != other.Multiple) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (Multiple != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (Multiple != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Poker other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
          case 16: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
          case 16: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DropPoker : pb::IMessage<DropPoker>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DropPoker> _parser = new pb::MessageParser<DropPoker>(() => new DropPoker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DropPoker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropPoker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropPoker(DropPoker other) : this() {
      pokerList_ = other.pokerList_.Clone();
      dice_ = other.dice_;
      kind_ = other.kind_;
      kindMultiple_ = other.kindMultiple_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropPoker Clone() {
      return new DropPoker(this);
    }

    /// <summary>Field number for the "pokerList" field.</summary>
    public const int PokerListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.Poker> _repeated_pokerList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.Poker.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.Poker> pokerList_ = new pbc::RepeatedField<global::PlaneWar.Poker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.Poker> PokerList {
      get { return pokerList_; }
    }

    /// <summary>Field number for the "dice" field.</summary>
    public const int DiceFieldNumber = 2;
    private int dice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dice {
      get { return dice_; }
      set {
        dice_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 3;
    private int kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "kindMultiple" field.</summary>
    public const int KindMultipleFieldNumber = 4;
    private int kindMultiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KindMultiple {
      get { return kindMultiple_; }
      set {
        kindMultiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DropPoker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DropPoker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pokerList_.Equals(other.pokerList_)) return false;
      if (Dice != other.Dice) return false;
      if (Kind != other.Kind) return false;
      if (KindMultiple != other.KindMultiple) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pokerList_.GetHashCode();
      if (Dice != 0) hash ^= Dice.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (KindMultiple != 0) hash ^= KindMultiple.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pokerList_.WriteTo(output, _repeated_pokerList_codec);
      if (Dice != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Dice);
      }
      if (Kind != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Kind);
      }
      if (KindMultiple != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(KindMultiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pokerList_.WriteTo(ref output, _repeated_pokerList_codec);
      if (Dice != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Dice);
      }
      if (Kind != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Kind);
      }
      if (KindMultiple != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(KindMultiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pokerList_.CalculateSize(_repeated_pokerList_codec);
      if (Dice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dice);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kind);
      }
      if (KindMultiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KindMultiple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DropPoker other) {
      if (other == null) {
        return;
      }
      pokerList_.Add(other.pokerList_);
      if (other.Dice != 0) {
        Dice = other.Dice;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.KindMultiple != 0) {
        KindMultiple = other.KindMultiple;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pokerList_.AddEntriesFrom(input, _repeated_pokerList_codec);
            break;
          }
          case 16: {
            Dice = input.ReadInt32();
            break;
          }
          case 24: {
            Kind = input.ReadInt32();
            break;
          }
          case 32: {
            KindMultiple = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pokerList_.AddEntriesFrom(ref input, _repeated_pokerList_codec);
            break;
          }
          case 16: {
            Dice = input.ReadInt32();
            break;
          }
          case 24: {
            Kind = input.ReadInt32();
            break;
          }
          case 32: {
            KindMultiple = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TriggerBullet : pb::IMessage<TriggerBullet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriggerBullet> _parser = new pb::MessageParser<TriggerBullet>(() => new TriggerBullet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerBullet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerBullet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerBullet(TriggerBullet other) : this() {
      bulletType_ = other.bulletType_;
      subType_ = other.subType_;
      num_ = other.num_;
      params_ = other.params_.Clone();
      params2_ = other.params2_.Clone();
      sourceUID_ = other.sourceUID_;
      generation_ = other.generation_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      delay_ = other.delay_;
      range_ = other.range_;
      speed_ = other.speed_;
      monetary_ = other.monetary_;
      destroyDelay_ = other.destroyDelay_;
      hitRatio_ = other.hitRatio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerBullet Clone() {
      return new TriggerBullet(this);
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 1;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "subType" field.</summary>
    public const int SubTypeFieldNumber = 2;
    private int subType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_params_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> params_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "params2" field.</summary>
    public const int Params2FieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_params2_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> params2_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Params2 {
      get { return params2_; }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 6;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "generation" field.</summary>
    public const int GenerationFieldNumber = 7;
    private int generation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Generation {
      get { return generation_; }
      set {
        generation_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 8;
    private global::PlaneWar.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 9;
    private float delay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 10;
    private int range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 11;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "monetary" field.</summary>
    public const int MonetaryFieldNumber = 12;
    private string monetary_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Monetary {
      get { return monetary_; }
      set {
        monetary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destroyDelay" field.</summary>
    public const int DestroyDelayFieldNumber = 13;
    private float destroyDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DestroyDelay {
      get { return destroyDelay_; }
      set {
        destroyDelay_ = value;
      }
    }

    /// <summary>Field number for the "hitRatio" field.</summary>
    public const int HitRatioFieldNumber = 14;
    private int hitRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitRatio {
      get { return hitRatio_; }
      set {
        hitRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerBullet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerBullet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BulletType != other.BulletType) return false;
      if (SubType != other.SubType) return false;
      if (Num != other.Num) return false;
      if(!params_.Equals(other.params_)) return false;
      if(!params2_.Equals(other.params2_)) return false;
      if (SourceUID != other.SourceUID) return false;
      if (Generation != other.Generation) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Delay, other.Delay)) return false;
      if (Range != other.Range) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (Monetary != other.Monetary) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DestroyDelay, other.DestroyDelay)) return false;
      if (HitRatio != other.HitRatio) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (SubType != 0) hash ^= SubType.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      hash ^= params_.GetHashCode();
      hash ^= params2_.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (Generation != 0) hash ^= Generation.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Delay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Delay);
      if (Range != 0) hash ^= Range.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (Monetary.Length != 0) hash ^= Monetary.GetHashCode();
      if (DestroyDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DestroyDelay);
      if (HitRatio != 0) hash ^= HitRatio.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BulletType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BulletType);
      }
      if (SubType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SubType);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      params_.WriteTo(output, _repeated_params_codec);
      params2_.WriteTo(output, _repeated_params2_codec);
      if (SourceUID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SourceUID);
      }
      if (Generation != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Generation);
      }
      if (pos_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Pos);
      }
      if (Delay != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Delay);
      }
      if (Range != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Range);
      }
      if (Speed != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Speed);
      }
      if (Monetary.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Monetary);
      }
      if (DestroyDelay != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(DestroyDelay);
      }
      if (HitRatio != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(HitRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BulletType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BulletType);
      }
      if (SubType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SubType);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      params_.WriteTo(ref output, _repeated_params_codec);
      params2_.WriteTo(ref output, _repeated_params2_codec);
      if (SourceUID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SourceUID);
      }
      if (Generation != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Generation);
      }
      if (pos_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Pos);
      }
      if (Delay != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Delay);
      }
      if (Range != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Range);
      }
      if (Speed != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Speed);
      }
      if (Monetary.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Monetary);
      }
      if (DestroyDelay != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(DestroyDelay);
      }
      if (HitRatio != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(HitRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubType);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      size += params2_.CalculateSize(_repeated_params2_codec);
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (Generation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Generation);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Delay != 0F) {
        size += 1 + 4;
      }
      if (Range != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Range);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Monetary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Monetary);
      }
      if (DestroyDelay != 0F) {
        size += 1 + 4;
      }
      if (HitRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitRatio);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerBullet other) {
      if (other == null) {
        return;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.SubType != 0) {
        SubType = other.SubType;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      params_.Add(other.params_);
      params2_.Add(other.params2_);
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.Generation != 0) {
        Generation = other.Generation;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::PlaneWar.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Delay != 0F) {
        Delay = other.Delay;
      }
      if (other.Range != 0) {
        Range = other.Range;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Monetary.Length != 0) {
        Monetary = other.Monetary;
      }
      if (other.DestroyDelay != 0F) {
        DestroyDelay = other.DestroyDelay;
      }
      if (other.HitRatio != 0) {
        HitRatio = other.HitRatio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BulletType = input.ReadInt32();
            break;
          }
          case 16: {
            SubType = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 42:
          case 40: {
            params2_.AddEntriesFrom(input, _repeated_params2_codec);
            break;
          }
          case 48: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 56: {
            Generation = input.ReadInt32();
            break;
          }
          case 66: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 77: {
            Delay = input.ReadFloat();
            break;
          }
          case 80: {
            Range = input.ReadInt32();
            break;
          }
          case 93: {
            Speed = input.ReadFloat();
            break;
          }
          case 98: {
            Monetary = input.ReadString();
            break;
          }
          case 109: {
            DestroyDelay = input.ReadFloat();
            break;
          }
          case 112: {
            HitRatio = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BulletType = input.ReadInt32();
            break;
          }
          case 16: {
            SubType = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            params_.AddEntriesFrom(ref input, _repeated_params_codec);
            break;
          }
          case 42:
          case 40: {
            params2_.AddEntriesFrom(ref input, _repeated_params2_codec);
            break;
          }
          case 48: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 56: {
            Generation = input.ReadInt32();
            break;
          }
          case 66: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 77: {
            Delay = input.ReadFloat();
            break;
          }
          case 80: {
            Range = input.ReadInt32();
            break;
          }
          case 93: {
            Speed = input.ReadFloat();
            break;
          }
          case 98: {
            Monetary = input.ReadString();
            break;
          }
          case 109: {
            DestroyDelay = input.ReadFloat();
            break;
          }
          case 112: {
            HitRatio = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Roulette : pb::IMessage<Roulette>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Roulette> _parser = new pb::MessageParser<Roulette>(() => new Roulette());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Roulette> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roulette() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roulette(Roulette other) : this() {
      outerIndex_ = other.outerIndex_;
      innerIndex_ = other.innerIndex_;
      outerRound_ = other.outerRound_.Clone();
      innerRound_ = other.innerRound_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Roulette Clone() {
      return new Roulette(this);
    }

    /// <summary>Field number for the "outerIndex" field.</summary>
    public const int OuterIndexFieldNumber = 1;
    private int outerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OuterIndex {
      get { return outerIndex_; }
      set {
        outerIndex_ = value;
      }
    }

    /// <summary>Field number for the "innerIndex" field.</summary>
    public const int InnerIndexFieldNumber = 2;
    private int innerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InnerIndex {
      get { return innerIndex_; }
      set {
        innerIndex_ = value;
      }
    }

    /// <summary>Field number for the "outerRound" field.</summary>
    public const int OuterRoundFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_outerRound_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> outerRound_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> OuterRound {
      get { return outerRound_; }
    }

    /// <summary>Field number for the "innerRound" field.</summary>
    public const int InnerRoundFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_innerRound_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> innerRound_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> InnerRound {
      get { return innerRound_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Roulette);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Roulette other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OuterIndex != other.OuterIndex) return false;
      if (InnerIndex != other.InnerIndex) return false;
      if(!outerRound_.Equals(other.outerRound_)) return false;
      if(!innerRound_.Equals(other.innerRound_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OuterIndex != 0) hash ^= OuterIndex.GetHashCode();
      if (InnerIndex != 0) hash ^= InnerIndex.GetHashCode();
      hash ^= outerRound_.GetHashCode();
      hash ^= innerRound_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OuterIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OuterIndex);
      }
      if (InnerIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InnerIndex);
      }
      outerRound_.WriteTo(output, _repeated_outerRound_codec);
      innerRound_.WriteTo(output, _repeated_innerRound_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OuterIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OuterIndex);
      }
      if (InnerIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InnerIndex);
      }
      outerRound_.WriteTo(ref output, _repeated_outerRound_codec);
      innerRound_.WriteTo(ref output, _repeated_innerRound_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OuterIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OuterIndex);
      }
      if (InnerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InnerIndex);
      }
      size += outerRound_.CalculateSize(_repeated_outerRound_codec);
      size += innerRound_.CalculateSize(_repeated_innerRound_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Roulette other) {
      if (other == null) {
        return;
      }
      if (other.OuterIndex != 0) {
        OuterIndex = other.OuterIndex;
      }
      if (other.InnerIndex != 0) {
        InnerIndex = other.InnerIndex;
      }
      outerRound_.Add(other.outerRound_);
      innerRound_.Add(other.innerRound_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OuterIndex = input.ReadInt32();
            break;
          }
          case 16: {
            InnerIndex = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            outerRound_.AddEntriesFrom(input, _repeated_outerRound_codec);
            break;
          }
          case 34:
          case 32: {
            innerRound_.AddEntriesFrom(input, _repeated_innerRound_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OuterIndex = input.ReadInt32();
            break;
          }
          case 16: {
            InnerIndex = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            outerRound_.AddEntriesFrom(ref input, _repeated_outerRound_codec);
            break;
          }
          case 34:
          case 32: {
            innerRound_.AddEntriesFrom(ref input, _repeated_innerRound_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DropBuff : pb::IMessage<DropBuff>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DropBuff> _parser = new pb::MessageParser<DropBuff>(() => new DropBuff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DropBuff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropBuff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropBuff(DropBuff other) : this() {
      buffUID_ = other.buffUID_;
      num_ = other.num_;
      compose_ = other.compose_.Clone();
      desc_ = other.desc_.Clone();
      speedUpRatio_ = other.speedUpRatio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropBuff Clone() {
      return new DropBuff(this);
    }

    /// <summary>Field number for the "buffUID" field.</summary>
    public const int BuffUIDFieldNumber = 1;
    private int buffUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffUID {
      get { return buffUID_; }
      set {
        buffUID_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "compose" field.</summary>
    public const int ComposeFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_compose_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> compose_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Compose {
      get { return compose_; }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_desc_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> desc_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Desc {
      get { return desc_; }
    }

    /// <summary>Field number for the "speedUpRatio" field.</summary>
    public const int SpeedUpRatioFieldNumber = 5;
    private int speedUpRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedUpRatio {
      get { return speedUpRatio_; }
      set {
        speedUpRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DropBuff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DropBuff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuffUID != other.BuffUID) return false;
      if (Num != other.Num) return false;
      if(!compose_.Equals(other.compose_)) return false;
      if(!desc_.Equals(other.desc_)) return false;
      if (SpeedUpRatio != other.SpeedUpRatio) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuffUID != 0) hash ^= BuffUID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      hash ^= compose_.GetHashCode();
      hash ^= desc_.GetHashCode();
      if (SpeedUpRatio != 0) hash ^= SpeedUpRatio.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BuffUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffUID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      compose_.WriteTo(output, _repeated_compose_codec);
      desc_.WriteTo(output, _repeated_desc_codec);
      if (SpeedUpRatio != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SpeedUpRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BuffUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffUID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      compose_.WriteTo(ref output, _repeated_compose_codec);
      desc_.WriteTo(ref output, _repeated_desc_codec);
      if (SpeedUpRatio != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SpeedUpRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffUID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      size += compose_.CalculateSize(_repeated_compose_codec);
      size += desc_.CalculateSize(_repeated_desc_codec);
      if (SpeedUpRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedUpRatio);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DropBuff other) {
      if (other == null) {
        return;
      }
      if (other.BuffUID != 0) {
        BuffUID = other.BuffUID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      compose_.Add(other.compose_);
      desc_.Add(other.desc_);
      if (other.SpeedUpRatio != 0) {
        SpeedUpRatio = other.SpeedUpRatio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuffUID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            compose_.AddEntriesFrom(input, _repeated_compose_codec);
            break;
          }
          case 34:
          case 32: {
            desc_.AddEntriesFrom(input, _repeated_desc_codec);
            break;
          }
          case 40: {
            SpeedUpRatio = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BuffUID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            compose_.AddEntriesFrom(ref input, _repeated_compose_codec);
            break;
          }
          case 34:
          case 32: {
            desc_.AddEntriesFrom(ref input, _repeated_desc_codec);
            break;
          }
          case 40: {
            SpeedUpRatio = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FakeTresureInfo : pb::IMessage<FakeTresureInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FakeTresureInfo> _parser = new pb::MessageParser<FakeTresureInfo>(() => new FakeTresureInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FakeTresureInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FakeTresureInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FakeTresureInfo(FakeTresureInfo other) : this() {
      type_ = other.type_;
      propID_ = other.propID_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FakeTresureInfo Clone() {
      return new FakeTresureInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "propID" field.</summary>
    public const int PropIDFieldNumber = 2;
    private int propID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropID {
      get { return propID_; }
      set {
        propID_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FakeTresureInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FakeTresureInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (PropID != other.PropID) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PropID != 0) hash ^= PropID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (PropID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropID);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (PropID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropID);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (PropID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FakeTresureInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PropID != 0) {
        PropID = other.PropID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            PropID = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            PropID = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TreasureInfo : pb::IMessage<TreasureInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TreasureInfo> _parser = new pb::MessageParser<TreasureInfo>(() => new TreasureInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreasureInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreasureInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreasureInfo(TreasureInfo other) : this() {
      showType_ = other.showType_;
      type_ = other.type_;
      propID_ = other.propID_;
      num_ = other.num_;
      fakeType_ = other.fakeType_;
      fakeInfo_ = other.fakeInfo_ != null ? other.fakeInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreasureInfo Clone() {
      return new TreasureInfo(this);
    }

    /// <summary>Field number for the "showType" field.</summary>
    public const int ShowTypeFieldNumber = 1;
    private int showType_;
    /// <summary>
    ///2:10连抽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowType {
      get { return showType_; }
      set {
        showType_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///品质1 2 3 4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "propID" field.</summary>
    public const int PropIDFieldNumber = 3;
    private int propID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropID {
      get { return propID_; }
      set {
        propID_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 4;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "fakeType" field.</summary>
    public const int FakeTypeFieldNumber = 5;
    private int fakeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FakeType {
      get { return fakeType_; }
      set {
        fakeType_ = value;
      }
    }

    /// <summary>Field number for the "fakeInfo" field.</summary>
    public const int FakeInfoFieldNumber = 6;
    private global::PlaneWar.FakeTresureInfo fakeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.FakeTresureInfo FakeInfo {
      get { return fakeInfo_; }
      set {
        fakeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TreasureInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TreasureInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowType != other.ShowType) return false;
      if (Type != other.Type) return false;
      if (PropID != other.PropID) return false;
      if (Num != other.Num) return false;
      if (FakeType != other.FakeType) return false;
      if (!object.Equals(FakeInfo, other.FakeInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowType != 0) hash ^= ShowType.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PropID != 0) hash ^= PropID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (FakeType != 0) hash ^= FakeType.GetHashCode();
      if (fakeInfo_ != null) hash ^= FakeInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ShowType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShowType);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (PropID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PropID);
      }
      if (Num != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Num);
      }
      if (FakeType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FakeType);
      }
      if (fakeInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FakeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ShowType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShowType);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (PropID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PropID);
      }
      if (Num != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Num);
      }
      if (FakeType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FakeType);
      }
      if (fakeInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FakeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowType);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (PropID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (FakeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FakeType);
      }
      if (fakeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FakeInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TreasureInfo other) {
      if (other == null) {
        return;
      }
      if (other.ShowType != 0) {
        ShowType = other.ShowType;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PropID != 0) {
        PropID = other.PropID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.FakeType != 0) {
        FakeType = other.FakeType;
      }
      if (other.fakeInfo_ != null) {
        if (fakeInfo_ == null) {
          FakeInfo = new global::PlaneWar.FakeTresureInfo();
        }
        FakeInfo.MergeFrom(other.FakeInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShowType = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            PropID = input.ReadInt32();
            break;
          }
          case 32: {
            Num = input.ReadInt32();
            break;
          }
          case 40: {
            FakeType = input.ReadInt32();
            break;
          }
          case 50: {
            if (fakeInfo_ == null) {
              FakeInfo = new global::PlaneWar.FakeTresureInfo();
            }
            input.ReadMessage(FakeInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ShowType = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            PropID = input.ReadInt32();
            break;
          }
          case 32: {
            Num = input.ReadInt32();
            break;
          }
          case 40: {
            FakeType = input.ReadInt32();
            break;
          }
          case 50: {
            if (fakeInfo_ == null) {
              FakeInfo = new global::PlaneWar.FakeTresureInfo();
            }
            input.ReadMessage(FakeInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FortuneWheelInfo : pb::IMessage<FortuneWheelInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FortuneWheelInfo> _parser = new pb::MessageParser<FortuneWheelInfo>(() => new FortuneWheelInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FortuneWheelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortuneWheelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortuneWheelInfo(FortuneWheelInfo other) : this() {
      stage_ = other.stage_;
      ratio_ = other.ratio_;
      next_ = other.next_;
      color_ = other.color_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortuneWheelInfo Clone() {
      return new FortuneWheelInfo(this);
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private int stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 2;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "next" field.</summary>
    public const int NextFieldNumber = 3;
    private bool next_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Next {
      get { return next_; }
      set {
        next_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private int color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FortuneWheelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FortuneWheelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stage != other.Stage) return false;
      if (Ratio != other.Ratio) return false;
      if (Next != other.Next) return false;
      if (Color != other.Color) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (Next != false) hash ^= Next.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Stage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Stage);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (Next != false) {
        output.WriteRawTag(24);
        output.WriteBool(Next);
      }
      if (Color != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Stage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Stage);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (Next != false) {
        output.WriteRawTag(24);
        output.WriteBool(Next);
      }
      if (Color != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (Next != false) {
        size += 1 + 1;
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FortuneWheelInfo other) {
      if (other == null) {
        return;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.Next != false) {
        Next = other.Next;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Stage = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            Next = input.ReadBool();
            break;
          }
          case 32: {
            Color = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Stage = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            Next = input.ReadBool();
            break;
          }
          case 32: {
            Color = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ToadInfo : pb::IMessage<ToadInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ToadInfo> _parser = new pb::MessageParser<ToadInfo>(() => new ToadInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToadInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToadInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToadInfo(ToadInfo other) : this() {
      ratioList_ = other.ratioList_.Clone();
      critical_ = other.critical_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToadInfo Clone() {
      return new ToadInfo(this);
    }

    /// <summary>Field number for the "ratioList" field.</summary>
    public const int RatioListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ratioList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ratioList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RatioList {
      get { return ratioList_; }
    }

    /// <summary>Field number for the "critical" field.</summary>
    public const int CriticalFieldNumber = 2;
    private int critical_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Critical {
      get { return critical_; }
      set {
        critical_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToadInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToadInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ratioList_.Equals(other.ratioList_)) return false;
      if (Critical != other.Critical) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ratioList_.GetHashCode();
      if (Critical != 0) hash ^= Critical.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ratioList_.WriteTo(output, _repeated_ratioList_codec);
      if (Critical != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Critical);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ratioList_.WriteTo(ref output, _repeated_ratioList_codec);
      if (Critical != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Critical);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ratioList_.CalculateSize(_repeated_ratioList_codec);
      if (Critical != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Critical);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToadInfo other) {
      if (other == null) {
        return;
      }
      ratioList_.Add(other.ratioList_);
      if (other.Critical != 0) {
        Critical = other.Critical;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            ratioList_.AddEntriesFrom(input, _repeated_ratioList_codec);
            break;
          }
          case 16: {
            Critical = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            ratioList_.AddEntriesFrom(ref input, _repeated_ratioList_codec);
            break;
          }
          case 16: {
            Critical = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FortuneConfig : pb::IMessage<FortuneConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FortuneConfig> _parser = new pb::MessageParser<FortuneConfig>(() => new FortuneConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FortuneConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortuneConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortuneConfig(FortuneConfig other) : this() {
      fortuneWheelInfo_ = other.fortuneWheelInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortuneConfig Clone() {
      return new FortuneConfig(this);
    }

    /// <summary>Field number for the "fortuneWheelInfo" field.</summary>
    public const int FortuneWheelInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.FortuneWheelInfo> _repeated_fortuneWheelInfo_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.FortuneWheelInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.FortuneWheelInfo> fortuneWheelInfo_ = new pbc::RepeatedField<global::PlaneWar.FortuneWheelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.FortuneWheelInfo> FortuneWheelInfo {
      get { return fortuneWheelInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FortuneConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FortuneConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fortuneWheelInfo_.Equals(other.fortuneWheelInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fortuneWheelInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      fortuneWheelInfo_.WriteTo(output, _repeated_fortuneWheelInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      fortuneWheelInfo_.WriteTo(ref output, _repeated_fortuneWheelInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fortuneWheelInfo_.CalculateSize(_repeated_fortuneWheelInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FortuneConfig other) {
      if (other == null) {
        return;
      }
      fortuneWheelInfo_.Add(other.fortuneWheelInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fortuneWheelInfo_.AddEntriesFrom(input, _repeated_fortuneWheelInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            fortuneWheelInfo_.AddEntriesFrom(ref input, _repeated_fortuneWheelInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BeeConfig : pb::IMessage<BeeConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BeeConfig> _parser = new pb::MessageParser<BeeConfig>(() => new BeeConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeeConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeeConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeeConfig(BeeConfig other) : this() {
      aList_ = other.aList_.Clone();
      bList_ = other.bList_.Clone();
      cList_ = other.cList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeeConfig Clone() {
      return new BeeConfig(this);
    }

    /// <summary>Field number for the "aList" field.</summary>
    public const int AListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_aList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> aList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AList {
      get { return aList_; }
    }

    /// <summary>Field number for the "bList" field.</summary>
    public const int BListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_bList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> bList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BList {
      get { return bList_; }
    }

    /// <summary>Field number for the "cList" field.</summary>
    public const int CListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> cList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CList {
      get { return cList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeeConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeeConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!aList_.Equals(other.aList_)) return false;
      if(!bList_.Equals(other.bList_)) return false;
      if(!cList_.Equals(other.cList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= aList_.GetHashCode();
      hash ^= bList_.GetHashCode();
      hash ^= cList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      aList_.WriteTo(output, _repeated_aList_codec);
      bList_.WriteTo(output, _repeated_bList_codec);
      cList_.WriteTo(output, _repeated_cList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      aList_.WriteTo(ref output, _repeated_aList_codec);
      bList_.WriteTo(ref output, _repeated_bList_codec);
      cList_.WriteTo(ref output, _repeated_cList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += aList_.CalculateSize(_repeated_aList_codec);
      size += bList_.CalculateSize(_repeated_bList_codec);
      size += cList_.CalculateSize(_repeated_cList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeeConfig other) {
      if (other == null) {
        return;
      }
      aList_.Add(other.aList_);
      bList_.Add(other.bList_);
      cList_.Add(other.cList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            aList_.AddEntriesFrom(input, _repeated_aList_codec);
            break;
          }
          case 18:
          case 16: {
            bList_.AddEntriesFrom(input, _repeated_bList_codec);
            break;
          }
          case 26:
          case 24: {
            cList_.AddEntriesFrom(input, _repeated_cList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            aList_.AddEntriesFrom(ref input, _repeated_aList_codec);
            break;
          }
          case 18:
          case 16: {
            bList_.AddEntriesFrom(ref input, _repeated_bList_codec);
            break;
          }
          case 26:
          case 24: {
            cList_.AddEntriesFrom(ref input, _repeated_cList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommonReplayConfig : pb::IMessage<CommonReplayConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommonReplayConfig> _parser = new pb::MessageParser<CommonReplayConfig>(() => new CommonReplayConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonReplayConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonReplayConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonReplayConfig(CommonReplayConfig other) : this() {
      maxLen_ = other.maxLen_;
      limitReward_ = other.limitReward_;
      limitMul_ = other.limitMul_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonReplayConfig Clone() {
      return new CommonReplayConfig(this);
    }

    /// <summary>Field number for the "maxLen" field.</summary>
    public const int MaxLenFieldNumber = 1;
    private int maxLen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLen {
      get { return maxLen_; }
      set {
        maxLen_ = value;
      }
    }

    /// <summary>Field number for the "limitReward" field.</summary>
    public const int LimitRewardFieldNumber = 2;
    private int limitReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitReward {
      get { return limitReward_; }
      set {
        limitReward_ = value;
      }
    }

    /// <summary>Field number for the "limitMul" field.</summary>
    public const int LimitMulFieldNumber = 3;
    private int limitMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitMul {
      get { return limitMul_; }
      set {
        limitMul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonReplayConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonReplayConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxLen != other.MaxLen) return false;
      if (LimitReward != other.LimitReward) return false;
      if (LimitMul != other.LimitMul) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxLen != 0) hash ^= MaxLen.GetHashCode();
      if (LimitReward != 0) hash ^= LimitReward.GetHashCode();
      if (LimitMul != 0) hash ^= LimitMul.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MaxLen != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxLen);
      }
      if (LimitReward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LimitReward);
      }
      if (LimitMul != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LimitMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MaxLen != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxLen);
      }
      if (LimitReward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LimitReward);
      }
      if (LimitMul != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LimitMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLen);
      }
      if (LimitReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitReward);
      }
      if (LimitMul != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitMul);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonReplayConfig other) {
      if (other == null) {
        return;
      }
      if (other.MaxLen != 0) {
        MaxLen = other.MaxLen;
      }
      if (other.LimitReward != 0) {
        LimitReward = other.LimitReward;
      }
      if (other.LimitMul != 0) {
        LimitMul = other.LimitMul;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxLen = input.ReadInt32();
            break;
          }
          case 16: {
            LimitReward = input.ReadInt32();
            break;
          }
          case 24: {
            LimitMul = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MaxLen = input.ReadInt32();
            break;
          }
          case 16: {
            LimitReward = input.ReadInt32();
            break;
          }
          case 24: {
            LimitMul = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GlobalReplayConfig : pb::IMessage<GlobalReplayConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GlobalReplayConfig> _parser = new pb::MessageParser<GlobalReplayConfig>(() => new GlobalReplayConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalReplayConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalReplayConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalReplayConfig(GlobalReplayConfig other) : this() {
      commonReplayConfig_ = other.commonReplayConfig_ != null ? other.commonReplayConfig_.Clone() : null;
      refreshTime_ = other.refreshTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalReplayConfig Clone() {
      return new GlobalReplayConfig(this);
    }

    /// <summary>Field number for the "commonReplayConfig" field.</summary>
    public const int CommonReplayConfigFieldNumber = 1;
    private global::PlaneWar.CommonReplayConfig commonReplayConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.CommonReplayConfig CommonReplayConfig {
      get { return commonReplayConfig_; }
      set {
        commonReplayConfig_ = value;
      }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 2;
    private int refreshTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalReplayConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalReplayConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonReplayConfig, other.CommonReplayConfig)) return false;
      if (RefreshTime != other.RefreshTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commonReplayConfig_ != null) hash ^= CommonReplayConfig.GetHashCode();
      if (RefreshTime != 0) hash ^= RefreshTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (commonReplayConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonReplayConfig);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RefreshTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (commonReplayConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonReplayConfig);
      }
      if (RefreshTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RefreshTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commonReplayConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonReplayConfig);
      }
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalReplayConfig other) {
      if (other == null) {
        return;
      }
      if (other.commonReplayConfig_ != null) {
        if (commonReplayConfig_ == null) {
          CommonReplayConfig = new global::PlaneWar.CommonReplayConfig();
        }
        CommonReplayConfig.MergeFrom(other.CommonReplayConfig);
      }
      if (other.RefreshTime != 0) {
        RefreshTime = other.RefreshTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commonReplayConfig_ == null) {
              CommonReplayConfig = new global::PlaneWar.CommonReplayConfig();
            }
            input.ReadMessage(CommonReplayConfig);
            break;
          }
          case 16: {
            RefreshTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (commonReplayConfig_ == null) {
              CommonReplayConfig = new global::PlaneWar.CommonReplayConfig();
            }
            input.ReadMessage(CommonReplayConfig);
            break;
          }
          case 16: {
            RefreshTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PersonalReplayConfig : pb::IMessage<PersonalReplayConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PersonalReplayConfig> _parser = new pb::MessageParser<PersonalReplayConfig>(() => new PersonalReplayConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersonalReplayConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalReplayConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalReplayConfig(PersonalReplayConfig other) : this() {
      commonReplayConfig_ = other.commonReplayConfig_ != null ? other.commonReplayConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalReplayConfig Clone() {
      return new PersonalReplayConfig(this);
    }

    /// <summary>Field number for the "commonReplayConfig" field.</summary>
    public const int CommonReplayConfigFieldNumber = 1;
    private global::PlaneWar.CommonReplayConfig commonReplayConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.CommonReplayConfig CommonReplayConfig {
      get { return commonReplayConfig_; }
      set {
        commonReplayConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersonalReplayConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersonalReplayConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonReplayConfig, other.CommonReplayConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commonReplayConfig_ != null) hash ^= CommonReplayConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (commonReplayConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonReplayConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (commonReplayConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonReplayConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commonReplayConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonReplayConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersonalReplayConfig other) {
      if (other == null) {
        return;
      }
      if (other.commonReplayConfig_ != null) {
        if (commonReplayConfig_ == null) {
          CommonReplayConfig = new global::PlaneWar.CommonReplayConfig();
        }
        CommonReplayConfig.MergeFrom(other.CommonReplayConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commonReplayConfig_ == null) {
              CommonReplayConfig = new global::PlaneWar.CommonReplayConfig();
            }
            input.ReadMessage(CommonReplayConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (commonReplayConfig_ == null) {
              CommonReplayConfig = new global::PlaneWar.CommonReplayConfig();
            }
            input.ReadMessage(CommonReplayConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReplayConfig : pb::IMessage<ReplayConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReplayConfig> _parser = new pb::MessageParser<ReplayConfig>(() => new ReplayConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplayConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayConfig(ReplayConfig other) : this() {
      globalReplayConfig_ = other.globalReplayConfig_ != null ? other.globalReplayConfig_.Clone() : null;
      personalReplayConfig_ = other.personalReplayConfig_ != null ? other.personalReplayConfig_.Clone() : null;
      open_ = other.open_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayConfig Clone() {
      return new ReplayConfig(this);
    }

    /// <summary>Field number for the "globalReplayConfig" field.</summary>
    public const int GlobalReplayConfigFieldNumber = 1;
    private global::PlaneWar.GlobalReplayConfig globalReplayConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GlobalReplayConfig GlobalReplayConfig {
      get { return globalReplayConfig_; }
      set {
        globalReplayConfig_ = value;
      }
    }

    /// <summary>Field number for the "personalReplayConfig" field.</summary>
    public const int PersonalReplayConfigFieldNumber = 2;
    private global::PlaneWar.PersonalReplayConfig personalReplayConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PersonalReplayConfig PersonalReplayConfig {
      get { return personalReplayConfig_; }
      set {
        personalReplayConfig_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 3;
    private bool open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplayConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplayConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GlobalReplayConfig, other.GlobalReplayConfig)) return false;
      if (!object.Equals(PersonalReplayConfig, other.PersonalReplayConfig)) return false;
      if (Open != other.Open) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (globalReplayConfig_ != null) hash ^= GlobalReplayConfig.GetHashCode();
      if (personalReplayConfig_ != null) hash ^= PersonalReplayConfig.GetHashCode();
      if (Open != false) hash ^= Open.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (globalReplayConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GlobalReplayConfig);
      }
      if (personalReplayConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PersonalReplayConfig);
      }
      if (Open != false) {
        output.WriteRawTag(24);
        output.WriteBool(Open);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (globalReplayConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GlobalReplayConfig);
      }
      if (personalReplayConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PersonalReplayConfig);
      }
      if (Open != false) {
        output.WriteRawTag(24);
        output.WriteBool(Open);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (globalReplayConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GlobalReplayConfig);
      }
      if (personalReplayConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PersonalReplayConfig);
      }
      if (Open != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplayConfig other) {
      if (other == null) {
        return;
      }
      if (other.globalReplayConfig_ != null) {
        if (globalReplayConfig_ == null) {
          GlobalReplayConfig = new global::PlaneWar.GlobalReplayConfig();
        }
        GlobalReplayConfig.MergeFrom(other.GlobalReplayConfig);
      }
      if (other.personalReplayConfig_ != null) {
        if (personalReplayConfig_ == null) {
          PersonalReplayConfig = new global::PlaneWar.PersonalReplayConfig();
        }
        PersonalReplayConfig.MergeFrom(other.PersonalReplayConfig);
      }
      if (other.Open != false) {
        Open = other.Open;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (globalReplayConfig_ == null) {
              GlobalReplayConfig = new global::PlaneWar.GlobalReplayConfig();
            }
            input.ReadMessage(GlobalReplayConfig);
            break;
          }
          case 18: {
            if (personalReplayConfig_ == null) {
              PersonalReplayConfig = new global::PlaneWar.PersonalReplayConfig();
            }
            input.ReadMessage(PersonalReplayConfig);
            break;
          }
          case 24: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (globalReplayConfig_ == null) {
              GlobalReplayConfig = new global::PlaneWar.GlobalReplayConfig();
            }
            input.ReadMessage(GlobalReplayConfig);
            break;
          }
          case 18: {
            if (personalReplayConfig_ == null) {
              PersonalReplayConfig = new global::PlaneWar.PersonalReplayConfig();
            }
            input.ReadMessage(PersonalReplayConfig);
            break;
          }
          case 24: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ConnMonsterInfo : pb::IMessage<ConnMonsterInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConnMonsterInfo> _parser = new pb::MessageParser<ConnMonsterInfo>(() => new ConnMonsterInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnMonsterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnMonsterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnMonsterInfo(ConnMonsterInfo other) : this() {
      sourceUID_ = other.sourceUID_;
      originUID_ = other.originUID_;
      ratio_ = other.ratio_;
      connMonsterList_ = other.connMonsterList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnMonsterInfo Clone() {
      return new ConnMonsterInfo(this);
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 1;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 2;
    private int originUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 3;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "connMonsterList" field.</summary>
    public const int ConnMonsterListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_connMonsterList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> connMonsterList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ConnMonsterList {
      get { return connMonsterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnMonsterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnMonsterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceUID != other.SourceUID) return false;
      if (OriginUID != other.OriginUID) return false;
      if (Ratio != other.Ratio) return false;
      if(!connMonsterList_.Equals(other.connMonsterList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      hash ^= connMonsterList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      connMonsterList_.WriteTo(output, _repeated_connMonsterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      connMonsterList_.WriteTo(ref output, _repeated_connMonsterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      size += connMonsterList_.CalculateSize(_repeated_connMonsterList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnMonsterInfo other) {
      if (other == null) {
        return;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      connMonsterList_.Add(other.connMonsterList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 16: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            connMonsterList_.AddEntriesFrom(input, _repeated_connMonsterList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 16: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            connMonsterList_.AddEntriesFrom(ref input, _repeated_connMonsterList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSHit : pb::IMessage<CSHit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSHit> _parser = new pb::MessageParser<CSHit>(() => new CSHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHit(CSHit other) : this() {
      monsterUID_ = other.monsterUID_;
      ratio_ = other.ratio_;
      bulletType_ = other.bulletType_;
      sourceUID_ = other.sourceUID_;
      generation_ = other.generation_;
      deductedMoney_ = other.deductedMoney_;
      originUID_ = other.originUID_;
      isEnd_ = other.isEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHit Clone() {
      return new CSHit(this);
    }

    /// <summary>Field number for the "monsterUID" field.</summary>
    public const int MonsterUIDFieldNumber = 1;
    private int monsterUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterUID {
      get { return monsterUID_; }
      set {
        monsterUID_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 2;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 3;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 4;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "generation" field.</summary>
    public const int GenerationFieldNumber = 5;
    private int generation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Generation {
      get { return generation_; }
      set {
        generation_ = value;
      }
    }

    /// <summary>Field number for the "deductedMoney" field.</summary>
    public const int DeductedMoneyFieldNumber = 6;
    private int deductedMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeductedMoney {
      get { return deductedMoney_; }
      set {
        deductedMoney_ = value;
      }
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 7;
    private int originUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    /// <summary>Field number for the "is_end" field.</summary>
    public const int IsEndFieldNumber = 8;
    private bool isEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnd {
      get { return isEnd_; }
      set {
        isEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonsterUID != other.MonsterUID) return false;
      if (Ratio != other.Ratio) return false;
      if (BulletType != other.BulletType) return false;
      if (SourceUID != other.SourceUID) return false;
      if (Generation != other.Generation) return false;
      if (DeductedMoney != other.DeductedMoney) return false;
      if (OriginUID != other.OriginUID) return false;
      if (IsEnd != other.IsEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonsterUID != 0) hash ^= MonsterUID.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (Generation != 0) hash ^= Generation.GetHashCode();
      if (DeductedMoney != 0) hash ^= DeductedMoney.GetHashCode();
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (IsEnd != false) hash ^= IsEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MonsterUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (BulletType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletType);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SourceUID);
      }
      if (Generation != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Generation);
      }
      if (DeductedMoney != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeductedMoney);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OriginUID);
      }
      if (IsEnd != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MonsterUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (BulletType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletType);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SourceUID);
      }
      if (Generation != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Generation);
      }
      if (DeductedMoney != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DeductedMoney);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OriginUID);
      }
      if (IsEnd != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterUID);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (Generation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Generation);
      }
      if (DeductedMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeductedMoney);
      }
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (IsEnd != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSHit other) {
      if (other == null) {
        return;
      }
      if (other.MonsterUID != 0) {
        MonsterUID = other.MonsterUID;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.Generation != 0) {
        Generation = other.Generation;
      }
      if (other.DeductedMoney != 0) {
        DeductedMoney = other.DeductedMoney;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      if (other.IsEnd != false) {
        IsEnd = other.IsEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            BulletType = input.ReadInt32();
            break;
          }
          case 32: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 40: {
            Generation = input.ReadInt32();
            break;
          }
          case 48: {
            DeductedMoney = input.ReadInt32();
            break;
          }
          case 56: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 64: {
            IsEnd = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            BulletType = input.ReadInt32();
            break;
          }
          case 32: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 40: {
            Generation = input.ReadInt32();
            break;
          }
          case 48: {
            DeductedMoney = input.ReadInt32();
            break;
          }
          case 56: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 64: {
            IsEnd = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCHit : pb::IMessage<SCHit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCHit> _parser = new pb::MessageParser<SCHit>(() => new SCHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHit(SCHit other) : this() {
      isCaptured_ = other.isCaptured_;
      chair_ = other.chair_;
      monsterUID_ = other.monsterUID_;
      ratio_ = other.ratio_;
      bulletType_ = other.bulletType_;
      earn_ = other.earn_;
      score_ = other.score_;
      baseValue_ = other.baseValue_;
      multipleList_ = other.multipleList_.Clone();
      dropBuffList_ = other.dropBuffList_.Clone();
      triggerBullet_ = other.triggerBullet_.Clone();
      dropPoker_ = other.dropPoker_ != null ? other.dropPoker_.Clone() : null;
      roulette_ = other.roulette_ != null ? other.roulette_.Clone() : null;
      stage_ = other.stage_;
      dropCard_ = other.dropCard_;
      originUID_ = other.originUID_;
      dropCall_ = other.dropCall_;
      dropWeaponPiece_ = other.dropWeaponPiece_;
      treasureList_ = other.treasureList_.Clone();
      weaponID_ = other.weaponID_;
      weaponInfo_ = other.weaponInfo_ != null ? other.weaponInfo_.Clone() : null;
      gunInfo_ = other.gunInfo_ != null ? other.gunInfo_.Clone() : null;
      fortuneWheelList_ = other.fortuneWheelList_.Clone();
      toadInfo_ = other.toadInfo_ != null ? other.toadInfo_.Clone() : null;
      flameInfo_ = other.flameInfo_ != null ? other.flameInfo_.Clone() : null;
      beeInfo_ = other.beeInfo_ != null ? other.beeInfo_.Clone() : null;
      connMonsterInfo_ = other.connMonsterInfo_ != null ? other.connMonsterInfo_.Clone() : null;
      specEffect_ = other.specEffect_.Clone();
      diceInfo_ = other.diceInfo_ != null ? other.diceInfo_.Clone() : null;
      isProp_ = other.isProp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHit Clone() {
      return new SCHit(this);
    }

    /// <summary>Field number for the "isCaptured" field.</summary>
    public const int IsCapturedFieldNumber = 1;
    private bool isCaptured_;
    /// <summary>
    ///是否捕获
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCaptured {
      get { return isCaptured_; }
      set {
        isCaptured_ = value;
      }
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 2;
    private int chair_;
    /// <summary>
    ///椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "monsterUID" field.</summary>
    public const int MonsterUIDFieldNumber = 3;
    private int monsterUID_;
    /// <summary>
    ///怪物ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterUID {
      get { return monsterUID_; }
      set {
        monsterUID_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 4;
    private int ratio_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 5;
    private int bulletType_;
    /// <summary>
    ///子弹类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "earn" field.</summary>
    public const int EarnFieldNumber = 6;
    private int earn_;
    /// <summary>
    ///得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Earn {
      get { return earn_; }
      set {
        earn_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 7;
    private long score_;
    /// <summary>
    ///玩家金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "baseValue" field.</summary>
    public const int BaseValueFieldNumber = 8;
    private int baseValue_;
    /// <summary>
    ///怪物倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseValue {
      get { return baseValue_; }
      set {
        baseValue_ = value;
      }
    }

    /// <summary>Field number for the "multipleList" field.</summary>
    public const int MultipleListFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_multipleList_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> multipleList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///转轮 蜜蜂等怪物
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MultipleList {
      get { return multipleList_; }
    }

    /// <summary>Field number for the "dropBuffList" field.</summary>
    public const int DropBuffListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::PlaneWar.BuffInfo> _repeated_dropBuffList_codec
        = pb::FieldCodec.ForMessage(82, global::PlaneWar.BuffInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.BuffInfo> dropBuffList_ = new pbc::RepeatedField<global::PlaneWar.BuffInfo>();
    /// <summary>
    ///todo弹药箱buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.BuffInfo> DropBuffList {
      get { return dropBuffList_; }
    }

    /// <summary>Field number for the "triggerBullet" field.</summary>
    public const int TriggerBulletFieldNumber = 11;
    private static readonly pb::FieldCodec<global::PlaneWar.TriggerBullet> _repeated_triggerBullet_codec
        = pb::FieldCodec.ForMessage(90, global::PlaneWar.TriggerBullet.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.TriggerBullet> triggerBullet_ = new pbc::RepeatedField<global::PlaneWar.TriggerBullet>();
    /// <summary>
    ///todo弹药箱buff
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.TriggerBullet> TriggerBullet {
      get { return triggerBullet_; }
    }

    /// <summary>Field number for the "dropPoker" field.</summary>
    public const int DropPokerFieldNumber = 12;
    private global::PlaneWar.DropPoker dropPoker_;
    /// <summary>
    ///小丑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.DropPoker DropPoker {
      get { return dropPoker_; }
      set {
        dropPoker_ = value;
      }
    }

    /// <summary>Field number for the "roulette" field.</summary>
    public const int RouletteFieldNumber = 13;
    private global::PlaneWar.Roulette roulette_;
    /// <summary>
    ///todo 飞碟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Roulette Roulette {
      get { return roulette_; }
      set {
        roulette_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 14;
    private int stage_;
    /// <summary>
    ///鲨鱼阶段(0,1,2)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "dropCard" field.</summary>
    public const int DropCardFieldNumber = 15;
    private int dropCard_;
    /// <summary>
    ///召唤卡 无用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropCard {
      get { return dropCard_; }
      set {
        dropCard_ = value;
      }
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 16;
    private int originUID_;
    /// <summary>
    ///谁杀死的来源ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    /// <summary>Field number for the "dropCall" field.</summary>
    public const int DropCallFieldNumber = 17;
    private int dropCall_;
    /// <summary>
    ///召唤卡 无用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropCall {
      get { return dropCall_; }
      set {
        dropCall_ = value;
      }
    }

    /// <summary>Field number for the "dropWeaponPiece" field.</summary>
    public const int DropWeaponPieceFieldNumber = 18;
    private int dropWeaponPiece_;
    /// <summary>
    ///无用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropWeaponPiece {
      get { return dropWeaponPiece_; }
      set {
        dropWeaponPiece_ = value;
      }
    }

    /// <summary>Field number for the "treasureList" field.</summary>
    public const int TreasureListFieldNumber = 19;
    private static readonly pb::FieldCodec<global::PlaneWar.TreasureInfo> _repeated_treasureList_codec
        = pb::FieldCodec.ForMessage(154, global::PlaneWar.TreasureInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.TreasureInfo> treasureList_ = new pbc::RepeatedField<global::PlaneWar.TreasureInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.TreasureInfo> TreasureList {
      get { return treasureList_; }
    }

    /// <summary>Field number for the "weaponID" field.</summary>
    public const int WeaponIDFieldNumber = 20;
    private int weaponID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponID {
      get { return weaponID_; }
      set {
        weaponID_ = value;
      }
    }

    /// <summary>Field number for the "weaponInfo" field.</summary>
    public const int WeaponInfoFieldNumber = 21;
    private global::PlaneWar.WeaponInfo weaponInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WeaponInfo WeaponInfo {
      get { return weaponInfo_; }
      set {
        weaponInfo_ = value;
      }
    }

    /// <summary>Field number for the "gunInfo" field.</summary>
    public const int GunInfoFieldNumber = 22;
    private global::PlaneWar.GunInfo gunInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GunInfo GunInfo {
      get { return gunInfo_; }
      set {
        gunInfo_ = value;
      }
    }

    /// <summary>Field number for the "fortuneWheelList" field.</summary>
    public const int FortuneWheelListFieldNumber = 23;
    private static readonly pb::FieldCodec<global::PlaneWar.FortuneWheelInfo> _repeated_fortuneWheelList_codec
        = pb::FieldCodec.ForMessage(186, global::PlaneWar.FortuneWheelInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.FortuneWheelInfo> fortuneWheelList_ = new pbc::RepeatedField<global::PlaneWar.FortuneWheelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.FortuneWheelInfo> FortuneWheelList {
      get { return fortuneWheelList_; }
    }

    /// <summary>Field number for the "toadInfo" field.</summary>
    public const int ToadInfoFieldNumber = 24;
    private global::PlaneWar.ToadInfo toadInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ToadInfo ToadInfo {
      get { return toadInfo_; }
      set {
        toadInfo_ = value;
      }
    }

    /// <summary>Field number for the "flameInfo" field.</summary>
    public const int FlameInfoFieldNumber = 25;
    private global::PlaneWar.FlameInfo flameInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.FlameInfo FlameInfo {
      get { return flameInfo_; }
      set {
        flameInfo_ = value;
      }
    }

    /// <summary>Field number for the "beeInfo" field.</summary>
    public const int BeeInfoFieldNumber = 26;
    private global::PlaneWar.BeeInfo beeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.BeeInfo BeeInfo {
      get { return beeInfo_; }
      set {
        beeInfo_ = value;
      }
    }

    /// <summary>Field number for the "connMonsterInfo" field.</summary>
    public const int ConnMonsterInfoFieldNumber = 27;
    private global::PlaneWar.ConnMonsterInfo connMonsterInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ConnMonsterInfo ConnMonsterInfo {
      get { return connMonsterInfo_; }
      set {
        connMonsterInfo_ = value;
      }
    }

    /// <summary>Field number for the "specEffect" field.</summary>
    public const int SpecEffectFieldNumber = 28;
    private static readonly pb::FieldCodec<global::PlaneWar.SpecEffect> _repeated_specEffect_codec
        = pb::FieldCodec.ForMessage(226, global::PlaneWar.SpecEffect.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.SpecEffect> specEffect_ = new pbc::RepeatedField<global::PlaneWar.SpecEffect>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.SpecEffect> SpecEffect {
      get { return specEffect_; }
    }

    /// <summary>Field number for the "diceInfo" field.</summary>
    public const int DiceInfoFieldNumber = 29;
    private global::PlaneWar.DiceInfo diceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.DiceInfo DiceInfo {
      get { return diceInfo_; }
      set {
        diceInfo_ = value;
      }
    }

    /// <summary>Field number for the "isProp" field.</summary>
    public const int IsPropFieldNumber = 30;
    private bool isProp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProp {
      get { return isProp_; }
      set {
        isProp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsCaptured != other.IsCaptured) return false;
      if (Chair != other.Chair) return false;
      if (MonsterUID != other.MonsterUID) return false;
      if (Ratio != other.Ratio) return false;
      if (BulletType != other.BulletType) return false;
      if (Earn != other.Earn) return false;
      if (Score != other.Score) return false;
      if (BaseValue != other.BaseValue) return false;
      if(!multipleList_.Equals(other.multipleList_)) return false;
      if(!dropBuffList_.Equals(other.dropBuffList_)) return false;
      if(!triggerBullet_.Equals(other.triggerBullet_)) return false;
      if (!object.Equals(DropPoker, other.DropPoker)) return false;
      if (!object.Equals(Roulette, other.Roulette)) return false;
      if (Stage != other.Stage) return false;
      if (DropCard != other.DropCard) return false;
      if (OriginUID != other.OriginUID) return false;
      if (DropCall != other.DropCall) return false;
      if (DropWeaponPiece != other.DropWeaponPiece) return false;
      if(!treasureList_.Equals(other.treasureList_)) return false;
      if (WeaponID != other.WeaponID) return false;
      if (!object.Equals(WeaponInfo, other.WeaponInfo)) return false;
      if (!object.Equals(GunInfo, other.GunInfo)) return false;
      if(!fortuneWheelList_.Equals(other.fortuneWheelList_)) return false;
      if (!object.Equals(ToadInfo, other.ToadInfo)) return false;
      if (!object.Equals(FlameInfo, other.FlameInfo)) return false;
      if (!object.Equals(BeeInfo, other.BeeInfo)) return false;
      if (!object.Equals(ConnMonsterInfo, other.ConnMonsterInfo)) return false;
      if(!specEffect_.Equals(other.specEffect_)) return false;
      if (!object.Equals(DiceInfo, other.DiceInfo)) return false;
      if (IsProp != other.IsProp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsCaptured != false) hash ^= IsCaptured.GetHashCode();
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (MonsterUID != 0) hash ^= MonsterUID.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (Earn != 0) hash ^= Earn.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (BaseValue != 0) hash ^= BaseValue.GetHashCode();
      hash ^= multipleList_.GetHashCode();
      hash ^= dropBuffList_.GetHashCode();
      hash ^= triggerBullet_.GetHashCode();
      if (dropPoker_ != null) hash ^= DropPoker.GetHashCode();
      if (roulette_ != null) hash ^= Roulette.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (DropCard != 0) hash ^= DropCard.GetHashCode();
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (DropCall != 0) hash ^= DropCall.GetHashCode();
      if (DropWeaponPiece != 0) hash ^= DropWeaponPiece.GetHashCode();
      hash ^= treasureList_.GetHashCode();
      if (WeaponID != 0) hash ^= WeaponID.GetHashCode();
      if (weaponInfo_ != null) hash ^= WeaponInfo.GetHashCode();
      if (gunInfo_ != null) hash ^= GunInfo.GetHashCode();
      hash ^= fortuneWheelList_.GetHashCode();
      if (toadInfo_ != null) hash ^= ToadInfo.GetHashCode();
      if (flameInfo_ != null) hash ^= FlameInfo.GetHashCode();
      if (beeInfo_ != null) hash ^= BeeInfo.GetHashCode();
      if (connMonsterInfo_ != null) hash ^= ConnMonsterInfo.GetHashCode();
      hash ^= specEffect_.GetHashCode();
      if (diceInfo_ != null) hash ^= DiceInfo.GetHashCode();
      if (IsProp != false) hash ^= IsProp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsCaptured != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsCaptured);
      }
      if (Chair != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chair);
      }
      if (MonsterUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MonsterUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ratio);
      }
      if (BulletType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletType);
      }
      if (Earn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Earn);
      }
      if (Score != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Score);
      }
      if (BaseValue != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BaseValue);
      }
      multipleList_.WriteTo(output, _repeated_multipleList_codec);
      dropBuffList_.WriteTo(output, _repeated_dropBuffList_codec);
      triggerBullet_.WriteTo(output, _repeated_triggerBullet_codec);
      if (dropPoker_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DropPoker);
      }
      if (roulette_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Roulette);
      }
      if (Stage != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Stage);
      }
      if (DropCard != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(DropCard);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(OriginUID);
      }
      if (DropCall != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DropCall);
      }
      if (DropWeaponPiece != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DropWeaponPiece);
      }
      treasureList_.WriteTo(output, _repeated_treasureList_codec);
      if (WeaponID != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(WeaponID);
      }
      if (weaponInfo_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(WeaponInfo);
      }
      if (gunInfo_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(GunInfo);
      }
      fortuneWheelList_.WriteTo(output, _repeated_fortuneWheelList_codec);
      if (toadInfo_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ToadInfo);
      }
      if (flameInfo_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(FlameInfo);
      }
      if (beeInfo_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(BeeInfo);
      }
      if (connMonsterInfo_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(ConnMonsterInfo);
      }
      specEffect_.WriteTo(output, _repeated_specEffect_codec);
      if (diceInfo_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(DiceInfo);
      }
      if (IsProp != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsProp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsCaptured != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsCaptured);
      }
      if (Chair != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chair);
      }
      if (MonsterUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MonsterUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ratio);
      }
      if (BulletType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletType);
      }
      if (Earn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Earn);
      }
      if (Score != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Score);
      }
      if (BaseValue != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(BaseValue);
      }
      multipleList_.WriteTo(ref output, _repeated_multipleList_codec);
      dropBuffList_.WriteTo(ref output, _repeated_dropBuffList_codec);
      triggerBullet_.WriteTo(ref output, _repeated_triggerBullet_codec);
      if (dropPoker_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DropPoker);
      }
      if (roulette_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Roulette);
      }
      if (Stage != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Stage);
      }
      if (DropCard != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(DropCard);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(OriginUID);
      }
      if (DropCall != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DropCall);
      }
      if (DropWeaponPiece != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DropWeaponPiece);
      }
      treasureList_.WriteTo(ref output, _repeated_treasureList_codec);
      if (WeaponID != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(WeaponID);
      }
      if (weaponInfo_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(WeaponInfo);
      }
      if (gunInfo_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(GunInfo);
      }
      fortuneWheelList_.WriteTo(ref output, _repeated_fortuneWheelList_codec);
      if (toadInfo_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ToadInfo);
      }
      if (flameInfo_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(FlameInfo);
      }
      if (beeInfo_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(BeeInfo);
      }
      if (connMonsterInfo_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(ConnMonsterInfo);
      }
      specEffect_.WriteTo(ref output, _repeated_specEffect_codec);
      if (diceInfo_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(DiceInfo);
      }
      if (IsProp != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsProp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsCaptured != false) {
        size += 1 + 1;
      }
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (MonsterUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterUID);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (Earn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Earn);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (BaseValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseValue);
      }
      size += multipleList_.CalculateSize(_repeated_multipleList_codec);
      size += dropBuffList_.CalculateSize(_repeated_dropBuffList_codec);
      size += triggerBullet_.CalculateSize(_repeated_triggerBullet_codec);
      if (dropPoker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DropPoker);
      }
      if (roulette_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roulette);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (DropCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DropCard);
      }
      if (OriginUID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (DropCall != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DropCall);
      }
      if (DropWeaponPiece != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DropWeaponPiece);
      }
      size += treasureList_.CalculateSize(_repeated_treasureList_codec);
      if (WeaponID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WeaponID);
      }
      if (weaponInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WeaponInfo);
      }
      if (gunInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GunInfo);
      }
      size += fortuneWheelList_.CalculateSize(_repeated_fortuneWheelList_codec);
      if (toadInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ToadInfo);
      }
      if (flameInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FlameInfo);
      }
      if (beeInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BeeInfo);
      }
      if (connMonsterInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConnMonsterInfo);
      }
      size += specEffect_.CalculateSize(_repeated_specEffect_codec);
      if (diceInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DiceInfo);
      }
      if (IsProp != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCHit other) {
      if (other == null) {
        return;
      }
      if (other.IsCaptured != false) {
        IsCaptured = other.IsCaptured;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.MonsterUID != 0) {
        MonsterUID = other.MonsterUID;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.Earn != 0) {
        Earn = other.Earn;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.BaseValue != 0) {
        BaseValue = other.BaseValue;
      }
      multipleList_.Add(other.multipleList_);
      dropBuffList_.Add(other.dropBuffList_);
      triggerBullet_.Add(other.triggerBullet_);
      if (other.dropPoker_ != null) {
        if (dropPoker_ == null) {
          DropPoker = new global::PlaneWar.DropPoker();
        }
        DropPoker.MergeFrom(other.DropPoker);
      }
      if (other.roulette_ != null) {
        if (roulette_ == null) {
          Roulette = new global::PlaneWar.Roulette();
        }
        Roulette.MergeFrom(other.Roulette);
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      if (other.DropCard != 0) {
        DropCard = other.DropCard;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      if (other.DropCall != 0) {
        DropCall = other.DropCall;
      }
      if (other.DropWeaponPiece != 0) {
        DropWeaponPiece = other.DropWeaponPiece;
      }
      treasureList_.Add(other.treasureList_);
      if (other.WeaponID != 0) {
        WeaponID = other.WeaponID;
      }
      if (other.weaponInfo_ != null) {
        if (weaponInfo_ == null) {
          WeaponInfo = new global::PlaneWar.WeaponInfo();
        }
        WeaponInfo.MergeFrom(other.WeaponInfo);
      }
      if (other.gunInfo_ != null) {
        if (gunInfo_ == null) {
          GunInfo = new global::PlaneWar.GunInfo();
        }
        GunInfo.MergeFrom(other.GunInfo);
      }
      fortuneWheelList_.Add(other.fortuneWheelList_);
      if (other.toadInfo_ != null) {
        if (toadInfo_ == null) {
          ToadInfo = new global::PlaneWar.ToadInfo();
        }
        ToadInfo.MergeFrom(other.ToadInfo);
      }
      if (other.flameInfo_ != null) {
        if (flameInfo_ == null) {
          FlameInfo = new global::PlaneWar.FlameInfo();
        }
        FlameInfo.MergeFrom(other.FlameInfo);
      }
      if (other.beeInfo_ != null) {
        if (beeInfo_ == null) {
          BeeInfo = new global::PlaneWar.BeeInfo();
        }
        BeeInfo.MergeFrom(other.BeeInfo);
      }
      if (other.connMonsterInfo_ != null) {
        if (connMonsterInfo_ == null) {
          ConnMonsterInfo = new global::PlaneWar.ConnMonsterInfo();
        }
        ConnMonsterInfo.MergeFrom(other.ConnMonsterInfo);
      }
      specEffect_.Add(other.specEffect_);
      if (other.diceInfo_ != null) {
        if (diceInfo_ == null) {
          DiceInfo = new global::PlaneWar.DiceInfo();
        }
        DiceInfo.MergeFrom(other.DiceInfo);
      }
      if (other.IsProp != false) {
        IsProp = other.IsProp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsCaptured = input.ReadBool();
            break;
          }
          case 16: {
            Chair = input.ReadInt32();
            break;
          }
          case 24: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 32: {
            Ratio = input.ReadInt32();
            break;
          }
          case 40: {
            BulletType = input.ReadInt32();
            break;
          }
          case 48: {
            Earn = input.ReadInt32();
            break;
          }
          case 56: {
            Score = input.ReadInt64();
            break;
          }
          case 64: {
            BaseValue = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            multipleList_.AddEntriesFrom(input, _repeated_multipleList_codec);
            break;
          }
          case 82: {
            dropBuffList_.AddEntriesFrom(input, _repeated_dropBuffList_codec);
            break;
          }
          case 90: {
            triggerBullet_.AddEntriesFrom(input, _repeated_triggerBullet_codec);
            break;
          }
          case 98: {
            if (dropPoker_ == null) {
              DropPoker = new global::PlaneWar.DropPoker();
            }
            input.ReadMessage(DropPoker);
            break;
          }
          case 106: {
            if (roulette_ == null) {
              Roulette = new global::PlaneWar.Roulette();
            }
            input.ReadMessage(Roulette);
            break;
          }
          case 112: {
            Stage = input.ReadInt32();
            break;
          }
          case 120: {
            DropCard = input.ReadInt32();
            break;
          }
          case 128: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 136: {
            DropCall = input.ReadInt32();
            break;
          }
          case 144: {
            DropWeaponPiece = input.ReadInt32();
            break;
          }
          case 154: {
            treasureList_.AddEntriesFrom(input, _repeated_treasureList_codec);
            break;
          }
          case 160: {
            WeaponID = input.ReadInt32();
            break;
          }
          case 170: {
            if (weaponInfo_ == null) {
              WeaponInfo = new global::PlaneWar.WeaponInfo();
            }
            input.ReadMessage(WeaponInfo);
            break;
          }
          case 178: {
            if (gunInfo_ == null) {
              GunInfo = new global::PlaneWar.GunInfo();
            }
            input.ReadMessage(GunInfo);
            break;
          }
          case 186: {
            fortuneWheelList_.AddEntriesFrom(input, _repeated_fortuneWheelList_codec);
            break;
          }
          case 194: {
            if (toadInfo_ == null) {
              ToadInfo = new global::PlaneWar.ToadInfo();
            }
            input.ReadMessage(ToadInfo);
            break;
          }
          case 202: {
            if (flameInfo_ == null) {
              FlameInfo = new global::PlaneWar.FlameInfo();
            }
            input.ReadMessage(FlameInfo);
            break;
          }
          case 210: {
            if (beeInfo_ == null) {
              BeeInfo = new global::PlaneWar.BeeInfo();
            }
            input.ReadMessage(BeeInfo);
            break;
          }
          case 218: {
            if (connMonsterInfo_ == null) {
              ConnMonsterInfo = new global::PlaneWar.ConnMonsterInfo();
            }
            input.ReadMessage(ConnMonsterInfo);
            break;
          }
          case 226: {
            specEffect_.AddEntriesFrom(input, _repeated_specEffect_codec);
            break;
          }
          case 234: {
            if (diceInfo_ == null) {
              DiceInfo = new global::PlaneWar.DiceInfo();
            }
            input.ReadMessage(DiceInfo);
            break;
          }
          case 240: {
            IsProp = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsCaptured = input.ReadBool();
            break;
          }
          case 16: {
            Chair = input.ReadInt32();
            break;
          }
          case 24: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 32: {
            Ratio = input.ReadInt32();
            break;
          }
          case 40: {
            BulletType = input.ReadInt32();
            break;
          }
          case 48: {
            Earn = input.ReadInt32();
            break;
          }
          case 56: {
            Score = input.ReadInt64();
            break;
          }
          case 64: {
            BaseValue = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            multipleList_.AddEntriesFrom(ref input, _repeated_multipleList_codec);
            break;
          }
          case 82: {
            dropBuffList_.AddEntriesFrom(ref input, _repeated_dropBuffList_codec);
            break;
          }
          case 90: {
            triggerBullet_.AddEntriesFrom(ref input, _repeated_triggerBullet_codec);
            break;
          }
          case 98: {
            if (dropPoker_ == null) {
              DropPoker = new global::PlaneWar.DropPoker();
            }
            input.ReadMessage(DropPoker);
            break;
          }
          case 106: {
            if (roulette_ == null) {
              Roulette = new global::PlaneWar.Roulette();
            }
            input.ReadMessage(Roulette);
            break;
          }
          case 112: {
            Stage = input.ReadInt32();
            break;
          }
          case 120: {
            DropCard = input.ReadInt32();
            break;
          }
          case 128: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 136: {
            DropCall = input.ReadInt32();
            break;
          }
          case 144: {
            DropWeaponPiece = input.ReadInt32();
            break;
          }
          case 154: {
            treasureList_.AddEntriesFrom(ref input, _repeated_treasureList_codec);
            break;
          }
          case 160: {
            WeaponID = input.ReadInt32();
            break;
          }
          case 170: {
            if (weaponInfo_ == null) {
              WeaponInfo = new global::PlaneWar.WeaponInfo();
            }
            input.ReadMessage(WeaponInfo);
            break;
          }
          case 178: {
            if (gunInfo_ == null) {
              GunInfo = new global::PlaneWar.GunInfo();
            }
            input.ReadMessage(GunInfo);
            break;
          }
          case 186: {
            fortuneWheelList_.AddEntriesFrom(ref input, _repeated_fortuneWheelList_codec);
            break;
          }
          case 194: {
            if (toadInfo_ == null) {
              ToadInfo = new global::PlaneWar.ToadInfo();
            }
            input.ReadMessage(ToadInfo);
            break;
          }
          case 202: {
            if (flameInfo_ == null) {
              FlameInfo = new global::PlaneWar.FlameInfo();
            }
            input.ReadMessage(FlameInfo);
            break;
          }
          case 210: {
            if (beeInfo_ == null) {
              BeeInfo = new global::PlaneWar.BeeInfo();
            }
            input.ReadMessage(BeeInfo);
            break;
          }
          case 218: {
            if (connMonsterInfo_ == null) {
              ConnMonsterInfo = new global::PlaneWar.ConnMonsterInfo();
            }
            input.ReadMessage(ConnMonsterInfo);
            break;
          }
          case 226: {
            specEffect_.AddEntriesFrom(ref input, _repeated_specEffect_codec);
            break;
          }
          case 234: {
            if (diceInfo_ == null) {
              DiceInfo = new global::PlaneWar.DiceInfo();
            }
            input.ReadMessage(DiceInfo);
            break;
          }
          case 240: {
            IsProp = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSMonsterDestory : pb::IMessage<CSMonsterDestory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSMonsterDestory> _parser = new pb::MessageParser<CSMonsterDestory>(() => new CSMonsterDestory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSMonsterDestory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMonsterDestory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMonsterDestory(CSMonsterDestory other) : this() {
      monsterUID_ = other.monsterUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMonsterDestory Clone() {
      return new CSMonsterDestory(this);
    }

    /// <summary>Field number for the "monsterUID" field.</summary>
    public const int MonsterUIDFieldNumber = 1;
    private int monsterUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterUID {
      get { return monsterUID_; }
      set {
        monsterUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSMonsterDestory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSMonsterDestory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonsterUID != other.MonsterUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonsterUID != 0) hash ^= MonsterUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MonsterUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MonsterUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSMonsterDestory other) {
      if (other == null) {
        return;
      }
      if (other.MonsterUID != 0) {
        MonsterUID = other.MonsterUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MonsterUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCMonsterDestory : pb::IMessage<SCMonsterDestory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCMonsterDestory> _parser = new pb::MessageParser<SCMonsterDestory>(() => new SCMonsterDestory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMonsterDestory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMonsterDestory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMonsterDestory(SCMonsterDestory other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMonsterDestory Clone() {
      return new SCMonsterDestory(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMonsterDestory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMonsterDestory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMonsterDestory other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CSTransform : pb::IMessage<CSTransform>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSTransform> _parser = new pb::MessageParser<CSTransform>(() => new CSTransform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTransform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTransform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTransform(CSTransform other) : this() {
      form_ = other.form_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTransform Clone() {
      return new CSTransform(this);
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 1;
    private int form_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSTransform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSTransform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Form != other.Form) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Form != 0) hash ^= Form.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Form != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Form);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Form != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Form);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Form != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Form);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSTransform other) {
      if (other == null) {
        return;
      }
      if (other.Form != 0) {
        Form = other.Form;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Form = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Form = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCTransform : pb::IMessage<SCTransform>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTransform> _parser = new pb::MessageParser<SCTransform>(() => new SCTransform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTransform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTransform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTransform(SCTransform other) : this() {
      chair_ = other.chair_;
      form_ = other.form_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTransform Clone() {
      return new SCTransform(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "form" field.</summary>
    public const int FormFieldNumber = 2;
    private int form_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Form {
      get { return form_; }
      set {
        form_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTransform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTransform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (Form != other.Form) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (Form != 0) hash ^= Form.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Form != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Form);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Form != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Form);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (Form != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Form);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTransform other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.Form != 0) {
        Form = other.Form;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Form = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Form = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSPlanePosSync : pb::IMessage<CSPlanePosSync>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSPlanePosSync> _parser = new pb::MessageParser<CSPlanePosSync>(() => new CSPlanePosSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlanePosSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPlanePosSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPlanePosSync(CSPlanePosSync other) : this() {
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPlanePosSync Clone() {
      return new CSPlanePosSync(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::PlaneWar.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSPlanePosSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSPlanePosSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSPlanePosSync other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::PlaneWar.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCPlanePosSync : pb::IMessage<SCPlanePosSync>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPlanePosSync> _parser = new pb::MessageParser<SCPlanePosSync>(() => new SCPlanePosSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPlanePosSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPlanePosSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPlanePosSync(SCPlanePosSync other) : this() {
      chair_ = other.chair_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPlanePosSync Clone() {
      return new SCPlanePosSync(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::PlaneWar.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPlanePosSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPlanePosSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPlanePosSync other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::PlaneWar.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCStateEnd : pb::IMessage<SCStateEnd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCStateEnd> _parser = new pb::MessageParser<SCStateEnd>(() => new SCStateEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCStateEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStateEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStateEnd(SCStateEnd other) : this() {
      chair_ = other.chair_;
      type_ = other.type_;
      sourceUID_ = other.sourceUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStateEnd Clone() {
      return new SCStateEnd(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 3;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCStateEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCStateEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (Type != other.Type) return false;
      if (SourceUID != other.SourceUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCStateEnd other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSModRatio : pb::IMessage<CSModRatio>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSModRatio> _parser = new pb::MessageParser<CSModRatio>(() => new CSModRatio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSModRatio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSModRatio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSModRatio(CSModRatio other) : this() {
      modLevel_ = other.modLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSModRatio Clone() {
      return new CSModRatio(this);
    }

    /// <summary>Field number for the "modLevel" field.</summary>
    public const int ModLevelFieldNumber = 1;
    private int modLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModLevel {
      get { return modLevel_; }
      set {
        modLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSModRatio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSModRatio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModLevel != other.ModLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModLevel != 0) hash ^= ModLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ModLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ModLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ModLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ModLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSModRatio other) {
      if (other == null) {
        return;
      }
      if (other.ModLevel != 0) {
        ModLevel = other.ModLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ModLevel = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ModLevel = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCModRatio : pb::IMessage<SCModRatio>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCModRatio> _parser = new pb::MessageParser<SCModRatio>(() => new SCModRatio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCModRatio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCModRatio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCModRatio(SCModRatio other) : this() {
      chair_ = other.chair_;
      ratio_ = other.ratio_;
      isUnlock_ = other.isUnlock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCModRatio Clone() {
      return new SCModRatio(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 2;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "isUnlock" field.</summary>
    public const int IsUnlockFieldNumber = 3;
    private bool isUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCModRatio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCModRatio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (Ratio != other.Ratio) return false;
      if (IsUnlock != other.IsUnlock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (IsUnlock != false) hash ^= IsUnlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (IsUnlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUnlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (IsUnlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUnlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (IsUnlock != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCModRatio other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.IsUnlock != false) {
        IsUnlock = other.IsUnlock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            IsUnlock = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            IsUnlock = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGainNotify : pb::IMessage<SCGainNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGainNotify> _parser = new pb::MessageParser<SCGainNotify>(() => new SCGainNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGainNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGainNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGainNotify(SCGainNotify other) : this() {
      source_ = other.source_;
      curMoney_ = other.curMoney_;
      gain_ = other.gain_;
      curTicket_ = other.curTicket_;
      changeTicket_ = other.changeTicket_;
      changeDiamond_ = other.changeDiamond_;
      curDiamond_ = other.curDiamond_;
      curRedPacket_ = other.curRedPacket_ != null ? other.curRedPacket_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGainNotify Clone() {
      return new SCGainNotify(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private int source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "curMoney" field.</summary>
    public const int CurMoneyFieldNumber = 2;
    private int curMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurMoney {
      get { return curMoney_; }
      set {
        curMoney_ = value;
      }
    }

    /// <summary>Field number for the "gain" field.</summary>
    public const int GainFieldNumber = 3;
    private int gain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gain {
      get { return gain_; }
      set {
        gain_ = value;
      }
    }

    /// <summary>Field number for the "curTicket" field.</summary>
    public const int CurTicketFieldNumber = 4;
    private int curTicket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurTicket {
      get { return curTicket_; }
      set {
        curTicket_ = value;
      }
    }

    /// <summary>Field number for the "changeTicket" field.</summary>
    public const int ChangeTicketFieldNumber = 5;
    private int changeTicket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeTicket {
      get { return changeTicket_; }
      set {
        changeTicket_ = value;
      }
    }

    /// <summary>Field number for the "changeDiamond" field.</summary>
    public const int ChangeDiamondFieldNumber = 6;
    private int changeDiamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeDiamond {
      get { return changeDiamond_; }
      set {
        changeDiamond_ = value;
      }
    }

    /// <summary>Field number for the "curDiamond" field.</summary>
    public const int CurDiamondFieldNumber = 7;
    private int curDiamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurDiamond {
      get { return curDiamond_; }
      set {
        curDiamond_ = value;
      }
    }

    /// <summary>Field number for the "curRedPacket" field.</summary>
    public const int CurRedPacketFieldNumber = 8;
    private global::PlaneWar.Decimal curRedPacket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Decimal CurRedPacket {
      get { return curRedPacket_; }
      set {
        curRedPacket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGainNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGainNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (CurMoney != other.CurMoney) return false;
      if (Gain != other.Gain) return false;
      if (CurTicket != other.CurTicket) return false;
      if (ChangeTicket != other.ChangeTicket) return false;
      if (ChangeDiamond != other.ChangeDiamond) return false;
      if (CurDiamond != other.CurDiamond) return false;
      if (!object.Equals(CurRedPacket, other.CurRedPacket)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source != 0) hash ^= Source.GetHashCode();
      if (CurMoney != 0) hash ^= CurMoney.GetHashCode();
      if (Gain != 0) hash ^= Gain.GetHashCode();
      if (CurTicket != 0) hash ^= CurTicket.GetHashCode();
      if (ChangeTicket != 0) hash ^= ChangeTicket.GetHashCode();
      if (ChangeDiamond != 0) hash ^= ChangeDiamond.GetHashCode();
      if (CurDiamond != 0) hash ^= CurDiamond.GetHashCode();
      if (curRedPacket_ != null) hash ^= CurRedPacket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Source != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Source);
      }
      if (CurMoney != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurMoney);
      }
      if (Gain != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gain);
      }
      if (CurTicket != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurTicket);
      }
      if (ChangeTicket != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChangeTicket);
      }
      if (ChangeDiamond != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChangeDiamond);
      }
      if (CurDiamond != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurDiamond);
      }
      if (curRedPacket_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CurRedPacket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Source != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Source);
      }
      if (CurMoney != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurMoney);
      }
      if (Gain != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gain);
      }
      if (CurTicket != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurTicket);
      }
      if (ChangeTicket != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChangeTicket);
      }
      if (ChangeDiamond != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChangeDiamond);
      }
      if (CurDiamond != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurDiamond);
      }
      if (curRedPacket_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CurRedPacket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Source);
      }
      if (CurMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurMoney);
      }
      if (Gain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gain);
      }
      if (CurTicket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurTicket);
      }
      if (ChangeTicket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeTicket);
      }
      if (ChangeDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeDiamond);
      }
      if (CurDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurDiamond);
      }
      if (curRedPacket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurRedPacket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGainNotify other) {
      if (other == null) {
        return;
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
      if (other.CurMoney != 0) {
        CurMoney = other.CurMoney;
      }
      if (other.Gain != 0) {
        Gain = other.Gain;
      }
      if (other.CurTicket != 0) {
        CurTicket = other.CurTicket;
      }
      if (other.ChangeTicket != 0) {
        ChangeTicket = other.ChangeTicket;
      }
      if (other.ChangeDiamond != 0) {
        ChangeDiamond = other.ChangeDiamond;
      }
      if (other.CurDiamond != 0) {
        CurDiamond = other.CurDiamond;
      }
      if (other.curRedPacket_ != null) {
        if (curRedPacket_ == null) {
          CurRedPacket = new global::PlaneWar.Decimal();
        }
        CurRedPacket.MergeFrom(other.CurRedPacket);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Source = input.ReadInt32();
            break;
          }
          case 16: {
            CurMoney = input.ReadInt32();
            break;
          }
          case 24: {
            Gain = input.ReadInt32();
            break;
          }
          case 32: {
            CurTicket = input.ReadInt32();
            break;
          }
          case 40: {
            ChangeTicket = input.ReadInt32();
            break;
          }
          case 48: {
            ChangeDiamond = input.ReadInt32();
            break;
          }
          case 56: {
            CurDiamond = input.ReadInt32();
            break;
          }
          case 66: {
            if (curRedPacket_ == null) {
              CurRedPacket = new global::PlaneWar.Decimal();
            }
            input.ReadMessage(CurRedPacket);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Source = input.ReadInt32();
            break;
          }
          case 16: {
            CurMoney = input.ReadInt32();
            break;
          }
          case 24: {
            Gain = input.ReadInt32();
            break;
          }
          case 32: {
            CurTicket = input.ReadInt32();
            break;
          }
          case 40: {
            ChangeTicket = input.ReadInt32();
            break;
          }
          case 48: {
            ChangeDiamond = input.ReadInt32();
            break;
          }
          case 56: {
            CurDiamond = input.ReadInt32();
            break;
          }
          case 66: {
            if (curRedPacket_ == null) {
              CurRedPacket = new global::PlaneWar.Decimal();
            }
            input.ReadMessage(CurRedPacket);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGainSettle : pb::IMessage<SCGainSettle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGainSettle> _parser = new pb::MessageParser<SCGainSettle>(() => new SCGainSettle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGainSettle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGainSettle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGainSettle(SCGainSettle other) : this() {
      chair_ = other.chair_;
      originUID_ = other.originUID_;
      ratio_ = other.ratio_;
      sourceUID_ = other.sourceUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGainSettle Clone() {
      return new SCGainSettle(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 2;
    private int originUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 3;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 4;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGainSettle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGainSettle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (OriginUID != other.OriginUID) return false;
      if (Ratio != other.Ratio) return false;
      if (SourceUID != other.SourceUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginUID);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGainSettle other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSetPlane : pb::IMessage<CSSetPlane>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSetPlane> _parser = new pb::MessageParser<CSSetPlane>(() => new CSSetPlane());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSetPlane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetPlane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetPlane(CSSetPlane other) : this() {
      planeID_ = other.planeID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetPlane Clone() {
      return new CSSetPlane(this);
    }

    /// <summary>Field number for the "planeID" field.</summary>
    public const int PlaneIDFieldNumber = 1;
    private int planeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaneID {
      get { return planeID_; }
      set {
        planeID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSetPlane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSetPlane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlaneID != other.PlaneID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlaneID != 0) hash ^= PlaneID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlaneID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaneID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlaneID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaneID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaneID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSetPlane other) {
      if (other == null) {
        return;
      }
      if (other.PlaneID != 0) {
        PlaneID = other.PlaneID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlaneID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlaneID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSetPlane : pb::IMessage<SCSetPlane>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSetPlane> _parser = new pb::MessageParser<SCSetPlane>(() => new SCSetPlane());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSetPlane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetPlane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetPlane(SCSetPlane other) : this() {
      chair_ = other.chair_;
      planeID_ = other.planeID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetPlane Clone() {
      return new SCSetPlane(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "planeID" field.</summary>
    public const int PlaneIDFieldNumber = 2;
    private int planeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaneID {
      get { return planeID_; }
      set {
        planeID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSetPlane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSetPlane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (PlaneID != other.PlaneID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (PlaneID != 0) hash ^= PlaneID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (PlaneID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlaneID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (PlaneID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlaneID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (PlaneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaneID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSetPlane other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.PlaneID != 0) {
        PlaneID = other.PlaneID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            PlaneID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            PlaneID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSwitchBackGround : pb::IMessage<CSSwitchBackGround>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSwitchBackGround> _parser = new pb::MessageParser<CSSwitchBackGround>(() => new CSSwitchBackGround());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSwitchBackGround> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSwitchBackGround() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSwitchBackGround(CSSwitchBackGround other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSwitchBackGround Clone() {
      return new CSSwitchBackGround(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSwitchBackGround);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSwitchBackGround other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSwitchBackGround other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCSwitchBackGround : pb::IMessage<SCSwitchBackGround>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSwitchBackGround> _parser = new pb::MessageParser<SCSwitchBackGround>(() => new SCSwitchBackGround());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSwitchBackGround> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSwitchBackGround() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSwitchBackGround(SCSwitchBackGround other) : this() {
      chair_ = other.chair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSwitchBackGround Clone() {
      return new SCSwitchBackGround(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSwitchBackGround);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSwitchBackGround other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSwitchBackGround other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MonsterPath : pb::IMessage<MonsterPath>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonsterPath> _parser = new pb::MessageParser<MonsterPath>(() => new MonsterPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterPath(MonsterPath other) : this() {
      monster_ = other.monster_ != null ? other.monster_.Clone() : null;
      configID_ = other.configID_;
      stepIndex_ = other.stepIndex_;
      roadIndex_ = other.roadIndex_;
      moveT_ = other.moveT_;
      dotIndex_ = other.dotIndex_;
      delay_ = other.delay_;
      stage_ = other.stage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterPath Clone() {
      return new MonsterPath(this);
    }

    /// <summary>Field number for the "monster" field.</summary>
    public const int MonsterFieldNumber = 1;
    private global::PlaneWar.MonsterInfo monster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.MonsterInfo Monster {
      get { return monster_; }
      set {
        monster_ = value;
      }
    }

    /// <summary>Field number for the "configID" field.</summary>
    public const int ConfigIDFieldNumber = 2;
    private int configID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigID {
      get { return configID_; }
      set {
        configID_ = value;
      }
    }

    /// <summary>Field number for the "stepIndex" field.</summary>
    public const int StepIndexFieldNumber = 3;
    private int stepIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StepIndex {
      get { return stepIndex_; }
      set {
        stepIndex_ = value;
      }
    }

    /// <summary>Field number for the "roadIndex" field.</summary>
    public const int RoadIndexFieldNumber = 4;
    private int roadIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadIndex {
      get { return roadIndex_; }
      set {
        roadIndex_ = value;
      }
    }

    /// <summary>Field number for the "moveT" field.</summary>
    public const int MoveTFieldNumber = 5;
    private float moveT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveT {
      get { return moveT_; }
      set {
        moveT_ = value;
      }
    }

    /// <summary>Field number for the "dotIndex" field.</summary>
    public const int DotIndexFieldNumber = 6;
    private int dotIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DotIndex {
      get { return dotIndex_; }
      set {
        dotIndex_ = value;
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 7;
    private float delay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 8;
    private int stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Monster, other.Monster)) return false;
      if (ConfigID != other.ConfigID) return false;
      if (StepIndex != other.StepIndex) return false;
      if (RoadIndex != other.RoadIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveT, other.MoveT)) return false;
      if (DotIndex != other.DotIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Delay, other.Delay)) return false;
      if (Stage != other.Stage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (monster_ != null) hash ^= Monster.GetHashCode();
      if (ConfigID != 0) hash ^= ConfigID.GetHashCode();
      if (StepIndex != 0) hash ^= StepIndex.GetHashCode();
      if (RoadIndex != 0) hash ^= RoadIndex.GetHashCode();
      if (MoveT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveT);
      if (DotIndex != 0) hash ^= DotIndex.GetHashCode();
      if (Delay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Delay);
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (monster_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Monster);
      }
      if (ConfigID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigID);
      }
      if (StepIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StepIndex);
      }
      if (RoadIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoadIndex);
      }
      if (MoveT != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MoveT);
      }
      if (DotIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DotIndex);
      }
      if (Delay != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Delay);
      }
      if (Stage != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Stage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (monster_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Monster);
      }
      if (ConfigID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ConfigID);
      }
      if (StepIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StepIndex);
      }
      if (RoadIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoadIndex);
      }
      if (MoveT != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MoveT);
      }
      if (DotIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DotIndex);
      }
      if (Delay != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Delay);
      }
      if (Stage != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Stage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (monster_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Monster);
      }
      if (ConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigID);
      }
      if (StepIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StepIndex);
      }
      if (RoadIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadIndex);
      }
      if (MoveT != 0F) {
        size += 1 + 4;
      }
      if (DotIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DotIndex);
      }
      if (Delay != 0F) {
        size += 1 + 4;
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterPath other) {
      if (other == null) {
        return;
      }
      if (other.monster_ != null) {
        if (monster_ == null) {
          Monster = new global::PlaneWar.MonsterInfo();
        }
        Monster.MergeFrom(other.Monster);
      }
      if (other.ConfigID != 0) {
        ConfigID = other.ConfigID;
      }
      if (other.StepIndex != 0) {
        StepIndex = other.StepIndex;
      }
      if (other.RoadIndex != 0) {
        RoadIndex = other.RoadIndex;
      }
      if (other.MoveT != 0F) {
        MoveT = other.MoveT;
      }
      if (other.DotIndex != 0) {
        DotIndex = other.DotIndex;
      }
      if (other.Delay != 0F) {
        Delay = other.Delay;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (monster_ == null) {
              Monster = new global::PlaneWar.MonsterInfo();
            }
            input.ReadMessage(Monster);
            break;
          }
          case 16: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 24: {
            StepIndex = input.ReadInt32();
            break;
          }
          case 32: {
            RoadIndex = input.ReadInt32();
            break;
          }
          case 45: {
            MoveT = input.ReadFloat();
            break;
          }
          case 48: {
            DotIndex = input.ReadInt32();
            break;
          }
          case 61: {
            Delay = input.ReadFloat();
            break;
          }
          case 64: {
            Stage = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (monster_ == null) {
              Monster = new global::PlaneWar.MonsterInfo();
            }
            input.ReadMessage(Monster);
            break;
          }
          case 16: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 24: {
            StepIndex = input.ReadInt32();
            break;
          }
          case 32: {
            RoadIndex = input.ReadInt32();
            break;
          }
          case 45: {
            MoveT = input.ReadFloat();
            break;
          }
          case 48: {
            DotIndex = input.ReadInt32();
            break;
          }
          case 61: {
            Delay = input.ReadFloat();
            break;
          }
          case 64: {
            Stage = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncMonsterInfo : pb::IMessage<SCSyncMonsterInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncMonsterInfo> _parser = new pb::MessageParser<SCSyncMonsterInfo>(() => new SCSyncMonsterInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncMonsterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncMonsterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncMonsterInfo(SCSyncMonsterInfo other) : this() {
      createdPathList_ = other.createdPathList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncMonsterInfo Clone() {
      return new SCSyncMonsterInfo(this);
    }

    /// <summary>Field number for the "createdPathList" field.</summary>
    public const int CreatedPathListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.MonsterPath> _repeated_createdPathList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.MonsterPath.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.MonsterPath> createdPathList_ = new pbc::RepeatedField<global::PlaneWar.MonsterPath>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.MonsterPath> CreatedPathList {
      get { return createdPathList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncMonsterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncMonsterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!createdPathList_.Equals(other.createdPathList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= createdPathList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      createdPathList_.WriteTo(output, _repeated_createdPathList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      createdPathList_.WriteTo(ref output, _repeated_createdPathList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += createdPathList_.CalculateSize(_repeated_createdPathList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncMonsterInfo other) {
      if (other == null) {
        return;
      }
      createdPathList_.Add(other.createdPathList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            createdPathList_.AddEntriesFrom(input, _repeated_createdPathList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            createdPathList_.AddEntriesFrom(ref input, _repeated_createdPathList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ScratchInfo : pb::IMessage<ScratchInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScratchInfo> _parser = new pb::MessageParser<ScratchInfo>(() => new ScratchInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScratchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScratchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScratchInfo(ScratchInfo other) : this() {
      base_ = other.base_;
      multiple_ = other.multiple_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScratchInfo Clone() {
      return new ScratchInfo(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private int base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 2;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScratchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScratchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Base != other.Base) return false;
      if (Multiple != other.Multiple) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Base != 0) hash ^= Base.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Base != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Base);
      }
      if (Multiple != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Base != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Base);
      }
      if (Multiple != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Base != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Base);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScratchInfo other) {
      if (other == null) {
        return;
      }
      if (other.Base != 0) {
        Base = other.Base;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Base = input.ReadInt32();
            break;
          }
          case 16: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Base = input.ReadInt32();
            break;
          }
          case 16: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSScratchCardList : pb::IMessage<CSScratchCardList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSScratchCardList> _parser = new pb::MessageParser<CSScratchCardList>(() => new CSScratchCardList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSScratchCardList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSScratchCardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSScratchCardList(CSScratchCardList other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSScratchCardList Clone() {
      return new CSScratchCardList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSScratchCardList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSScratchCardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSScratchCardList other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCScratchCardList : pb::IMessage<SCScratchCardList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCScratchCardList> _parser = new pb::MessageParser<SCScratchCardList>(() => new SCScratchCardList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCScratchCardList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCScratchCardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCScratchCardList(SCScratchCardList other) : this() {
      num_ = other.num_;
      firstCard_ = other.firstCard_ != null ? other.firstCard_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCScratchCardList Clone() {
      return new SCScratchCardList(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "firstCard" field.</summary>
    public const int FirstCardFieldNumber = 2;
    private global::PlaneWar.ScratchInfo firstCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ScratchInfo FirstCard {
      get { return firstCard_; }
      set {
        firstCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCScratchCardList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCScratchCardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      if (!object.Equals(FirstCard, other.FirstCard)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      if (firstCard_ != null) hash ^= FirstCard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (firstCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FirstCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (firstCard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FirstCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (firstCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstCard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCScratchCardList other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.firstCard_ != null) {
        if (firstCard_ == null) {
          FirstCard = new global::PlaneWar.ScratchInfo();
        }
        FirstCard.MergeFrom(other.FirstCard);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 18: {
            if (firstCard_ == null) {
              FirstCard = new global::PlaneWar.ScratchInfo();
            }
            input.ReadMessage(FirstCard);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 18: {
            if (firstCard_ == null) {
              FirstCard = new global::PlaneWar.ScratchInfo();
            }
            input.ReadMessage(FirstCard);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUseScratchCard : pb::IMessage<CSUseScratchCard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUseScratchCard> _parser = new pb::MessageParser<CSUseScratchCard>(() => new CSUseScratchCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUseScratchCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseScratchCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseScratchCard(CSUseScratchCard other) : this() {
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseScratchCard Clone() {
      return new CSUseScratchCard(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUseScratchCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUseScratchCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUseScratchCard other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUseScratchCard : pb::IMessage<SCUseScratchCard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUseScratchCard> _parser = new pb::MessageParser<SCUseScratchCard>(() => new SCUseScratchCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUseScratchCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseScratchCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseScratchCard(SCUseScratchCard other) : this() {
      chair_ = other.chair_;
      cardList_ = other.cardList_.Clone();
      total_ = other.total_;
      remain_ = other.remain_;
      curMoney_ = other.curMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseScratchCard Clone() {
      return new SCUseScratchCard(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "cardList" field.</summary>
    public const int CardListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.ScratchInfo> _repeated_cardList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.ScratchInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.ScratchInfo> cardList_ = new pbc::RepeatedField<global::PlaneWar.ScratchInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.ScratchInfo> CardList {
      get { return cardList_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "remain" field.</summary>
    public const int RemainFieldNumber = 4;
    private int remain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Remain {
      get { return remain_; }
      set {
        remain_ = value;
      }
    }

    /// <summary>Field number for the "curMoney" field.</summary>
    public const int CurMoneyFieldNumber = 5;
    private int curMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurMoney {
      get { return curMoney_; }
      set {
        curMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUseScratchCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUseScratchCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if(!cardList_.Equals(other.cardList_)) return false;
      if (Total != other.Total) return false;
      if (Remain != other.Remain) return false;
      if (CurMoney != other.CurMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      hash ^= cardList_.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      if (Remain != 0) hash ^= Remain.GetHashCode();
      if (CurMoney != 0) hash ^= CurMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      cardList_.WriteTo(output, _repeated_cardList_codec);
      if (Total != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Total);
      }
      if (Remain != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Remain);
      }
      if (CurMoney != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      cardList_.WriteTo(ref output, _repeated_cardList_codec);
      if (Total != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Total);
      }
      if (Remain != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Remain);
      }
      if (CurMoney != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      size += cardList_.CalculateSize(_repeated_cardList_codec);
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (Remain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Remain);
      }
      if (CurMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUseScratchCard other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      cardList_.Add(other.cardList_);
      if (other.Total != 0) {
        Total = other.Total;
      }
      if (other.Remain != 0) {
        Remain = other.Remain;
      }
      if (other.CurMoney != 0) {
        CurMoney = other.CurMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 18: {
            cardList_.AddEntriesFrom(input, _repeated_cardList_codec);
            break;
          }
          case 24: {
            Total = input.ReadInt32();
            break;
          }
          case 32: {
            Remain = input.ReadInt32();
            break;
          }
          case 40: {
            CurMoney = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 18: {
            cardList_.AddEntriesFrom(ref input, _repeated_cardList_codec);
            break;
          }
          case 24: {
            Total = input.ReadInt32();
            break;
          }
          case 32: {
            Remain = input.ReadInt32();
            break;
          }
          case 40: {
            CurMoney = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSExplodeSettle : pb::IMessage<CSExplodeSettle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSExplodeSettle> _parser = new pb::MessageParser<CSExplodeSettle>(() => new CSExplodeSettle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExplodeSettle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExplodeSettle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExplodeSettle(CSExplodeSettle other) : this() {
      sourceUID_ = other.sourceUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExplodeSettle Clone() {
      return new CSExplodeSettle(this);
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 1;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSExplodeSettle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSExplodeSettle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceUID != other.SourceUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSExplodeSettle other) {
      if (other == null) {
        return;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCExplodeSettle : pb::IMessage<SCExplodeSettle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCExplodeSettle> _parser = new pb::MessageParser<SCExplodeSettle>(() => new SCExplodeSettle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCExplodeSettle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExplodeSettle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExplodeSettle(SCExplodeSettle other) : this() {
      chair_ = other.chair_;
      sourceUID_ = other.sourceUID_;
      originUID_ = other.originUID_;
      remain_ = other.remain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExplodeSettle Clone() {
      return new SCExplodeSettle(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 2;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 3;
    private int originUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    /// <summary>Field number for the "remain" field.</summary>
    public const int RemainFieldNumber = 4;
    private int remain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Remain {
      get { return remain_; }
      set {
        remain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCExplodeSettle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCExplodeSettle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (SourceUID != other.SourceUID) return false;
      if (OriginUID != other.OriginUID) return false;
      if (Remain != other.Remain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (Remain != 0) hash ^= Remain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceUID);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginUID);
      }
      if (Remain != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Remain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceUID);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginUID);
      }
      if (Remain != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Remain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (Remain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Remain);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCExplodeSettle other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      if (other.Remain != 0) {
        Remain = other.Remain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 24: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 32: {
            Remain = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 24: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 32: {
            Remain = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSFallIntoBlackHole : pb::IMessage<CSFallIntoBlackHole>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSFallIntoBlackHole> _parser = new pb::MessageParser<CSFallIntoBlackHole>(() => new CSFallIntoBlackHole());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFallIntoBlackHole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFallIntoBlackHole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFallIntoBlackHole(CSFallIntoBlackHole other) : this() {
      monsterUID_ = other.monsterUID_;
      sourceUID_ = other.sourceUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFallIntoBlackHole Clone() {
      return new CSFallIntoBlackHole(this);
    }

    /// <summary>Field number for the "monsterUID" field.</summary>
    public const int MonsterUIDFieldNumber = 1;
    private int monsterUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterUID {
      get { return monsterUID_; }
      set {
        monsterUID_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 2;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSFallIntoBlackHole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSFallIntoBlackHole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonsterUID != other.MonsterUID) return false;
      if (SourceUID != other.SourceUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonsterUID != 0) hash ^= MonsterUID.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MonsterUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterUID);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MonsterUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MonsterUID);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterUID);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSFallIntoBlackHole other) {
      if (other == null) {
        return;
      }
      if (other.MonsterUID != 0) {
        MonsterUID = other.MonsterUID;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCFallIntoBlackHole : pb::IMessage<SCFallIntoBlackHole>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCFallIntoBlackHole> _parser = new pb::MessageParser<SCFallIntoBlackHole>(() => new SCFallIntoBlackHole());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFallIntoBlackHole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFallIntoBlackHole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFallIntoBlackHole(SCFallIntoBlackHole other) : this() {
      chair_ = other.chair_;
      monsterUID_ = other.monsterUID_;
      sourceUID_ = other.sourceUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFallIntoBlackHole Clone() {
      return new SCFallIntoBlackHole(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "monsterUID" field.</summary>
    public const int MonsterUIDFieldNumber = 2;
    private int monsterUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterUID {
      get { return monsterUID_; }
      set {
        monsterUID_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 3;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFallIntoBlackHole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFallIntoBlackHole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (MonsterUID != other.MonsterUID) return false;
      if (SourceUID != other.SourceUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (MonsterUID != 0) hash ^= MonsterUID.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (MonsterUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterUID);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (MonsterUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterUID);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (MonsterUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterUID);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFallIntoBlackHole other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.MonsterUID != 0) {
        MonsterUID = other.MonsterUID;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 24: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 24: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSyncBlackHolePos : pb::IMessage<CSSyncBlackHolePos>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSyncBlackHolePos> _parser = new pb::MessageParser<CSSyncBlackHolePos>(() => new CSSyncBlackHolePos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncBlackHolePos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncBlackHolePos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncBlackHolePos(CSSyncBlackHolePos other) : this() {
      sourceUID_ = other.sourceUID_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncBlackHolePos Clone() {
      return new CSSyncBlackHolePos(this);
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 1;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::PlaneWar.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncBlackHolePos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncBlackHolePos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceUID != other.SourceUID) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncBlackHolePos other) {
      if (other == null) {
        return;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::PlaneWar.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncBlackHolePos : pb::IMessage<SCSyncBlackHolePos>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncBlackHolePos> _parser = new pb::MessageParser<SCSyncBlackHolePos>(() => new SCSyncBlackHolePos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncBlackHolePos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncBlackHolePos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncBlackHolePos(SCSyncBlackHolePos other) : this() {
      chair_ = other.chair_;
      sourceUID_ = other.sourceUID_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncBlackHolePos Clone() {
      return new SCSyncBlackHolePos(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 2;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::PlaneWar.Pos pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncBlackHolePos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncBlackHolePos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (SourceUID != other.SourceUID) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceUID);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceUID);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncBlackHolePos other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::PlaneWar.Pos();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 26: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 26: {
            if (pos_ == null) {
              Pos = new global::PlaneWar.Pos();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSInteraction : pb::IMessage<CSInteraction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSInteraction> _parser = new pb::MessageParser<CSInteraction>(() => new CSInteraction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSInteraction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSInteraction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSInteraction(CSInteraction other) : this() {
      targetChair_ = other.targetChair_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSInteraction Clone() {
      return new CSInteraction(this);
    }

    /// <summary>Field number for the "targetChair" field.</summary>
    public const int TargetChairFieldNumber = 1;
    private int targetChair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetChair {
      get { return targetChair_; }
      set {
        targetChair_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSInteraction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSInteraction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetChair != other.TargetChair) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetChair != 0) hash ^= TargetChair.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TargetChair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetChair);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TargetChair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TargetChair);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetChair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetChair);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSInteraction other) {
      if (other == null) {
        return;
      }
      if (other.TargetChair != 0) {
        TargetChair = other.TargetChair;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetChair = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TargetChair = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCInteraction : pb::IMessage<SCInteraction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCInteraction> _parser = new pb::MessageParser<SCInteraction>(() => new SCInteraction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCInteraction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCInteraction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCInteraction(SCInteraction other) : this() {
      sourceChair_ = other.sourceChair_;
      targetChair_ = other.targetChair_;
      type_ = other.type_;
      cooldown_ = other.cooldown_;
      curMoney_ = other.curMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCInteraction Clone() {
      return new SCInteraction(this);
    }

    /// <summary>Field number for the "sourceChair" field.</summary>
    public const int SourceChairFieldNumber = 1;
    private int sourceChair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceChair {
      get { return sourceChair_; }
      set {
        sourceChair_ = value;
      }
    }

    /// <summary>Field number for the "targetChair" field.</summary>
    public const int TargetChairFieldNumber = 2;
    private int targetChair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetChair {
      get { return targetChair_; }
      set {
        targetChair_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "cooldown" field.</summary>
    public const int CooldownFieldNumber = 4;
    private int cooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cooldown {
      get { return cooldown_; }
      set {
        cooldown_ = value;
      }
    }

    /// <summary>Field number for the "curMoney" field.</summary>
    public const int CurMoneyFieldNumber = 5;
    private long curMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMoney {
      get { return curMoney_; }
      set {
        curMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCInteraction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCInteraction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceChair != other.SourceChair) return false;
      if (TargetChair != other.TargetChair) return false;
      if (Type != other.Type) return false;
      if (Cooldown != other.Cooldown) return false;
      if (CurMoney != other.CurMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceChair != 0) hash ^= SourceChair.GetHashCode();
      if (TargetChair != 0) hash ^= TargetChair.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Cooldown != 0) hash ^= Cooldown.GetHashCode();
      if (CurMoney != 0L) hash ^= CurMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SourceChair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceChair);
      }
      if (TargetChair != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetChair);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Cooldown != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cooldown);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CurMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SourceChair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceChair);
      }
      if (TargetChair != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetChair);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Cooldown != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cooldown);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CurMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceChair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceChair);
      }
      if (TargetChair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetChair);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Cooldown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cooldown);
      }
      if (CurMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCInteraction other) {
      if (other == null) {
        return;
      }
      if (other.SourceChair != 0) {
        SourceChair = other.SourceChair;
      }
      if (other.TargetChair != 0) {
        TargetChair = other.TargetChair;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Cooldown != 0) {
        Cooldown = other.Cooldown;
      }
      if (other.CurMoney != 0L) {
        CurMoney = other.CurMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceChair = input.ReadInt32();
            break;
          }
          case 16: {
            TargetChair = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Cooldown = input.ReadInt32();
            break;
          }
          case 40: {
            CurMoney = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourceChair = input.ReadInt32();
            break;
          }
          case 16: {
            TargetChair = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Cooldown = input.ReadInt32();
            break;
          }
          case 40: {
            CurMoney = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JumpHighArena : pb::IMessage<JumpHighArena>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JumpHighArena> _parser = new pb::MessageParser<JumpHighArena>(() => new JumpHighArena());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JumpHighArena> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpHighArena() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpHighArena(JumpHighArena other) : this() {
      isOpen_ = other.isOpen_;
      vip_ = other.vip_;
      coin_ = other.coin_;
      gameTime_ = other.gameTime_;
      tips_ = other.tips_;
      monsterId_ = other.monsterId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpHighArena Clone() {
      return new JumpHighArena(this);
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 1;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 2;
    private int vip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 3;
    private int coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "gameTime" field.</summary>
    public const int GameTimeFieldNumber = 4;
    private int gameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameTime {
      get { return gameTime_; }
      set {
        gameTime_ = value;
      }
    }

    /// <summary>Field number for the "tips" field.</summary>
    public const int TipsFieldNumber = 5;
    private string tips_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tips {
      get { return tips_; }
      set {
        tips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "monsterId" field.</summary>
    public const int MonsterIdFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_monsterId_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> monsterId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MonsterId {
      get { return monsterId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JumpHighArena);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JumpHighArena other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpen != other.IsOpen) return false;
      if (Vip != other.Vip) return false;
      if (Coin != other.Coin) return false;
      if (GameTime != other.GameTime) return false;
      if (Tips != other.Tips) return false;
      if(!monsterId_.Equals(other.monsterId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (Vip != 0) hash ^= Vip.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (GameTime != 0) hash ^= GameTime.GetHashCode();
      if (Tips.Length != 0) hash ^= Tips.GetHashCode();
      hash ^= monsterId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (Vip != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Vip);
      }
      if (Coin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Coin);
      }
      if (GameTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GameTime);
      }
      if (Tips.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tips);
      }
      monsterId_.WriteTo(output, _repeated_monsterId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (Vip != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Vip);
      }
      if (Coin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Coin);
      }
      if (GameTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GameTime);
      }
      if (Tips.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tips);
      }
      monsterId_.WriteTo(ref output, _repeated_monsterId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (Vip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vip);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (GameTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
      }
      if (Tips.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tips);
      }
      size += monsterId_.CalculateSize(_repeated_monsterId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JumpHighArena other) {
      if (other == null) {
        return;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      if (other.Vip != 0) {
        Vip = other.Vip;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.GameTime != 0) {
        GameTime = other.GameTime;
      }
      if (other.Tips.Length != 0) {
        Tips = other.Tips;
      }
      monsterId_.Add(other.monsterId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
          case 16: {
            Vip = input.ReadInt32();
            break;
          }
          case 24: {
            Coin = input.ReadInt32();
            break;
          }
          case 32: {
            GameTime = input.ReadInt32();
            break;
          }
          case 42: {
            Tips = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            monsterId_.AddEntriesFrom(input, _repeated_monsterId_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
          case 16: {
            Vip = input.ReadInt32();
            break;
          }
          case 24: {
            Coin = input.ReadInt32();
            break;
          }
          case 32: {
            GameTime = input.ReadInt32();
            break;
          }
          case 42: {
            Tips = input.ReadString();
            break;
          }
          case 50:
          case 48: {
            monsterId_.AddEntriesFrom(ref input, _repeated_monsterId_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PoolArenaLimit : pb::IMessage<PoolArenaLimit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PoolArenaLimit> _parser = new pb::MessageParser<PoolArenaLimit>(() => new PoolArenaLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoolArenaLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolArenaLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolArenaLimit(PoolArenaLimit other) : this() {
      level_ = other.level_;
      arena_ = other.arena_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolArenaLimit Clone() {
      return new PoolArenaLimit(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "arena" field.</summary>
    public const int ArenaFieldNumber = 2;
    private int arena_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arena {
      get { return arena_; }
      set {
        arena_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoolArenaLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoolArenaLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Arena != other.Arena) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Arena != 0) hash ^= Arena.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Arena != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Arena);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Arena != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Arena);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Arena != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arena);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoolArenaLimit other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Arena != 0) {
        Arena = other.Arena;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Arena = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Arena = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCActivityInfo : pb::IMessage<SCActivityInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCActivityInfo> _parser = new pb::MessageParser<SCActivityInfo>(() => new SCActivityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCActivityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCActivityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCActivityInfo(SCActivityInfo other) : this() {
      jump_ = other.jump_ != null ? other.jump_.Clone() : null;
      limit_ = other.limit_;
      poolLimit_ = other.poolLimit_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCActivityInfo Clone() {
      return new SCActivityInfo(this);
    }

    /// <summary>Field number for the "jump" field.</summary>
    public const int JumpFieldNumber = 1;
    private global::PlaneWar.JumpHighArena jump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.JumpHighArena Jump {
      get { return jump_; }
      set {
        jump_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "poolLimit" field.</summary>
    public const int PoolLimitFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PlaneWar.PoolArenaLimit> _repeated_poolLimit_codec
        = pb::FieldCodec.ForMessage(26, global::PlaneWar.PoolArenaLimit.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PoolArenaLimit> poolLimit_ = new pbc::RepeatedField<global::PlaneWar.PoolArenaLimit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PoolArenaLimit> PoolLimit {
      get { return poolLimit_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCActivityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCActivityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Jump, other.Jump)) return false;
      if (Limit != other.Limit) return false;
      if(!poolLimit_.Equals(other.poolLimit_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (jump_ != null) hash ^= Jump.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      hash ^= poolLimit_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (jump_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Jump);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      poolLimit_.WriteTo(output, _repeated_poolLimit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (jump_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Jump);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      poolLimit_.WriteTo(ref output, _repeated_poolLimit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (jump_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Jump);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      size += poolLimit_.CalculateSize(_repeated_poolLimit_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCActivityInfo other) {
      if (other == null) {
        return;
      }
      if (other.jump_ != null) {
        if (jump_ == null) {
          Jump = new global::PlaneWar.JumpHighArena();
        }
        Jump.MergeFrom(other.Jump);
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      poolLimit_.Add(other.poolLimit_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (jump_ == null) {
              Jump = new global::PlaneWar.JumpHighArena();
            }
            input.ReadMessage(Jump);
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
          case 26: {
            poolLimit_.AddEntriesFrom(input, _repeated_poolLimit_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (jump_ == null) {
              Jump = new global::PlaneWar.JumpHighArena();
            }
            input.ReadMessage(Jump);
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
          case 26: {
            poolLimit_.AddEntriesFrom(ref input, _repeated_poolLimit_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetTaskReward : pb::IMessage<CSGetTaskReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetTaskReward> _parser = new pb::MessageParser<CSGetTaskReward>(() => new CSGetTaskReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetTaskReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTaskReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTaskReward(CSGetTaskReward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTaskReward Clone() {
      return new CSGetTaskReward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetTaskReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetTaskReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetTaskReward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetTaskReward : pb::IMessage<SCGetTaskReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetTaskReward> _parser = new pb::MessageParser<SCGetTaskReward>(() => new SCGetTaskReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetTaskReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskReward(SCGetTaskReward other) : this() {
      gunRatio_ = other.gunRatio_;
      award_ = other.award_;
      ticket_ = other.ticket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskReward Clone() {
      return new SCGetTaskReward(this);
    }

    /// <summary>Field number for the "gunRatio" field.</summary>
    public const int GunRatioFieldNumber = 1;
    private int gunRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunRatio {
      get { return gunRatio_; }
      set {
        gunRatio_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 2;
    private int award_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 3;
    private int ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetTaskReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetTaskReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GunRatio != other.GunRatio) return false;
      if (Award != other.Award) return false;
      if (Ticket != other.Ticket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GunRatio != 0) hash ^= GunRatio.GetHashCode();
      if (Award != 0) hash ^= Award.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (Award != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Award);
      }
      if (Ticket != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (Award != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Award);
      }
      if (Ticket != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GunRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunRatio);
      }
      if (Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Award);
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetTaskReward other) {
      if (other == null) {
        return;
      }
      if (other.GunRatio != 0) {
        GunRatio = other.GunRatio;
      }
      if (other.Award != 0) {
        Award = other.Award;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            Award = input.ReadInt32();
            break;
          }
          case 24: {
            Ticket = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            Award = input.ReadInt32();
            break;
          }
          case 24: {
            Ticket = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetTaskInfo : pb::IMessage<CSGetTaskInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetTaskInfo> _parser = new pb::MessageParser<CSGetTaskInfo>(() => new CSGetTaskInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetTaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTaskInfo(CSGetTaskInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTaskInfo Clone() {
      return new CSGetTaskInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetTaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetTaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetTaskInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetTaskInfo : pb::IMessage<SCGetTaskInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetTaskInfo> _parser = new pb::MessageParser<SCGetTaskInfo>(() => new SCGetTaskInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetTaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskInfo(SCGetTaskInfo other) : this() {
      gunRatio_ = other.gunRatio_;
      curNum_ = other.curNum_;
      totalNum_ = other.totalNum_;
      vipLevel_ = other.vipLevel_;
      isUnlock_ = other.isUnlock_;
      award_ = other.award_;
      isVipUnlock_ = other.isVipUnlock_;
      ticket_ = other.ticket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTaskInfo Clone() {
      return new SCGetTaskInfo(this);
    }

    /// <summary>Field number for the "gunRatio" field.</summary>
    public const int GunRatioFieldNumber = 1;
    private int gunRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunRatio {
      get { return gunRatio_; }
      set {
        gunRatio_ = value;
      }
    }

    /// <summary>Field number for the "curNum" field.</summary>
    public const int CurNumFieldNumber = 2;
    private int curNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurNum {
      get { return curNum_; }
      set {
        curNum_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 3;
    private int totalNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "vipLevel" field.</summary>
    public const int VipLevelFieldNumber = 4;
    private int vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "isUnlock" field.</summary>
    public const int IsUnlockFieldNumber = 5;
    private int isUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 6;
    private int award_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    /// <summary>Field number for the "isVipUnlock" field.</summary>
    public const int IsVipUnlockFieldNumber = 7;
    private bool isVipUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVipUnlock {
      get { return isVipUnlock_; }
      set {
        isVipUnlock_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 8;
    private int ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetTaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetTaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GunRatio != other.GunRatio) return false;
      if (CurNum != other.CurNum) return false;
      if (TotalNum != other.TotalNum) return false;
      if (VipLevel != other.VipLevel) return false;
      if (IsUnlock != other.IsUnlock) return false;
      if (Award != other.Award) return false;
      if (IsVipUnlock != other.IsVipUnlock) return false;
      if (Ticket != other.Ticket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GunRatio != 0) hash ^= GunRatio.GetHashCode();
      if (CurNum != 0) hash ^= CurNum.GetHashCode();
      if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (IsUnlock != 0) hash ^= IsUnlock.GetHashCode();
      if (Award != 0) hash ^= Award.GetHashCode();
      if (IsVipUnlock != false) hash ^= IsVipUnlock.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (CurNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurNum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalNum);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VipLevel);
      }
      if (IsUnlock != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IsUnlock);
      }
      if (Award != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Award);
      }
      if (IsVipUnlock != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsVipUnlock);
      }
      if (Ticket != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (CurNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurNum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalNum);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VipLevel);
      }
      if (IsUnlock != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IsUnlock);
      }
      if (Award != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Award);
      }
      if (IsVipUnlock != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsVipUnlock);
      }
      if (Ticket != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GunRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunRatio);
      }
      if (CurNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurNum);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (IsUnlock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsUnlock);
      }
      if (Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Award);
      }
      if (IsVipUnlock != false) {
        size += 1 + 1;
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetTaskInfo other) {
      if (other == null) {
        return;
      }
      if (other.GunRatio != 0) {
        GunRatio = other.GunRatio;
      }
      if (other.CurNum != 0) {
        CurNum = other.CurNum;
      }
      if (other.TotalNum != 0) {
        TotalNum = other.TotalNum;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      if (other.IsUnlock != 0) {
        IsUnlock = other.IsUnlock;
      }
      if (other.Award != 0) {
        Award = other.Award;
      }
      if (other.IsVipUnlock != false) {
        IsVipUnlock = other.IsVipUnlock;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            CurNum = input.ReadInt32();
            break;
          }
          case 24: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 32: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 40: {
            IsUnlock = input.ReadInt32();
            break;
          }
          case 48: {
            Award = input.ReadInt32();
            break;
          }
          case 56: {
            IsVipUnlock = input.ReadBool();
            break;
          }
          case 64: {
            Ticket = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            CurNum = input.ReadInt32();
            break;
          }
          case 24: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 32: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 40: {
            IsUnlock = input.ReadInt32();
            break;
          }
          case 48: {
            Award = input.ReadInt32();
            break;
          }
          case 56: {
            IsVipUnlock = input.ReadBool();
            break;
          }
          case 64: {
            Ticket = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCNoticeInfoChange : pb::IMessage<SCNoticeInfoChange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCNoticeInfoChange> _parser = new pb::MessageParser<SCNoticeInfoChange>(() => new SCNoticeInfoChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCNoticeInfoChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticeInfoChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticeInfoChange(SCNoticeInfoChange other) : this() {
      isCompleteTask_ = other.isCompleteTask_;
      missileList_ = other.missileList_.Clone();
      callNum_ = other.callNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticeInfoChange Clone() {
      return new SCNoticeInfoChange(this);
    }

    /// <summary>Field number for the "isCompleteTask" field.</summary>
    public const int IsCompleteTaskFieldNumber = 1;
    private bool isCompleteTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCompleteTask {
      get { return isCompleteTask_; }
      set {
        isCompleteTask_ = value;
      }
    }

    /// <summary>Field number for the "missileList" field.</summary>
    public const int MissileListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.MissileInfo> _repeated_missileList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.MissileInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.MissileInfo> missileList_ = new pbc::RepeatedField<global::PlaneWar.MissileInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.MissileInfo> MissileList {
      get { return missileList_; }
    }

    /// <summary>Field number for the "callNum" field.</summary>
    public const int CallNumFieldNumber = 3;
    private int callNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallNum {
      get { return callNum_; }
      set {
        callNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCNoticeInfoChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCNoticeInfoChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsCompleteTask != other.IsCompleteTask) return false;
      if(!missileList_.Equals(other.missileList_)) return false;
      if (CallNum != other.CallNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsCompleteTask != false) hash ^= IsCompleteTask.GetHashCode();
      hash ^= missileList_.GetHashCode();
      if (CallNum != 0) hash ^= CallNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsCompleteTask != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsCompleteTask);
      }
      missileList_.WriteTo(output, _repeated_missileList_codec);
      if (CallNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CallNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsCompleteTask != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsCompleteTask);
      }
      missileList_.WriteTo(ref output, _repeated_missileList_codec);
      if (CallNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CallNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsCompleteTask != false) {
        size += 1 + 1;
      }
      size += missileList_.CalculateSize(_repeated_missileList_codec);
      if (CallNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCNoticeInfoChange other) {
      if (other == null) {
        return;
      }
      if (other.IsCompleteTask != false) {
        IsCompleteTask = other.IsCompleteTask;
      }
      missileList_.Add(other.missileList_);
      if (other.CallNum != 0) {
        CallNum = other.CallNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsCompleteTask = input.ReadBool();
            break;
          }
          case 18: {
            missileList_.AddEntriesFrom(input, _repeated_missileList_codec);
            break;
          }
          case 24: {
            CallNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsCompleteTask = input.ReadBool();
            break;
          }
          case 18: {
            missileList_.AddEntriesFrom(ref input, _repeated_missileList_codec);
            break;
          }
          case 24: {
            CallNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ProsInfo : pb::IMessage<ProsInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ProsInfo> _parser = new pb::MessageParser<ProsInfo>(() => new ProsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProsInfo(ProsInfo other) : this() {
      id_ = other.id_;
      change_ = other.change_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProsInfo Clone() {
      return new ProsInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "change" field.</summary>
    public const int ChangeFieldNumber = 2;
    private int change_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Change {
      get { return change_; }
      set {
        change_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Change != other.Change) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Change != 0) hash ^= Change.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Change != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Change);
      }
      if (Value != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Change != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Change);
      }
      if (Value != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Change != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Change);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProsInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Change != 0) {
        Change = other.Change;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Change = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Change = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCNoticeHallProsChange : pb::IMessage<SCNoticeHallProsChange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCNoticeHallProsChange> _parser = new pb::MessageParser<SCNoticeHallProsChange>(() => new SCNoticeHallProsChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCNoticeHallProsChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticeHallProsChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticeHallProsChange(SCNoticeHallProsChange other) : this() {
      chair_ = other.chair_;
      prosList_ = other.prosList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticeHallProsChange Clone() {
      return new SCNoticeHallProsChange(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "prosList" field.</summary>
    public const int ProsListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.ProsInfo> _repeated_prosList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.ProsInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.ProsInfo> prosList_ = new pbc::RepeatedField<global::PlaneWar.ProsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.ProsInfo> ProsList {
      get { return prosList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCNoticeHallProsChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCNoticeHallProsChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if(!prosList_.Equals(other.prosList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      hash ^= prosList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      prosList_.WriteTo(output, _repeated_prosList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      prosList_.WriteTo(ref output, _repeated_prosList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      size += prosList_.CalculateSize(_repeated_prosList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCNoticeHallProsChange other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      prosList_.Add(other.prosList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 18: {
            prosList_.AddEntriesFrom(input, _repeated_prosList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 18: {
            prosList_.AddEntriesFrom(ref input, _repeated_prosList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimingMonster : pb::IMessage<TimingMonster>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimingMonster> _parser = new pb::MessageParser<TimingMonster>(() => new TimingMonster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimingMonster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimingMonster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimingMonster(TimingMonster other) : this() {
      sec_ = other.sec_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimingMonster Clone() {
      return new TimingMonster(this);
    }

    /// <summary>Field number for the "sec" field.</summary>
    public const int SecFieldNumber = 1;
    private int sec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sec {
      get { return sec_; }
      set {
        sec_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimingMonster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimingMonster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sec != other.Sec) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sec != 0) hash ^= Sec.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sec != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sec);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sec != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sec);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sec);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimingMonster other) {
      if (other == null) {
        return;
      }
      if (other.Sec != 0) {
        Sec = other.Sec;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sec = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Sec = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCNoticeTimingMonster : pb::IMessage<SCNoticeTimingMonster>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCNoticeTimingMonster> _parser = new pb::MessageParser<SCNoticeTimingMonster>(() => new SCNoticeTimingMonster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCNoticeTimingMonster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticeTimingMonster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticeTimingMonster(SCNoticeTimingMonster other) : this() {
      monsterList_ = other.monsterList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticeTimingMonster Clone() {
      return new SCNoticeTimingMonster(this);
    }

    /// <summary>Field number for the "monster_list" field.</summary>
    public const int MonsterListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.TimingMonster> _repeated_monsterList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.TimingMonster.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.TimingMonster> monsterList_ = new pbc::RepeatedField<global::PlaneWar.TimingMonster>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.TimingMonster> MonsterList {
      get { return monsterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCNoticeTimingMonster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCNoticeTimingMonster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!monsterList_.Equals(other.monsterList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= monsterList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      monsterList_.WriteTo(output, _repeated_monsterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      monsterList_.WriteTo(ref output, _repeated_monsterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monsterList_.CalculateSize(_repeated_monsterList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCNoticeTimingMonster other) {
      if (other == null) {
        return;
      }
      monsterList_.Add(other.monsterList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monsterList_.AddEntriesFrom(input, _repeated_monsterList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            monsterList_.AddEntriesFrom(ref input, _repeated_monsterList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSPiggyBankInfo : pb::IMessage<CSPiggyBankInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSPiggyBankInfo> _parser = new pb::MessageParser<CSPiggyBankInfo>(() => new CSPiggyBankInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPiggyBankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPiggyBankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPiggyBankInfo(CSPiggyBankInfo other) : this() {
      isOpen_ = other.isOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPiggyBankInfo Clone() {
      return new CSPiggyBankInfo(this);
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 1;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSPiggyBankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSPiggyBankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpen != other.IsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSPiggyBankInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCPiggyBankInfo : pb::IMessage<SCPiggyBankInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPiggyBankInfo> _parser = new pb::MessageParser<SCPiggyBankInfo>(() => new SCPiggyBankInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPiggyBankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPiggyBankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPiggyBankInfo(SCPiggyBankInfo other) : this() {
      chair_ = other.chair_;
      isOpen_ = other.isOpen_;
      piggyInfo_ = other.piggyInfo_ != null ? other.piggyInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPiggyBankInfo Clone() {
      return new SCPiggyBankInfo(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 2;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "piggyInfo" field.</summary>
    public const int PiggyInfoFieldNumber = 3;
    private global::PlaneWar.PiggyInfo piggyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PiggyInfo PiggyInfo {
      get { return piggyInfo_; }
      set {
        piggyInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPiggyBankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPiggyBankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (IsOpen != other.IsOpen) return false;
      if (!object.Equals(PiggyInfo, other.PiggyInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (piggyInfo_ != null) hash ^= PiggyInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
      if (piggyInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PiggyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
      if (piggyInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PiggyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (piggyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PiggyInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPiggyBankInfo other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      if (other.piggyInfo_ != null) {
        if (piggyInfo_ == null) {
          PiggyInfo = new global::PlaneWar.PiggyInfo();
        }
        PiggyInfo.MergeFrom(other.PiggyInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
          case 26: {
            if (piggyInfo_ == null) {
              PiggyInfo = new global::PlaneWar.PiggyInfo();
            }
            input.ReadMessage(PiggyInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
          case 26: {
            if (piggyInfo_ == null) {
              PiggyInfo = new global::PlaneWar.PiggyInfo();
            }
            input.ReadMessage(PiggyInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PiggyReward : pb::IMessage<PiggyReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PiggyReward> _parser = new pb::MessageParser<PiggyReward>(() => new PiggyReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PiggyReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PiggyReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PiggyReward(PiggyReward other) : this() {
      id_ = other.id_;
      reward_ = other.reward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PiggyReward Clone() {
      return new PiggyReward(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PiggyReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PiggyReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Reward != other.Reward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Reward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Reward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PiggyReward other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOpenPiggyBank : pb::IMessage<CSOpenPiggyBank>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOpenPiggyBank> _parser = new pb::MessageParser<CSOpenPiggyBank>(() => new CSOpenPiggyBank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOpenPiggyBank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenPiggyBank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenPiggyBank(CSOpenPiggyBank other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenPiggyBank Clone() {
      return new CSOpenPiggyBank(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOpenPiggyBank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOpenPiggyBank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOpenPiggyBank other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCOpenPiggyBank : pb::IMessage<SCOpenPiggyBank>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCOpenPiggyBank> _parser = new pb::MessageParser<SCOpenPiggyBank>(() => new SCOpenPiggyBank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOpenPiggyBank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenPiggyBank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenPiggyBank(SCOpenPiggyBank other) : this() {
      chair_ = other.chair_;
      rewardList_ = other.rewardList_.Clone();
      curMoney_ = other.curMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenPiggyBank Clone() {
      return new SCOpenPiggyBank(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "rewardList" field.</summary>
    public const int RewardListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.PiggyReward> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.PiggyReward.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PiggyReward> rewardList_ = new pbc::RepeatedField<global::PlaneWar.PiggyReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PiggyReward> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "curMoney" field.</summary>
    public const int CurMoneyFieldNumber = 3;
    private int curMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurMoney {
      get { return curMoney_; }
      set {
        curMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOpenPiggyBank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOpenPiggyBank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (CurMoney != other.CurMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      hash ^= rewardList_.GetHashCode();
      if (CurMoney != 0) hash ^= CurMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (CurMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (CurMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (CurMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOpenPiggyBank other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      rewardList_.Add(other.rewardList_);
      if (other.CurMoney != 0) {
        CurMoney = other.CurMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 18: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 24: {
            CurMoney = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 18: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
          case 24: {
            CurMoney = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSPiggyBankOpenFinish : pb::IMessage<CSPiggyBankOpenFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSPiggyBankOpenFinish> _parser = new pb::MessageParser<CSPiggyBankOpenFinish>(() => new CSPiggyBankOpenFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPiggyBankOpenFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPiggyBankOpenFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPiggyBankOpenFinish(CSPiggyBankOpenFinish other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPiggyBankOpenFinish Clone() {
      return new CSPiggyBankOpenFinish(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSPiggyBankOpenFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSPiggyBankOpenFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSPiggyBankOpenFinish other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCPiggyBankOpenFinish : pb::IMessage<SCPiggyBankOpenFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPiggyBankOpenFinish> _parser = new pb::MessageParser<SCPiggyBankOpenFinish>(() => new SCPiggyBankOpenFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPiggyBankOpenFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPiggyBankOpenFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPiggyBankOpenFinish(SCPiggyBankOpenFinish other) : this() {
      chair_ = other.chair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPiggyBankOpenFinish Clone() {
      return new SCPiggyBankOpenFinish(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPiggyBankOpenFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPiggyBankOpenFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPiggyBankOpenFinish other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCPiggyBankChangeNotify : pb::IMessage<SCPiggyBankChangeNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPiggyBankChangeNotify> _parser = new pb::MessageParser<SCPiggyBankChangeNotify>(() => new SCPiggyBankChangeNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPiggyBankChangeNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPiggyBankChangeNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPiggyBankChangeNotify(SCPiggyBankChangeNotify other) : this() {
      piggyInfo_ = other.piggyInfo_ != null ? other.piggyInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPiggyBankChangeNotify Clone() {
      return new SCPiggyBankChangeNotify(this);
    }

    /// <summary>Field number for the "piggyInfo" field.</summary>
    public const int PiggyInfoFieldNumber = 1;
    private global::PlaneWar.PiggyInfo piggyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PiggyInfo PiggyInfo {
      get { return piggyInfo_; }
      set {
        piggyInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPiggyBankChangeNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPiggyBankChangeNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PiggyInfo, other.PiggyInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (piggyInfo_ != null) hash ^= PiggyInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (piggyInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PiggyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (piggyInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PiggyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (piggyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PiggyInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPiggyBankChangeNotify other) {
      if (other == null) {
        return;
      }
      if (other.piggyInfo_ != null) {
        if (piggyInfo_ == null) {
          PiggyInfo = new global::PlaneWar.PiggyInfo();
        }
        PiggyInfo.MergeFrom(other.PiggyInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (piggyInfo_ == null) {
              PiggyInfo = new global::PlaneWar.PiggyInfo();
            }
            input.ReadMessage(PiggyInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (piggyInfo_ == null) {
              PiggyInfo = new global::PlaneWar.PiggyInfo();
            }
            input.ReadMessage(PiggyInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSetPersonalPoolEnable : pb::IMessage<CSSetPersonalPoolEnable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSetPersonalPoolEnable> _parser = new pb::MessageParser<CSSetPersonalPoolEnable>(() => new CSSetPersonalPoolEnable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSetPersonalPoolEnable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetPersonalPoolEnable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetPersonalPoolEnable(CSSetPersonalPoolEnable other) : this() {
      enable_ = other.enable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetPersonalPoolEnable Clone() {
      return new CSSetPersonalPoolEnable(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSetPersonalPoolEnable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSetPersonalPoolEnable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSetPersonalPoolEnable other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSetPersonalPoolEnable : pb::IMessage<SCSetPersonalPoolEnable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSetPersonalPoolEnable> _parser = new pb::MessageParser<SCSetPersonalPoolEnable>(() => new SCSetPersonalPoolEnable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSetPersonalPoolEnable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetPersonalPoolEnable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetPersonalPoolEnable(SCSetPersonalPoolEnable other) : this() {
      enable_ = other.enable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetPersonalPoolEnable Clone() {
      return new SCSetPersonalPoolEnable(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSetPersonalPoolEnable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSetPersonalPoolEnable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSetPersonalPoolEnable other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSPersonalPoolInfo : pb::IMessage<CSPersonalPoolInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSPersonalPoolInfo> _parser = new pb::MessageParser<CSPersonalPoolInfo>(() => new CSPersonalPoolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPersonalPoolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPersonalPoolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPersonalPoolInfo(CSPersonalPoolInfo other) : this() {
      isOpen_ = other.isOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPersonalPoolInfo Clone() {
      return new CSPersonalPoolInfo(this);
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 1;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSPersonalPoolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSPersonalPoolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpen != other.IsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSPersonalPoolInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PersonalPoolReward : pb::IMessage<PersonalPoolReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PersonalPoolReward> _parser = new pb::MessageParser<PersonalPoolReward>(() => new PersonalPoolReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersonalPoolReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalPoolReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalPoolReward(PersonalPoolReward other) : this() {
      type_ = other.type_;
      id_ = other.id_;
      num_ = other.num_;
      clientID_ = other.clientID_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalPoolReward Clone() {
      return new PersonalPoolReward(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "clientID" field.</summary>
    public const int ClientIDFieldNumber = 4;
    private int clientID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientID {
      get { return clientID_; }
      set {
        clientID_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersonalPoolReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersonalPoolReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      if (ClientID != other.ClientID) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (ClientID != 0) hash ^= ClientID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (ClientID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ClientID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (ClientID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ClientID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (ClientID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersonalPoolReward other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.ClientID != 0) {
        ClientID = other.ClientID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
          case 32: {
            ClientID = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
          case 32: {
            ClientID = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PersonalPoolLevelInfo : pb::IMessage<PersonalPoolLevelInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PersonalPoolLevelInfo> _parser = new pb::MessageParser<PersonalPoolLevelInfo>(() => new PersonalPoolLevelInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersonalPoolLevelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalPoolLevelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalPoolLevelInfo(PersonalPoolLevelInfo other) : this() {
      level_ = other.level_;
      targetValue_ = other.targetValue_;
      rewardList_ = other.rewardList_.Clone();
      reward_ = other.reward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalPoolLevelInfo Clone() {
      return new PersonalPoolLevelInfo(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "targetValue" field.</summary>
    public const int TargetValueFieldNumber = 2;
    private int targetValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetValue {
      get { return targetValue_; }
      set {
        targetValue_ = value;
      }
    }

    /// <summary>Field number for the "rewardList" field.</summary>
    public const int RewardListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PlaneWar.PersonalPoolReward> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(26, global::PlaneWar.PersonalPoolReward.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PersonalPoolReward> rewardList_ = new pbc::RepeatedField<global::PlaneWar.PersonalPoolReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PersonalPoolReward> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 4;
    private bool reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersonalPoolLevelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersonalPoolLevelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (TargetValue != other.TargetValue) return false;
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (Reward != other.Reward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (TargetValue != 0) hash ^= TargetValue.GetHashCode();
      hash ^= rewardList_.GetHashCode();
      if (Reward != false) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (TargetValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetValue);
      }
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (Reward != false) {
        output.WriteRawTag(32);
        output.WriteBool(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (TargetValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetValue);
      }
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (Reward != false) {
        output.WriteRawTag(32);
        output.WriteBool(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (TargetValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetValue);
      }
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (Reward != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersonalPoolLevelInfo other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.TargetValue != 0) {
        TargetValue = other.TargetValue;
      }
      rewardList_.Add(other.rewardList_);
      if (other.Reward != false) {
        Reward = other.Reward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            TargetValue = input.ReadInt32();
            break;
          }
          case 26: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 32: {
            Reward = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            TargetValue = input.ReadInt32();
            break;
          }
          case 26: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
          case 32: {
            Reward = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PersonalPoolLuckyInfo : pb::IMessage<PersonalPoolLuckyInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PersonalPoolLuckyInfo> _parser = new pb::MessageParser<PersonalPoolLuckyInfo>(() => new PersonalPoolLuckyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersonalPoolLuckyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalPoolLuckyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalPoolLuckyInfo(PersonalPoolLuckyInfo other) : this() {
      total_ = other.total_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonalPoolLuckyInfo Clone() {
      return new PersonalPoolLuckyInfo(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 2;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersonalPoolLuckyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersonalPoolLuckyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Total != other.Total) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0) hash ^= Total.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Total != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Total);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Total != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Total);
      }
      if (Cost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersonalPoolLuckyInfo other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Total = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Total = input.ReadInt32();
            break;
          }
          case 16: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCPersonalPoolInfo : pb::IMessage<SCPersonalPoolInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPersonalPoolInfo> _parser = new pb::MessageParser<SCPersonalPoolInfo>(() => new SCPersonalPoolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPersonalPoolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPersonalPoolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPersonalPoolInfo(SCPersonalPoolInfo other) : this() {
      chair_ = other.chair_;
      isOpen_ = other.isOpen_;
      enable_ = other.enable_;
      poolValue_ = other.poolValue_;
      maxValue_ = other.maxValue_;
      curLevel_ = other.curLevel_;
      levelList_ = other.levelList_.Clone();
      luckyInfo_ = other.luckyInfo_ != null ? other.luckyInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPersonalPoolInfo Clone() {
      return new SCPersonalPoolInfo(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 2;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 3;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "poolValue" field.</summary>
    public const int PoolValueFieldNumber = 4;
    private int poolValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PoolValue {
      get { return poolValue_; }
      set {
        poolValue_ = value;
      }
    }

    /// <summary>Field number for the "maxValue" field.</summary>
    public const int MaxValueFieldNumber = 5;
    private int maxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    /// <summary>Field number for the "curLevel" field.</summary>
    public const int CurLevelFieldNumber = 6;
    private int curLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurLevel {
      get { return curLevel_; }
      set {
        curLevel_ = value;
      }
    }

    /// <summary>Field number for the "levelList" field.</summary>
    public const int LevelListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::PlaneWar.PersonalPoolLevelInfo> _repeated_levelList_codec
        = pb::FieldCodec.ForMessage(58, global::PlaneWar.PersonalPoolLevelInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PersonalPoolLevelInfo> levelList_ = new pbc::RepeatedField<global::PlaneWar.PersonalPoolLevelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PersonalPoolLevelInfo> LevelList {
      get { return levelList_; }
    }

    /// <summary>Field number for the "luckyInfo" field.</summary>
    public const int LuckyInfoFieldNumber = 8;
    private global::PlaneWar.PersonalPoolLuckyInfo luckyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PersonalPoolLuckyInfo LuckyInfo {
      get { return luckyInfo_; }
      set {
        luckyInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPersonalPoolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPersonalPoolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (IsOpen != other.IsOpen) return false;
      if (Enable != other.Enable) return false;
      if (PoolValue != other.PoolValue) return false;
      if (MaxValue != other.MaxValue) return false;
      if (CurLevel != other.CurLevel) return false;
      if(!levelList_.Equals(other.levelList_)) return false;
      if (!object.Equals(LuckyInfo, other.LuckyInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (PoolValue != 0) hash ^= PoolValue.GetHashCode();
      if (MaxValue != 0) hash ^= MaxValue.GetHashCode();
      if (CurLevel != 0) hash ^= CurLevel.GetHashCode();
      hash ^= levelList_.GetHashCode();
      if (luckyInfo_ != null) hash ^= LuckyInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
      if (Enable != false) {
        output.WriteRawTag(24);
        output.WriteBool(Enable);
      }
      if (PoolValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PoolValue);
      }
      if (MaxValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxValue);
      }
      if (CurLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurLevel);
      }
      levelList_.WriteTo(output, _repeated_levelList_codec);
      if (luckyInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LuckyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
      if (Enable != false) {
        output.WriteRawTag(24);
        output.WriteBool(Enable);
      }
      if (PoolValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PoolValue);
      }
      if (MaxValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxValue);
      }
      if (CurLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurLevel);
      }
      levelList_.WriteTo(ref output, _repeated_levelList_codec);
      if (luckyInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LuckyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (PoolValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoolValue);
      }
      if (MaxValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxValue);
      }
      if (CurLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurLevel);
      }
      size += levelList_.CalculateSize(_repeated_levelList_codec);
      if (luckyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LuckyInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPersonalPoolInfo other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.PoolValue != 0) {
        PoolValue = other.PoolValue;
      }
      if (other.MaxValue != 0) {
        MaxValue = other.MaxValue;
      }
      if (other.CurLevel != 0) {
        CurLevel = other.CurLevel;
      }
      levelList_.Add(other.levelList_);
      if (other.luckyInfo_ != null) {
        if (luckyInfo_ == null) {
          LuckyInfo = new global::PlaneWar.PersonalPoolLuckyInfo();
        }
        LuckyInfo.MergeFrom(other.LuckyInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
          case 24: {
            Enable = input.ReadBool();
            break;
          }
          case 32: {
            PoolValue = input.ReadInt32();
            break;
          }
          case 40: {
            MaxValue = input.ReadInt32();
            break;
          }
          case 48: {
            CurLevel = input.ReadInt32();
            break;
          }
          case 58: {
            levelList_.AddEntriesFrom(input, _repeated_levelList_codec);
            break;
          }
          case 66: {
            if (luckyInfo_ == null) {
              LuckyInfo = new global::PlaneWar.PersonalPoolLuckyInfo();
            }
            input.ReadMessage(LuckyInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
          case 24: {
            Enable = input.ReadBool();
            break;
          }
          case 32: {
            PoolValue = input.ReadInt32();
            break;
          }
          case 40: {
            MaxValue = input.ReadInt32();
            break;
          }
          case 48: {
            CurLevel = input.ReadInt32();
            break;
          }
          case 58: {
            levelList_.AddEntriesFrom(ref input, _repeated_levelList_codec);
            break;
          }
          case 66: {
            if (luckyInfo_ == null) {
              LuckyInfo = new global::PlaneWar.PersonalPoolLuckyInfo();
            }
            input.ReadMessage(LuckyInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSDrawPersonalPool : pb::IMessage<CSDrawPersonalPool>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSDrawPersonalPool> _parser = new pb::MessageParser<CSDrawPersonalPool>(() => new CSDrawPersonalPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDrawPersonalPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrawPersonalPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrawPersonalPool(CSDrawPersonalPool other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrawPersonalPool Clone() {
      return new CSDrawPersonalPool(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSDrawPersonalPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSDrawPersonalPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSDrawPersonalPool other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCDrawPersonalPool : pb::IMessage<SCDrawPersonalPool>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCDrawPersonalPool> _parser = new pb::MessageParser<SCDrawPersonalPool>(() => new SCDrawPersonalPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCDrawPersonalPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrawPersonalPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrawPersonalPool(SCDrawPersonalPool other) : this() {
      chair_ = other.chair_;
      reward_ = other.reward_ != null ? other.reward_.Clone() : null;
      missReward_ = other.missReward_.Clone();
      curMoney_ = other.curMoney_;
      upgradeCost_ = other.upgradeCost_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrawPersonalPool Clone() {
      return new SCDrawPersonalPool(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private global::PlaneWar.PersonalPoolReward reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PersonalPoolReward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "missReward" field.</summary>
    public const int MissRewardFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PlaneWar.PersonalPoolReward> _repeated_missReward_codec
        = pb::FieldCodec.ForMessage(26, global::PlaneWar.PersonalPoolReward.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PersonalPoolReward> missReward_ = new pbc::RepeatedField<global::PlaneWar.PersonalPoolReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PersonalPoolReward> MissReward {
      get { return missReward_; }
    }

    /// <summary>Field number for the "curMoney" field.</summary>
    public const int CurMoneyFieldNumber = 4;
    private long curMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMoney {
      get { return curMoney_; }
      set {
        curMoney_ = value;
      }
    }

    /// <summary>Field number for the "upgradeCost" field.</summary>
    public const int UpgradeCostFieldNumber = 5;
    private int upgradeCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpgradeCost {
      get { return upgradeCost_; }
      set {
        upgradeCost_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 6;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCDrawPersonalPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCDrawPersonalPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (!object.Equals(Reward, other.Reward)) return false;
      if(!missReward_.Equals(other.missReward_)) return false;
      if (CurMoney != other.CurMoney) return false;
      if (UpgradeCost != other.UpgradeCost) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (reward_ != null) hash ^= Reward.GetHashCode();
      hash ^= missReward_.GetHashCode();
      if (CurMoney != 0L) hash ^= CurMoney.GetHashCode();
      if (UpgradeCost != 0) hash ^= UpgradeCost.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      missReward_.WriteTo(output, _repeated_missReward_codec);
      if (CurMoney != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurMoney);
      }
      if (UpgradeCost != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UpgradeCost);
      }
      if (Index != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      missReward_.WriteTo(ref output, _repeated_missReward_codec);
      if (CurMoney != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurMoney);
      }
      if (UpgradeCost != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UpgradeCost);
      }
      if (Index != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      size += missReward_.CalculateSize(_repeated_missReward_codec);
      if (CurMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMoney);
      }
      if (UpgradeCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpgradeCost);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCDrawPersonalPool other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          Reward = new global::PlaneWar.PersonalPoolReward();
        }
        Reward.MergeFrom(other.Reward);
      }
      missReward_.Add(other.missReward_);
      if (other.CurMoney != 0L) {
        CurMoney = other.CurMoney;
      }
      if (other.UpgradeCost != 0) {
        UpgradeCost = other.UpgradeCost;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 18: {
            if (reward_ == null) {
              Reward = new global::PlaneWar.PersonalPoolReward();
            }
            input.ReadMessage(Reward);
            break;
          }
          case 26: {
            missReward_.AddEntriesFrom(input, _repeated_missReward_codec);
            break;
          }
          case 32: {
            CurMoney = input.ReadInt64();
            break;
          }
          case 40: {
            UpgradeCost = input.ReadInt32();
            break;
          }
          case 48: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 18: {
            if (reward_ == null) {
              Reward = new global::PlaneWar.PersonalPoolReward();
            }
            input.ReadMessage(Reward);
            break;
          }
          case 26: {
            missReward_.AddEntriesFrom(ref input, _repeated_missReward_codec);
            break;
          }
          case 32: {
            CurMoney = input.ReadInt64();
            break;
          }
          case 40: {
            UpgradeCost = input.ReadInt32();
            break;
          }
          case 48: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUpgradePoolReward : pb::IMessage<CSUpgradePoolReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUpgradePoolReward> _parser = new pb::MessageParser<CSUpgradePoolReward>(() => new CSUpgradePoolReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUpgradePoolReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUpgradePoolReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUpgradePoolReward(CSUpgradePoolReward other) : this() {
      isUpgrade_ = other.isUpgrade_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUpgradePoolReward Clone() {
      return new CSUpgradePoolReward(this);
    }

    /// <summary>Field number for the "isUpgrade" field.</summary>
    public const int IsUpgradeFieldNumber = 1;
    private bool isUpgrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUpgrade {
      get { return isUpgrade_; }
      set {
        isUpgrade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUpgradePoolReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUpgradePoolReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsUpgrade != other.IsUpgrade) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsUpgrade != false) hash ^= IsUpgrade.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsUpgrade != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsUpgrade);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsUpgrade != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsUpgrade);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsUpgrade != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUpgradePoolReward other) {
      if (other == null) {
        return;
      }
      if (other.IsUpgrade != false) {
        IsUpgrade = other.IsUpgrade;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsUpgrade = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsUpgrade = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUpgradePoolReward : pb::IMessage<SCUpgradePoolReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUpgradePoolReward> _parser = new pb::MessageParser<SCUpgradePoolReward>(() => new SCUpgradePoolReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUpgradePoolReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpgradePoolReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpgradePoolReward(SCUpgradePoolReward other) : this() {
      chair_ = other.chair_;
      result_ = other.result_;
      curMoney_ = other.curMoney_;
      baseReward_ = other.baseReward_ != null ? other.baseReward_.Clone() : null;
      extraReward_ = other.extraReward_ != null ? other.extraReward_.Clone() : null;
      addLuckyValue_ = other.addLuckyValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpgradePoolReward Clone() {
      return new SCUpgradePoolReward(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "curMoney" field.</summary>
    public const int CurMoneyFieldNumber = 3;
    private long curMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMoney {
      get { return curMoney_; }
      set {
        curMoney_ = value;
      }
    }

    /// <summary>Field number for the "baseReward" field.</summary>
    public const int BaseRewardFieldNumber = 4;
    private global::PlaneWar.PersonalPoolReward baseReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PersonalPoolReward BaseReward {
      get { return baseReward_; }
      set {
        baseReward_ = value;
      }
    }

    /// <summary>Field number for the "extraReward" field.</summary>
    public const int ExtraRewardFieldNumber = 5;
    private global::PlaneWar.PersonalPoolReward extraReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PersonalPoolReward ExtraReward {
      get { return extraReward_; }
      set {
        extraReward_ = value;
      }
    }

    /// <summary>Field number for the "addLuckyValue" field.</summary>
    public const int AddLuckyValueFieldNumber = 6;
    private int addLuckyValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddLuckyValue {
      get { return addLuckyValue_; }
      set {
        addLuckyValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUpgradePoolReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUpgradePoolReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (Result != other.Result) return false;
      if (CurMoney != other.CurMoney) return false;
      if (!object.Equals(BaseReward, other.BaseReward)) return false;
      if (!object.Equals(ExtraReward, other.ExtraReward)) return false;
      if (AddLuckyValue != other.AddLuckyValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (CurMoney != 0L) hash ^= CurMoney.GetHashCode();
      if (baseReward_ != null) hash ^= BaseReward.GetHashCode();
      if (extraReward_ != null) hash ^= ExtraReward.GetHashCode();
      if (AddLuckyValue != 0) hash ^= AddLuckyValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurMoney);
      }
      if (baseReward_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BaseReward);
      }
      if (extraReward_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExtraReward);
      }
      if (AddLuckyValue != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AddLuckyValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurMoney);
      }
      if (baseReward_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BaseReward);
      }
      if (extraReward_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExtraReward);
      }
      if (AddLuckyValue != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AddLuckyValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (CurMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMoney);
      }
      if (baseReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseReward);
      }
      if (extraReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtraReward);
      }
      if (AddLuckyValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddLuckyValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUpgradePoolReward other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.CurMoney != 0L) {
        CurMoney = other.CurMoney;
      }
      if (other.baseReward_ != null) {
        if (baseReward_ == null) {
          BaseReward = new global::PlaneWar.PersonalPoolReward();
        }
        BaseReward.MergeFrom(other.BaseReward);
      }
      if (other.extraReward_ != null) {
        if (extraReward_ == null) {
          ExtraReward = new global::PlaneWar.PersonalPoolReward();
        }
        ExtraReward.MergeFrom(other.ExtraReward);
      }
      if (other.AddLuckyValue != 0) {
        AddLuckyValue = other.AddLuckyValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
          case 24: {
            CurMoney = input.ReadInt64();
            break;
          }
          case 34: {
            if (baseReward_ == null) {
              BaseReward = new global::PlaneWar.PersonalPoolReward();
            }
            input.ReadMessage(BaseReward);
            break;
          }
          case 42: {
            if (extraReward_ == null) {
              ExtraReward = new global::PlaneWar.PersonalPoolReward();
            }
            input.ReadMessage(ExtraReward);
            break;
          }
          case 48: {
            AddLuckyValue = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
          case 24: {
            CurMoney = input.ReadInt64();
            break;
          }
          case 34: {
            if (baseReward_ == null) {
              BaseReward = new global::PlaneWar.PersonalPoolReward();
            }
            input.ReadMessage(BaseReward);
            break;
          }
          case 42: {
            if (extraReward_ == null) {
              ExtraReward = new global::PlaneWar.PersonalPoolReward();
            }
            input.ReadMessage(ExtraReward);
            break;
          }
          case 48: {
            AddLuckyValue = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetPoolLuckyReward : pb::IMessage<CSGetPoolLuckyReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetPoolLuckyReward> _parser = new pb::MessageParser<CSGetPoolLuckyReward>(() => new CSGetPoolLuckyReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetPoolLuckyReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetPoolLuckyReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetPoolLuckyReward(CSGetPoolLuckyReward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetPoolLuckyReward Clone() {
      return new CSGetPoolLuckyReward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetPoolLuckyReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetPoolLuckyReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetPoolLuckyReward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetPoolLuckyReward : pb::IMessage<SCGetPoolLuckyReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetPoolLuckyReward> _parser = new pb::MessageParser<SCGetPoolLuckyReward>(() => new SCGetPoolLuckyReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetPoolLuckyReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetPoolLuckyReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetPoolLuckyReward(SCGetPoolLuckyReward other) : this() {
      chair_ = other.chair_;
      curMoney_ = other.curMoney_;
      cost_ = other.cost_;
      rewardList_ = other.rewardList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetPoolLuckyReward Clone() {
      return new SCGetPoolLuckyReward(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "curMoney" field.</summary>
    public const int CurMoneyFieldNumber = 2;
    private long curMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMoney {
      get { return curMoney_; }
      set {
        curMoney_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 3;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "rewardList" field.</summary>
    public const int RewardListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PlaneWar.CommonPropInfo> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(34, global::PlaneWar.CommonPropInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.CommonPropInfo> rewardList_ = new pbc::RepeatedField<global::PlaneWar.CommonPropInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.CommonPropInfo> RewardList {
      get { return rewardList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetPoolLuckyReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetPoolLuckyReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (CurMoney != other.CurMoney) return false;
      if (Cost != other.Cost) return false;
      if(!rewardList_.Equals(other.rewardList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (CurMoney != 0L) hash ^= CurMoney.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      hash ^= rewardList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CurMoney);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CurMoney);
      }
      if (Cost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cost);
      }
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (CurMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMoney);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetPoolLuckyReward other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.CurMoney != 0L) {
        CurMoney = other.CurMoney;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      rewardList_.Add(other.rewardList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            CurMoney = input.ReadInt64();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 34: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            CurMoney = input.ReadInt64();
            break;
          }
          case 24: {
            Cost = input.ReadInt32();
            break;
          }
          case 34: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCPersonalPoolChangeNotify : pb::IMessage<SCPersonalPoolChangeNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPersonalPoolChangeNotify> _parser = new pb::MessageParser<SCPersonalPoolChangeNotify>(() => new SCPersonalPoolChangeNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPersonalPoolChangeNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPersonalPoolChangeNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPersonalPoolChangeNotify(SCPersonalPoolChangeNotify other) : this() {
      enable_ = other.enable_;
      curValue_ = other.curValue_;
      curLevel_ = other.curLevel_;
      maxValue_ = other.maxValue_;
      targetValue_ = other.targetValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPersonalPoolChangeNotify Clone() {
      return new SCPersonalPoolChangeNotify(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "curValue" field.</summary>
    public const int CurValueFieldNumber = 2;
    private int curValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurValue {
      get { return curValue_; }
      set {
        curValue_ = value;
      }
    }

    /// <summary>Field number for the "curLevel" field.</summary>
    public const int CurLevelFieldNumber = 3;
    private int curLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurLevel {
      get { return curLevel_; }
      set {
        curLevel_ = value;
      }
    }

    /// <summary>Field number for the "maxValue" field.</summary>
    public const int MaxValueFieldNumber = 4;
    private int maxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    /// <summary>Field number for the "targetValue" field.</summary>
    public const int TargetValueFieldNumber = 5;
    private int targetValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetValue {
      get { return targetValue_; }
      set {
        targetValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPersonalPoolChangeNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPersonalPoolChangeNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      if (CurValue != other.CurValue) return false;
      if (CurLevel != other.CurLevel) return false;
      if (MaxValue != other.MaxValue) return false;
      if (TargetValue != other.TargetValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (CurValue != 0) hash ^= CurValue.GetHashCode();
      if (CurLevel != 0) hash ^= CurLevel.GetHashCode();
      if (MaxValue != 0) hash ^= MaxValue.GetHashCode();
      if (TargetValue != 0) hash ^= TargetValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (CurValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurValue);
      }
      if (CurLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurLevel);
      }
      if (MaxValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxValue);
      }
      if (TargetValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TargetValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (CurValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurValue);
      }
      if (CurLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurLevel);
      }
      if (MaxValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxValue);
      }
      if (TargetValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TargetValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (CurValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurValue);
      }
      if (CurLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurLevel);
      }
      if (MaxValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxValue);
      }
      if (TargetValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPersonalPoolChangeNotify other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.CurValue != 0) {
        CurValue = other.CurValue;
      }
      if (other.CurLevel != 0) {
        CurLevel = other.CurLevel;
      }
      if (other.MaxValue != 0) {
        MaxValue = other.MaxValue;
      }
      if (other.TargetValue != 0) {
        TargetValue = other.TargetValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 16: {
            CurValue = input.ReadInt32();
            break;
          }
          case 24: {
            CurLevel = input.ReadInt32();
            break;
          }
          case 32: {
            MaxValue = input.ReadInt32();
            break;
          }
          case 40: {
            TargetValue = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 16: {
            CurValue = input.ReadInt32();
            break;
          }
          case 24: {
            CurLevel = input.ReadInt32();
            break;
          }
          case 32: {
            MaxValue = input.ReadInt32();
            break;
          }
          case 40: {
            TargetValue = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUseMissile : pb::IMessage<CSUseMissile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUseMissile> _parser = new pb::MessageParser<CSUseMissile>(() => new CSUseMissile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUseMissile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseMissile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseMissile(CSUseMissile other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseMissile Clone() {
      return new CSUseMissile(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUseMissile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUseMissile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUseMissile other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUseMissile : pb::IMessage<SCUseMissile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUseMissile> _parser = new pb::MessageParser<SCUseMissile>(() => new SCUseMissile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUseMissile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseMissile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseMissile(SCUseMissile other) : this() {
      chair_ = other.chair_;
      id_ = other.id_;
      reward_ = other.reward_;
      remainNum_ = other.remainNum_;
      curMoney_ = other.curMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseMissile Clone() {
      return new SCUseMissile(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "remainNum" field.</summary>
    public const int RemainNumFieldNumber = 4;
    private int remainNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainNum {
      get { return remainNum_; }
      set {
        remainNum_ = value;
      }
    }

    /// <summary>Field number for the "curMoney" field.</summary>
    public const int CurMoneyFieldNumber = 5;
    private long curMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMoney {
      get { return curMoney_; }
      set {
        curMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUseMissile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUseMissile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (Id != other.Id) return false;
      if (Reward != other.Reward) return false;
      if (RemainNum != other.RemainNum) return false;
      if (CurMoney != other.CurMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (RemainNum != 0) hash ^= RemainNum.GetHashCode();
      if (CurMoney != 0L) hash ^= CurMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Reward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reward);
      }
      if (RemainNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RemainNum);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CurMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Reward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reward);
      }
      if (RemainNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RemainNum);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CurMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (RemainNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainNum);
      }
      if (CurMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUseMissile other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      if (other.RemainNum != 0) {
        RemainNum = other.RemainNum;
      }
      if (other.CurMoney != 0L) {
        CurMoney = other.CurMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt32();
            break;
          }
          case 32: {
            RemainNum = input.ReadInt32();
            break;
          }
          case 40: {
            CurMoney = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt32();
            break;
          }
          case 32: {
            RemainNum = input.ReadInt32();
            break;
          }
          case 40: {
            CurMoney = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSMonsterCall : pb::IMessage<CSMonsterCall>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSMonsterCall> _parser = new pb::MessageParser<CSMonsterCall>(() => new CSMonsterCall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSMonsterCall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMonsterCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMonsterCall(CSMonsterCall other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMonsterCall Clone() {
      return new CSMonsterCall(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSMonsterCall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSMonsterCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSMonsterCall other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCMonsterCall : pb::IMessage<SCMonsterCall>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCMonsterCall> _parser = new pb::MessageParser<SCMonsterCall>(() => new SCMonsterCall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMonsterCall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMonsterCall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMonsterCall(SCMonsterCall other) : this() {
      chair_ = other.chair_;
      count_ = other.count_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMonsterCall Clone() {
      return new SCMonsterCall(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMonsterCall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMonsterCall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (Count != other.Count) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMonsterCall other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSClickStatic : pb::IMessage<CSClickStatic>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSClickStatic> _parser = new pb::MessageParser<CSClickStatic>(() => new CSClickStatic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSClickStatic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSClickStatic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSClickStatic(CSClickStatic other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSClickStatic Clone() {
      return new CSClickStatic(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSClickStatic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSClickStatic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSClickStatic other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCClickStatic : pb::IMessage<SCClickStatic>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCClickStatic> _parser = new pb::MessageParser<SCClickStatic>(() => new SCClickStatic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCClickStatic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCClickStatic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCClickStatic(SCClickStatic other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCClickStatic Clone() {
      return new SCClickStatic(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCClickStatic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCClickStatic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCClickStatic other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class RankInfo : pb::IMessage<RankInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RankInfo> _parser = new pb::MessageParser<RankInfo>(() => new RankInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfo(RankInfo other) : this() {
      playerId_ = other.playerId_;
      point_ = other.point_;
      nick_ = other.nick_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankInfo Clone() {
      return new RankInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private int point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 3;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 4;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Point != other.Point) return false;
      if (Nick != other.Nick) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Point != 0) hash ^= Point.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nick);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nick);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
          case 26: {
            Nick = input.ReadString();
            break;
          }
          case 34: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
          case 26: {
            Nick = input.ReadString();
            break;
          }
          case 34: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MyRankInfo : pb::IMessage<MyRankInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MyRankInfo> _parser = new pb::MessageParser<MyRankInfo>(() => new MyRankInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyRankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyRankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyRankInfo(MyRankInfo other) : this() {
      rank_ = other.rank_;
      point_ = other.point_;
      nick_ = other.nick_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyRankInfo Clone() {
      return new MyRankInfo(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private int point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 3;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 4;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyRankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyRankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if (Point != other.Point) return false;
      if (Nick != other.Nick) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Point != 0) hash ^= Point.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nick);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nick);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyRankInfo other) {
      if (other == null) {
        return;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
          case 26: {
            Nick = input.ReadString();
            break;
          }
          case 34: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
          case 26: {
            Nick = input.ReadString();
            break;
          }
          case 34: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSRankList : pb::IMessage<CSRankList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSRankList> _parser = new pb::MessageParser<CSRankList>(() => new CSRankList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRankList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRankList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRankList(CSRankList other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRankList Clone() {
      return new CSRankList(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSRankList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSRankList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSRankList other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCRankList : pb::IMessage<SCRankList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCRankList> _parser = new pb::MessageParser<SCRankList>(() => new SCRankList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCRankList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRankList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRankList(SCRankList other) : this() {
      type_ = other.type_;
      rank_ = other.rank_ != null ? other.rank_.Clone() : null;
      myRank_ = other.myRank_ != null ? other.myRank_.Clone() : null;
      lastTop_ = other.lastTop_ != null ? other.lastTop_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRankList Clone() {
      return new SCRankList(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private global::PlaneWar.RankInfo rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RankInfo Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "myRank" field.</summary>
    public const int MyRankFieldNumber = 3;
    private global::PlaneWar.MyRankInfo myRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.MyRankInfo MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    /// <summary>Field number for the "lastTop" field.</summary>
    public const int LastTopFieldNumber = 4;
    private global::PlaneWar.RankInfo lastTop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RankInfo LastTop {
      get { return lastTop_; }
      set {
        lastTop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCRankList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCRankList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Rank, other.Rank)) return false;
      if (!object.Equals(MyRank, other.MyRank)) return false;
      if (!object.Equals(LastTop, other.LastTop)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (rank_ != null) hash ^= Rank.GetHashCode();
      if (myRank_ != null) hash ^= MyRank.GetHashCode();
      if (lastTop_ != null) hash ^= LastTop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (rank_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rank);
      }
      if (myRank_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MyRank);
      }
      if (lastTop_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (rank_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rank);
      }
      if (myRank_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MyRank);
      }
      if (lastTop_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastTop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (rank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rank);
      }
      if (myRank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MyRank);
      }
      if (lastTop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastTop);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCRankList other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.rank_ != null) {
        if (rank_ == null) {
          Rank = new global::PlaneWar.RankInfo();
        }
        Rank.MergeFrom(other.Rank);
      }
      if (other.myRank_ != null) {
        if (myRank_ == null) {
          MyRank = new global::PlaneWar.MyRankInfo();
        }
        MyRank.MergeFrom(other.MyRank);
      }
      if (other.lastTop_ != null) {
        if (lastTop_ == null) {
          LastTop = new global::PlaneWar.RankInfo();
        }
        LastTop.MergeFrom(other.LastTop);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (rank_ == null) {
              Rank = new global::PlaneWar.RankInfo();
            }
            input.ReadMessage(Rank);
            break;
          }
          case 26: {
            if (myRank_ == null) {
              MyRank = new global::PlaneWar.MyRankInfo();
            }
            input.ReadMessage(MyRank);
            break;
          }
          case 34: {
            if (lastTop_ == null) {
              LastTop = new global::PlaneWar.RankInfo();
            }
            input.ReadMessage(LastTop);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            if (rank_ == null) {
              Rank = new global::PlaneWar.RankInfo();
            }
            input.ReadMessage(Rank);
            break;
          }
          case 26: {
            if (myRank_ == null) {
              MyRank = new global::PlaneWar.MyRankInfo();
            }
            input.ReadMessage(MyRank);
            break;
          }
          case 34: {
            if (lastTop_ == null) {
              LastTop = new global::PlaneWar.RankInfo();
            }
            input.ReadMessage(LastTop);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TitleInfo : pb::IMessage<TitleInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TitleInfo> _parser = new pb::MessageParser<TitleInfo>(() => new TitleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TitleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleInfo(TitleInfo other) : this() {
      id_ = other.id_;
      status_ = other.status_;
      name_ = other.name_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TitleInfo Clone() {
      return new TitleInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private int endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TitleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TitleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      if (Name != other.Name) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (EndTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (EndTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TitleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            EndTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            EndTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCTitleList : pb::IMessage<SCTitleList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTitleList> _parser = new pb::MessageParser<SCTitleList>(() => new SCTitleList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTitleList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTitleList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTitleList(SCTitleList other) : this() {
      titleList_ = other.titleList_.Clone();
      selectedTitleId_ = other.selectedTitleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTitleList Clone() {
      return new SCTitleList(this);
    }

    /// <summary>Field number for the "titleList" field.</summary>
    public const int TitleListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.TitleInfo> _repeated_titleList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.TitleInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.TitleInfo> titleList_ = new pbc::RepeatedField<global::PlaneWar.TitleInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.TitleInfo> TitleList {
      get { return titleList_; }
    }

    /// <summary>Field number for the "selectedTitleId" field.</summary>
    public const int SelectedTitleIdFieldNumber = 2;
    private int selectedTitleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectedTitleId {
      get { return selectedTitleId_; }
      set {
        selectedTitleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTitleList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTitleList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!titleList_.Equals(other.titleList_)) return false;
      if (SelectedTitleId != other.SelectedTitleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= titleList_.GetHashCode();
      if (SelectedTitleId != 0) hash ^= SelectedTitleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      titleList_.WriteTo(output, _repeated_titleList_codec);
      if (SelectedTitleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SelectedTitleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      titleList_.WriteTo(ref output, _repeated_titleList_codec);
      if (SelectedTitleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SelectedTitleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += titleList_.CalculateSize(_repeated_titleList_codec);
      if (SelectedTitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectedTitleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTitleList other) {
      if (other == null) {
        return;
      }
      titleList_.Add(other.titleList_);
      if (other.SelectedTitleId != 0) {
        SelectedTitleId = other.SelectedTitleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            titleList_.AddEntriesFrom(input, _repeated_titleList_codec);
            break;
          }
          case 16: {
            SelectedTitleId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            titleList_.AddEntriesFrom(ref input, _repeated_titleList_codec);
            break;
          }
          case 16: {
            SelectedTitleId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSelectTitle : pb::IMessage<CSSelectTitle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSelectTitle> _parser = new pb::MessageParser<CSSelectTitle>(() => new CSSelectTitle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSelectTitle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelectTitle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelectTitle(CSSelectTitle other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelectTitle Clone() {
      return new CSSelectTitle(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSelectTitle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSelectTitle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSelectTitle other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSelectTitle : pb::IMessage<SCSelectTitle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSelectTitle> _parser = new pb::MessageParser<SCSelectTitle>(() => new SCSelectTitle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSelectTitle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSelectTitle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSelectTitle(SCSelectTitle other) : this() {
      id_ = other.id_;
      chair_ = other.chair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSelectTitle Clone() {
      return new SCSelectTitle(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 2;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSelectTitle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSelectTitle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Chair != other.Chair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Chair != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Chair != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSelectTitle other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Chair = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Chair = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCTitleActiveNotify : pb::IMessage<SCTitleActiveNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTitleActiveNotify> _parser = new pb::MessageParser<SCTitleActiveNotify>(() => new SCTitleActiveNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTitleActiveNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTitleActiveNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTitleActiveNotify(SCTitleActiveNotify other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTitleActiveNotify Clone() {
      return new SCTitleActiveNotify(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTitleActiveNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTitleActiveNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTitleActiveNotify other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCRoomInfoChangeNotify : pb::IMessage<SCRoomInfoChangeNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCRoomInfoChangeNotify> _parser = new pb::MessageParser<SCRoomInfoChangeNotify>(() => new SCRoomInfoChangeNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCRoomInfoChangeNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRoomInfoChangeNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRoomInfoChangeNotify(SCRoomInfoChangeNotify other) : this() {
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRoomInfoChangeNotify Clone() {
      return new SCRoomInfoChangeNotify(this);
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::PlaneWar.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCRoomInfoChangeNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCRoomInfoChangeNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCRoomInfoChangeNotify other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          RoomInfo = new global::PlaneWar.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::PlaneWar.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (roomInfo_ == null) {
              RoomInfo = new global::PlaneWar.RoomInfo();
            }
            input.ReadMessage(RoomInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSMatchBrief : pb::IMessage<CSMatchBrief>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSMatchBrief> _parser = new pb::MessageParser<CSMatchBrief>(() => new CSMatchBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSMatchBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchBrief(CSMatchBrief other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchBrief Clone() {
      return new CSMatchBrief(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSMatchBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSMatchBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSMatchBrief other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCMatchBrief : pb::IMessage<SCMatchBrief>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCMatchBrief> _parser = new pb::MessageParser<SCMatchBrief>(() => new SCMatchBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMatchBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[146]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchBrief(SCMatchBrief other) : this() {
      status_ = other.status_;
      matchType_ = other.matchType_;
      matchName_ = other.matchName_;
      countDown_ = other.countDown_;
      totalNum_ = other.totalNum_;
      rewardNum_ = other.rewardNum_;
      myRank_ = other.myRank_;
      myPoint_ = other.myPoint_;
      nextRankPoint_ = other.nextRankPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchBrief Clone() {
      return new SCMatchBrief(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "matchType" field.</summary>
    public const int MatchTypeFieldNumber = 2;
    private int matchType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "matchName" field.</summary>
    public const int MatchNameFieldNumber = 3;
    private string matchName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchName {
      get { return matchName_; }
      set {
        matchName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countDown" field.</summary>
    public const int CountDownFieldNumber = 4;
    private int countDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountDown {
      get { return countDown_; }
      set {
        countDown_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 5;
    private int totalNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "rewardNum" field.</summary>
    public const int RewardNumFieldNumber = 6;
    private int rewardNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardNum {
      get { return rewardNum_; }
      set {
        rewardNum_ = value;
      }
    }

    /// <summary>Field number for the "myRank" field.</summary>
    public const int MyRankFieldNumber = 7;
    private int myRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    /// <summary>Field number for the "myPoint" field.</summary>
    public const int MyPointFieldNumber = 8;
    private int myPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyPoint {
      get { return myPoint_; }
      set {
        myPoint_ = value;
      }
    }

    /// <summary>Field number for the "nextRankPoint" field.</summary>
    public const int NextRankPointFieldNumber = 9;
    private int nextRankPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextRankPoint {
      get { return nextRankPoint_; }
      set {
        nextRankPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMatchBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMatchBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (MatchType != other.MatchType) return false;
      if (MatchName != other.MatchName) return false;
      if (CountDown != other.CountDown) return false;
      if (TotalNum != other.TotalNum) return false;
      if (RewardNum != other.RewardNum) return false;
      if (MyRank != other.MyRank) return false;
      if (MyPoint != other.MyPoint) return false;
      if (NextRankPoint != other.NextRankPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (MatchType != 0) hash ^= MatchType.GetHashCode();
      if (MatchName.Length != 0) hash ^= MatchName.GetHashCode();
      if (CountDown != 0) hash ^= CountDown.GetHashCode();
      if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
      if (RewardNum != 0) hash ^= RewardNum.GetHashCode();
      if (MyRank != 0) hash ^= MyRank.GetHashCode();
      if (MyPoint != 0) hash ^= MyPoint.GetHashCode();
      if (NextRankPoint != 0) hash ^= NextRankPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (MatchType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MatchType);
      }
      if (MatchName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MatchName);
      }
      if (CountDown != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CountDown);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalNum);
      }
      if (RewardNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RewardNum);
      }
      if (MyRank != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MyRank);
      }
      if (MyPoint != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MyPoint);
      }
      if (NextRankPoint != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NextRankPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (MatchType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MatchType);
      }
      if (MatchName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MatchName);
      }
      if (CountDown != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CountDown);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalNum);
      }
      if (RewardNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RewardNum);
      }
      if (MyRank != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MyRank);
      }
      if (MyPoint != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MyPoint);
      }
      if (NextRankPoint != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NextRankPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (MatchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MatchType);
      }
      if (MatchName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchName);
      }
      if (CountDown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountDown);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (RewardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardNum);
      }
      if (MyRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyRank);
      }
      if (MyPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyPoint);
      }
      if (NextRankPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextRankPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMatchBrief other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.MatchType != 0) {
        MatchType = other.MatchType;
      }
      if (other.MatchName.Length != 0) {
        MatchName = other.MatchName;
      }
      if (other.CountDown != 0) {
        CountDown = other.CountDown;
      }
      if (other.TotalNum != 0) {
        TotalNum = other.TotalNum;
      }
      if (other.RewardNum != 0) {
        RewardNum = other.RewardNum;
      }
      if (other.MyRank != 0) {
        MyRank = other.MyRank;
      }
      if (other.MyPoint != 0) {
        MyPoint = other.MyPoint;
      }
      if (other.NextRankPoint != 0) {
        NextRankPoint = other.NextRankPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            MatchType = input.ReadInt32();
            break;
          }
          case 26: {
            MatchName = input.ReadString();
            break;
          }
          case 32: {
            CountDown = input.ReadInt32();
            break;
          }
          case 40: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 48: {
            RewardNum = input.ReadInt32();
            break;
          }
          case 56: {
            MyRank = input.ReadInt32();
            break;
          }
          case 64: {
            MyPoint = input.ReadInt32();
            break;
          }
          case 72: {
            NextRankPoint = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            MatchType = input.ReadInt32();
            break;
          }
          case 26: {
            MatchName = input.ReadString();
            break;
          }
          case 32: {
            CountDown = input.ReadInt32();
            break;
          }
          case 40: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 48: {
            RewardNum = input.ReadInt32();
            break;
          }
          case 56: {
            MyRank = input.ReadInt32();
            break;
          }
          case 64: {
            MyPoint = input.ReadInt32();
            break;
          }
          case 72: {
            NextRankPoint = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSMatchDetail : pb::IMessage<CSMatchDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSMatchDetail> _parser = new pb::MessageParser<CSMatchDetail>(() => new CSMatchDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSMatchDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[147]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchDetail(CSMatchDetail other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchDetail Clone() {
      return new CSMatchDetail(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSMatchDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSMatchDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSMatchDetail other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class MatchSubInfo : pb::IMessage<MatchSubInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchSubInfo> _parser = new pb::MessageParser<MatchSubInfo>(() => new MatchSubInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchSubInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[148]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchSubInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchSubInfo(MatchSubInfo other) : this() {
      inMatch_ = other.inMatch_;
      subMatchName_ = other.subMatchName_;
      jackpot_ = other.jackpot_;
      totalNum_ = other.totalNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchSubInfo Clone() {
      return new MatchSubInfo(this);
    }

    /// <summary>Field number for the "inMatch" field.</summary>
    public const int InMatchFieldNumber = 1;
    private bool inMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InMatch {
      get { return inMatch_; }
      set {
        inMatch_ = value;
      }
    }

    /// <summary>Field number for the "subMatchName" field.</summary>
    public const int SubMatchNameFieldNumber = 2;
    private string subMatchName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubMatchName {
      get { return subMatchName_; }
      set {
        subMatchName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jackpot" field.</summary>
    public const int JackpotFieldNumber = 3;
    private int jackpot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Jackpot {
      get { return jackpot_; }
      set {
        jackpot_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 4;
    private int totalNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchSubInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchSubInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InMatch != other.InMatch) return false;
      if (SubMatchName != other.SubMatchName) return false;
      if (Jackpot != other.Jackpot) return false;
      if (TotalNum != other.TotalNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InMatch != false) hash ^= InMatch.GetHashCode();
      if (SubMatchName.Length != 0) hash ^= SubMatchName.GetHashCode();
      if (Jackpot != 0) hash ^= Jackpot.GetHashCode();
      if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InMatch != false) {
        output.WriteRawTag(8);
        output.WriteBool(InMatch);
      }
      if (SubMatchName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubMatchName);
      }
      if (Jackpot != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Jackpot);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InMatch != false) {
        output.WriteRawTag(8);
        output.WriteBool(InMatch);
      }
      if (SubMatchName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubMatchName);
      }
      if (Jackpot != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Jackpot);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InMatch != false) {
        size += 1 + 1;
      }
      if (SubMatchName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubMatchName);
      }
      if (Jackpot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Jackpot);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchSubInfo other) {
      if (other == null) {
        return;
      }
      if (other.InMatch != false) {
        InMatch = other.InMatch;
      }
      if (other.SubMatchName.Length != 0) {
        SubMatchName = other.SubMatchName;
      }
      if (other.Jackpot != 0) {
        Jackpot = other.Jackpot;
      }
      if (other.TotalNum != 0) {
        TotalNum = other.TotalNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InMatch = input.ReadBool();
            break;
          }
          case 18: {
            SubMatchName = input.ReadString();
            break;
          }
          case 24: {
            Jackpot = input.ReadInt32();
            break;
          }
          case 32: {
            TotalNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InMatch = input.ReadBool();
            break;
          }
          case 18: {
            SubMatchName = input.ReadString();
            break;
          }
          case 24: {
            Jackpot = input.ReadInt32();
            break;
          }
          case 32: {
            TotalNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MatchRewardItem : pb::IMessage<MatchRewardItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchRewardItem> _parser = new pb::MessageParser<MatchRewardItem>(() => new MatchRewardItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchRewardItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[149]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRewardItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRewardItem(MatchRewardItem other) : this() {
      id_ = other.id_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRewardItem Clone() {
      return new MatchRewardItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchRewardItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchRewardItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchRewardItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MatchRankInfo : pb::IMessage<MatchRankInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchRankInfo> _parser = new pb::MessageParser<MatchRankInfo>(() => new MatchRankInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchRankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[150]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRankInfo(MatchRankInfo other) : this() {
      playerId_ = other.playerId_;
      point_ = other.point_;
      nick_ = other.nick_;
      icon_ = other.icon_;
      rank_ = other.rank_;
      pointBonus_ = other.pointBonus_;
      moneyBonus_ = other.moneyBonus_;
      rewardList_ = other.rewardList_ != null ? other.rewardList_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchRankInfo Clone() {
      return new MatchRankInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private int point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 3;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 4;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 5;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "pointBonus" field.</summary>
    public const int PointBonusFieldNumber = 6;
    private int pointBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointBonus {
      get { return pointBonus_; }
      set {
        pointBonus_ = value;
      }
    }

    /// <summary>Field number for the "moneyBonus" field.</summary>
    public const int MoneyBonusFieldNumber = 7;
    private int moneyBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoneyBonus {
      get { return moneyBonus_; }
      set {
        moneyBonus_ = value;
      }
    }

    /// <summary>Field number for the "rewardList" field.</summary>
    public const int RewardListFieldNumber = 8;
    private global::PlaneWar.MatchRewardItem rewardList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.MatchRewardItem RewardList {
      get { return rewardList_; }
      set {
        rewardList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchRankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchRankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Point != other.Point) return false;
      if (Nick != other.Nick) return false;
      if (Icon != other.Icon) return false;
      if (Rank != other.Rank) return false;
      if (PointBonus != other.PointBonus) return false;
      if (MoneyBonus != other.MoneyBonus) return false;
      if (!object.Equals(RewardList, other.RewardList)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Point != 0) hash ^= Point.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (PointBonus != 0) hash ^= PointBonus.GetHashCode();
      if (MoneyBonus != 0) hash ^= MoneyBonus.GetHashCode();
      if (rewardList_ != null) hash ^= RewardList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nick);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Icon);
      }
      if (Rank != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rank);
      }
      if (PointBonus != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PointBonus);
      }
      if (MoneyBonus != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MoneyBonus);
      }
      if (rewardList_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RewardList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nick);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Icon);
      }
      if (Rank != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rank);
      }
      if (PointBonus != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PointBonus);
      }
      if (MoneyBonus != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MoneyBonus);
      }
      if (rewardList_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RewardList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (PointBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointBonus);
      }
      if (MoneyBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoneyBonus);
      }
      if (rewardList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchRankInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.PointBonus != 0) {
        PointBonus = other.PointBonus;
      }
      if (other.MoneyBonus != 0) {
        MoneyBonus = other.MoneyBonus;
      }
      if (other.rewardList_ != null) {
        if (rewardList_ == null) {
          RewardList = new global::PlaneWar.MatchRewardItem();
        }
        RewardList.MergeFrom(other.RewardList);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
          case 26: {
            Nick = input.ReadString();
            break;
          }
          case 34: {
            Icon = input.ReadString();
            break;
          }
          case 40: {
            Rank = input.ReadInt32();
            break;
          }
          case 48: {
            PointBonus = input.ReadInt32();
            break;
          }
          case 56: {
            MoneyBonus = input.ReadInt32();
            break;
          }
          case 66: {
            if (rewardList_ == null) {
              RewardList = new global::PlaneWar.MatchRewardItem();
            }
            input.ReadMessage(RewardList);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
          case 26: {
            Nick = input.ReadString();
            break;
          }
          case 34: {
            Icon = input.ReadString();
            break;
          }
          case 40: {
            Rank = input.ReadInt32();
            break;
          }
          case 48: {
            PointBonus = input.ReadInt32();
            break;
          }
          case 56: {
            MoneyBonus = input.ReadInt32();
            break;
          }
          case 66: {
            if (rewardList_ == null) {
              RewardList = new global::PlaneWar.MatchRewardItem();
            }
            input.ReadMessage(RewardList);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MatchTask : pb::IMessage<MatchTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchTask> _parser = new pb::MessageParser<MatchTask>(() => new MatchTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[151]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTask(MatchTask other) : this() {
      status_ = other.status_;
      target_ = other.target_;
      reward_ = other.reward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchTask Clone() {
      return new MatchTask(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private int target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Target != other.Target) return false;
      if (Reward != other.Reward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (Target != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Target);
      }
      if (Reward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (Target != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Target);
      }
      if (Reward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchTask other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            Target = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            Target = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCMatchDetail : pb::IMessage<SCMatchDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCMatchDetail> _parser = new pb::MessageParser<SCMatchDetail>(() => new SCMatchDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMatchDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[152]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchDetail(SCMatchDetail other) : this() {
      subInfoList_ = other.subInfoList_.Clone();
      rankList_ = other.rankList_.Clone();
      myRank_ = other.myRank_ != null ? other.myRank_.Clone() : null;
      tipList_ = other.tipList_.Clone();
      luckyStage_ = other.luckyStage_.Clone();
      taskList_ = other.taskList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchDetail Clone() {
      return new SCMatchDetail(this);
    }

    /// <summary>Field number for the "subInfoList" field.</summary>
    public const int SubInfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.MatchSubInfo> _repeated_subInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.MatchSubInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.MatchSubInfo> subInfoList_ = new pbc::RepeatedField<global::PlaneWar.MatchSubInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.MatchSubInfo> SubInfoList {
      get { return subInfoList_; }
    }

    /// <summary>Field number for the "rankList" field.</summary>
    public const int RankListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.MatchRankInfo> _repeated_rankList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.MatchRankInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.MatchRankInfo> rankList_ = new pbc::RepeatedField<global::PlaneWar.MatchRankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.MatchRankInfo> RankList {
      get { return rankList_; }
    }

    /// <summary>Field number for the "myRank" field.</summary>
    public const int MyRankFieldNumber = 3;
    private global::PlaneWar.MatchRankInfo myRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.MatchRankInfo MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    /// <summary>Field number for the "tipList" field.</summary>
    public const int TipListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_tipList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> tipList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TipList {
      get { return tipList_; }
    }

    /// <summary>Field number for the "luckyStage" field.</summary>
    public const int LuckyStageFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_luckyStage_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> luckyStage_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LuckyStage {
      get { return luckyStage_; }
    }

    /// <summary>Field number for the "taskList" field.</summary>
    public const int TaskListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::PlaneWar.MatchTask> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(50, global::PlaneWar.MatchTask.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.MatchTask> taskList_ = new pbc::RepeatedField<global::PlaneWar.MatchTask>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.MatchTask> TaskList {
      get { return taskList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMatchDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMatchDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!subInfoList_.Equals(other.subInfoList_)) return false;
      if(!rankList_.Equals(other.rankList_)) return false;
      if (!object.Equals(MyRank, other.MyRank)) return false;
      if(!tipList_.Equals(other.tipList_)) return false;
      if(!luckyStage_.Equals(other.luckyStage_)) return false;
      if(!taskList_.Equals(other.taskList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= subInfoList_.GetHashCode();
      hash ^= rankList_.GetHashCode();
      if (myRank_ != null) hash ^= MyRank.GetHashCode();
      hash ^= tipList_.GetHashCode();
      hash ^= luckyStage_.GetHashCode();
      hash ^= taskList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      subInfoList_.WriteTo(output, _repeated_subInfoList_codec);
      rankList_.WriteTo(output, _repeated_rankList_codec);
      if (myRank_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MyRank);
      }
      tipList_.WriteTo(output, _repeated_tipList_codec);
      luckyStage_.WriteTo(output, _repeated_luckyStage_codec);
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      subInfoList_.WriteTo(ref output, _repeated_subInfoList_codec);
      rankList_.WriteTo(ref output, _repeated_rankList_codec);
      if (myRank_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MyRank);
      }
      tipList_.WriteTo(ref output, _repeated_tipList_codec);
      luckyStage_.WriteTo(ref output, _repeated_luckyStage_codec);
      taskList_.WriteTo(ref output, _repeated_taskList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += subInfoList_.CalculateSize(_repeated_subInfoList_codec);
      size += rankList_.CalculateSize(_repeated_rankList_codec);
      if (myRank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MyRank);
      }
      size += tipList_.CalculateSize(_repeated_tipList_codec);
      size += luckyStage_.CalculateSize(_repeated_luckyStage_codec);
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMatchDetail other) {
      if (other == null) {
        return;
      }
      subInfoList_.Add(other.subInfoList_);
      rankList_.Add(other.rankList_);
      if (other.myRank_ != null) {
        if (myRank_ == null) {
          MyRank = new global::PlaneWar.MatchRankInfo();
        }
        MyRank.MergeFrom(other.MyRank);
      }
      tipList_.Add(other.tipList_);
      luckyStage_.Add(other.luckyStage_);
      taskList_.Add(other.taskList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            subInfoList_.AddEntriesFrom(input, _repeated_subInfoList_codec);
            break;
          }
          case 18: {
            rankList_.AddEntriesFrom(input, _repeated_rankList_codec);
            break;
          }
          case 26: {
            if (myRank_ == null) {
              MyRank = new global::PlaneWar.MatchRankInfo();
            }
            input.ReadMessage(MyRank);
            break;
          }
          case 34:
          case 32: {
            tipList_.AddEntriesFrom(input, _repeated_tipList_codec);
            break;
          }
          case 42:
          case 40: {
            luckyStage_.AddEntriesFrom(input, _repeated_luckyStage_codec);
            break;
          }
          case 50: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            subInfoList_.AddEntriesFrom(ref input, _repeated_subInfoList_codec);
            break;
          }
          case 18: {
            rankList_.AddEntriesFrom(ref input, _repeated_rankList_codec);
            break;
          }
          case 26: {
            if (myRank_ == null) {
              MyRank = new global::PlaneWar.MatchRankInfo();
            }
            input.ReadMessage(MyRank);
            break;
          }
          case 34:
          case 32: {
            tipList_.AddEntriesFrom(ref input, _repeated_tipList_codec);
            break;
          }
          case 42:
          case 40: {
            luckyStage_.AddEntriesFrom(ref input, _repeated_luckyStage_codec);
            break;
          }
          case 50: {
            taskList_.AddEntriesFrom(ref input, _repeated_taskList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSMatchReward : pb::IMessage<CSMatchReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSMatchReward> _parser = new pb::MessageParser<CSMatchReward>(() => new CSMatchReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSMatchReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[153]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchReward(CSMatchReward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchReward Clone() {
      return new CSMatchReward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSMatchReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSMatchReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSMatchReward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class RankReward : pb::IMessage<RankReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RankReward> _parser = new pb::MessageParser<RankReward>(() => new RankReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[154]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankReward(RankReward other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      rewardList_ = other.rewardList_ != null ? other.rewardList_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankReward Clone() {
      return new RankReward(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private int to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "rewardList" field.</summary>
    public const int RewardListFieldNumber = 3;
    private global::PlaneWar.MatchRewardItem rewardList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.MatchRewardItem RewardList {
      get { return rewardList_; }
      set {
        rewardList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (!object.Equals(RewardList, other.RewardList)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (To != 0) hash ^= To.GetHashCode();
      if (rewardList_ != null) hash ^= RewardList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (rewardList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RewardList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (rewardList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RewardList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (To != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(To);
      }
      if (rewardList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankReward other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.To != 0) {
        To = other.To;
      }
      if (other.rewardList_ != null) {
        if (rewardList_ == null) {
          RewardList = new global::PlaneWar.MatchRewardItem();
        }
        RewardList.MergeFrom(other.RewardList);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
          case 26: {
            if (rewardList_ == null) {
              RewardList = new global::PlaneWar.MatchRewardItem();
            }
            input.ReadMessage(RewardList);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
          case 26: {
            if (rewardList_ == null) {
              RewardList = new global::PlaneWar.MatchRewardItem();
            }
            input.ReadMessage(RewardList);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCMatchReward : pb::IMessage<SCMatchReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCMatchReward> _parser = new pb::MessageParser<SCMatchReward>(() => new SCMatchReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMatchReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[155]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchReward(SCMatchReward other) : this() {
      rankRewardList_ = other.rankRewardList_.Clone();
      luckyReward_ = other.luckyReward_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchReward Clone() {
      return new SCMatchReward(this);
    }

    /// <summary>Field number for the "rankRewardList" field.</summary>
    public const int RankRewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.RankReward> _repeated_rankRewardList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.RankReward.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.RankReward> rankRewardList_ = new pbc::RepeatedField<global::PlaneWar.RankReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.RankReward> RankRewardList {
      get { return rankRewardList_; }
    }

    /// <summary>Field number for the "luckyReward" field.</summary>
    public const int LuckyRewardFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_luckyReward_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> luckyReward_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LuckyReward {
      get { return luckyReward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMatchReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMatchReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rankRewardList_.Equals(other.rankRewardList_)) return false;
      if(!luckyReward_.Equals(other.luckyReward_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rankRewardList_.GetHashCode();
      hash ^= luckyReward_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rankRewardList_.WriteTo(output, _repeated_rankRewardList_codec);
      luckyReward_.WriteTo(output, _repeated_luckyReward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rankRewardList_.WriteTo(ref output, _repeated_rankRewardList_codec);
      luckyReward_.WriteTo(ref output, _repeated_luckyReward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rankRewardList_.CalculateSize(_repeated_rankRewardList_codec);
      size += luckyReward_.CalculateSize(_repeated_luckyReward_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMatchReward other) {
      if (other == null) {
        return;
      }
      rankRewardList_.Add(other.rankRewardList_);
      luckyReward_.Add(other.luckyReward_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rankRewardList_.AddEntriesFrom(input, _repeated_rankRewardList_codec);
            break;
          }
          case 18:
          case 16: {
            luckyReward_.AddEntriesFrom(input, _repeated_luckyReward_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rankRewardList_.AddEntriesFrom(ref input, _repeated_rankRewardList_codec);
            break;
          }
          case 18:
          case 16: {
            luckyReward_.AddEntriesFrom(ref input, _repeated_luckyReward_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MyMatchReward : pb::IMessage<MyMatchReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MyMatchReward> _parser = new pb::MessageParser<MyMatchReward>(() => new MyMatchReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MyMatchReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[156]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyMatchReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyMatchReward(MyMatchReward other) : this() {
      rank_ = other.rank_;
      myReward_ = other.myReward_.Clone();
      bonus_ = other.bonus_;
      luckyReward_ = other.luckyReward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MyMatchReward Clone() {
      return new MyMatchReward(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "myReward" field.</summary>
    public const int MyRewardFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.MatchRewardItem> _repeated_myReward_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.MatchRewardItem.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.MatchRewardItem> myReward_ = new pbc::RepeatedField<global::PlaneWar.MatchRewardItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.MatchRewardItem> MyReward {
      get { return myReward_; }
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 3;
    private int bonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bonus {
      get { return bonus_; }
      set {
        bonus_ = value;
      }
    }

    /// <summary>Field number for the "luckyReward" field.</summary>
    public const int LuckyRewardFieldNumber = 4;
    private int luckyReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyReward {
      get { return luckyReward_; }
      set {
        luckyReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MyMatchReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MyMatchReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if(!myReward_.Equals(other.myReward_)) return false;
      if (Bonus != other.Bonus) return false;
      if (LuckyReward != other.LuckyReward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != 0) hash ^= Rank.GetHashCode();
      hash ^= myReward_.GetHashCode();
      if (Bonus != 0) hash ^= Bonus.GetHashCode();
      if (LuckyReward != 0) hash ^= LuckyReward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      myReward_.WriteTo(output, _repeated_myReward_codec);
      if (Bonus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bonus);
      }
      if (LuckyReward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LuckyReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      myReward_.WriteTo(ref output, _repeated_myReward_codec);
      if (Bonus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bonus);
      }
      if (LuckyReward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LuckyReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      size += myReward_.CalculateSize(_repeated_myReward_codec);
      if (Bonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bonus);
      }
      if (LuckyReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LuckyReward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MyMatchReward other) {
      if (other == null) {
        return;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      myReward_.Add(other.myReward_);
      if (other.Bonus != 0) {
        Bonus = other.Bonus;
      }
      if (other.LuckyReward != 0) {
        LuckyReward = other.LuckyReward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 18: {
            myReward_.AddEntriesFrom(input, _repeated_myReward_codec);
            break;
          }
          case 24: {
            Bonus = input.ReadInt32();
            break;
          }
          case 32: {
            LuckyReward = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 18: {
            myReward_.AddEntriesFrom(ref input, _repeated_myReward_codec);
            break;
          }
          case 24: {
            Bonus = input.ReadInt32();
            break;
          }
          case 32: {
            LuckyReward = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCMatchRewardNotify : pb::IMessage<SCMatchRewardNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCMatchRewardNotify> _parser = new pb::MessageParser<SCMatchRewardNotify>(() => new SCMatchRewardNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMatchRewardNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[157]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchRewardNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchRewardNotify(SCMatchRewardNotify other) : this() {
      rewardList_ = other.rewardList_ != null ? other.rewardList_.Clone() : null;
      myReward_ = other.myReward_ != null ? other.myReward_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchRewardNotify Clone() {
      return new SCMatchRewardNotify(this);
    }

    /// <summary>Field number for the "rewardList" field.</summary>
    public const int RewardListFieldNumber = 1;
    private global::PlaneWar.MatchRankInfo rewardList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.MatchRankInfo RewardList {
      get { return rewardList_; }
      set {
        rewardList_ = value;
      }
    }

    /// <summary>Field number for the "myReward" field.</summary>
    public const int MyRewardFieldNumber = 2;
    private global::PlaneWar.MyMatchReward myReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.MyMatchReward MyReward {
      get { return myReward_; }
      set {
        myReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMatchRewardNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMatchRewardNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RewardList, other.RewardList)) return false;
      if (!object.Equals(MyReward, other.MyReward)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rewardList_ != null) hash ^= RewardList.GetHashCode();
      if (myReward_ != null) hash ^= MyReward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (rewardList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RewardList);
      }
      if (myReward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MyReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (rewardList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RewardList);
      }
      if (myReward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MyReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rewardList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardList);
      }
      if (myReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MyReward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMatchRewardNotify other) {
      if (other == null) {
        return;
      }
      if (other.rewardList_ != null) {
        if (rewardList_ == null) {
          RewardList = new global::PlaneWar.MatchRankInfo();
        }
        RewardList.MergeFrom(other.RewardList);
      }
      if (other.myReward_ != null) {
        if (myReward_ == null) {
          MyReward = new global::PlaneWar.MyMatchReward();
        }
        MyReward.MergeFrom(other.MyReward);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rewardList_ == null) {
              RewardList = new global::PlaneWar.MatchRankInfo();
            }
            input.ReadMessage(RewardList);
            break;
          }
          case 18: {
            if (myReward_ == null) {
              MyReward = new global::PlaneWar.MyMatchReward();
            }
            input.ReadMessage(MyReward);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (rewardList_ == null) {
              RewardList = new global::PlaneWar.MatchRankInfo();
            }
            input.ReadMessage(RewardList);
            break;
          }
          case 18: {
            if (myReward_ == null) {
              MyReward = new global::PlaneWar.MyMatchReward();
            }
            input.ReadMessage(MyReward);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGiftList : pb::IMessage<CSGiftList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGiftList> _parser = new pb::MessageParser<CSGiftList>(() => new CSGiftList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGiftList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[158]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGiftList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGiftList(CSGiftList other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGiftList Clone() {
      return new CSGiftList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGiftList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGiftList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGiftList other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class GiftInfo : pb::IMessage<GiftInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GiftInfo> _parser = new pb::MessageParser<GiftInfo>(() => new GiftInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiftInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[159]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftInfo(GiftInfo other) : this() {
      id_ = other.id_;
      pointBonus_ = other.pointBonus_;
      moneyBonus_ = other.moneyBonus_;
      canBuy_ = other.canBuy_;
      buyCountDown_ = other.buyCountDown_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiftInfo Clone() {
      return new GiftInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pointBonus" field.</summary>
    public const int PointBonusFieldNumber = 2;
    private int pointBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PointBonus {
      get { return pointBonus_; }
      set {
        pointBonus_ = value;
      }
    }

    /// <summary>Field number for the "moneyBonus" field.</summary>
    public const int MoneyBonusFieldNumber = 3;
    private int moneyBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoneyBonus {
      get { return moneyBonus_; }
      set {
        moneyBonus_ = value;
      }
    }

    /// <summary>Field number for the "canBuy" field.</summary>
    public const int CanBuyFieldNumber = 4;
    private bool canBuy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanBuy {
      get { return canBuy_; }
      set {
        canBuy_ = value;
      }
    }

    /// <summary>Field number for the "buyCountDown" field.</summary>
    public const int BuyCountDownFieldNumber = 5;
    private int buyCountDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyCountDown {
      get { return buyCountDown_; }
      set {
        buyCountDown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiftInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiftInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PointBonus != other.PointBonus) return false;
      if (MoneyBonus != other.MoneyBonus) return false;
      if (CanBuy != other.CanBuy) return false;
      if (BuyCountDown != other.BuyCountDown) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (PointBonus != 0) hash ^= PointBonus.GetHashCode();
      if (MoneyBonus != 0) hash ^= MoneyBonus.GetHashCode();
      if (CanBuy != false) hash ^= CanBuy.GetHashCode();
      if (BuyCountDown != 0) hash ^= BuyCountDown.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (PointBonus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PointBonus);
      }
      if (MoneyBonus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MoneyBonus);
      }
      if (CanBuy != false) {
        output.WriteRawTag(32);
        output.WriteBool(CanBuy);
      }
      if (BuyCountDown != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BuyCountDown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (PointBonus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PointBonus);
      }
      if (MoneyBonus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MoneyBonus);
      }
      if (CanBuy != false) {
        output.WriteRawTag(32);
        output.WriteBool(CanBuy);
      }
      if (BuyCountDown != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BuyCountDown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (PointBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PointBonus);
      }
      if (MoneyBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoneyBonus);
      }
      if (CanBuy != false) {
        size += 1 + 1;
      }
      if (BuyCountDown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyCountDown);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiftInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.PointBonus != 0) {
        PointBonus = other.PointBonus;
      }
      if (other.MoneyBonus != 0) {
        MoneyBonus = other.MoneyBonus;
      }
      if (other.CanBuy != false) {
        CanBuy = other.CanBuy;
      }
      if (other.BuyCountDown != 0) {
        BuyCountDown = other.BuyCountDown;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            PointBonus = input.ReadInt32();
            break;
          }
          case 24: {
            MoneyBonus = input.ReadInt32();
            break;
          }
          case 32: {
            CanBuy = input.ReadBool();
            break;
          }
          case 40: {
            BuyCountDown = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            PointBonus = input.ReadInt32();
            break;
          }
          case 24: {
            MoneyBonus = input.ReadInt32();
            break;
          }
          case 32: {
            CanBuy = input.ReadBool();
            break;
          }
          case 40: {
            BuyCountDown = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGiftList : pb::IMessage<SCGiftList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGiftList> _parser = new pb::MessageParser<SCGiftList>(() => new SCGiftList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGiftList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[160]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGiftList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGiftList(SCGiftList other) : this() {
      giftList_ = other.giftList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGiftList Clone() {
      return new SCGiftList(this);
    }

    /// <summary>Field number for the "giftList" field.</summary>
    public const int GiftListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.GiftInfo> _repeated_giftList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.GiftInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.GiftInfo> giftList_ = new pbc::RepeatedField<global::PlaneWar.GiftInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.GiftInfo> GiftList {
      get { return giftList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGiftList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGiftList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!giftList_.Equals(other.giftList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= giftList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      giftList_.WriteTo(output, _repeated_giftList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      giftList_.WriteTo(ref output, _repeated_giftList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += giftList_.CalculateSize(_repeated_giftList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGiftList other) {
      if (other == null) {
        return;
      }
      giftList_.Add(other.giftList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            giftList_.AddEntriesFrom(input, _repeated_giftList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            giftList_.AddEntriesFrom(ref input, _repeated_giftList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGiftExpireNotify : pb::IMessage<SCGiftExpireNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGiftExpireNotify> _parser = new pb::MessageParser<SCGiftExpireNotify>(() => new SCGiftExpireNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGiftExpireNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[161]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGiftExpireNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGiftExpireNotify(SCGiftExpireNotify other) : this() {
      giftID_ = other.giftID_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGiftExpireNotify Clone() {
      return new SCGiftExpireNotify(this);
    }

    /// <summary>Field number for the "giftID" field.</summary>
    public const int GiftIDFieldNumber = 1;
    private int giftID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GiftID {
      get { return giftID_; }
      set {
        giftID_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGiftExpireNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGiftExpireNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GiftID != other.GiftID) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GiftID != 0) hash ^= GiftID.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GiftID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GiftID);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GiftID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GiftID);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GiftID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiftID);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGiftExpireNotify other) {
      if (other == null) {
        return;
      }
      if (other.GiftID != 0) {
        GiftID = other.GiftID;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GiftID = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GiftID = input.ReadInt32();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetMatchTaskReward : pb::IMessage<CSGetMatchTaskReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetMatchTaskReward> _parser = new pb::MessageParser<CSGetMatchTaskReward>(() => new CSGetMatchTaskReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetMatchTaskReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[162]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetMatchTaskReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetMatchTaskReward(CSGetMatchTaskReward other) : this() {
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetMatchTaskReward Clone() {
      return new CSGetMatchTaskReward(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetMatchTaskReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetMatchTaskReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetMatchTaskReward other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetMatchTaskReward : pb::IMessage<SCGetMatchTaskReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetMatchTaskReward> _parser = new pb::MessageParser<SCGetMatchTaskReward>(() => new SCGetMatchTaskReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetMatchTaskReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[163]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetMatchTaskReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetMatchTaskReward(SCGetMatchTaskReward other) : this() {
      index_ = other.index_;
      reward_ = other.reward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetMatchTaskReward Clone() {
      return new SCGetMatchTaskReward(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetMatchTaskReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetMatchTaskReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Reward != other.Reward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Reward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Reward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetMatchTaskReward other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WeaponUseCondition : pb::IMessage<WeaponUseCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WeaponUseCondition> _parser = new pb::MessageParser<WeaponUseCondition>(() => new WeaponUseCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponUseCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[164]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponUseCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponUseCondition(WeaponUseCondition other) : this() {
      vipLevel_ = other.vipLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponUseCondition Clone() {
      return new WeaponUseCondition(this);
    }

    /// <summary>Field number for the "vipLevel" field.</summary>
    public const int VipLevelFieldNumber = 1;
    private int vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponUseCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponUseCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VipLevel != other.VipLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (VipLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VipLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (VipLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(VipLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponUseCondition other) {
      if (other == null) {
        return;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VipLevel = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            VipLevel = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WeaponConfig : pb::IMessage<WeaponConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WeaponConfig> _parser = new pb::MessageParser<WeaponConfig>(() => new WeaponConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[165]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponConfig(WeaponConfig other) : this() {
      weaponID_ = other.weaponID_;
      name_ = other.name_;
      condition_ = other.condition_ != null ? other.condition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponConfig Clone() {
      return new WeaponConfig(this);
    }

    /// <summary>Field number for the "weaponID" field.</summary>
    public const int WeaponIDFieldNumber = 1;
    private int weaponID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponID {
      get { return weaponID_; }
      set {
        weaponID_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 3;
    private global::PlaneWar.WeaponUseCondition condition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WeaponUseCondition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeaponID != other.WeaponID) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeaponID != 0) hash ^= WeaponID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (condition_ != null) hash ^= Condition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WeaponID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WeaponID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (condition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Condition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WeaponID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WeaponID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (condition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Condition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeaponID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponConfig other) {
      if (other == null) {
        return;
      }
      if (other.WeaponID != 0) {
        WeaponID = other.WeaponID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.condition_ != null) {
        if (condition_ == null) {
          Condition = new global::PlaneWar.WeaponUseCondition();
        }
        Condition.MergeFrom(other.Condition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WeaponID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (condition_ == null) {
              Condition = new global::PlaneWar.WeaponUseCondition();
            }
            input.ReadMessage(Condition);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WeaponID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (condition_ == null) {
              Condition = new global::PlaneWar.WeaponUseCondition();
            }
            input.ReadMessage(Condition);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSWeaponPieceInfo : pb::IMessage<CSWeaponPieceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSWeaponPieceInfo> _parser = new pb::MessageParser<CSWeaponPieceInfo>(() => new CSWeaponPieceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSWeaponPieceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[166]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWeaponPieceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWeaponPieceInfo(CSWeaponPieceInfo other) : this() {
      isBrowsing_ = other.isBrowsing_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWeaponPieceInfo Clone() {
      return new CSWeaponPieceInfo(this);
    }

    /// <summary>Field number for the "isBrowsing" field.</summary>
    public const int IsBrowsingFieldNumber = 1;
    private bool isBrowsing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBrowsing {
      get { return isBrowsing_; }
      set {
        isBrowsing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSWeaponPieceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSWeaponPieceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsBrowsing != other.IsBrowsing) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsBrowsing != false) hash ^= IsBrowsing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsBrowsing != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBrowsing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsBrowsing != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBrowsing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBrowsing != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSWeaponPieceInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsBrowsing != false) {
        IsBrowsing = other.IsBrowsing;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsBrowsing = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsBrowsing = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PiecesStackLimitInfo : pb::IMessage<PiecesStackLimitInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PiecesStackLimitInfo> _parser = new pb::MessageParser<PiecesStackLimitInfo>(() => new PiecesStackLimitInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PiecesStackLimitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[167]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PiecesStackLimitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PiecesStackLimitInfo(PiecesStackLimitInfo other) : this() {
      fromVipLevel_ = other.fromVipLevel_;
      toVipLevel_ = other.toVipLevel_;
      stackNum_ = other.stackNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PiecesStackLimitInfo Clone() {
      return new PiecesStackLimitInfo(this);
    }

    /// <summary>Field number for the "fromVipLevel" field.</summary>
    public const int FromVipLevelFieldNumber = 1;
    private int fromVipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromVipLevel {
      get { return fromVipLevel_; }
      set {
        fromVipLevel_ = value;
      }
    }

    /// <summary>Field number for the "toVipLevel" field.</summary>
    public const int ToVipLevelFieldNumber = 2;
    private int toVipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToVipLevel {
      get { return toVipLevel_; }
      set {
        toVipLevel_ = value;
      }
    }

    /// <summary>Field number for the "stackNum" field.</summary>
    public const int StackNumFieldNumber = 3;
    private int stackNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StackNum {
      get { return stackNum_; }
      set {
        stackNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PiecesStackLimitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PiecesStackLimitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromVipLevel != other.FromVipLevel) return false;
      if (ToVipLevel != other.ToVipLevel) return false;
      if (StackNum != other.StackNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromVipLevel != 0) hash ^= FromVipLevel.GetHashCode();
      if (ToVipLevel != 0) hash ^= ToVipLevel.GetHashCode();
      if (StackNum != 0) hash ^= StackNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FromVipLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FromVipLevel);
      }
      if (ToVipLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ToVipLevel);
      }
      if (StackNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StackNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FromVipLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FromVipLevel);
      }
      if (ToVipLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ToVipLevel);
      }
      if (StackNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StackNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromVipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromVipLevel);
      }
      if (ToVipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToVipLevel);
      }
      if (StackNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StackNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PiecesStackLimitInfo other) {
      if (other == null) {
        return;
      }
      if (other.FromVipLevel != 0) {
        FromVipLevel = other.FromVipLevel;
      }
      if (other.ToVipLevel != 0) {
        ToVipLevel = other.ToVipLevel;
      }
      if (other.StackNum != 0) {
        StackNum = other.StackNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FromVipLevel = input.ReadInt32();
            break;
          }
          case 16: {
            ToVipLevel = input.ReadInt32();
            break;
          }
          case 24: {
            StackNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FromVipLevel = input.ReadInt32();
            break;
          }
          case 16: {
            ToVipLevel = input.ReadInt32();
            break;
          }
          case 24: {
            StackNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCWeaponPieceInfo : pb::IMessage<SCWeaponPieceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCWeaponPieceInfo> _parser = new pb::MessageParser<SCWeaponPieceInfo>(() => new SCWeaponPieceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCWeaponPieceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[168]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWeaponPieceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWeaponPieceInfo(SCWeaponPieceInfo other) : this() {
      isBrowsing_ = other.isBrowsing_;
      chair_ = other.chair_;
      pieceInfo_ = other.pieceInfo_ != null ? other.pieceInfo_.Clone() : null;
      configList_ = other.configList_.Clone();
      stackLimitList_ = other.stackLimitList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWeaponPieceInfo Clone() {
      return new SCWeaponPieceInfo(this);
    }

    /// <summary>Field number for the "isBrowsing" field.</summary>
    public const int IsBrowsingFieldNumber = 1;
    private bool isBrowsing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBrowsing {
      get { return isBrowsing_; }
      set {
        isBrowsing_ = value;
      }
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 2;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "pieceInfo" field.</summary>
    public const int PieceInfoFieldNumber = 3;
    private global::PlaneWar.PieceInfo pieceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PieceInfo PieceInfo {
      get { return pieceInfo_; }
      set {
        pieceInfo_ = value;
      }
    }

    /// <summary>Field number for the "configList" field.</summary>
    public const int ConfigListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PlaneWar.WeaponConfig> _repeated_configList_codec
        = pb::FieldCodec.ForMessage(34, global::PlaneWar.WeaponConfig.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.WeaponConfig> configList_ = new pbc::RepeatedField<global::PlaneWar.WeaponConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.WeaponConfig> ConfigList {
      get { return configList_; }
    }

    /// <summary>Field number for the "stackLimitList" field.</summary>
    public const int StackLimitListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PlaneWar.PiecesStackLimitInfo> _repeated_stackLimitList_codec
        = pb::FieldCodec.ForMessage(42, global::PlaneWar.PiecesStackLimitInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PiecesStackLimitInfo> stackLimitList_ = new pbc::RepeatedField<global::PlaneWar.PiecesStackLimitInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PiecesStackLimitInfo> StackLimitList {
      get { return stackLimitList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCWeaponPieceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCWeaponPieceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsBrowsing != other.IsBrowsing) return false;
      if (Chair != other.Chair) return false;
      if (!object.Equals(PieceInfo, other.PieceInfo)) return false;
      if(!configList_.Equals(other.configList_)) return false;
      if(!stackLimitList_.Equals(other.stackLimitList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsBrowsing != false) hash ^= IsBrowsing.GetHashCode();
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (pieceInfo_ != null) hash ^= PieceInfo.GetHashCode();
      hash ^= configList_.GetHashCode();
      hash ^= stackLimitList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsBrowsing != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBrowsing);
      }
      if (Chair != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chair);
      }
      if (pieceInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PieceInfo);
      }
      configList_.WriteTo(output, _repeated_configList_codec);
      stackLimitList_.WriteTo(output, _repeated_stackLimitList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsBrowsing != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBrowsing);
      }
      if (Chair != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Chair);
      }
      if (pieceInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PieceInfo);
      }
      configList_.WriteTo(ref output, _repeated_configList_codec);
      stackLimitList_.WriteTo(ref output, _repeated_stackLimitList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBrowsing != false) {
        size += 1 + 1;
      }
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (pieceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PieceInfo);
      }
      size += configList_.CalculateSize(_repeated_configList_codec);
      size += stackLimitList_.CalculateSize(_repeated_stackLimitList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCWeaponPieceInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsBrowsing != false) {
        IsBrowsing = other.IsBrowsing;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.pieceInfo_ != null) {
        if (pieceInfo_ == null) {
          PieceInfo = new global::PlaneWar.PieceInfo();
        }
        PieceInfo.MergeFrom(other.PieceInfo);
      }
      configList_.Add(other.configList_);
      stackLimitList_.Add(other.stackLimitList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsBrowsing = input.ReadBool();
            break;
          }
          case 16: {
            Chair = input.ReadInt32();
            break;
          }
          case 26: {
            if (pieceInfo_ == null) {
              PieceInfo = new global::PlaneWar.PieceInfo();
            }
            input.ReadMessage(PieceInfo);
            break;
          }
          case 34: {
            configList_.AddEntriesFrom(input, _repeated_configList_codec);
            break;
          }
          case 42: {
            stackLimitList_.AddEntriesFrom(input, _repeated_stackLimitList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsBrowsing = input.ReadBool();
            break;
          }
          case 16: {
            Chair = input.ReadInt32();
            break;
          }
          case 26: {
            if (pieceInfo_ == null) {
              PieceInfo = new global::PlaneWar.PieceInfo();
            }
            input.ReadMessage(PieceInfo);
            break;
          }
          case 34: {
            configList_.AddEntriesFrom(ref input, _repeated_configList_codec);
            break;
          }
          case 42: {
            stackLimitList_.AddEntriesFrom(ref input, _repeated_stackLimitList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSBuyWeapon : pb::IMessage<CSBuyWeapon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSBuyWeapon> _parser = new pb::MessageParser<CSBuyWeapon>(() => new CSBuyWeapon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBuyWeapon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[169]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyWeapon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyWeapon(CSBuyWeapon other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyWeapon Clone() {
      return new CSBuyWeapon(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBuyWeapon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBuyWeapon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBuyWeapon other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCBuyWeapon : pb::IMessage<SCBuyWeapon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCBuyWeapon> _parser = new pb::MessageParser<SCBuyWeapon>(() => new SCBuyWeapon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCBuyWeapon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[170]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyWeapon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyWeapon(SCBuyWeapon other) : this() {
      chair_ = other.chair_;
      weaponID_ = other.weaponID_;
      weaponInfo_ = other.weaponInfo_ != null ? other.weaponInfo_.Clone() : null;
      pieceInfo_ = other.pieceInfo_ != null ? other.pieceInfo_.Clone() : null;
      condition_ = other.condition_ != null ? other.condition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyWeapon Clone() {
      return new SCBuyWeapon(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "weaponID" field.</summary>
    public const int WeaponIDFieldNumber = 2;
    private int weaponID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponID {
      get { return weaponID_; }
      set {
        weaponID_ = value;
      }
    }

    /// <summary>Field number for the "weaponInfo" field.</summary>
    public const int WeaponInfoFieldNumber = 3;
    private global::PlaneWar.WeaponInfo weaponInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WeaponInfo WeaponInfo {
      get { return weaponInfo_; }
      set {
        weaponInfo_ = value;
      }
    }

    /// <summary>Field number for the "pieceInfo" field.</summary>
    public const int PieceInfoFieldNumber = 4;
    private global::PlaneWar.PieceInfo pieceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PieceInfo PieceInfo {
      get { return pieceInfo_; }
      set {
        pieceInfo_ = value;
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 5;
    private global::PlaneWar.WeaponUseCondition condition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WeaponUseCondition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCBuyWeapon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCBuyWeapon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (WeaponID != other.WeaponID) return false;
      if (!object.Equals(WeaponInfo, other.WeaponInfo)) return false;
      if (!object.Equals(PieceInfo, other.PieceInfo)) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (WeaponID != 0) hash ^= WeaponID.GetHashCode();
      if (weaponInfo_ != null) hash ^= WeaponInfo.GetHashCode();
      if (pieceInfo_ != null) hash ^= PieceInfo.GetHashCode();
      if (condition_ != null) hash ^= Condition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (WeaponID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WeaponID);
      }
      if (weaponInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WeaponInfo);
      }
      if (pieceInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PieceInfo);
      }
      if (condition_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Condition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (WeaponID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WeaponID);
      }
      if (weaponInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WeaponInfo);
      }
      if (pieceInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PieceInfo);
      }
      if (condition_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Condition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (WeaponID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponID);
      }
      if (weaponInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeaponInfo);
      }
      if (pieceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PieceInfo);
      }
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCBuyWeapon other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.WeaponID != 0) {
        WeaponID = other.WeaponID;
      }
      if (other.weaponInfo_ != null) {
        if (weaponInfo_ == null) {
          WeaponInfo = new global::PlaneWar.WeaponInfo();
        }
        WeaponInfo.MergeFrom(other.WeaponInfo);
      }
      if (other.pieceInfo_ != null) {
        if (pieceInfo_ == null) {
          PieceInfo = new global::PlaneWar.PieceInfo();
        }
        PieceInfo.MergeFrom(other.PieceInfo);
      }
      if (other.condition_ != null) {
        if (condition_ == null) {
          Condition = new global::PlaneWar.WeaponUseCondition();
        }
        Condition.MergeFrom(other.Condition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            WeaponID = input.ReadInt32();
            break;
          }
          case 26: {
            if (weaponInfo_ == null) {
              WeaponInfo = new global::PlaneWar.WeaponInfo();
            }
            input.ReadMessage(WeaponInfo);
            break;
          }
          case 34: {
            if (pieceInfo_ == null) {
              PieceInfo = new global::PlaneWar.PieceInfo();
            }
            input.ReadMessage(PieceInfo);
            break;
          }
          case 42: {
            if (condition_ == null) {
              Condition = new global::PlaneWar.WeaponUseCondition();
            }
            input.ReadMessage(Condition);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            WeaponID = input.ReadInt32();
            break;
          }
          case 26: {
            if (weaponInfo_ == null) {
              WeaponInfo = new global::PlaneWar.WeaponInfo();
            }
            input.ReadMessage(WeaponInfo);
            break;
          }
          case 34: {
            if (pieceInfo_ == null) {
              PieceInfo = new global::PlaneWar.PieceInfo();
            }
            input.ReadMessage(PieceInfo);
            break;
          }
          case 42: {
            if (condition_ == null) {
              Condition = new global::PlaneWar.WeaponUseCondition();
            }
            input.ReadMessage(Condition);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EarnRecord : pb::IMessage<EarnRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EarnRecord> _parser = new pb::MessageParser<EarnRecord>(() => new EarnRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EarnRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[171]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EarnRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EarnRecord(EarnRecord other) : this() {
      playerID_ = other.playerID_;
      nick_ = other.nick_;
      icon_ = other.icon_;
      vipLevel_ = other.vipLevel_;
      weaponName_ = other.weaponName_;
      time_ = other.time_;
      earn_ = other.earn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EarnRecord Clone() {
      return new EarnRecord(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 2;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 3;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vipLevel" field.</summary>
    public const int VipLevelFieldNumber = 4;
    private int vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "weaponName" field.</summary>
    public const int WeaponNameFieldNumber = 5;
    private string weaponName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponName {
      get { return weaponName_; }
      set {
        weaponName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 6;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "earn" field.</summary>
    public const int EarnFieldNumber = 7;
    private int earn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Earn {
      get { return earn_; }
      set {
        earn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EarnRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EarnRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (Nick != other.Nick) return false;
      if (Icon != other.Icon) return false;
      if (VipLevel != other.VipLevel) return false;
      if (WeaponName != other.WeaponName) return false;
      if (Time != other.Time) return false;
      if (Earn != other.Earn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (WeaponName.Length != 0) hash ^= WeaponName.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Earn != 0) hash ^= Earn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nick);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Icon);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VipLevel);
      }
      if (WeaponName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WeaponName);
      }
      if (Time != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Time);
      }
      if (Earn != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Earn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nick);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Icon);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VipLevel);
      }
      if (WeaponName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(WeaponName);
      }
      if (Time != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Time);
      }
      if (Earn != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Earn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (WeaponName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WeaponName);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Earn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Earn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EarnRecord other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      if (other.WeaponName.Length != 0) {
        WeaponName = other.WeaponName;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Earn != 0) {
        Earn = other.Earn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 18: {
            Nick = input.ReadString();
            break;
          }
          case 26: {
            Icon = input.ReadString();
            break;
          }
          case 32: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 42: {
            WeaponName = input.ReadString();
            break;
          }
          case 48: {
            Time = input.ReadInt32();
            break;
          }
          case 56: {
            Earn = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 18: {
            Nick = input.ReadString();
            break;
          }
          case 26: {
            Icon = input.ReadString();
            break;
          }
          case 32: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 42: {
            WeaponName = input.ReadString();
            break;
          }
          case 48: {
            Time = input.ReadInt32();
            break;
          }
          case 56: {
            Earn = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSWeaponEarnRecord : pb::IMessage<CSWeaponEarnRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSWeaponEarnRecord> _parser = new pb::MessageParser<CSWeaponEarnRecord>(() => new CSWeaponEarnRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSWeaponEarnRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[172]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWeaponEarnRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWeaponEarnRecord(CSWeaponEarnRecord other) : this() {
      page_ = other.page_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSWeaponEarnRecord Clone() {
      return new CSWeaponEarnRecord(this);
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 1;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSWeaponEarnRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSWeaponEarnRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Page != other.Page) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Page != 0) hash ^= Page.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Page);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Page);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSWeaponEarnRecord other) {
      if (other == null) {
        return;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCWeaponEarnRecord : pb::IMessage<SCWeaponEarnRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCWeaponEarnRecord> _parser = new pb::MessageParser<SCWeaponEarnRecord>(() => new SCWeaponEarnRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCWeaponEarnRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[173]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWeaponEarnRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWeaponEarnRecord(SCWeaponEarnRecord other) : this() {
      recordList_ = other.recordList_.Clone();
      page_ = other.page_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWeaponEarnRecord Clone() {
      return new SCWeaponEarnRecord(this);
    }

    /// <summary>Field number for the "recordList" field.</summary>
    public const int RecordListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.EarnRecord> _repeated_recordList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.EarnRecord.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.EarnRecord> recordList_ = new pbc::RepeatedField<global::PlaneWar.EarnRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.EarnRecord> RecordList {
      get { return recordList_; }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 2;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCWeaponEarnRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCWeaponEarnRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recordList_.Equals(other.recordList_)) return false;
      if (Page != other.Page) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recordList_.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      recordList_.WriteTo(output, _repeated_recordList_codec);
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Page);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      recordList_.WriteTo(ref output, _repeated_recordList_codec);
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Page);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recordList_.CalculateSize(_repeated_recordList_codec);
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCWeaponEarnRecord other) {
      if (other == null) {
        return;
      }
      recordList_.Add(other.recordList_);
      if (other.Page != 0) {
        Page = other.Page;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            recordList_.AddEntriesFrom(input, _repeated_recordList_codec);
            break;
          }
          case 16: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            recordList_.AddEntriesFrom(ref input, _repeated_recordList_codec);
            break;
          }
          case 16: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSStateForceSettle : pb::IMessage<CSStateForceSettle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSStateForceSettle> _parser = new pb::MessageParser<CSStateForceSettle>(() => new CSStateForceSettle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStateForceSettle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[174]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStateForceSettle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStateForceSettle(CSStateForceSettle other) : this() {
      sourceUID_ = other.sourceUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSStateForceSettle Clone() {
      return new CSStateForceSettle(this);
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 1;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSStateForceSettle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSStateForceSettle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceUID != other.SourceUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSStateForceSettle other) {
      if (other == null) {
        return;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCStateForceSettle : pb::IMessage<SCStateForceSettle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCStateForceSettle> _parser = new pb::MessageParser<SCStateForceSettle>(() => new SCStateForceSettle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCStateForceSettle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[175]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStateForceSettle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStateForceSettle(SCStateForceSettle other) : this() {
      chair_ = other.chair_;
      sourceUID_ = other.sourceUID_;
      originUID_ = other.originUID_;
      remain_ = other.remain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStateForceSettle Clone() {
      return new SCStateForceSettle(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 2;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 3;
    private int originUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    /// <summary>Field number for the "remain" field.</summary>
    public const int RemainFieldNumber = 4;
    private int remain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Remain {
      get { return remain_; }
      set {
        remain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCStateForceSettle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCStateForceSettle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (SourceUID != other.SourceUID) return false;
      if (OriginUID != other.OriginUID) return false;
      if (Remain != other.Remain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      if (Remain != 0) hash ^= Remain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceUID);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginUID);
      }
      if (Remain != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Remain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SourceUID);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OriginUID);
      }
      if (Remain != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Remain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      if (Remain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Remain);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCStateForceSettle other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      if (other.Remain != 0) {
        Remain = other.Remain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 24: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 32: {
            Remain = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 24: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 32: {
            Remain = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCAddMissedBullet : pb::IMessage<SCAddMissedBullet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCAddMissedBullet> _parser = new pb::MessageParser<SCAddMissedBullet>(() => new SCAddMissedBullet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCAddMissedBullet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[176]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddMissedBullet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddMissedBullet(SCAddMissedBullet other) : this() {
      chair_ = other.chair_;
      bulletType_ = other.bulletType_;
      sourceUID_ = other.sourceUID_;
      addNum_ = other.addNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddMissedBullet Clone() {
      return new SCAddMissedBullet(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 2;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 3;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "addNum" field.</summary>
    public const int AddNumFieldNumber = 4;
    private int addNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddNum {
      get { return addNum_; }
      set {
        addNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCAddMissedBullet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCAddMissedBullet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (BulletType != other.BulletType) return false;
      if (SourceUID != other.SourceUID) return false;
      if (AddNum != other.AddNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (AddNum != 0) hash ^= AddNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (BulletType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletType);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceUID);
      }
      if (AddNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AddNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (BulletType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletType);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceUID);
      }
      if (AddNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AddNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (AddNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCAddMissedBullet other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.AddNum != 0) {
        AddNum = other.AddNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            BulletType = input.ReadInt32();
            break;
          }
          case 24: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 32: {
            AddNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            BulletType = input.ReadInt32();
            break;
          }
          case 24: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 32: {
            AddNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUpdateBulletData : pb::IMessage<CSUpdateBulletData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUpdateBulletData> _parser = new pb::MessageParser<CSUpdateBulletData>(() => new CSUpdateBulletData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUpdateBulletData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[177]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUpdateBulletData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUpdateBulletData(CSUpdateBulletData other) : this() {
      angle_ = other.angle_;
      bulletType_ = other.bulletType_;
      sourceUID_ = other.sourceUID_;
      confID_ = other.confID_;
      isShooting_ = other.isShooting_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUpdateBulletData Clone() {
      return new CSUpdateBulletData(this);
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 1;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 2;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 3;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "confID" field.</summary>
    public const int ConfIDFieldNumber = 4;
    private int confID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfID {
      get { return confID_; }
      set {
        confID_ = value;
      }
    }

    /// <summary>Field number for the "isShooting" field.</summary>
    public const int IsShootingFieldNumber = 5;
    private bool isShooting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShooting {
      get { return isShooting_; }
      set {
        isShooting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUpdateBulletData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUpdateBulletData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (BulletType != other.BulletType) return false;
      if (SourceUID != other.SourceUID) return false;
      if (ConfID != other.ConfID) return false;
      if (IsShooting != other.IsShooting) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (ConfID != 0) hash ^= ConfID.GetHashCode();
      if (IsShooting != false) hash ^= IsShooting.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Angle != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Angle);
      }
      if (BulletType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletType);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceUID);
      }
      if (ConfID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ConfID);
      }
      if (IsShooting != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsShooting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Angle != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Angle);
      }
      if (BulletType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletType);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceUID);
      }
      if (ConfID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ConfID);
      }
      if (IsShooting != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsShooting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (ConfID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfID);
      }
      if (IsShooting != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUpdateBulletData other) {
      if (other == null) {
        return;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.ConfID != 0) {
        ConfID = other.ConfID;
      }
      if (other.IsShooting != false) {
        IsShooting = other.IsShooting;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Angle = input.ReadFloat();
            break;
          }
          case 16: {
            BulletType = input.ReadInt32();
            break;
          }
          case 24: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 32: {
            ConfID = input.ReadInt32();
            break;
          }
          case 40: {
            IsShooting = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Angle = input.ReadFloat();
            break;
          }
          case 16: {
            BulletType = input.ReadInt32();
            break;
          }
          case 24: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 32: {
            ConfID = input.ReadInt32();
            break;
          }
          case 40: {
            IsShooting = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUpdateBulletData : pb::IMessage<SCUpdateBulletData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUpdateBulletData> _parser = new pb::MessageParser<SCUpdateBulletData>(() => new SCUpdateBulletData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUpdateBulletData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[178]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateBulletData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateBulletData(SCUpdateBulletData other) : this() {
      chair_ = other.chair_;
      angle_ = other.angle_;
      bulletType_ = other.bulletType_;
      sourceUID_ = other.sourceUID_;
      confID_ = other.confID_;
      isShooting_ = other.isShooting_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateBulletData Clone() {
      return new SCUpdateBulletData(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 2;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 3;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 4;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    /// <summary>Field number for the "confID" field.</summary>
    public const int ConfIDFieldNumber = 5;
    private int confID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfID {
      get { return confID_; }
      set {
        confID_ = value;
      }
    }

    /// <summary>Field number for the "isShooting" field.</summary>
    public const int IsShootingFieldNumber = 6;
    private bool isShooting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShooting {
      get { return isShooting_; }
      set {
        isShooting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUpdateBulletData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUpdateBulletData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (BulletType != other.BulletType) return false;
      if (SourceUID != other.SourceUID) return false;
      if (ConfID != other.ConfID) return false;
      if (IsShooting != other.IsShooting) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (ConfID != 0) hash ^= ConfID.GetHashCode();
      if (IsShooting != false) hash ^= IsShooting.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Angle != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Angle);
      }
      if (BulletType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletType);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SourceUID);
      }
      if (ConfID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ConfID);
      }
      if (IsShooting != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsShooting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Angle != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Angle);
      }
      if (BulletType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletType);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SourceUID);
      }
      if (ConfID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ConfID);
      }
      if (IsShooting != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsShooting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (ConfID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfID);
      }
      if (IsShooting != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUpdateBulletData other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      if (other.ConfID != 0) {
        ConfID = other.ConfID;
      }
      if (other.IsShooting != false) {
        IsShooting = other.IsShooting;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 21: {
            Angle = input.ReadFloat();
            break;
          }
          case 24: {
            BulletType = input.ReadInt32();
            break;
          }
          case 32: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 40: {
            ConfID = input.ReadInt32();
            break;
          }
          case 48: {
            IsShooting = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 21: {
            Angle = input.ReadFloat();
            break;
          }
          case 24: {
            BulletType = input.ReadInt32();
            break;
          }
          case 32: {
            SourceUID = input.ReadInt32();
            break;
          }
          case 40: {
            ConfID = input.ReadInt32();
            break;
          }
          case 48: {
            IsShooting = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUseMissileBatch : pb::IMessage<CSUseMissileBatch>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUseMissileBatch> _parser = new pb::MessageParser<CSUseMissileBatch>(() => new CSUseMissileBatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUseMissileBatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[179]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseMissileBatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseMissileBatch(CSUseMissileBatch other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseMissileBatch Clone() {
      return new CSUseMissileBatch(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUseMissileBatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUseMissileBatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUseMissileBatch other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCUseMissileBatch : pb::IMessage<SCUseMissileBatch>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUseMissileBatch> _parser = new pb::MessageParser<SCUseMissileBatch>(() => new SCUseMissileBatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUseMissileBatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[180]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseMissileBatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseMissileBatch(SCUseMissileBatch other) : this() {
      chair_ = other.chair_;
      totalReward_ = other.totalReward_;
      curMoney_ = other.curMoney_;
      remainMissile_ = other.remainMissile_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseMissileBatch Clone() {
      return new SCUseMissileBatch(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "totalReward" field.</summary>
    public const int TotalRewardFieldNumber = 2;
    private int totalReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalReward {
      get { return totalReward_; }
      set {
        totalReward_ = value;
      }
    }

    /// <summary>Field number for the "curMoney" field.</summary>
    public const int CurMoneyFieldNumber = 3;
    private long curMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMoney {
      get { return curMoney_; }
      set {
        curMoney_ = value;
      }
    }

    /// <summary>Field number for the "remainMissile" field.</summary>
    public const int RemainMissileFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PlaneWar.MissileInfo> _repeated_remainMissile_codec
        = pb::FieldCodec.ForMessage(34, global::PlaneWar.MissileInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.MissileInfo> remainMissile_ = new pbc::RepeatedField<global::PlaneWar.MissileInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.MissileInfo> RemainMissile {
      get { return remainMissile_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUseMissileBatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUseMissileBatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (TotalReward != other.TotalReward) return false;
      if (CurMoney != other.CurMoney) return false;
      if(!remainMissile_.Equals(other.remainMissile_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (TotalReward != 0) hash ^= TotalReward.GetHashCode();
      if (CurMoney != 0L) hash ^= CurMoney.GetHashCode();
      hash ^= remainMissile_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (TotalReward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalReward);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurMoney);
      }
      remainMissile_.WriteTo(output, _repeated_remainMissile_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (TotalReward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalReward);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurMoney);
      }
      remainMissile_.WriteTo(ref output, _repeated_remainMissile_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (TotalReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalReward);
      }
      if (CurMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMoney);
      }
      size += remainMissile_.CalculateSize(_repeated_remainMissile_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUseMissileBatch other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.TotalReward != 0) {
        TotalReward = other.TotalReward;
      }
      if (other.CurMoney != 0L) {
        CurMoney = other.CurMoney;
      }
      remainMissile_.Add(other.remainMissile_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            TotalReward = input.ReadInt32();
            break;
          }
          case 24: {
            CurMoney = input.ReadInt64();
            break;
          }
          case 34: {
            remainMissile_.AddEntriesFrom(input, _repeated_remainMissile_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            TotalReward = input.ReadInt32();
            break;
          }
          case 24: {
            CurMoney = input.ReadInt64();
            break;
          }
          case 34: {
            remainMissile_.AddEntriesFrom(ref input, _repeated_remainMissile_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSyncPropsToHall : pb::IMessage<CSSyncPropsToHall>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSyncPropsToHall> _parser = new pb::MessageParser<CSSyncPropsToHall>(() => new CSSyncPropsToHall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncPropsToHall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[181]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncPropsToHall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncPropsToHall(CSSyncPropsToHall other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncPropsToHall Clone() {
      return new CSSyncPropsToHall(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncPropsToHall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncPropsToHall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncPropsToHall other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncPropsToHall : pb::IMessage<SCSyncPropsToHall>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncPropsToHall> _parser = new pb::MessageParser<SCSyncPropsToHall>(() => new SCSyncPropsToHall());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncPropsToHall> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[182]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncPropsToHall() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncPropsToHall(SCSyncPropsToHall other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncPropsToHall Clone() {
      return new SCSyncPropsToHall(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncPropsToHall);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncPropsToHall other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncPropsToHall other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CSChangeTable : pb::IMessage<CSChangeTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSChangeTable> _parser = new pb::MessageParser<CSChangeTable>(() => new CSChangeTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChangeTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[183]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChangeTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChangeTable(CSChangeTable other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChangeTable Clone() {
      return new CSChangeTable(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSChangeTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSChangeTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSChangeTable other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCChangeTable : pb::IMessage<SCChangeTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCChangeTable> _parser = new pb::MessageParser<SCChangeTable>(() => new SCChangeTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCChangeTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[184]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChangeTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChangeTable(SCChangeTable other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChangeTable Clone() {
      return new SCChangeTable(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCChangeTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCChangeTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCChangeTable other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CSUseRoulette : pb::IMessage<CSUseRoulette>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUseRoulette> _parser = new pb::MessageParser<CSUseRoulette>(() => new CSUseRoulette());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUseRoulette> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[185]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseRoulette() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseRoulette(CSUseRoulette other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseRoulette Clone() {
      return new CSUseRoulette(this);
    }

    /// <summary>Field number for the "iD" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUseRoulette);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUseRoulette other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUseRoulette other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUseRoulette : pb::IMessage<SCUseRoulette>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUseRoulette> _parser = new pb::MessageParser<SCUseRoulette>(() => new SCUseRoulette());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUseRoulette> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[186]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseRoulette() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseRoulette(SCUseRoulette other) : this() {
      chair_ = other.chair_;
      id_ = other.id_;
      costNum_ = other.costNum_;
      ratio_ = other.ratio_;
      roulette_ = other.roulette_ != null ? other.roulette_.Clone() : null;
      reward_ = other.reward_;
      curMoney_ = other.curMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseRoulette Clone() {
      return new SCUseRoulette(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "costNum" field.</summary>
    public const int CostNumFieldNumber = 3;
    private int costNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostNum {
      get { return costNum_; }
      set {
        costNum_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 4;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "roulette" field.</summary>
    public const int RouletteFieldNumber = 5;
    private global::PlaneWar.Roulette roulette_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Roulette Roulette {
      get { return roulette_; }
      set {
        roulette_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 6;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "curMoney" field.</summary>
    public const int CurMoneyFieldNumber = 7;
    private long curMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMoney {
      get { return curMoney_; }
      set {
        curMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUseRoulette);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUseRoulette other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (Id != other.Id) return false;
      if (CostNum != other.CostNum) return false;
      if (Ratio != other.Ratio) return false;
      if (!object.Equals(Roulette, other.Roulette)) return false;
      if (Reward != other.Reward) return false;
      if (CurMoney != other.CurMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CostNum != 0) hash ^= CostNum.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (roulette_ != null) hash ^= Roulette.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (CurMoney != 0L) hash ^= CurMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (CostNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostNum);
      }
      if (Ratio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ratio);
      }
      if (roulette_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Roulette);
      }
      if (Reward != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Reward);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CurMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (CostNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostNum);
      }
      if (Ratio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ratio);
      }
      if (roulette_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Roulette);
      }
      if (Reward != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Reward);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CurMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CostNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostNum);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (roulette_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roulette);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (CurMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUseRoulette other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CostNum != 0) {
        CostNum = other.CostNum;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.roulette_ != null) {
        if (roulette_ == null) {
          Roulette = new global::PlaneWar.Roulette();
        }
        Roulette.MergeFrom(other.Roulette);
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      if (other.CurMoney != 0L) {
        CurMoney = other.CurMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            CostNum = input.ReadInt32();
            break;
          }
          case 32: {
            Ratio = input.ReadInt32();
            break;
          }
          case 42: {
            if (roulette_ == null) {
              Roulette = new global::PlaneWar.Roulette();
            }
            input.ReadMessage(Roulette);
            break;
          }
          case 48: {
            Reward = input.ReadInt32();
            break;
          }
          case 56: {
            CurMoney = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            CostNum = input.ReadInt32();
            break;
          }
          case 32: {
            Ratio = input.ReadInt32();
            break;
          }
          case 42: {
            if (roulette_ == null) {
              Roulette = new global::PlaneWar.Roulette();
            }
            input.ReadMessage(Roulette);
            break;
          }
          case 48: {
            Reward = input.ReadInt32();
            break;
          }
          case 56: {
            CurMoney = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSRedEnvelopePoint : pb::IMessage<CSRedEnvelopePoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSRedEnvelopePoint> _parser = new pb::MessageParser<CSRedEnvelopePoint>(() => new CSRedEnvelopePoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRedEnvelopePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[187]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRedEnvelopePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRedEnvelopePoint(CSRedEnvelopePoint other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRedEnvelopePoint Clone() {
      return new CSRedEnvelopePoint(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSRedEnvelopePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSRedEnvelopePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSRedEnvelopePoint other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class RedOpenInfo : pb::IMessage<RedOpenInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RedOpenInfo> _parser = new pb::MessageParser<RedOpenInfo>(() => new RedOpenInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedOpenInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[188]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedOpenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedOpenInfo(RedOpenInfo other) : this() {
      status_ = other.status_;
      unLockVipLevel_ = other.unLockVipLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedOpenInfo Clone() {
      return new RedOpenInfo(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::PlaneWar.RedOpenStatus status_ = global::PlaneWar.RedOpenStatus.RedOpenLock;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RedOpenStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "unLockVipLevel" field.</summary>
    public const int UnLockVipLevelFieldNumber = 2;
    private int unLockVipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnLockVipLevel {
      get { return unLockVipLevel_; }
      set {
        unLockVipLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedOpenInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedOpenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (UnLockVipLevel != other.UnLockVipLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::PlaneWar.RedOpenStatus.RedOpenLock) hash ^= Status.GetHashCode();
      if (UnLockVipLevel != 0) hash ^= UnLockVipLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != global::PlaneWar.RedOpenStatus.RedOpenLock) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (UnLockVipLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnLockVipLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != global::PlaneWar.RedOpenStatus.RedOpenLock) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (UnLockVipLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnLockVipLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::PlaneWar.RedOpenStatus.RedOpenLock) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (UnLockVipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnLockVipLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedOpenInfo other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::PlaneWar.RedOpenStatus.RedOpenLock) {
        Status = other.Status;
      }
      if (other.UnLockVipLevel != 0) {
        UnLockVipLevel = other.UnLockVipLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::PlaneWar.RedOpenStatus) input.ReadEnum();
            break;
          }
          case 16: {
            UnLockVipLevel = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = (global::PlaneWar.RedOpenStatus) input.ReadEnum();
            break;
          }
          case 16: {
            UnLockVipLevel = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCRedEnvelopePoint : pb::IMessage<SCRedEnvelopePoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCRedEnvelopePoint> _parser = new pb::MessageParser<SCRedEnvelopePoint>(() => new SCRedEnvelopePoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCRedEnvelopePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[189]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRedEnvelopePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRedEnvelopePoint(SCRedEnvelopePoint other) : this() {
      curPoint_ = other.curPoint_;
      maxPoint_ = other.maxPoint_;
      costPoint_ = other.costPoint_;
      redOpenList_ = other.redOpenList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRedEnvelopePoint Clone() {
      return new SCRedEnvelopePoint(this);
    }

    /// <summary>Field number for the "curPoint" field.</summary>
    public const int CurPointFieldNumber = 1;
    private int curPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurPoint {
      get { return curPoint_; }
      set {
        curPoint_ = value;
      }
    }

    /// <summary>Field number for the "maxPoint" field.</summary>
    public const int MaxPointFieldNumber = 2;
    private int maxPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPoint {
      get { return maxPoint_; }
      set {
        maxPoint_ = value;
      }
    }

    /// <summary>Field number for the "costPoint" field.</summary>
    public const int CostPointFieldNumber = 3;
    private int costPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostPoint {
      get { return costPoint_; }
      set {
        costPoint_ = value;
      }
    }

    /// <summary>Field number for the "redOpenList" field.</summary>
    public const int RedOpenListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PlaneWar.RedOpenInfo> _repeated_redOpenList_codec
        = pb::FieldCodec.ForMessage(34, global::PlaneWar.RedOpenInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.RedOpenInfo> redOpenList_ = new pbc::RepeatedField<global::PlaneWar.RedOpenInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.RedOpenInfo> RedOpenList {
      get { return redOpenList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCRedEnvelopePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCRedEnvelopePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurPoint != other.CurPoint) return false;
      if (MaxPoint != other.MaxPoint) return false;
      if (CostPoint != other.CostPoint) return false;
      if(!redOpenList_.Equals(other.redOpenList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurPoint != 0) hash ^= CurPoint.GetHashCode();
      if (MaxPoint != 0) hash ^= MaxPoint.GetHashCode();
      if (CostPoint != 0) hash ^= CostPoint.GetHashCode();
      hash ^= redOpenList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurPoint != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurPoint);
      }
      if (MaxPoint != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxPoint);
      }
      if (CostPoint != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostPoint);
      }
      redOpenList_.WriteTo(output, _repeated_redOpenList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurPoint != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurPoint);
      }
      if (MaxPoint != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxPoint);
      }
      if (CostPoint != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostPoint);
      }
      redOpenList_.WriteTo(ref output, _repeated_redOpenList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurPoint);
      }
      if (MaxPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPoint);
      }
      if (CostPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostPoint);
      }
      size += redOpenList_.CalculateSize(_repeated_redOpenList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCRedEnvelopePoint other) {
      if (other == null) {
        return;
      }
      if (other.CurPoint != 0) {
        CurPoint = other.CurPoint;
      }
      if (other.MaxPoint != 0) {
        MaxPoint = other.MaxPoint;
      }
      if (other.CostPoint != 0) {
        CostPoint = other.CostPoint;
      }
      redOpenList_.Add(other.redOpenList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurPoint = input.ReadInt32();
            break;
          }
          case 16: {
            MaxPoint = input.ReadInt32();
            break;
          }
          case 24: {
            CostPoint = input.ReadInt32();
            break;
          }
          case 34: {
            redOpenList_.AddEntriesFrom(input, _repeated_redOpenList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurPoint = input.ReadInt32();
            break;
          }
          case 16: {
            MaxPoint = input.ReadInt32();
            break;
          }
          case 24: {
            CostPoint = input.ReadInt32();
            break;
          }
          case 34: {
            redOpenList_.AddEntriesFrom(ref input, _repeated_redOpenList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSRedEnvelopeInfo : pb::IMessage<CSRedEnvelopeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSRedEnvelopeInfo> _parser = new pb::MessageParser<CSRedEnvelopeInfo>(() => new CSRedEnvelopeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRedEnvelopeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[190]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRedEnvelopeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRedEnvelopeInfo(CSRedEnvelopeInfo other) : this() {
      isOpen_ = other.isOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRedEnvelopeInfo Clone() {
      return new CSRedEnvelopeInfo(this);
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 1;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSRedEnvelopeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSRedEnvelopeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpen != other.IsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSRedEnvelopeInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RedInfo : pb::IMessage<RedInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RedInfo> _parser = new pb::MessageParser<RedInfo>(() => new RedInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[191]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedInfo(RedInfo other) : this() {
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedInfo Clone() {
      return new RedInfo(this);
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 1;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Cost != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Cost != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedInfo other) {
      if (other == null) {
        return;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Cost = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCRedEnvelopeInfo : pb::IMessage<SCRedEnvelopeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCRedEnvelopeInfo> _parser = new pb::MessageParser<SCRedEnvelopeInfo>(() => new SCRedEnvelopeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCRedEnvelopeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[192]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRedEnvelopeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRedEnvelopeInfo(SCRedEnvelopeInfo other) : this() {
      redList_ = other.redList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRedEnvelopeInfo Clone() {
      return new SCRedEnvelopeInfo(this);
    }

    /// <summary>Field number for the "redList" field.</summary>
    public const int RedListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.RedInfo> _repeated_redList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.RedInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.RedInfo> redList_ = new pbc::RepeatedField<global::PlaneWar.RedInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.RedInfo> RedList {
      get { return redList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCRedEnvelopeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCRedEnvelopeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!redList_.Equals(other.redList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= redList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      redList_.WriteTo(output, _repeated_redList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      redList_.WriteTo(ref output, _repeated_redList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += redList_.CalculateSize(_repeated_redList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCRedEnvelopeInfo other) {
      if (other == null) {
        return;
      }
      redList_.Add(other.redList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            redList_.AddEntriesFrom(input, _repeated_redList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            redList_.AddEntriesFrom(ref input, _repeated_redList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOpenRedEnvelope : pb::IMessage<CSOpenRedEnvelope>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOpenRedEnvelope> _parser = new pb::MessageParser<CSOpenRedEnvelope>(() => new CSOpenRedEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOpenRedEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[193]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenRedEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenRedEnvelope(CSOpenRedEnvelope other) : this() {
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenRedEnvelope Clone() {
      return new CSOpenRedEnvelope(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOpenRedEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOpenRedEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOpenRedEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RedUpgradeInfo : pb::IMessage<RedUpgradeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RedUpgradeInfo> _parser = new pb::MessageParser<RedUpgradeInfo>(() => new RedUpgradeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedUpgradeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[194]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedUpgradeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedUpgradeInfo(RedUpgradeInfo other) : this() {
      leastReward_ = other.leastReward_;
      mayAddReward_ = other.mayAddReward_;
      maxUpgradeNum_ = other.maxUpgradeNum_;
      remainUpgradeNum_ = other.remainUpgradeNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedUpgradeInfo Clone() {
      return new RedUpgradeInfo(this);
    }

    /// <summary>Field number for the "leastReward" field.</summary>
    public const int LeastRewardFieldNumber = 1;
    private int leastReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeastReward {
      get { return leastReward_; }
      set {
        leastReward_ = value;
      }
    }

    /// <summary>Field number for the "mayAddReward" field.</summary>
    public const int MayAddRewardFieldNumber = 2;
    private int mayAddReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MayAddReward {
      get { return mayAddReward_; }
      set {
        mayAddReward_ = value;
      }
    }

    /// <summary>Field number for the "maxUpgradeNum" field.</summary>
    public const int MaxUpgradeNumFieldNumber = 3;
    private int maxUpgradeNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxUpgradeNum {
      get { return maxUpgradeNum_; }
      set {
        maxUpgradeNum_ = value;
      }
    }

    /// <summary>Field number for the "remainUpgradeNum" field.</summary>
    public const int RemainUpgradeNumFieldNumber = 4;
    private int remainUpgradeNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainUpgradeNum {
      get { return remainUpgradeNum_; }
      set {
        remainUpgradeNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedUpgradeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedUpgradeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeastReward != other.LeastReward) return false;
      if (MayAddReward != other.MayAddReward) return false;
      if (MaxUpgradeNum != other.MaxUpgradeNum) return false;
      if (RemainUpgradeNum != other.RemainUpgradeNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeastReward != 0) hash ^= LeastReward.GetHashCode();
      if (MayAddReward != 0) hash ^= MayAddReward.GetHashCode();
      if (MaxUpgradeNum != 0) hash ^= MaxUpgradeNum.GetHashCode();
      if (RemainUpgradeNum != 0) hash ^= RemainUpgradeNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LeastReward != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LeastReward);
      }
      if (MayAddReward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MayAddReward);
      }
      if (MaxUpgradeNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxUpgradeNum);
      }
      if (RemainUpgradeNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RemainUpgradeNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LeastReward != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LeastReward);
      }
      if (MayAddReward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MayAddReward);
      }
      if (MaxUpgradeNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxUpgradeNum);
      }
      if (RemainUpgradeNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RemainUpgradeNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeastReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeastReward);
      }
      if (MayAddReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MayAddReward);
      }
      if (MaxUpgradeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxUpgradeNum);
      }
      if (RemainUpgradeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainUpgradeNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedUpgradeInfo other) {
      if (other == null) {
        return;
      }
      if (other.LeastReward != 0) {
        LeastReward = other.LeastReward;
      }
      if (other.MayAddReward != 0) {
        MayAddReward = other.MayAddReward;
      }
      if (other.MaxUpgradeNum != 0) {
        MaxUpgradeNum = other.MaxUpgradeNum;
      }
      if (other.RemainUpgradeNum != 0) {
        RemainUpgradeNum = other.RemainUpgradeNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LeastReward = input.ReadInt32();
            break;
          }
          case 16: {
            MayAddReward = input.ReadInt32();
            break;
          }
          case 24: {
            MaxUpgradeNum = input.ReadInt32();
            break;
          }
          case 32: {
            RemainUpgradeNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LeastReward = input.ReadInt32();
            break;
          }
          case 16: {
            MayAddReward = input.ReadInt32();
            break;
          }
          case 24: {
            MaxUpgradeNum = input.ReadInt32();
            break;
          }
          case 32: {
            RemainUpgradeNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCOpenRedEnvelope : pb::IMessage<SCOpenRedEnvelope>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCOpenRedEnvelope> _parser = new pb::MessageParser<SCOpenRedEnvelope>(() => new SCOpenRedEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOpenRedEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[195]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenRedEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenRedEnvelope(SCOpenRedEnvelope other) : this() {
      rawReward_ = other.rawReward_;
      grantThreshold_ = other.grantThreshold_;
      upgradeInfo_ = other.upgradeInfo_ != null ? other.upgradeInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenRedEnvelope Clone() {
      return new SCOpenRedEnvelope(this);
    }

    /// <summary>Field number for the "rawReward" field.</summary>
    public const int RawRewardFieldNumber = 1;
    private int rawReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RawReward {
      get { return rawReward_; }
      set {
        rawReward_ = value;
      }
    }

    /// <summary>Field number for the "grantThreshold" field.</summary>
    public const int GrantThresholdFieldNumber = 2;
    private int grantThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrantThreshold {
      get { return grantThreshold_; }
      set {
        grantThreshold_ = value;
      }
    }

    /// <summary>Field number for the "upgradeInfo" field.</summary>
    public const int UpgradeInfoFieldNumber = 3;
    private global::PlaneWar.RedUpgradeInfo upgradeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RedUpgradeInfo UpgradeInfo {
      get { return upgradeInfo_; }
      set {
        upgradeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOpenRedEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOpenRedEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RawReward != other.RawReward) return false;
      if (GrantThreshold != other.GrantThreshold) return false;
      if (!object.Equals(UpgradeInfo, other.UpgradeInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RawReward != 0) hash ^= RawReward.GetHashCode();
      if (GrantThreshold != 0) hash ^= GrantThreshold.GetHashCode();
      if (upgradeInfo_ != null) hash ^= UpgradeInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RawReward != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RawReward);
      }
      if (GrantThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GrantThreshold);
      }
      if (upgradeInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpgradeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RawReward != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RawReward);
      }
      if (GrantThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GrantThreshold);
      }
      if (upgradeInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpgradeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RawReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RawReward);
      }
      if (GrantThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrantThreshold);
      }
      if (upgradeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpgradeInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOpenRedEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.RawReward != 0) {
        RawReward = other.RawReward;
      }
      if (other.GrantThreshold != 0) {
        GrantThreshold = other.GrantThreshold;
      }
      if (other.upgradeInfo_ != null) {
        if (upgradeInfo_ == null) {
          UpgradeInfo = new global::PlaneWar.RedUpgradeInfo();
        }
        UpgradeInfo.MergeFrom(other.UpgradeInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RawReward = input.ReadInt32();
            break;
          }
          case 16: {
            GrantThreshold = input.ReadInt32();
            break;
          }
          case 26: {
            if (upgradeInfo_ == null) {
              UpgradeInfo = new global::PlaneWar.RedUpgradeInfo();
            }
            input.ReadMessage(UpgradeInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RawReward = input.ReadInt32();
            break;
          }
          case 16: {
            GrantThreshold = input.ReadInt32();
            break;
          }
          case 26: {
            if (upgradeInfo_ == null) {
              UpgradeInfo = new global::PlaneWar.RedUpgradeInfo();
            }
            input.ReadMessage(UpgradeInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUpgradeRedEnvelope : pb::IMessage<CSUpgradeRedEnvelope>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUpgradeRedEnvelope> _parser = new pb::MessageParser<CSUpgradeRedEnvelope>(() => new CSUpgradeRedEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUpgradeRedEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[196]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUpgradeRedEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUpgradeRedEnvelope(CSUpgradeRedEnvelope other) : this() {
      isUpgrade_ = other.isUpgrade_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUpgradeRedEnvelope Clone() {
      return new CSUpgradeRedEnvelope(this);
    }

    /// <summary>Field number for the "isUpgrade" field.</summary>
    public const int IsUpgradeFieldNumber = 1;
    private bool isUpgrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUpgrade {
      get { return isUpgrade_; }
      set {
        isUpgrade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUpgradeRedEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUpgradeRedEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsUpgrade != other.IsUpgrade) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsUpgrade != false) hash ^= IsUpgrade.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsUpgrade != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsUpgrade);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsUpgrade != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsUpgrade);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsUpgrade != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUpgradeRedEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.IsUpgrade != false) {
        IsUpgrade = other.IsUpgrade;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsUpgrade = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsUpgrade = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUpgradeRedEnvelope : pb::IMessage<SCUpgradeRedEnvelope>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUpgradeRedEnvelope> _parser = new pb::MessageParser<SCUpgradeRedEnvelope>(() => new SCUpgradeRedEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUpgradeRedEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[197]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpgradeRedEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpgradeRedEnvelope(SCUpgradeRedEnvelope other) : this() {
      result_ = other.result_;
      curReward_ = other.curReward_;
      grantThreshold_ = other.grantThreshold_;
      addReward_ = other.addReward_;
      upgradeInfo_ = other.upgradeInfo_ != null ? other.upgradeInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpgradeRedEnvelope Clone() {
      return new SCUpgradeRedEnvelope(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::PlaneWar.UpgradeRedResult result_ = global::PlaneWar.UpgradeRedResult.UpgradeAbandon;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.UpgradeRedResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "curReward" field.</summary>
    public const int CurRewardFieldNumber = 2;
    private int curReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurReward {
      get { return curReward_; }
      set {
        curReward_ = value;
      }
    }

    /// <summary>Field number for the "grantThreshold" field.</summary>
    public const int GrantThresholdFieldNumber = 3;
    private int grantThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrantThreshold {
      get { return grantThreshold_; }
      set {
        grantThreshold_ = value;
      }
    }

    /// <summary>Field number for the "addReward" field.</summary>
    public const int AddRewardFieldNumber = 4;
    private int addReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddReward {
      get { return addReward_; }
      set {
        addReward_ = value;
      }
    }

    /// <summary>Field number for the "upgradeInfo" field.</summary>
    public const int UpgradeInfoFieldNumber = 5;
    private global::PlaneWar.RedUpgradeInfo upgradeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RedUpgradeInfo UpgradeInfo {
      get { return upgradeInfo_; }
      set {
        upgradeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUpgradeRedEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUpgradeRedEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (CurReward != other.CurReward) return false;
      if (GrantThreshold != other.GrantThreshold) return false;
      if (AddReward != other.AddReward) return false;
      if (!object.Equals(UpgradeInfo, other.UpgradeInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::PlaneWar.UpgradeRedResult.UpgradeAbandon) hash ^= Result.GetHashCode();
      if (CurReward != 0) hash ^= CurReward.GetHashCode();
      if (GrantThreshold != 0) hash ^= GrantThreshold.GetHashCode();
      if (AddReward != 0) hash ^= AddReward.GetHashCode();
      if (upgradeInfo_ != null) hash ^= UpgradeInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Result != global::PlaneWar.UpgradeRedResult.UpgradeAbandon) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (CurReward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurReward);
      }
      if (GrantThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GrantThreshold);
      }
      if (AddReward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AddReward);
      }
      if (upgradeInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UpgradeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Result != global::PlaneWar.UpgradeRedResult.UpgradeAbandon) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (CurReward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurReward);
      }
      if (GrantThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GrantThreshold);
      }
      if (AddReward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AddReward);
      }
      if (upgradeInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UpgradeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::PlaneWar.UpgradeRedResult.UpgradeAbandon) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (CurReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurReward);
      }
      if (GrantThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrantThreshold);
      }
      if (AddReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddReward);
      }
      if (upgradeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpgradeInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUpgradeRedEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::PlaneWar.UpgradeRedResult.UpgradeAbandon) {
        Result = other.Result;
      }
      if (other.CurReward != 0) {
        CurReward = other.CurReward;
      }
      if (other.GrantThreshold != 0) {
        GrantThreshold = other.GrantThreshold;
      }
      if (other.AddReward != 0) {
        AddReward = other.AddReward;
      }
      if (other.upgradeInfo_ != null) {
        if (upgradeInfo_ == null) {
          UpgradeInfo = new global::PlaneWar.RedUpgradeInfo();
        }
        UpgradeInfo.MergeFrom(other.UpgradeInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::PlaneWar.UpgradeRedResult) input.ReadEnum();
            break;
          }
          case 16: {
            CurReward = input.ReadInt32();
            break;
          }
          case 24: {
            GrantThreshold = input.ReadInt32();
            break;
          }
          case 32: {
            AddReward = input.ReadInt32();
            break;
          }
          case 42: {
            if (upgradeInfo_ == null) {
              UpgradeInfo = new global::PlaneWar.RedUpgradeInfo();
            }
            input.ReadMessage(UpgradeInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = (global::PlaneWar.UpgradeRedResult) input.ReadEnum();
            break;
          }
          case 16: {
            CurReward = input.ReadInt32();
            break;
          }
          case 24: {
            GrantThreshold = input.ReadInt32();
            break;
          }
          case 32: {
            AddReward = input.ReadInt32();
            break;
          }
          case 42: {
            if (upgradeInfo_ == null) {
              UpgradeInfo = new global::PlaneWar.RedUpgradeInfo();
            }
            input.ReadMessage(UpgradeInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSCommonRedEnvelopeInfo : pb::IMessage<CSCommonRedEnvelopeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSCommonRedEnvelopeInfo> _parser = new pb::MessageParser<CSCommonRedEnvelopeInfo>(() => new CSCommonRedEnvelopeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCommonRedEnvelopeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[198]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCommonRedEnvelopeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCommonRedEnvelopeInfo(CSCommonRedEnvelopeInfo other) : this() {
      isOpen_ = other.isOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCommonRedEnvelopeInfo Clone() {
      return new CSCommonRedEnvelopeInfo(this);
    }

    /// <summary>Field number for the "isOpen" field.</summary>
    public const int IsOpenFieldNumber = 1;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSCommonRedEnvelopeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSCommonRedEnvelopeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpen != other.IsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSCommonRedEnvelopeInfo other) {
      if (other == null) {
        return;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommonRedInfo : pb::IMessage<CommonRedInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommonRedInfo> _parser = new pb::MessageParser<CommonRedInfo>(() => new CommonRedInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonRedInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[199]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonRedInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonRedInfo(CommonRedInfo other) : this() {
      id_ = other.id_;
      reward_ = other.reward_;
      expire_ = other.expire_;
      sourcePlayerNick_ = other.sourcePlayerNick_;
      tryOpenNum_ = other.tryOpenNum_;
      cost_ = other.cost_;
      isSelfGrant_ = other.isSelfGrant_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonRedInfo Clone() {
      return new CommonRedInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "expire" field.</summary>
    public const int ExpireFieldNumber = 3;
    private int expire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Expire {
      get { return expire_; }
      set {
        expire_ = value;
      }
    }

    /// <summary>Field number for the "sourcePlayerNick" field.</summary>
    public const int SourcePlayerNickFieldNumber = 4;
    private string sourcePlayerNick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourcePlayerNick {
      get { return sourcePlayerNick_; }
      set {
        sourcePlayerNick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tryOpenNum" field.</summary>
    public const int TryOpenNumFieldNumber = 5;
    private int tryOpenNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TryOpenNum {
      get { return tryOpenNum_; }
      set {
        tryOpenNum_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 6;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "isSelfGrant" field.</summary>
    public const int IsSelfGrantFieldNumber = 7;
    private bool isSelfGrant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSelfGrant {
      get { return isSelfGrant_; }
      set {
        isSelfGrant_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonRedInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonRedInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Reward != other.Reward) return false;
      if (Expire != other.Expire) return false;
      if (SourcePlayerNick != other.SourcePlayerNick) return false;
      if (TryOpenNum != other.TryOpenNum) return false;
      if (Cost != other.Cost) return false;
      if (IsSelfGrant != other.IsSelfGrant) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (Expire != 0) hash ^= Expire.GetHashCode();
      if (SourcePlayerNick.Length != 0) hash ^= SourcePlayerNick.GetHashCode();
      if (TryOpenNum != 0) hash ^= TryOpenNum.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (IsSelfGrant != false) hash ^= IsSelfGrant.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Reward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reward);
      }
      if (Expire != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Expire);
      }
      if (SourcePlayerNick.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SourcePlayerNick);
      }
      if (TryOpenNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TryOpenNum);
      }
      if (Cost != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Cost);
      }
      if (IsSelfGrant != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsSelfGrant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Reward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reward);
      }
      if (Expire != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Expire);
      }
      if (SourcePlayerNick.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SourcePlayerNick);
      }
      if (TryOpenNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TryOpenNum);
      }
      if (Cost != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Cost);
      }
      if (IsSelfGrant != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsSelfGrant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (Expire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Expire);
      }
      if (SourcePlayerNick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourcePlayerNick);
      }
      if (TryOpenNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TryOpenNum);
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (IsSelfGrant != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonRedInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      if (other.Expire != 0) {
        Expire = other.Expire;
      }
      if (other.SourcePlayerNick.Length != 0) {
        SourcePlayerNick = other.SourcePlayerNick;
      }
      if (other.TryOpenNum != 0) {
        TryOpenNum = other.TryOpenNum;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.IsSelfGrant != false) {
        IsSelfGrant = other.IsSelfGrant;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Reward = input.ReadInt32();
            break;
          }
          case 24: {
            Expire = input.ReadInt32();
            break;
          }
          case 34: {
            SourcePlayerNick = input.ReadString();
            break;
          }
          case 40: {
            TryOpenNum = input.ReadInt32();
            break;
          }
          case 48: {
            Cost = input.ReadInt32();
            break;
          }
          case 56: {
            IsSelfGrant = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Reward = input.ReadInt32();
            break;
          }
          case 24: {
            Expire = input.ReadInt32();
            break;
          }
          case 34: {
            SourcePlayerNick = input.ReadString();
            break;
          }
          case 40: {
            TryOpenNum = input.ReadInt32();
            break;
          }
          case 48: {
            Cost = input.ReadInt32();
            break;
          }
          case 56: {
            IsSelfGrant = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCCommonRedEnvelopeInfo : pb::IMessage<SCCommonRedEnvelopeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCCommonRedEnvelopeInfo> _parser = new pb::MessageParser<SCCommonRedEnvelopeInfo>(() => new SCCommonRedEnvelopeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCCommonRedEnvelopeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[200]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCommonRedEnvelopeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCommonRedEnvelopeInfo(SCCommonRedEnvelopeInfo other) : this() {
      redList_ = other.redList_.Clone();
      grantThreshold_ = other.grantThreshold_;
      maxShowNum_ = other.maxShowNum_;
      maxOpenNum_ = other.maxOpenNum_;
      remainOpenNum_ = other.remainOpenNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCommonRedEnvelopeInfo Clone() {
      return new SCCommonRedEnvelopeInfo(this);
    }

    /// <summary>Field number for the "redList" field.</summary>
    public const int RedListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.CommonRedInfo> _repeated_redList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.CommonRedInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.CommonRedInfo> redList_ = new pbc::RepeatedField<global::PlaneWar.CommonRedInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.CommonRedInfo> RedList {
      get { return redList_; }
    }

    /// <summary>Field number for the "grantThreshold" field.</summary>
    public const int GrantThresholdFieldNumber = 2;
    private int grantThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrantThreshold {
      get { return grantThreshold_; }
      set {
        grantThreshold_ = value;
      }
    }

    /// <summary>Field number for the "maxShowNum" field.</summary>
    public const int MaxShowNumFieldNumber = 3;
    private int maxShowNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxShowNum {
      get { return maxShowNum_; }
      set {
        maxShowNum_ = value;
      }
    }

    /// <summary>Field number for the "maxOpenNum" field.</summary>
    public const int MaxOpenNumFieldNumber = 4;
    private int maxOpenNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxOpenNum {
      get { return maxOpenNum_; }
      set {
        maxOpenNum_ = value;
      }
    }

    /// <summary>Field number for the "remainOpenNum" field.</summary>
    public const int RemainOpenNumFieldNumber = 5;
    private int remainOpenNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainOpenNum {
      get { return remainOpenNum_; }
      set {
        remainOpenNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCCommonRedEnvelopeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCCommonRedEnvelopeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!redList_.Equals(other.redList_)) return false;
      if (GrantThreshold != other.GrantThreshold) return false;
      if (MaxShowNum != other.MaxShowNum) return false;
      if (MaxOpenNum != other.MaxOpenNum) return false;
      if (RemainOpenNum != other.RemainOpenNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= redList_.GetHashCode();
      if (GrantThreshold != 0) hash ^= GrantThreshold.GetHashCode();
      if (MaxShowNum != 0) hash ^= MaxShowNum.GetHashCode();
      if (MaxOpenNum != 0) hash ^= MaxOpenNum.GetHashCode();
      if (RemainOpenNum != 0) hash ^= RemainOpenNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      redList_.WriteTo(output, _repeated_redList_codec);
      if (GrantThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GrantThreshold);
      }
      if (MaxShowNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxShowNum);
      }
      if (MaxOpenNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxOpenNum);
      }
      if (RemainOpenNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RemainOpenNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      redList_.WriteTo(ref output, _repeated_redList_codec);
      if (GrantThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GrantThreshold);
      }
      if (MaxShowNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxShowNum);
      }
      if (MaxOpenNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxOpenNum);
      }
      if (RemainOpenNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RemainOpenNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += redList_.CalculateSize(_repeated_redList_codec);
      if (GrantThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrantThreshold);
      }
      if (MaxShowNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxShowNum);
      }
      if (MaxOpenNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxOpenNum);
      }
      if (RemainOpenNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainOpenNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCCommonRedEnvelopeInfo other) {
      if (other == null) {
        return;
      }
      redList_.Add(other.redList_);
      if (other.GrantThreshold != 0) {
        GrantThreshold = other.GrantThreshold;
      }
      if (other.MaxShowNum != 0) {
        MaxShowNum = other.MaxShowNum;
      }
      if (other.MaxOpenNum != 0) {
        MaxOpenNum = other.MaxOpenNum;
      }
      if (other.RemainOpenNum != 0) {
        RemainOpenNum = other.RemainOpenNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            redList_.AddEntriesFrom(input, _repeated_redList_codec);
            break;
          }
          case 16: {
            GrantThreshold = input.ReadInt32();
            break;
          }
          case 24: {
            MaxShowNum = input.ReadInt32();
            break;
          }
          case 32: {
            MaxOpenNum = input.ReadInt32();
            break;
          }
          case 40: {
            RemainOpenNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            redList_.AddEntriesFrom(ref input, _repeated_redList_codec);
            break;
          }
          case 16: {
            GrantThreshold = input.ReadInt32();
            break;
          }
          case 24: {
            MaxShowNum = input.ReadInt32();
            break;
          }
          case 32: {
            MaxOpenNum = input.ReadInt32();
            break;
          }
          case 40: {
            RemainOpenNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOpenCommonRedEnvelope : pb::IMessage<CSOpenCommonRedEnvelope>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOpenCommonRedEnvelope> _parser = new pb::MessageParser<CSOpenCommonRedEnvelope>(() => new CSOpenCommonRedEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOpenCommonRedEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[201]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenCommonRedEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenCommonRedEnvelope(CSOpenCommonRedEnvelope other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenCommonRedEnvelope Clone() {
      return new CSOpenCommonRedEnvelope(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOpenCommonRedEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOpenCommonRedEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOpenCommonRedEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCOpenCommonRedEnvelope : pb::IMessage<SCOpenCommonRedEnvelope>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCOpenCommonRedEnvelope> _parser = new pb::MessageParser<SCOpenCommonRedEnvelope>(() => new SCOpenCommonRedEnvelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOpenCommonRedEnvelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[202]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenCommonRedEnvelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenCommonRedEnvelope(SCOpenCommonRedEnvelope other) : this() {
      id_ = other.id_;
      result_ = other.result_;
      remainOpenNum_ = other.remainOpenNum_;
      reward_ = other.reward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenCommonRedEnvelope Clone() {
      return new SCOpenCommonRedEnvelope(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "remainOpenNum" field.</summary>
    public const int RemainOpenNumFieldNumber = 3;
    private int remainOpenNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainOpenNum {
      get { return remainOpenNum_; }
      set {
        remainOpenNum_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 4;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOpenCommonRedEnvelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOpenCommonRedEnvelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Result != other.Result) return false;
      if (RemainOpenNum != other.RemainOpenNum) return false;
      if (Reward != other.Reward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      if (RemainOpenNum != 0) hash ^= RemainOpenNum.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Result != false) {
        output.WriteRawTag(16);
        output.WriteBool(Result);
      }
      if (RemainOpenNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainOpenNum);
      }
      if (Reward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Result != false) {
        output.WriteRawTag(16);
        output.WriteBool(Result);
      }
      if (RemainOpenNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainOpenNum);
      }
      if (Reward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      if (RemainOpenNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainOpenNum);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOpenCommonRedEnvelope other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.RemainOpenNum != 0) {
        RemainOpenNum = other.RemainOpenNum;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Result = input.ReadBool();
            break;
          }
          case 24: {
            RemainOpenNum = input.ReadInt32();
            break;
          }
          case 32: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Result = input.ReadBool();
            break;
          }
          case 24: {
            RemainOpenNum = input.ReadInt32();
            break;
          }
          case 32: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RedRankPlayerInfo : pb::IMessage<RedRankPlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RedRankPlayerInfo> _parser = new pb::MessageParser<RedRankPlayerInfo>(() => new RedRankPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedRankPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[203]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedRankPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedRankPlayerInfo(RedRankPlayerInfo other) : this() {
      playerID_ = other.playerID_;
      nick_ = other.nick_;
      icon_ = other.icon_;
      vipLevel_ = other.vipLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedRankPlayerInfo Clone() {
      return new RedRankPlayerInfo(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private int playerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 2;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 3;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vipLevel" field.</summary>
    public const int VipLevelFieldNumber = 4;
    private int vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedRankPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedRankPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (Nick != other.Nick) return false;
      if (Icon != other.Icon) return false;
      if (VipLevel != other.VipLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nick);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Icon);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VipLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nick);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Icon);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VipLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedRankPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 18: {
            Nick = input.ReadString();
            break;
          }
          case 26: {
            Icon = input.ReadString();
            break;
          }
          case 32: {
            VipLevel = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 18: {
            Nick = input.ReadString();
            break;
          }
          case 26: {
            Icon = input.ReadString();
            break;
          }
          case 32: {
            VipLevel = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGrantCommonRedEnvelopeRank : pb::IMessage<CSGrantCommonRedEnvelopeRank>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGrantCommonRedEnvelopeRank> _parser = new pb::MessageParser<CSGrantCommonRedEnvelopeRank>(() => new CSGrantCommonRedEnvelopeRank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGrantCommonRedEnvelopeRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[204]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGrantCommonRedEnvelopeRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGrantCommonRedEnvelopeRank(CSGrantCommonRedEnvelopeRank other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGrantCommonRedEnvelopeRank Clone() {
      return new CSGrantCommonRedEnvelopeRank(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private int to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGrantCommonRedEnvelopeRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGrantCommonRedEnvelopeRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (To != 0) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (To != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGrantCommonRedEnvelopeRank other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.To != 0) {
        To = other.To;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GrantRankItem : pb::IMessage<GrantRankItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GrantRankItem> _parser = new pb::MessageParser<GrantRankItem>(() => new GrantRankItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrantRankItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[205]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrantRankItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrantRankItem(GrantRankItem other) : this() {
      rank_ = other.rank_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      upgradeNum_ = other.upgradeNum_;
      reward_ = other.reward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrantRankItem Clone() {
      return new GrantRankItem(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 2;
    private global::PlaneWar.RedRankPlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RedRankPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "upgradeNum" field.</summary>
    public const int UpgradeNumFieldNumber = 3;
    private int upgradeNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpgradeNum {
      get { return upgradeNum_; }
      set {
        upgradeNum_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 4;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrantRankItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrantRankItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (UpgradeNum != other.UpgradeNum) return false;
      if (Reward != other.Reward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (UpgradeNum != 0) hash ^= UpgradeNum.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (UpgradeNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UpgradeNum);
      }
      if (Reward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (UpgradeNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UpgradeNum);
      }
      if (Reward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (UpgradeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpgradeNum);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrantRankItem other) {
      if (other == null) {
        return;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::PlaneWar.RedRankPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.UpgradeNum != 0) {
        UpgradeNum = other.UpgradeNum;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::PlaneWar.RedRankPlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 24: {
            UpgradeNum = input.ReadInt32();
            break;
          }
          case 32: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::PlaneWar.RedRankPlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 24: {
            UpgradeNum = input.ReadInt32();
            break;
          }
          case 32: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGrantCommonRedEnvelopeRank : pb::IMessage<SCGrantCommonRedEnvelopeRank>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGrantCommonRedEnvelopeRank> _parser = new pb::MessageParser<SCGrantCommonRedEnvelopeRank>(() => new SCGrantCommonRedEnvelopeRank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGrantCommonRedEnvelopeRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[206]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGrantCommonRedEnvelopeRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGrantCommonRedEnvelopeRank(SCGrantCommonRedEnvelopeRank other) : this() {
      rankList_ = other.rankList_.Clone();
      selfRank_ = other.selfRank_ != null ? other.selfRank_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGrantCommonRedEnvelopeRank Clone() {
      return new SCGrantCommonRedEnvelopeRank(this);
    }

    /// <summary>Field number for the "rankList" field.</summary>
    public const int RankListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.GrantRankItem> _repeated_rankList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.GrantRankItem.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.GrantRankItem> rankList_ = new pbc::RepeatedField<global::PlaneWar.GrantRankItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.GrantRankItem> RankList {
      get { return rankList_; }
    }

    /// <summary>Field number for the "selfRank" field.</summary>
    public const int SelfRankFieldNumber = 2;
    private global::PlaneWar.GrantRankItem selfRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GrantRankItem SelfRank {
      get { return selfRank_; }
      set {
        selfRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGrantCommonRedEnvelopeRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGrantCommonRedEnvelopeRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rankList_.Equals(other.rankList_)) return false;
      if (!object.Equals(SelfRank, other.SelfRank)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rankList_.GetHashCode();
      if (selfRank_ != null) hash ^= SelfRank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rankList_.WriteTo(output, _repeated_rankList_codec);
      if (selfRank_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rankList_.WriteTo(ref output, _repeated_rankList_codec);
      if (selfRank_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rankList_.CalculateSize(_repeated_rankList_codec);
      if (selfRank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfRank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGrantCommonRedEnvelopeRank other) {
      if (other == null) {
        return;
      }
      rankList_.Add(other.rankList_);
      if (other.selfRank_ != null) {
        if (selfRank_ == null) {
          SelfRank = new global::PlaneWar.GrantRankItem();
        }
        SelfRank.MergeFrom(other.SelfRank);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rankList_.AddEntriesFrom(input, _repeated_rankList_codec);
            break;
          }
          case 18: {
            if (selfRank_ == null) {
              SelfRank = new global::PlaneWar.GrantRankItem();
            }
            input.ReadMessage(SelfRank);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rankList_.AddEntriesFrom(ref input, _repeated_rankList_codec);
            break;
          }
          case 18: {
            if (selfRank_ == null) {
              SelfRank = new global::PlaneWar.GrantRankItem();
            }
            input.ReadMessage(SelfRank);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOpenCommonRedEnvelopeRank : pb::IMessage<CSOpenCommonRedEnvelopeRank>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOpenCommonRedEnvelopeRank> _parser = new pb::MessageParser<CSOpenCommonRedEnvelopeRank>(() => new CSOpenCommonRedEnvelopeRank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOpenCommonRedEnvelopeRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[207]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenCommonRedEnvelopeRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenCommonRedEnvelopeRank(CSOpenCommonRedEnvelopeRank other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenCommonRedEnvelopeRank Clone() {
      return new CSOpenCommonRedEnvelopeRank(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private int to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOpenCommonRedEnvelopeRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOpenCommonRedEnvelopeRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (To != 0) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (To != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOpenCommonRedEnvelopeRank other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.To != 0) {
        To = other.To;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OpenRankItem : pb::IMessage<OpenRankItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpenRankItem> _parser = new pb::MessageParser<OpenRankItem>(() => new OpenRankItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenRankItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[208]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenRankItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenRankItem(OpenRankItem other) : this() {
      rank_ = other.rank_;
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      totalReward_ = other.totalReward_;
      openNum_ = other.openNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenRankItem Clone() {
      return new OpenRankItem(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 2;
    private global::PlaneWar.RedRankPlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RedRankPlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "totalReward" field.</summary>
    public const int TotalRewardFieldNumber = 3;
    private int totalReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalReward {
      get { return totalReward_; }
      set {
        totalReward_ = value;
      }
    }

    /// <summary>Field number for the "openNum" field.</summary>
    public const int OpenNumFieldNumber = 4;
    private int openNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenNum {
      get { return openNum_; }
      set {
        openNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenRankItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenRankItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (TotalReward != other.TotalReward) return false;
      if (OpenNum != other.OpenNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (TotalReward != 0) hash ^= TotalReward.GetHashCode();
      if (OpenNum != 0) hash ^= OpenNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (TotalReward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalReward);
      }
      if (OpenNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OpenNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Rank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Rank);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (TotalReward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalReward);
      }
      if (OpenNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OpenNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (TotalReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalReward);
      }
      if (OpenNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenRankItem other) {
      if (other == null) {
        return;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::PlaneWar.RedRankPlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.TotalReward != 0) {
        TotalReward = other.TotalReward;
      }
      if (other.OpenNum != 0) {
        OpenNum = other.OpenNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::PlaneWar.RedRankPlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 24: {
            TotalReward = input.ReadInt32();
            break;
          }
          case 32: {
            OpenNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Rank = input.ReadInt32();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::PlaneWar.RedRankPlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 24: {
            TotalReward = input.ReadInt32();
            break;
          }
          case 32: {
            OpenNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCOpenCommonRedEnvelopeRank : pb::IMessage<SCOpenCommonRedEnvelopeRank>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCOpenCommonRedEnvelopeRank> _parser = new pb::MessageParser<SCOpenCommonRedEnvelopeRank>(() => new SCOpenCommonRedEnvelopeRank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOpenCommonRedEnvelopeRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[209]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenCommonRedEnvelopeRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenCommonRedEnvelopeRank(SCOpenCommonRedEnvelopeRank other) : this() {
      rankList_ = other.rankList_.Clone();
      selfRank_ = other.selfRank_ != null ? other.selfRank_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenCommonRedEnvelopeRank Clone() {
      return new SCOpenCommonRedEnvelopeRank(this);
    }

    /// <summary>Field number for the "rankList" field.</summary>
    public const int RankListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.OpenRankItem> _repeated_rankList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.OpenRankItem.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.OpenRankItem> rankList_ = new pbc::RepeatedField<global::PlaneWar.OpenRankItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.OpenRankItem> RankList {
      get { return rankList_; }
    }

    /// <summary>Field number for the "selfRank" field.</summary>
    public const int SelfRankFieldNumber = 2;
    private global::PlaneWar.OpenRankItem selfRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.OpenRankItem SelfRank {
      get { return selfRank_; }
      set {
        selfRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOpenCommonRedEnvelopeRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOpenCommonRedEnvelopeRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rankList_.Equals(other.rankList_)) return false;
      if (!object.Equals(SelfRank, other.SelfRank)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rankList_.GetHashCode();
      if (selfRank_ != null) hash ^= SelfRank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rankList_.WriteTo(output, _repeated_rankList_codec);
      if (selfRank_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rankList_.WriteTo(ref output, _repeated_rankList_codec);
      if (selfRank_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rankList_.CalculateSize(_repeated_rankList_codec);
      if (selfRank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfRank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOpenCommonRedEnvelopeRank other) {
      if (other == null) {
        return;
      }
      rankList_.Add(other.rankList_);
      if (other.selfRank_ != null) {
        if (selfRank_ == null) {
          SelfRank = new global::PlaneWar.OpenRankItem();
        }
        SelfRank.MergeFrom(other.SelfRank);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rankList_.AddEntriesFrom(input, _repeated_rankList_codec);
            break;
          }
          case 18: {
            if (selfRank_ == null) {
              SelfRank = new global::PlaneWar.OpenRankItem();
            }
            input.ReadMessage(SelfRank);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rankList_.AddEntriesFrom(ref input, _repeated_rankList_codec);
            break;
          }
          case 18: {
            if (selfRank_ == null) {
              SelfRank = new global::PlaneWar.OpenRankItem();
            }
            input.ReadMessage(SelfRank);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGrantCommonRedEnvelopeRecord : pb::IMessage<CSGrantCommonRedEnvelopeRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGrantCommonRedEnvelopeRecord> _parser = new pb::MessageParser<CSGrantCommonRedEnvelopeRecord>(() => new CSGrantCommonRedEnvelopeRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGrantCommonRedEnvelopeRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[210]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGrantCommonRedEnvelopeRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGrantCommonRedEnvelopeRecord(CSGrantCommonRedEnvelopeRecord other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGrantCommonRedEnvelopeRecord Clone() {
      return new CSGrantCommonRedEnvelopeRecord(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGrantCommonRedEnvelopeRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGrantCommonRedEnvelopeRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGrantCommonRedEnvelopeRecord other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class GrantRecord : pb::IMessage<GrantRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GrantRecord> _parser = new pb::MessageParser<GrantRecord>(() => new GrantRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrantRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[211]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrantRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrantRecord(GrantRecord other) : this() {
      grantTime_ = other.grantTime_;
      expireTime_ = other.expireTime_;
      reward_ = other.reward_;
      status_ = other.status_;
      openPlayerNick_ = other.openPlayerNick_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrantRecord Clone() {
      return new GrantRecord(this);
    }

    /// <summary>Field number for the "grantTime" field.</summary>
    public const int GrantTimeFieldNumber = 1;
    private int grantTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrantTime {
      get { return grantTime_; }
      set {
        grantTime_ = value;
      }
    }

    /// <summary>Field number for the "expireTime" field.</summary>
    public const int ExpireTimeFieldNumber = 2;
    private int expireTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::PlaneWar.GrantRedStatus status_ = global::PlaneWar.GrantRedStatus.RedOpened;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GrantRedStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "openPlayerNick" field.</summary>
    public const int OpenPlayerNickFieldNumber = 5;
    private string openPlayerNick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenPlayerNick {
      get { return openPlayerNick_; }
      set {
        openPlayerNick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrantRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrantRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GrantTime != other.GrantTime) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (Reward != other.Reward) return false;
      if (Status != other.Status) return false;
      if (OpenPlayerNick != other.OpenPlayerNick) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GrantTime != 0) hash ^= GrantTime.GetHashCode();
      if (ExpireTime != 0) hash ^= ExpireTime.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (Status != global::PlaneWar.GrantRedStatus.RedOpened) hash ^= Status.GetHashCode();
      if (OpenPlayerNick.Length != 0) hash ^= OpenPlayerNick.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GrantTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GrantTime);
      }
      if (ExpireTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExpireTime);
      }
      if (Reward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reward);
      }
      if (Status != global::PlaneWar.GrantRedStatus.RedOpened) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (OpenPlayerNick.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OpenPlayerNick);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GrantTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GrantTime);
      }
      if (ExpireTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExpireTime);
      }
      if (Reward != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Reward);
      }
      if (Status != global::PlaneWar.GrantRedStatus.RedOpened) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (OpenPlayerNick.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OpenPlayerNick);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GrantTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrantTime);
      }
      if (ExpireTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpireTime);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (Status != global::PlaneWar.GrantRedStatus.RedOpened) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (OpenPlayerNick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenPlayerNick);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrantRecord other) {
      if (other == null) {
        return;
      }
      if (other.GrantTime != 0) {
        GrantTime = other.GrantTime;
      }
      if (other.ExpireTime != 0) {
        ExpireTime = other.ExpireTime;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      if (other.Status != global::PlaneWar.GrantRedStatus.RedOpened) {
        Status = other.Status;
      }
      if (other.OpenPlayerNick.Length != 0) {
        OpenPlayerNick = other.OpenPlayerNick;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GrantTime = input.ReadInt32();
            break;
          }
          case 16: {
            ExpireTime = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt32();
            break;
          }
          case 32: {
            Status = (global::PlaneWar.GrantRedStatus) input.ReadEnum();
            break;
          }
          case 42: {
            OpenPlayerNick = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GrantTime = input.ReadInt32();
            break;
          }
          case 16: {
            ExpireTime = input.ReadInt32();
            break;
          }
          case 24: {
            Reward = input.ReadInt32();
            break;
          }
          case 32: {
            Status = (global::PlaneWar.GrantRedStatus) input.ReadEnum();
            break;
          }
          case 42: {
            OpenPlayerNick = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGrantCommonRedEnvelopeRecord : pb::IMessage<SCGrantCommonRedEnvelopeRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGrantCommonRedEnvelopeRecord> _parser = new pb::MessageParser<SCGrantCommonRedEnvelopeRecord>(() => new SCGrantCommonRedEnvelopeRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGrantCommonRedEnvelopeRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[212]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGrantCommonRedEnvelopeRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGrantCommonRedEnvelopeRecord(SCGrantCommonRedEnvelopeRecord other) : this() {
      recordList_ = other.recordList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGrantCommonRedEnvelopeRecord Clone() {
      return new SCGrantCommonRedEnvelopeRecord(this);
    }

    /// <summary>Field number for the "recordList" field.</summary>
    public const int RecordListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.GrantRecord> _repeated_recordList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.GrantRecord.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.GrantRecord> recordList_ = new pbc::RepeatedField<global::PlaneWar.GrantRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.GrantRecord> RecordList {
      get { return recordList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGrantCommonRedEnvelopeRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGrantCommonRedEnvelopeRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recordList_.Equals(other.recordList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recordList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      recordList_.WriteTo(output, _repeated_recordList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      recordList_.WriteTo(ref output, _repeated_recordList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recordList_.CalculateSize(_repeated_recordList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGrantCommonRedEnvelopeRecord other) {
      if (other == null) {
        return;
      }
      recordList_.Add(other.recordList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            recordList_.AddEntriesFrom(input, _repeated_recordList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            recordList_.AddEntriesFrom(ref input, _repeated_recordList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOpenCommonRedEnvelopeRecord : pb::IMessage<CSOpenCommonRedEnvelopeRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOpenCommonRedEnvelopeRecord> _parser = new pb::MessageParser<CSOpenCommonRedEnvelopeRecord>(() => new CSOpenCommonRedEnvelopeRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOpenCommonRedEnvelopeRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[213]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenCommonRedEnvelopeRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenCommonRedEnvelopeRecord(CSOpenCommonRedEnvelopeRecord other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenCommonRedEnvelopeRecord Clone() {
      return new CSOpenCommonRedEnvelopeRecord(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOpenCommonRedEnvelopeRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOpenCommonRedEnvelopeRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOpenCommonRedEnvelopeRecord other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class OpenRecord : pb::IMessage<OpenRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpenRecord> _parser = new pb::MessageParser<OpenRecord>(() => new OpenRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[214]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenRecord(OpenRecord other) : this() {
      sourcePlayerNick_ = other.sourcePlayerNick_;
      reward_ = other.reward_;
      openTime_ = other.openTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenRecord Clone() {
      return new OpenRecord(this);
    }

    /// <summary>Field number for the "sourcePlayerNick" field.</summary>
    public const int SourcePlayerNickFieldNumber = 1;
    private string sourcePlayerNick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourcePlayerNick {
      get { return sourcePlayerNick_; }
      set {
        sourcePlayerNick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "openTime" field.</summary>
    public const int OpenTimeFieldNumber = 3;
    private int openTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpenTime {
      get { return openTime_; }
      set {
        openTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourcePlayerNick != other.SourcePlayerNick) return false;
      if (Reward != other.Reward) return false;
      if (OpenTime != other.OpenTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourcePlayerNick.Length != 0) hash ^= SourcePlayerNick.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (OpenTime != 0) hash ^= OpenTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SourcePlayerNick.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SourcePlayerNick);
      }
      if (Reward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reward);
      }
      if (OpenTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OpenTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SourcePlayerNick.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SourcePlayerNick);
      }
      if (Reward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reward);
      }
      if (OpenTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OpenTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourcePlayerNick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourcePlayerNick);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (OpenTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenRecord other) {
      if (other == null) {
        return;
      }
      if (other.SourcePlayerNick.Length != 0) {
        SourcePlayerNick = other.SourcePlayerNick;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      if (other.OpenTime != 0) {
        OpenTime = other.OpenTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SourcePlayerNick = input.ReadString();
            break;
          }
          case 16: {
            Reward = input.ReadInt32();
            break;
          }
          case 24: {
            OpenTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SourcePlayerNick = input.ReadString();
            break;
          }
          case 16: {
            Reward = input.ReadInt32();
            break;
          }
          case 24: {
            OpenTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCOpenCommonRedEnvelopeRecord : pb::IMessage<SCOpenCommonRedEnvelopeRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCOpenCommonRedEnvelopeRecord> _parser = new pb::MessageParser<SCOpenCommonRedEnvelopeRecord>(() => new SCOpenCommonRedEnvelopeRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOpenCommonRedEnvelopeRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[215]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenCommonRedEnvelopeRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenCommonRedEnvelopeRecord(SCOpenCommonRedEnvelopeRecord other) : this() {
      recordList_ = other.recordList_.Clone();
      showRecordNum_ = other.showRecordNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenCommonRedEnvelopeRecord Clone() {
      return new SCOpenCommonRedEnvelopeRecord(this);
    }

    /// <summary>Field number for the "recordList" field.</summary>
    public const int RecordListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.OpenRecord> _repeated_recordList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.OpenRecord.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.OpenRecord> recordList_ = new pbc::RepeatedField<global::PlaneWar.OpenRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.OpenRecord> RecordList {
      get { return recordList_; }
    }

    /// <summary>Field number for the "showRecordNum" field.</summary>
    public const int ShowRecordNumFieldNumber = 2;
    private int showRecordNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShowRecordNum {
      get { return showRecordNum_; }
      set {
        showRecordNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOpenCommonRedEnvelopeRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOpenCommonRedEnvelopeRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recordList_.Equals(other.recordList_)) return false;
      if (ShowRecordNum != other.ShowRecordNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recordList_.GetHashCode();
      if (ShowRecordNum != 0) hash ^= ShowRecordNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      recordList_.WriteTo(output, _repeated_recordList_codec);
      if (ShowRecordNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShowRecordNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      recordList_.WriteTo(ref output, _repeated_recordList_codec);
      if (ShowRecordNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShowRecordNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recordList_.CalculateSize(_repeated_recordList_codec);
      if (ShowRecordNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShowRecordNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOpenCommonRedEnvelopeRecord other) {
      if (other == null) {
        return;
      }
      recordList_.Add(other.recordList_);
      if (other.ShowRecordNum != 0) {
        ShowRecordNum = other.ShowRecordNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            recordList_.AddEntriesFrom(input, _repeated_recordList_codec);
            break;
          }
          case 16: {
            ShowRecordNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            recordList_.AddEntriesFrom(ref input, _repeated_recordList_codec);
            break;
          }
          case 16: {
            ShowRecordNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCRedEnvelopeOpStatusNotify : pb::IMessage<SCRedEnvelopeOpStatusNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCRedEnvelopeOpStatusNotify> _parser = new pb::MessageParser<SCRedEnvelopeOpStatusNotify>(() => new SCRedEnvelopeOpStatusNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCRedEnvelopeOpStatusNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[216]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRedEnvelopeOpStatusNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRedEnvelopeOpStatusNotify(SCRedEnvelopeOpStatusNotify other) : this() {
      chair_ = other.chair_;
      status_ = other.status_;
      curMoney_ = other.curMoney_;
      upgradeInfo_ = other.upgradeInfo_ != null ? other.upgradeInfo_.Clone() : null;
      reward_ = other.reward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRedEnvelopeOpStatusNotify Clone() {
      return new SCRedEnvelopeOpStatusNotify(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::PlaneWar.RedOpStatus status_ = global::PlaneWar.RedOpStatus.RedOpClose;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RedOpStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "curMoney" field.</summary>
    public const int CurMoneyFieldNumber = 3;
    private long curMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMoney {
      get { return curMoney_; }
      set {
        curMoney_ = value;
      }
    }

    /// <summary>Field number for the "upgradeInfo" field.</summary>
    public const int UpgradeInfoFieldNumber = 4;
    private global::PlaneWar.RedUpgradeInfo upgradeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RedUpgradeInfo UpgradeInfo {
      get { return upgradeInfo_; }
      set {
        upgradeInfo_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 5;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCRedEnvelopeOpStatusNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCRedEnvelopeOpStatusNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (Status != other.Status) return false;
      if (CurMoney != other.CurMoney) return false;
      if (!object.Equals(UpgradeInfo, other.UpgradeInfo)) return false;
      if (Reward != other.Reward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (Status != global::PlaneWar.RedOpStatus.RedOpClose) hash ^= Status.GetHashCode();
      if (CurMoney != 0L) hash ^= CurMoney.GetHashCode();
      if (upgradeInfo_ != null) hash ^= UpgradeInfo.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Status != global::PlaneWar.RedOpStatus.RedOpClose) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurMoney);
      }
      if (upgradeInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UpgradeInfo);
      }
      if (Reward != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (Status != global::PlaneWar.RedOpStatus.RedOpClose) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (CurMoney != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurMoney);
      }
      if (upgradeInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UpgradeInfo);
      }
      if (Reward != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (Status != global::PlaneWar.RedOpStatus.RedOpClose) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (CurMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMoney);
      }
      if (upgradeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpgradeInfo);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCRedEnvelopeOpStatusNotify other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.Status != global::PlaneWar.RedOpStatus.RedOpClose) {
        Status = other.Status;
      }
      if (other.CurMoney != 0L) {
        CurMoney = other.CurMoney;
      }
      if (other.upgradeInfo_ != null) {
        if (upgradeInfo_ == null) {
          UpgradeInfo = new global::PlaneWar.RedUpgradeInfo();
        }
        UpgradeInfo.MergeFrom(other.UpgradeInfo);
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Status = (global::PlaneWar.RedOpStatus) input.ReadEnum();
            break;
          }
          case 24: {
            CurMoney = input.ReadInt64();
            break;
          }
          case 34: {
            if (upgradeInfo_ == null) {
              UpgradeInfo = new global::PlaneWar.RedUpgradeInfo();
            }
            input.ReadMessage(UpgradeInfo);
            break;
          }
          case 40: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            Status = (global::PlaneWar.RedOpStatus) input.ReadEnum();
            break;
          }
          case 24: {
            CurMoney = input.ReadInt64();
            break;
          }
          case 34: {
            if (upgradeInfo_ == null) {
              UpgradeInfo = new global::PlaneWar.RedUpgradeInfo();
            }
            input.ReadMessage(UpgradeInfo);
            break;
          }
          case 40: {
            Reward = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSyncWeaponState : pb::IMessage<CSSyncWeaponState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSyncWeaponState> _parser = new pb::MessageParser<CSSyncWeaponState>(() => new CSSyncWeaponState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncWeaponState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[217]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncWeaponState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncWeaponState(CSSyncWeaponState other) : this() {
      weaponId_ = other.weaponId_;
      chairId_ = other.chairId_;
      weaponUID_ = other.weaponUID_;
      weaponState_ = other.weaponState_ != null ? other.weaponState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncWeaponState Clone() {
      return new CSSyncWeaponState(this);
    }

    /// <summary>Field number for the "weaponId" field.</summary>
    public const int WeaponIdFieldNumber = 1;
    private int weaponId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    /// <summary>Field number for the "chairId" field.</summary>
    public const int ChairIdFieldNumber = 2;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "weaponUID" field.</summary>
    public const int WeaponUIDFieldNumber = 3;
    private int weaponUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponUID {
      get { return weaponUID_; }
      set {
        weaponUID_ = value;
      }
    }

    /// <summary>Field number for the "weaponState" field.</summary>
    public const int WeaponStateFieldNumber = 4;
    private global::PlaneWar.WeaponState weaponState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WeaponState WeaponState {
      get { return weaponState_; }
      set {
        weaponState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncWeaponState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncWeaponState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeaponId != other.WeaponId) return false;
      if (ChairId != other.ChairId) return false;
      if (WeaponUID != other.WeaponUID) return false;
      if (!object.Equals(WeaponState, other.WeaponState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (WeaponUID != 0) hash ^= WeaponUID.GetHashCode();
      if (weaponState_ != null) hash ^= WeaponState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WeaponId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WeaponId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (WeaponUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WeaponUID);
      }
      if (weaponState_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WeaponState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WeaponId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WeaponId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (WeaponUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WeaponUID);
      }
      if (weaponState_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WeaponState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeaponId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (WeaponUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponUID);
      }
      if (weaponState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeaponState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncWeaponState other) {
      if (other == null) {
        return;
      }
      if (other.WeaponId != 0) {
        WeaponId = other.WeaponId;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.WeaponUID != 0) {
        WeaponUID = other.WeaponUID;
      }
      if (other.weaponState_ != null) {
        if (weaponState_ == null) {
          WeaponState = new global::PlaneWar.WeaponState();
        }
        WeaponState.MergeFrom(other.WeaponState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WeaponId = input.ReadInt32();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            WeaponUID = input.ReadInt32();
            break;
          }
          case 34: {
            if (weaponState_ == null) {
              WeaponState = new global::PlaneWar.WeaponState();
            }
            input.ReadMessage(WeaponState);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WeaponId = input.ReadInt32();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            WeaponUID = input.ReadInt32();
            break;
          }
          case 34: {
            if (weaponState_ == null) {
              WeaponState = new global::PlaneWar.WeaponState();
            }
            input.ReadMessage(WeaponState);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncWeaponState : pb::IMessage<SCSyncWeaponState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncWeaponState> _parser = new pb::MessageParser<SCSyncWeaponState>(() => new SCSyncWeaponState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncWeaponState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[218]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncWeaponState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncWeaponState(SCSyncWeaponState other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncWeaponState Clone() {
      return new SCSyncWeaponState(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncWeaponState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncWeaponState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncWeaponState other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class CSPreHit : pb::IMessage<CSPreHit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSPreHit> _parser = new pb::MessageParser<CSPreHit>(() => new CSPreHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPreHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[219]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPreHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPreHit(CSPreHit other) : this() {
      ratio_ = other.ratio_;
      bulletType_ = other.bulletType_;
      sourceUID_ = other.sourceUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPreHit Clone() {
      return new CSPreHit(this);
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 1;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 2;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 3;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSPreHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSPreHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ratio != other.Ratio) return false;
      if (BulletType != other.BulletType) return false;
      if (SourceUID != other.SourceUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ratio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ratio);
      }
      if (BulletType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletType);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ratio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ratio);
      }
      if (BulletType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletType);
      }
      if (SourceUID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSPreHit other) {
      if (other == null) {
        return;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ratio = input.ReadInt32();
            break;
          }
          case 16: {
            BulletType = input.ReadInt32();
            break;
          }
          case 24: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ratio = input.ReadInt32();
            break;
          }
          case 16: {
            BulletType = input.ReadInt32();
            break;
          }
          case 24: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCPreHit : pb::IMessage<SCPreHit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPreHit> _parser = new pb::MessageParser<SCPreHit>(() => new SCPreHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPreHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[220]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPreHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPreHit(SCPreHit other) : this() {
      weaponUID_ = other.weaponUID_;
      hitMode_ = other.hitMode_ != null ? other.hitMode_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPreHit Clone() {
      return new SCPreHit(this);
    }

    /// <summary>Field number for the "weaponUID" field.</summary>
    public const int WeaponUIDFieldNumber = 1;
    private int weaponUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponUID {
      get { return weaponUID_; }
      set {
        weaponUID_ = value;
      }
    }

    /// <summary>Field number for the "hitMode" field.</summary>
    public const int HitModeFieldNumber = 2;
    private global::PlaneWar.HitMode hitMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.HitMode HitMode {
      get { return hitMode_; }
      set {
        hitMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPreHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPreHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WeaponUID != other.WeaponUID) return false;
      if (!object.Equals(HitMode, other.HitMode)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WeaponUID != 0) hash ^= WeaponUID.GetHashCode();
      if (hitMode_ != null) hash ^= HitMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WeaponUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WeaponUID);
      }
      if (hitMode_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HitMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WeaponUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WeaponUID);
      }
      if (hitMode_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HitMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WeaponUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponUID);
      }
      if (hitMode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HitMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPreHit other) {
      if (other == null) {
        return;
      }
      if (other.WeaponUID != 0) {
        WeaponUID = other.WeaponUID;
      }
      if (other.hitMode_ != null) {
        if (hitMode_ == null) {
          HitMode = new global::PlaneWar.HitMode();
        }
        HitMode.MergeFrom(other.HitMode);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WeaponUID = input.ReadInt32();
            break;
          }
          case 18: {
            if (hitMode_ == null) {
              HitMode = new global::PlaneWar.HitMode();
            }
            input.ReadMessage(HitMode);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WeaponUID = input.ReadInt32();
            break;
          }
          case 18: {
            if (hitMode_ == null) {
              HitMode = new global::PlaneWar.HitMode();
            }
            input.ReadMessage(HitMode);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Animation : pb::IMessage<Animation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Animation> _parser = new pb::MessageParser<Animation>(() => new Animation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[221]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation(Animation other) : this() {
      animationID_ = other.animationID_;
      animationMsg_ = other.animationMsg_;
      chair_ = other.chair_;
      monsterUID_ = other.monsterUID_;
      bulletType_ = other.bulletType_;
      earn_ = other.earn_;
      originUID_ = other.originUID_;
      multipleList_ = other.multipleList_.Clone();
      ratio_ = other.ratio_;
      fortuneJson_ = other.fortuneJson_ != null ? other.fortuneJson_.Clone() : null;
      goldenToadJson_ = other.goldenToadJson_ != null ? other.goldenToadJson_.Clone() : null;
      diceJson_ = other.diceJson_ != null ? other.diceJson_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation Clone() {
      return new Animation(this);
    }

    /// <summary>Field number for the "animationID" field.</summary>
    public const int AnimationIDFieldNumber = 1;
    private int animationID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationID {
      get { return animationID_; }
      set {
        animationID_ = value;
      }
    }

    /// <summary>Field number for the "animationMsg" field.</summary>
    public const int AnimationMsgFieldNumber = 2;
    private string animationMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimationMsg {
      get { return animationMsg_; }
      set {
        animationMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 3;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "monsterUID" field.</summary>
    public const int MonsterUIDFieldNumber = 4;
    private int monsterUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterUID {
      get { return monsterUID_; }
      set {
        monsterUID_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 5;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "earn" field.</summary>
    public const int EarnFieldNumber = 6;
    private int earn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Earn {
      get { return earn_; }
      set {
        earn_ = value;
      }
    }

    /// <summary>Field number for the "originUID" field.</summary>
    public const int OriginUIDFieldNumber = 7;
    private int originUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUID {
      get { return originUID_; }
      set {
        originUID_ = value;
      }
    }

    /// <summary>Field number for the "multipleList" field.</summary>
    public const int MultipleListFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_multipleList_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> multipleList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MultipleList {
      get { return multipleList_; }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 9;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "fortuneJson" field.</summary>
    public const int FortuneJsonFieldNumber = 10;
    private global::PlaneWar.FortuneWheelJson fortuneJson_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.FortuneWheelJson FortuneJson {
      get { return fortuneJson_; }
      set {
        fortuneJson_ = value;
      }
    }

    /// <summary>Field number for the "goldenToadJson" field.</summary>
    public const int GoldenToadJsonFieldNumber = 11;
    private global::PlaneWar.GoldenToadJson goldenToadJson_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GoldenToadJson GoldenToadJson {
      get { return goldenToadJson_; }
      set {
        goldenToadJson_ = value;
      }
    }

    /// <summary>Field number for the "diceJson" field.</summary>
    public const int DiceJsonFieldNumber = 12;
    private global::PlaneWar.DiceJson diceJson_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.DiceJson DiceJson {
      get { return diceJson_; }
      set {
        diceJson_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnimationID != other.AnimationID) return false;
      if (AnimationMsg != other.AnimationMsg) return false;
      if (Chair != other.Chair) return false;
      if (MonsterUID != other.MonsterUID) return false;
      if (BulletType != other.BulletType) return false;
      if (Earn != other.Earn) return false;
      if (OriginUID != other.OriginUID) return false;
      if(!multipleList_.Equals(other.multipleList_)) return false;
      if (Ratio != other.Ratio) return false;
      if (!object.Equals(FortuneJson, other.FortuneJson)) return false;
      if (!object.Equals(GoldenToadJson, other.GoldenToadJson)) return false;
      if (!object.Equals(DiceJson, other.DiceJson)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnimationID != 0) hash ^= AnimationID.GetHashCode();
      if (AnimationMsg.Length != 0) hash ^= AnimationMsg.GetHashCode();
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (MonsterUID != 0) hash ^= MonsterUID.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (Earn != 0) hash ^= Earn.GetHashCode();
      if (OriginUID != 0) hash ^= OriginUID.GetHashCode();
      hash ^= multipleList_.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (fortuneJson_ != null) hash ^= FortuneJson.GetHashCode();
      if (goldenToadJson_ != null) hash ^= GoldenToadJson.GetHashCode();
      if (diceJson_ != null) hash ^= DiceJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AnimationID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AnimationID);
      }
      if (AnimationMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AnimationMsg);
      }
      if (Chair != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Chair);
      }
      if (MonsterUID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MonsterUID);
      }
      if (BulletType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletType);
      }
      if (Earn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Earn);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OriginUID);
      }
      multipleList_.WriteTo(output, _repeated_multipleList_codec);
      if (Ratio != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Ratio);
      }
      if (fortuneJson_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(FortuneJson);
      }
      if (goldenToadJson_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(GoldenToadJson);
      }
      if (diceJson_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DiceJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AnimationID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AnimationID);
      }
      if (AnimationMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AnimationMsg);
      }
      if (Chair != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Chair);
      }
      if (MonsterUID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MonsterUID);
      }
      if (BulletType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletType);
      }
      if (Earn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Earn);
      }
      if (OriginUID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OriginUID);
      }
      multipleList_.WriteTo(ref output, _repeated_multipleList_codec);
      if (Ratio != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Ratio);
      }
      if (fortuneJson_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(FortuneJson);
      }
      if (goldenToadJson_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(GoldenToadJson);
      }
      if (diceJson_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DiceJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnimationID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationID);
      }
      if (AnimationMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnimationMsg);
      }
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (MonsterUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterUID);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (Earn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Earn);
      }
      if (OriginUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUID);
      }
      size += multipleList_.CalculateSize(_repeated_multipleList_codec);
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (fortuneJson_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FortuneJson);
      }
      if (goldenToadJson_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoldenToadJson);
      }
      if (diceJson_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiceJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animation other) {
      if (other == null) {
        return;
      }
      if (other.AnimationID != 0) {
        AnimationID = other.AnimationID;
      }
      if (other.AnimationMsg.Length != 0) {
        AnimationMsg = other.AnimationMsg;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.MonsterUID != 0) {
        MonsterUID = other.MonsterUID;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.Earn != 0) {
        Earn = other.Earn;
      }
      if (other.OriginUID != 0) {
        OriginUID = other.OriginUID;
      }
      multipleList_.Add(other.multipleList_);
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.fortuneJson_ != null) {
        if (fortuneJson_ == null) {
          FortuneJson = new global::PlaneWar.FortuneWheelJson();
        }
        FortuneJson.MergeFrom(other.FortuneJson);
      }
      if (other.goldenToadJson_ != null) {
        if (goldenToadJson_ == null) {
          GoldenToadJson = new global::PlaneWar.GoldenToadJson();
        }
        GoldenToadJson.MergeFrom(other.GoldenToadJson);
      }
      if (other.diceJson_ != null) {
        if (diceJson_ == null) {
          DiceJson = new global::PlaneWar.DiceJson();
        }
        DiceJson.MergeFrom(other.DiceJson);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AnimationID = input.ReadInt32();
            break;
          }
          case 18: {
            AnimationMsg = input.ReadString();
            break;
          }
          case 24: {
            Chair = input.ReadInt32();
            break;
          }
          case 32: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 40: {
            BulletType = input.ReadInt32();
            break;
          }
          case 48: {
            Earn = input.ReadInt32();
            break;
          }
          case 56: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            multipleList_.AddEntriesFrom(input, _repeated_multipleList_codec);
            break;
          }
          case 72: {
            Ratio = input.ReadInt32();
            break;
          }
          case 82: {
            if (fortuneJson_ == null) {
              FortuneJson = new global::PlaneWar.FortuneWheelJson();
            }
            input.ReadMessage(FortuneJson);
            break;
          }
          case 90: {
            if (goldenToadJson_ == null) {
              GoldenToadJson = new global::PlaneWar.GoldenToadJson();
            }
            input.ReadMessage(GoldenToadJson);
            break;
          }
          case 98: {
            if (diceJson_ == null) {
              DiceJson = new global::PlaneWar.DiceJson();
            }
            input.ReadMessage(DiceJson);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AnimationID = input.ReadInt32();
            break;
          }
          case 18: {
            AnimationMsg = input.ReadString();
            break;
          }
          case 24: {
            Chair = input.ReadInt32();
            break;
          }
          case 32: {
            MonsterUID = input.ReadInt32();
            break;
          }
          case 40: {
            BulletType = input.ReadInt32();
            break;
          }
          case 48: {
            Earn = input.ReadInt32();
            break;
          }
          case 56: {
            OriginUID = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            multipleList_.AddEntriesFrom(ref input, _repeated_multipleList_codec);
            break;
          }
          case 72: {
            Ratio = input.ReadInt32();
            break;
          }
          case 82: {
            if (fortuneJson_ == null) {
              FortuneJson = new global::PlaneWar.FortuneWheelJson();
            }
            input.ReadMessage(FortuneJson);
            break;
          }
          case 90: {
            if (goldenToadJson_ == null) {
              GoldenToadJson = new global::PlaneWar.GoldenToadJson();
            }
            input.ReadMessage(GoldenToadJson);
            break;
          }
          case 98: {
            if (diceJson_ == null) {
              DiceJson = new global::PlaneWar.DiceJson();
            }
            input.ReadMessage(DiceJson);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DiceJson : pb::IMessage<DiceJson>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiceJson> _parser = new pb::MessageParser<DiceJson>(() => new DiceJson());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiceJson> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[222]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceJson() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceJson(DiceJson other) : this() {
      step_ = other.step_;
      dice_ = other.dice_.Clone();
      mulList_ = other.mulList_.Clone();
      mulPosList_ = other.mulPosList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceJson Clone() {
      return new DiceJson(this);
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 1;
    private int step_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "dice" field.</summary>
    public const int DiceFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.Dice> _repeated_dice_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.Dice.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.Dice> dice_ = new pbc::RepeatedField<global::PlaneWar.Dice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.Dice> Dice {
      get { return dice_; }
    }

    /// <summary>Field number for the "mulList" field.</summary>
    public const int MulListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PlaneWar.Dice> _repeated_mulList_codec
        = pb::FieldCodec.ForMessage(26, global::PlaneWar.Dice.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.Dice> mulList_ = new pbc::RepeatedField<global::PlaneWar.Dice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.Dice> MulList {
      get { return mulList_; }
    }

    /// <summary>Field number for the "mulPosList" field.</summary>
    public const int MulPosListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::PlaneWar.Pos> _repeated_mulPosList_codec
        = pb::FieldCodec.ForMessage(34, global::PlaneWar.Pos.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.Pos> mulPosList_ = new pbc::RepeatedField<global::PlaneWar.Pos>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.Pos> MulPosList {
      get { return mulPosList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiceJson);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiceJson other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Step != other.Step) return false;
      if(!dice_.Equals(other.dice_)) return false;
      if(!mulList_.Equals(other.mulList_)) return false;
      if(!mulPosList_.Equals(other.mulPosList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Step != 0) hash ^= Step.GetHashCode();
      hash ^= dice_.GetHashCode();
      hash ^= mulList_.GetHashCode();
      hash ^= mulPosList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Step != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Step);
      }
      dice_.WriteTo(output, _repeated_dice_codec);
      mulList_.WriteTo(output, _repeated_mulList_codec);
      mulPosList_.WriteTo(output, _repeated_mulPosList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Step != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Step);
      }
      dice_.WriteTo(ref output, _repeated_dice_codec);
      mulList_.WriteTo(ref output, _repeated_mulList_codec);
      mulPosList_.WriteTo(ref output, _repeated_mulPosList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      size += dice_.CalculateSize(_repeated_dice_codec);
      size += mulList_.CalculateSize(_repeated_mulList_codec);
      size += mulPosList_.CalculateSize(_repeated_mulPosList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiceJson other) {
      if (other == null) {
        return;
      }
      if (other.Step != 0) {
        Step = other.Step;
      }
      dice_.Add(other.dice_);
      mulList_.Add(other.mulList_);
      mulPosList_.Add(other.mulPosList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Step = input.ReadInt32();
            break;
          }
          case 18: {
            dice_.AddEntriesFrom(input, _repeated_dice_codec);
            break;
          }
          case 26: {
            mulList_.AddEntriesFrom(input, _repeated_mulList_codec);
            break;
          }
          case 34: {
            mulPosList_.AddEntriesFrom(input, _repeated_mulPosList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Step = input.ReadInt32();
            break;
          }
          case 18: {
            dice_.AddEntriesFrom(ref input, _repeated_dice_codec);
            break;
          }
          case 26: {
            mulList_.AddEntriesFrom(ref input, _repeated_mulList_codec);
            break;
          }
          case 34: {
            mulPosList_.AddEntriesFrom(ref input, _repeated_mulPosList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FortuneWheelJson : pb::IMessage<FortuneWheelJson>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FortuneWheelJson> _parser = new pb::MessageParser<FortuneWheelJson>(() => new FortuneWheelJson());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FortuneWheelJson> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[223]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortuneWheelJson() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortuneWheelJson(FortuneWheelJson other) : this() {
      result_ = other.result_.Clone();
      site_ = other.site_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortuneWheelJson Clone() {
      return new FortuneWheelJson(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.FortuneWheelInfo> _repeated_result_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.FortuneWheelInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.FortuneWheelInfo> result_ = new pbc::RepeatedField<global::PlaneWar.FortuneWheelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.FortuneWheelInfo> Result {
      get { return result_; }
    }

    /// <summary>Field number for the "site" field.</summary>
    public const int SiteFieldNumber = 2;
    private int site_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Site {
      get { return site_; }
      set {
        site_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FortuneWheelJson);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FortuneWheelJson other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!result_.Equals(other.result_)) return false;
      if (Site != other.Site) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= result_.GetHashCode();
      if (Site != 0) hash ^= Site.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      result_.WriteTo(output, _repeated_result_codec);
      if (Site != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Site);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      result_.WriteTo(ref output, _repeated_result_codec);
      if (Site != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Site);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += result_.CalculateSize(_repeated_result_codec);
      if (Site != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Site);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FortuneWheelJson other) {
      if (other == null) {
        return;
      }
      result_.Add(other.result_);
      if (other.Site != 0) {
        Site = other.Site;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
          case 16: {
            Site = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            result_.AddEntriesFrom(ref input, _repeated_result_codec);
            break;
          }
          case 16: {
            Site = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GoldenToadJson : pb::IMessage<GoldenToadJson>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GoldenToadJson> _parser = new pb::MessageParser<GoldenToadJson>(() => new GoldenToadJson());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoldenToadJson> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[224]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldenToadJson() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldenToadJson(GoldenToadJson other) : this() {
      orderList_ = other.orderList_.Clone();
      totalRatio_ = other.totalRatio_;
      ratio_ = other.ratio_;
      step_ = other.step_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoldenToadJson Clone() {
      return new GoldenToadJson(this);
    }

    /// <summary>Field number for the "orderList" field.</summary>
    public const int OrderListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.OrderData> _repeated_orderList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.OrderData.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.OrderData> orderList_ = new pbc::RepeatedField<global::PlaneWar.OrderData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.OrderData> OrderList {
      get { return orderList_; }
    }

    /// <summary>Field number for the "totalRatio" field.</summary>
    public const int TotalRatioFieldNumber = 2;
    private int totalRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRatio {
      get { return totalRatio_; }
      set {
        totalRatio_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 3;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 4;
    private int step_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoldenToadJson);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoldenToadJson other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!orderList_.Equals(other.orderList_)) return false;
      if (TotalRatio != other.TotalRatio) return false;
      if (Ratio != other.Ratio) return false;
      if (Step != other.Step) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= orderList_.GetHashCode();
      if (TotalRatio != 0) hash ^= TotalRatio.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (Step != 0) hash ^= Step.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      orderList_.WriteTo(output, _repeated_orderList_codec);
      if (TotalRatio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalRatio);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (Step != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Step);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      orderList_.WriteTo(ref output, _repeated_orderList_codec);
      if (TotalRatio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalRatio);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (Step != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Step);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orderList_.CalculateSize(_repeated_orderList_codec);
      if (TotalRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRatio);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoldenToadJson other) {
      if (other == null) {
        return;
      }
      orderList_.Add(other.orderList_);
      if (other.TotalRatio != 0) {
        TotalRatio = other.TotalRatio;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.Step != 0) {
        Step = other.Step;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            orderList_.AddEntriesFrom(input, _repeated_orderList_codec);
            break;
          }
          case 16: {
            TotalRatio = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            Step = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            orderList_.AddEntriesFrom(ref input, _repeated_orderList_codec);
            break;
          }
          case 16: {
            TotalRatio = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            Step = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OrderData : pb::IMessage<OrderData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OrderData> _parser = new pb::MessageParser<OrderData>(() => new OrderData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[225]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderData(OrderData other) : this() {
      type_ = other.type_;
      ratio_ = other.ratio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderData Clone() {
      return new OrderData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 2;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Ratio != other.Ratio) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderData other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSyncAnimation : pb::IMessage<CSSyncAnimation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSyncAnimation> _parser = new pb::MessageParser<CSSyncAnimation>(() => new CSSyncAnimation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[226]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncAnimation(CSSyncAnimation other) : this() {
      animation_ = other.animation_ != null ? other.animation_.Clone() : null;
      isComplete_ = other.isComplete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncAnimation Clone() {
      return new CSSyncAnimation(this);
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 1;
    private global::PlaneWar.Animation animation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Animation Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "isComplete" field.</summary>
    public const int IsCompleteFieldNumber = 2;
    private bool isComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsComplete {
      get { return isComplete_; }
      set {
        isComplete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Animation, other.Animation)) return false;
      if (IsComplete != other.IsComplete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (animation_ != null) hash ^= Animation.GetHashCode();
      if (IsComplete != false) hash ^= IsComplete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (animation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Animation);
      }
      if (IsComplete != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsComplete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (animation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Animation);
      }
      if (IsComplete != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsComplete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (animation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animation);
      }
      if (IsComplete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncAnimation other) {
      if (other == null) {
        return;
      }
      if (other.animation_ != null) {
        if (animation_ == null) {
          Animation = new global::PlaneWar.Animation();
        }
        Animation.MergeFrom(other.Animation);
      }
      if (other.IsComplete != false) {
        IsComplete = other.IsComplete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (animation_ == null) {
              Animation = new global::PlaneWar.Animation();
            }
            input.ReadMessage(Animation);
            break;
          }
          case 16: {
            IsComplete = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (animation_ == null) {
              Animation = new global::PlaneWar.Animation();
            }
            input.ReadMessage(Animation);
            break;
          }
          case 16: {
            IsComplete = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncAnimation : pb::IMessage<SCSyncAnimation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncAnimation> _parser = new pb::MessageParser<SCSyncAnimation>(() => new SCSyncAnimation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[227]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncAnimation(SCSyncAnimation other) : this() {
      animation_ = other.animation_ != null ? other.animation_.Clone() : null;
      isComplete_ = other.isComplete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncAnimation Clone() {
      return new SCSyncAnimation(this);
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 1;
    private global::PlaneWar.Animation animation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Animation Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "isComplete" field.</summary>
    public const int IsCompleteFieldNumber = 2;
    private bool isComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsComplete {
      get { return isComplete_; }
      set {
        isComplete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Animation, other.Animation)) return false;
      if (IsComplete != other.IsComplete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (animation_ != null) hash ^= Animation.GetHashCode();
      if (IsComplete != false) hash ^= IsComplete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (animation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Animation);
      }
      if (IsComplete != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsComplete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (animation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Animation);
      }
      if (IsComplete != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsComplete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (animation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animation);
      }
      if (IsComplete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncAnimation other) {
      if (other == null) {
        return;
      }
      if (other.animation_ != null) {
        if (animation_ == null) {
          Animation = new global::PlaneWar.Animation();
        }
        Animation.MergeFrom(other.Animation);
      }
      if (other.IsComplete != false) {
        IsComplete = other.IsComplete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (animation_ == null) {
              Animation = new global::PlaneWar.Animation();
            }
            input.ReadMessage(Animation);
            break;
          }
          case 16: {
            IsComplete = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (animation_ == null) {
              Animation = new global::PlaneWar.Animation();
            }
            input.ReadMessage(Animation);
            break;
          }
          case 16: {
            IsComplete = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetAnimations : pb::IMessage<SCGetAnimations>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetAnimations> _parser = new pb::MessageParser<SCGetAnimations>(() => new SCGetAnimations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetAnimations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[228]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetAnimations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetAnimations(SCGetAnimations other) : this() {
      animations_ = other.animations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetAnimations Clone() {
      return new SCGetAnimations(this);
    }

    /// <summary>Field number for the "animations" field.</summary>
    public const int AnimationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.Animation> _repeated_animations_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.Animation.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.Animation> animations_ = new pbc::RepeatedField<global::PlaneWar.Animation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.Animation> Animations {
      get { return animations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetAnimations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetAnimations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!animations_.Equals(other.animations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= animations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      animations_.WriteTo(output, _repeated_animations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      animations_.WriteTo(ref output, _repeated_animations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += animations_.CalculateSize(_repeated_animations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetAnimations other) {
      if (other == null) {
        return;
      }
      animations_.Add(other.animations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            animations_.AddEntriesFrom(input, _repeated_animations_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            animations_.AddEntriesFrom(ref input, _repeated_animations_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GradeRankDetail : pb::IMessage<GradeRankDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GradeRankDetail> _parser = new pb::MessageParser<GradeRankDetail>(() => new GradeRankDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeRankDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[229]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRankDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRankDetail(GradeRankDetail other) : this() {
      rankIndex_ = other.rankIndex_;
      rankName_ = other.rankName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRankDetail Clone() {
      return new GradeRankDetail(this);
    }

    /// <summary>Field number for the "rankIndex" field.</summary>
    public const int RankIndexFieldNumber = 1;
    private int rankIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankIndex {
      get { return rankIndex_; }
      set {
        rankIndex_ = value;
      }
    }

    /// <summary>Field number for the "rankName" field.</summary>
    public const int RankNameFieldNumber = 2;
    private string rankName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RankName {
      get { return rankName_; }
      set {
        rankName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeRankDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeRankDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RankIndex != other.RankIndex) return false;
      if (RankName != other.RankName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RankIndex != 0) hash ^= RankIndex.GetHashCode();
      if (RankName.Length != 0) hash ^= RankName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RankIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RankIndex);
      }
      if (RankName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RankName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RankIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RankIndex);
      }
      if (RankName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RankName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RankIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankIndex);
      }
      if (RankName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RankName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeRankDetail other) {
      if (other == null) {
        return;
      }
      if (other.RankIndex != 0) {
        RankIndex = other.RankIndex;
      }
      if (other.RankName.Length != 0) {
        RankName = other.RankName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RankIndex = input.ReadInt32();
            break;
          }
          case 18: {
            RankName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RankIndex = input.ReadInt32();
            break;
          }
          case 18: {
            RankName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GradeRankConfig : pb::IMessage<GradeRankConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GradeRankConfig> _parser = new pb::MessageParser<GradeRankConfig>(() => new GradeRankConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeRankConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[230]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRankConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRankConfig(GradeRankConfig other) : this() {
      gradeRankDetail_ = other.gradeRankDetail_.Clone();
      rankListLen_ = other.rankListLen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRankConfig Clone() {
      return new GradeRankConfig(this);
    }

    /// <summary>Field number for the "gradeRankDetail" field.</summary>
    public const int GradeRankDetailFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.GradeRankDetail> _repeated_gradeRankDetail_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.GradeRankDetail.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.GradeRankDetail> gradeRankDetail_ = new pbc::RepeatedField<global::PlaneWar.GradeRankDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.GradeRankDetail> GradeRankDetail {
      get { return gradeRankDetail_; }
    }

    /// <summary>Field number for the "rankListLen" field.</summary>
    public const int RankListLenFieldNumber = 2;
    private int rankListLen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RankListLen {
      get { return rankListLen_; }
      set {
        rankListLen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeRankConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeRankConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gradeRankDetail_.Equals(other.gradeRankDetail_)) return false;
      if (RankListLen != other.RankListLen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gradeRankDetail_.GetHashCode();
      if (RankListLen != 0) hash ^= RankListLen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gradeRankDetail_.WriteTo(output, _repeated_gradeRankDetail_codec);
      if (RankListLen != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RankListLen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gradeRankDetail_.WriteTo(ref output, _repeated_gradeRankDetail_codec);
      if (RankListLen != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RankListLen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gradeRankDetail_.CalculateSize(_repeated_gradeRankDetail_codec);
      if (RankListLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankListLen);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeRankConfig other) {
      if (other == null) {
        return;
      }
      gradeRankDetail_.Add(other.gradeRankDetail_);
      if (other.RankListLen != 0) {
        RankListLen = other.RankListLen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gradeRankDetail_.AddEntriesFrom(input, _repeated_gradeRankDetail_codec);
            break;
          }
          case 16: {
            RankListLen = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gradeRankDetail_.AddEntriesFrom(ref input, _repeated_gradeRankDetail_codec);
            break;
          }
          case 16: {
            RankListLen = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WareGivingInfo : pb::IMessage<WareGivingInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WareGivingInfo> _parser = new pb::MessageParser<WareGivingInfo>(() => new WareGivingInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WareGivingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[231]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WareGivingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WareGivingInfo(WareGivingInfo other) : this() {
      propId_ = other.propId_;
      propName_ = other.propName_;
      ratio_ = other.ratio_;
      noRepeat_ = other.noRepeat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WareGivingInfo Clone() {
      return new WareGivingInfo(this);
    }

    /// <summary>Field number for the "propId" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "propName" field.</summary>
    public const int PropNameFieldNumber = 2;
    private string propName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PropName {
      get { return propName_; }
      set {
        propName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 3;
    private float ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "noRepeat" field.</summary>
    public const int NoRepeatFieldNumber = 4;
    private bool noRepeat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoRepeat {
      get { return noRepeat_; }
      set {
        noRepeat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WareGivingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WareGivingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropId != other.PropId) return false;
      if (PropName != other.PropName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ratio, other.Ratio)) return false;
      if (NoRepeat != other.NoRepeat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (PropName.Length != 0) hash ^= PropName.GetHashCode();
      if (Ratio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ratio);
      if (NoRepeat != false) hash ^= NoRepeat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (PropName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PropName);
      }
      if (Ratio != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Ratio);
      }
      if (NoRepeat != false) {
        output.WriteRawTag(32);
        output.WriteBool(NoRepeat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (PropName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PropName);
      }
      if (Ratio != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Ratio);
      }
      if (NoRepeat != false) {
        output.WriteRawTag(32);
        output.WriteBool(NoRepeat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (PropName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropName);
      }
      if (Ratio != 0F) {
        size += 1 + 4;
      }
      if (NoRepeat != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WareGivingInfo other) {
      if (other == null) {
        return;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.PropName.Length != 0) {
        PropName = other.PropName;
      }
      if (other.Ratio != 0F) {
        Ratio = other.Ratio;
      }
      if (other.NoRepeat != false) {
        NoRepeat = other.NoRepeat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 18: {
            PropName = input.ReadString();
            break;
          }
          case 29: {
            Ratio = input.ReadFloat();
            break;
          }
          case 32: {
            NoRepeat = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 18: {
            PropName = input.ReadString();
            break;
          }
          case 29: {
            Ratio = input.ReadFloat();
            break;
          }
          case 32: {
            NoRepeat = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WareInfo : pb::IMessage<WareInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WareInfo> _parser = new pb::MessageParser<WareInfo>(() => new WareInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WareInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[232]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WareInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WareInfo(WareInfo other) : this() {
      wareId_ = other.wareId_;
      wareGivingInfoList_ = other.wareGivingInfoList_.Clone();
      minMoney_ = other.minMoney_;
      maxMoney_ = other.maxMoney_;
      price_ = other.price_;
      wareGivingProInfoList_ = other.wareGivingProInfoList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WareInfo Clone() {
      return new WareInfo(this);
    }

    /// <summary>Field number for the "wareId" field.</summary>
    public const int WareIdFieldNumber = 1;
    private string wareId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WareId {
      get { return wareId_; }
      set {
        wareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wareGivingInfoList" field.</summary>
    public const int WareGivingInfoListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.WareGivingInfo> _repeated_wareGivingInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.WareGivingInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.WareGivingInfo> wareGivingInfoList_ = new pbc::RepeatedField<global::PlaneWar.WareGivingInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.WareGivingInfo> WareGivingInfoList {
      get { return wareGivingInfoList_; }
    }

    /// <summary>Field number for the "minMoney" field.</summary>
    public const int MinMoneyFieldNumber = 3;
    private int minMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinMoney {
      get { return minMoney_; }
      set {
        minMoney_ = value;
      }
    }

    /// <summary>Field number for the "maxMoney" field.</summary>
    public const int MaxMoneyFieldNumber = 4;
    private int maxMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMoney {
      get { return maxMoney_; }
      set {
        maxMoney_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 5;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "wareGivingProInfoList" field.</summary>
    public const int WareGivingProInfoListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::PlaneWar.WareGivingInfo> _repeated_wareGivingProInfoList_codec
        = pb::FieldCodec.ForMessage(50, global::PlaneWar.WareGivingInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.WareGivingInfo> wareGivingProInfoList_ = new pbc::RepeatedField<global::PlaneWar.WareGivingInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.WareGivingInfo> WareGivingProInfoList {
      get { return wareGivingProInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WareInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WareInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WareId != other.WareId) return false;
      if(!wareGivingInfoList_.Equals(other.wareGivingInfoList_)) return false;
      if (MinMoney != other.MinMoney) return false;
      if (MaxMoney != other.MaxMoney) return false;
      if (Price != other.Price) return false;
      if(!wareGivingProInfoList_.Equals(other.wareGivingProInfoList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WareId.Length != 0) hash ^= WareId.GetHashCode();
      hash ^= wareGivingInfoList_.GetHashCode();
      if (MinMoney != 0) hash ^= MinMoney.GetHashCode();
      if (MaxMoney != 0) hash ^= MaxMoney.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      hash ^= wareGivingProInfoList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WareId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WareId);
      }
      wareGivingInfoList_.WriteTo(output, _repeated_wareGivingInfoList_codec);
      if (MinMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinMoney);
      }
      if (MaxMoney != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxMoney);
      }
      if (Price != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Price);
      }
      wareGivingProInfoList_.WriteTo(output, _repeated_wareGivingProInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WareId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WareId);
      }
      wareGivingInfoList_.WriteTo(ref output, _repeated_wareGivingInfoList_codec);
      if (MinMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinMoney);
      }
      if (MaxMoney != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxMoney);
      }
      if (Price != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Price);
      }
      wareGivingProInfoList_.WriteTo(ref output, _repeated_wareGivingProInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WareId);
      }
      size += wareGivingInfoList_.CalculateSize(_repeated_wareGivingInfoList_codec);
      if (MinMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinMoney);
      }
      if (MaxMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMoney);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      size += wareGivingProInfoList_.CalculateSize(_repeated_wareGivingProInfoList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WareInfo other) {
      if (other == null) {
        return;
      }
      if (other.WareId.Length != 0) {
        WareId = other.WareId;
      }
      wareGivingInfoList_.Add(other.wareGivingInfoList_);
      if (other.MinMoney != 0) {
        MinMoney = other.MinMoney;
      }
      if (other.MaxMoney != 0) {
        MaxMoney = other.MaxMoney;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      wareGivingProInfoList_.Add(other.wareGivingProInfoList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WareId = input.ReadString();
            break;
          }
          case 18: {
            wareGivingInfoList_.AddEntriesFrom(input, _repeated_wareGivingInfoList_codec);
            break;
          }
          case 24: {
            MinMoney = input.ReadInt32();
            break;
          }
          case 32: {
            MaxMoney = input.ReadInt32();
            break;
          }
          case 40: {
            Price = input.ReadInt32();
            break;
          }
          case 50: {
            wareGivingProInfoList_.AddEntriesFrom(input, _repeated_wareGivingProInfoList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            WareId = input.ReadString();
            break;
          }
          case 18: {
            wareGivingInfoList_.AddEntriesFrom(ref input, _repeated_wareGivingInfoList_codec);
            break;
          }
          case 24: {
            MinMoney = input.ReadInt32();
            break;
          }
          case 32: {
            MaxMoney = input.ReadInt32();
            break;
          }
          case 40: {
            Price = input.ReadInt32();
            break;
          }
          case 50: {
            wareGivingProInfoList_.AddEntriesFrom(ref input, _repeated_wareGivingProInfoList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ExtraGradeRewardInfo : pb::IMessage<ExtraGradeRewardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExtraGradeRewardInfo> _parser = new pb::MessageParser<ExtraGradeRewardInfo>(() => new ExtraGradeRewardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtraGradeRewardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[233]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraGradeRewardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraGradeRewardInfo(ExtraGradeRewardInfo other) : this() {
      title_ = other.title_;
      desc_ = other.desc_;
      extraExp_ = other.extraExp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraGradeRewardInfo Clone() {
      return new ExtraGradeRewardInfo(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 2;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extraExp" field.</summary>
    public const int ExtraExpFieldNumber = 3;
    private float extraExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExtraExp {
      get { return extraExp_; }
      set {
        extraExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtraGradeRewardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtraGradeRewardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Desc != other.Desc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExtraExp, other.ExtraExp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (ExtraExp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExtraExp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Desc);
      }
      if (ExtraExp != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ExtraExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Desc);
      }
      if (ExtraExp != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ExtraExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (ExtraExp != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtraGradeRewardInfo other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.ExtraExp != 0F) {
        ExtraExp = other.ExtraExp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Desc = input.ReadString();
            break;
          }
          case 29: {
            ExtraExp = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Desc = input.ReadString();
            break;
          }
          case 29: {
            ExtraExp = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RankWareConfig : pb::IMessage<RankWareConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RankWareConfig> _parser = new pb::MessageParser<RankWareConfig>(() => new RankWareConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankWareConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[234]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankWareConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankWareConfig(RankWareConfig other) : this() {
      commWareInfo_ = other.commWareInfo_ != null ? other.commWareInfo_.Clone() : null;
      advanceWareInfo_ = other.advanceWareInfo_ != null ? other.advanceWareInfo_.Clone() : null;
      extraGradeRewardInfo_ = other.extraGradeRewardInfo_ != null ? other.extraGradeRewardInfo_.Clone() : null;
      wareDescList_ = other.wareDescList_.Clone();
      gradeDescList_ = other.gradeDescList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankWareConfig Clone() {
      return new RankWareConfig(this);
    }

    /// <summary>Field number for the "commWareInfo" field.</summary>
    public const int CommWareInfoFieldNumber = 1;
    private global::PlaneWar.WareInfo commWareInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WareInfo CommWareInfo {
      get { return commWareInfo_; }
      set {
        commWareInfo_ = value;
      }
    }

    /// <summary>Field number for the "advanceWareInfo" field.</summary>
    public const int AdvanceWareInfoFieldNumber = 2;
    private global::PlaneWar.WareInfo advanceWareInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.WareInfo AdvanceWareInfo {
      get { return advanceWareInfo_; }
      set {
        advanceWareInfo_ = value;
      }
    }

    /// <summary>Field number for the "extraGradeRewardInfo" field.</summary>
    public const int ExtraGradeRewardInfoFieldNumber = 3;
    private global::PlaneWar.ExtraGradeRewardInfo extraGradeRewardInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ExtraGradeRewardInfo ExtraGradeRewardInfo {
      get { return extraGradeRewardInfo_; }
      set {
        extraGradeRewardInfo_ = value;
      }
    }

    /// <summary>Field number for the "wareDescList" field.</summary>
    public const int WareDescListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_wareDescList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> wareDescList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WareDescList {
      get { return wareDescList_; }
    }

    /// <summary>Field number for the "gradeDescList" field.</summary>
    public const int GradeDescListFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_gradeDescList_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> gradeDescList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GradeDescList {
      get { return gradeDescList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankWareConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankWareConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommWareInfo, other.CommWareInfo)) return false;
      if (!object.Equals(AdvanceWareInfo, other.AdvanceWareInfo)) return false;
      if (!object.Equals(ExtraGradeRewardInfo, other.ExtraGradeRewardInfo)) return false;
      if(!wareDescList_.Equals(other.wareDescList_)) return false;
      if(!gradeDescList_.Equals(other.gradeDescList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commWareInfo_ != null) hash ^= CommWareInfo.GetHashCode();
      if (advanceWareInfo_ != null) hash ^= AdvanceWareInfo.GetHashCode();
      if (extraGradeRewardInfo_ != null) hash ^= ExtraGradeRewardInfo.GetHashCode();
      hash ^= wareDescList_.GetHashCode();
      hash ^= gradeDescList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (commWareInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommWareInfo);
      }
      if (advanceWareInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AdvanceWareInfo);
      }
      if (extraGradeRewardInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ExtraGradeRewardInfo);
      }
      wareDescList_.WriteTo(output, _repeated_wareDescList_codec);
      gradeDescList_.WriteTo(output, _repeated_gradeDescList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (commWareInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommWareInfo);
      }
      if (advanceWareInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AdvanceWareInfo);
      }
      if (extraGradeRewardInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ExtraGradeRewardInfo);
      }
      wareDescList_.WriteTo(ref output, _repeated_wareDescList_codec);
      gradeDescList_.WriteTo(ref output, _repeated_gradeDescList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commWareInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommWareInfo);
      }
      if (advanceWareInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdvanceWareInfo);
      }
      if (extraGradeRewardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtraGradeRewardInfo);
      }
      size += wareDescList_.CalculateSize(_repeated_wareDescList_codec);
      size += gradeDescList_.CalculateSize(_repeated_gradeDescList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankWareConfig other) {
      if (other == null) {
        return;
      }
      if (other.commWareInfo_ != null) {
        if (commWareInfo_ == null) {
          CommWareInfo = new global::PlaneWar.WareInfo();
        }
        CommWareInfo.MergeFrom(other.CommWareInfo);
      }
      if (other.advanceWareInfo_ != null) {
        if (advanceWareInfo_ == null) {
          AdvanceWareInfo = new global::PlaneWar.WareInfo();
        }
        AdvanceWareInfo.MergeFrom(other.AdvanceWareInfo);
      }
      if (other.extraGradeRewardInfo_ != null) {
        if (extraGradeRewardInfo_ == null) {
          ExtraGradeRewardInfo = new global::PlaneWar.ExtraGradeRewardInfo();
        }
        ExtraGradeRewardInfo.MergeFrom(other.ExtraGradeRewardInfo);
      }
      wareDescList_.Add(other.wareDescList_);
      gradeDescList_.Add(other.gradeDescList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commWareInfo_ == null) {
              CommWareInfo = new global::PlaneWar.WareInfo();
            }
            input.ReadMessage(CommWareInfo);
            break;
          }
          case 18: {
            if (advanceWareInfo_ == null) {
              AdvanceWareInfo = new global::PlaneWar.WareInfo();
            }
            input.ReadMessage(AdvanceWareInfo);
            break;
          }
          case 26: {
            if (extraGradeRewardInfo_ == null) {
              ExtraGradeRewardInfo = new global::PlaneWar.ExtraGradeRewardInfo();
            }
            input.ReadMessage(ExtraGradeRewardInfo);
            break;
          }
          case 34:
          case 32: {
            wareDescList_.AddEntriesFrom(input, _repeated_wareDescList_codec);
            break;
          }
          case 42:
          case 40: {
            gradeDescList_.AddEntriesFrom(input, _repeated_gradeDescList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (commWareInfo_ == null) {
              CommWareInfo = new global::PlaneWar.WareInfo();
            }
            input.ReadMessage(CommWareInfo);
            break;
          }
          case 18: {
            if (advanceWareInfo_ == null) {
              AdvanceWareInfo = new global::PlaneWar.WareInfo();
            }
            input.ReadMessage(AdvanceWareInfo);
            break;
          }
          case 26: {
            if (extraGradeRewardInfo_ == null) {
              ExtraGradeRewardInfo = new global::PlaneWar.ExtraGradeRewardInfo();
            }
            input.ReadMessage(ExtraGradeRewardInfo);
            break;
          }
          case 34:
          case 32: {
            wareDescList_.AddEntriesFrom(ref input, _repeated_wareDescList_codec);
            break;
          }
          case 42:
          case 40: {
            gradeDescList_.AddEntriesFrom(ref input, _repeated_gradeDescList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DiceConfig : pb::IMessage<DiceConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiceConfig> _parser = new pb::MessageParser<DiceConfig>(() => new DiceConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[235]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceConfig(DiceConfig other) : this() {
      ratioList_ = other.ratioList_.Clone();
      maxMul_ = other.maxMul_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiceConfig Clone() {
      return new DiceConfig(this);
    }

    /// <summary>Field number for the "ratioList" field.</summary>
    public const int RatioListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_ratioList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> ratioList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RatioList {
      get { return ratioList_; }
    }

    /// <summary>Field number for the "maxMul" field.</summary>
    public const int MaxMulFieldNumber = 2;
    private int maxMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMul {
      get { return maxMul_; }
      set {
        maxMul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ratioList_.Equals(other.ratioList_)) return false;
      if (MaxMul != other.MaxMul) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ratioList_.GetHashCode();
      if (MaxMul != 0) hash ^= MaxMul.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ratioList_.WriteTo(output, _repeated_ratioList_codec);
      if (MaxMul != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ratioList_.WriteTo(ref output, _repeated_ratioList_codec);
      if (MaxMul != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ratioList_.CalculateSize(_repeated_ratioList_codec);
      if (MaxMul != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMul);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiceConfig other) {
      if (other == null) {
        return;
      }
      ratioList_.Add(other.ratioList_);
      if (other.MaxMul != 0) {
        MaxMul = other.MaxMul;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            ratioList_.AddEntriesFrom(input, _repeated_ratioList_codec);
            break;
          }
          case 16: {
            MaxMul = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            ratioList_.AddEntriesFrom(ref input, _repeated_ratioList_codec);
            break;
          }
          case 16: {
            MaxMul = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSyncConfigs : pb::IMessage<CSSyncConfigs>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSyncConfigs> _parser = new pb::MessageParser<CSSyncConfigs>(() => new CSSyncConfigs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncConfigs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[236]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncConfigs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncConfigs(CSSyncConfigs other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncConfigs Clone() {
      return new CSSyncConfigs(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncConfigs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncConfigs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncConfigs other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncConfigs : pb::IMessage<SCSyncConfigs>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncConfigs> _parser = new pb::MessageParser<SCSyncConfigs>(() => new SCSyncConfigs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncConfigs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[237]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncConfigs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncConfigs(SCSyncConfigs other) : this() {
      fortuneConfig_ = other.fortuneConfig_.Clone();
      beeConfig_ = other.beeConfig_ != null ? other.beeConfig_.Clone() : null;
      replayConfig_ = other.replayConfig_ != null ? other.replayConfig_.Clone() : null;
      gradeRankConfig_ = other.gradeRankConfig_ != null ? other.gradeRankConfig_.Clone() : null;
      wareConfig_ = other.wareConfig_ != null ? other.wareConfig_.Clone() : null;
      diceConfig_ = other.diceConfig_ != null ? other.diceConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncConfigs Clone() {
      return new SCSyncConfigs(this);
    }

    /// <summary>Field number for the "fortuneConfig" field.</summary>
    public const int FortuneConfigFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.FortuneConfig> _repeated_fortuneConfig_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.FortuneConfig.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.FortuneConfig> fortuneConfig_ = new pbc::RepeatedField<global::PlaneWar.FortuneConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.FortuneConfig> FortuneConfig {
      get { return fortuneConfig_; }
    }

    /// <summary>Field number for the "beeConfig" field.</summary>
    public const int BeeConfigFieldNumber = 2;
    private global::PlaneWar.BeeConfig beeConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.BeeConfig BeeConfig {
      get { return beeConfig_; }
      set {
        beeConfig_ = value;
      }
    }

    /// <summary>Field number for the "replayConfig" field.</summary>
    public const int ReplayConfigFieldNumber = 3;
    private global::PlaneWar.ReplayConfig replayConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ReplayConfig ReplayConfig {
      get { return replayConfig_; }
      set {
        replayConfig_ = value;
      }
    }

    /// <summary>Field number for the "gradeRankConfig" field.</summary>
    public const int GradeRankConfigFieldNumber = 4;
    private global::PlaneWar.GradeRankConfig gradeRankConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GradeRankConfig GradeRankConfig {
      get { return gradeRankConfig_; }
      set {
        gradeRankConfig_ = value;
      }
    }

    /// <summary>Field number for the "wareConfig" field.</summary>
    public const int WareConfigFieldNumber = 5;
    private global::PlaneWar.RankWareConfig wareConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.RankWareConfig WareConfig {
      get { return wareConfig_; }
      set {
        wareConfig_ = value;
      }
    }

    /// <summary>Field number for the "diceConfig" field.</summary>
    public const int DiceConfigFieldNumber = 6;
    private global::PlaneWar.DiceConfig diceConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.DiceConfig DiceConfig {
      get { return diceConfig_; }
      set {
        diceConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncConfigs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncConfigs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fortuneConfig_.Equals(other.fortuneConfig_)) return false;
      if (!object.Equals(BeeConfig, other.BeeConfig)) return false;
      if (!object.Equals(ReplayConfig, other.ReplayConfig)) return false;
      if (!object.Equals(GradeRankConfig, other.GradeRankConfig)) return false;
      if (!object.Equals(WareConfig, other.WareConfig)) return false;
      if (!object.Equals(DiceConfig, other.DiceConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fortuneConfig_.GetHashCode();
      if (beeConfig_ != null) hash ^= BeeConfig.GetHashCode();
      if (replayConfig_ != null) hash ^= ReplayConfig.GetHashCode();
      if (gradeRankConfig_ != null) hash ^= GradeRankConfig.GetHashCode();
      if (wareConfig_ != null) hash ^= WareConfig.GetHashCode();
      if (diceConfig_ != null) hash ^= DiceConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      fortuneConfig_.WriteTo(output, _repeated_fortuneConfig_codec);
      if (beeConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BeeConfig);
      }
      if (replayConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReplayConfig);
      }
      if (gradeRankConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GradeRankConfig);
      }
      if (wareConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(WareConfig);
      }
      if (diceConfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DiceConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      fortuneConfig_.WriteTo(ref output, _repeated_fortuneConfig_codec);
      if (beeConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BeeConfig);
      }
      if (replayConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReplayConfig);
      }
      if (gradeRankConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GradeRankConfig);
      }
      if (wareConfig_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(WareConfig);
      }
      if (diceConfig_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DiceConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fortuneConfig_.CalculateSize(_repeated_fortuneConfig_codec);
      if (beeConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeeConfig);
      }
      if (replayConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplayConfig);
      }
      if (gradeRankConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GradeRankConfig);
      }
      if (wareConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WareConfig);
      }
      if (diceConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiceConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncConfigs other) {
      if (other == null) {
        return;
      }
      fortuneConfig_.Add(other.fortuneConfig_);
      if (other.beeConfig_ != null) {
        if (beeConfig_ == null) {
          BeeConfig = new global::PlaneWar.BeeConfig();
        }
        BeeConfig.MergeFrom(other.BeeConfig);
      }
      if (other.replayConfig_ != null) {
        if (replayConfig_ == null) {
          ReplayConfig = new global::PlaneWar.ReplayConfig();
        }
        ReplayConfig.MergeFrom(other.ReplayConfig);
      }
      if (other.gradeRankConfig_ != null) {
        if (gradeRankConfig_ == null) {
          GradeRankConfig = new global::PlaneWar.GradeRankConfig();
        }
        GradeRankConfig.MergeFrom(other.GradeRankConfig);
      }
      if (other.wareConfig_ != null) {
        if (wareConfig_ == null) {
          WareConfig = new global::PlaneWar.RankWareConfig();
        }
        WareConfig.MergeFrom(other.WareConfig);
      }
      if (other.diceConfig_ != null) {
        if (diceConfig_ == null) {
          DiceConfig = new global::PlaneWar.DiceConfig();
        }
        DiceConfig.MergeFrom(other.DiceConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fortuneConfig_.AddEntriesFrom(input, _repeated_fortuneConfig_codec);
            break;
          }
          case 18: {
            if (beeConfig_ == null) {
              BeeConfig = new global::PlaneWar.BeeConfig();
            }
            input.ReadMessage(BeeConfig);
            break;
          }
          case 26: {
            if (replayConfig_ == null) {
              ReplayConfig = new global::PlaneWar.ReplayConfig();
            }
            input.ReadMessage(ReplayConfig);
            break;
          }
          case 34: {
            if (gradeRankConfig_ == null) {
              GradeRankConfig = new global::PlaneWar.GradeRankConfig();
            }
            input.ReadMessage(GradeRankConfig);
            break;
          }
          case 42: {
            if (wareConfig_ == null) {
              WareConfig = new global::PlaneWar.RankWareConfig();
            }
            input.ReadMessage(WareConfig);
            break;
          }
          case 50: {
            if (diceConfig_ == null) {
              DiceConfig = new global::PlaneWar.DiceConfig();
            }
            input.ReadMessage(DiceConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            fortuneConfig_.AddEntriesFrom(ref input, _repeated_fortuneConfig_codec);
            break;
          }
          case 18: {
            if (beeConfig_ == null) {
              BeeConfig = new global::PlaneWar.BeeConfig();
            }
            input.ReadMessage(BeeConfig);
            break;
          }
          case 26: {
            if (replayConfig_ == null) {
              ReplayConfig = new global::PlaneWar.ReplayConfig();
            }
            input.ReadMessage(ReplayConfig);
            break;
          }
          case 34: {
            if (gradeRankConfig_ == null) {
              GradeRankConfig = new global::PlaneWar.GradeRankConfig();
            }
            input.ReadMessage(GradeRankConfig);
            break;
          }
          case 42: {
            if (wareConfig_ == null) {
              WareConfig = new global::PlaneWar.RankWareConfig();
            }
            input.ReadMessage(WareConfig);
            break;
          }
          case 50: {
            if (diceConfig_ == null) {
              DiceConfig = new global::PlaneWar.DiceConfig();
            }
            input.ReadMessage(DiceConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSConfirmWeaponExist : pb::IMessage<CSConfirmWeaponExist>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSConfirmWeaponExist> _parser = new pb::MessageParser<CSConfirmWeaponExist>(() => new CSConfirmWeaponExist());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSConfirmWeaponExist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[238]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSConfirmWeaponExist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSConfirmWeaponExist(CSConfirmWeaponExist other) : this() {
      sourceUID_ = other.sourceUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSConfirmWeaponExist Clone() {
      return new CSConfirmWeaponExist(this);
    }

    /// <summary>Field number for the "sourceUID" field.</summary>
    public const int SourceUIDFieldNumber = 1;
    private int sourceUID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceUID {
      get { return sourceUID_; }
      set {
        sourceUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSConfirmWeaponExist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSConfirmWeaponExist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceUID != other.SourceUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceUID != 0) hash ^= SourceUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SourceUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSConfirmWeaponExist other) {
      if (other == null) {
        return;
      }
      if (other.SourceUID != 0) {
        SourceUID = other.SourceUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SourceUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCConfirmWeaponExist : pb::IMessage<SCConfirmWeaponExist>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCConfirmWeaponExist> _parser = new pb::MessageParser<SCConfirmWeaponExist>(() => new SCConfirmWeaponExist());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCConfirmWeaponExist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[239]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCConfirmWeaponExist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCConfirmWeaponExist(SCConfirmWeaponExist other) : this() {
      exist_ = other.exist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCConfirmWeaponExist Clone() {
      return new SCConfirmWeaponExist(this);
    }

    /// <summary>Field number for the "exist" field.</summary>
    public const int ExistFieldNumber = 1;
    private bool exist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Exist {
      get { return exist_; }
      set {
        exist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCConfirmWeaponExist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCConfirmWeaponExist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exist != other.Exist) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Exist != false) hash ^= Exist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Exist != false) {
        output.WriteRawTag(8);
        output.WriteBool(Exist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Exist != false) {
        output.WriteRawTag(8);
        output.WriteBool(Exist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exist != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCConfirmWeaponExist other) {
      if (other == null) {
        return;
      }
      if (other.Exist != false) {
        Exist = other.Exist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Exist = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Exist = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetVideo : pb::IMessage<CSGetVideo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetVideo> _parser = new pb::MessageParser<CSGetVideo>(() => new CSGetVideo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetVideo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[240]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetVideo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetVideo(CSGetVideo other) : this() {
      videoId_ = other.videoId_;
      videoType_ = other.videoType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetVideo Clone() {
      return new CSGetVideo(this);
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 1;
    private string videoId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VideoId {
      get { return videoId_; }
      set {
        videoId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "videoType" field.</summary>
    public const int VideoTypeFieldNumber = 2;
    private int videoType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VideoType {
      get { return videoType_; }
      set {
        videoType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetVideo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetVideo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VideoId != other.VideoId) return false;
      if (VideoType != other.VideoType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VideoId.Length != 0) hash ^= VideoId.GetHashCode();
      if (VideoType != 0) hash ^= VideoType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (VideoId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VideoId);
      }
      if (VideoType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VideoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (VideoId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(VideoId);
      }
      if (VideoType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VideoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VideoId);
      }
      if (VideoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VideoType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetVideo other) {
      if (other == null) {
        return;
      }
      if (other.VideoId.Length != 0) {
        VideoId = other.VideoId;
      }
      if (other.VideoType != 0) {
        VideoType = other.VideoType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            VideoId = input.ReadString();
            break;
          }
          case 16: {
            VideoType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            VideoId = input.ReadString();
            break;
          }
          case 16: {
            VideoType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetVideo : pb::IMessage<SCGetVideo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetVideo> _parser = new pb::MessageParser<SCGetVideo>(() => new SCGetVideo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetVideo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[241]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetVideo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetVideo(SCGetVideo other) : this() {
      createdPathList_ = other.createdPathList_.Clone();
      rewardType_ = other.rewardType_;
      timestamp_ = other.timestamp_;
      reward_ = other.reward_;
      chair_ = other.chair_;
      money_ = other.money_;
      ratio_ = other.ratio_;
      gunType_ = other.gunType_;
      arena_ = other.arena_;
      weaponId_ = other.weaponId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetVideo Clone() {
      return new SCGetVideo(this);
    }

    /// <summary>Field number for the "createdPathList" field.</summary>
    public const int CreatedPathListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.MonsterPath> _repeated_createdPathList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.MonsterPath.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.MonsterPath> createdPathList_ = new pbc::RepeatedField<global::PlaneWar.MonsterPath>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.MonsterPath> CreatedPathList {
      get { return createdPathList_; }
    }

    /// <summary>Field number for the "rewardType" field.</summary>
    public const int RewardTypeFieldNumber = 2;
    private int rewardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardType {
      get { return rewardType_; }
      set {
        rewardType_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 4;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 5;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 6;
    private long money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 7;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "gunType" field.</summary>
    public const int GunTypeFieldNumber = 8;
    private int gunType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunType {
      get { return gunType_; }
      set {
        gunType_ = value;
      }
    }

    /// <summary>Field number for the "arena" field.</summary>
    public const int ArenaFieldNumber = 9;
    private int arena_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arena {
      get { return arena_; }
      set {
        arena_ = value;
      }
    }

    /// <summary>Field number for the "weaponId" field.</summary>
    public const int WeaponIdFieldNumber = 10;
    private int weaponId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetVideo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetVideo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!createdPathList_.Equals(other.createdPathList_)) return false;
      if (RewardType != other.RewardType) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Reward != other.Reward) return false;
      if (Chair != other.Chair) return false;
      if (Money != other.Money) return false;
      if (Ratio != other.Ratio) return false;
      if (GunType != other.GunType) return false;
      if (Arena != other.Arena) return false;
      if (WeaponId != other.WeaponId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= createdPathList_.GetHashCode();
      if (RewardType != 0) hash ^= RewardType.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (Money != 0L) hash ^= Money.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (GunType != 0) hash ^= GunType.GetHashCode();
      if (Arena != 0) hash ^= Arena.GetHashCode();
      if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      createdPathList_.WriteTo(output, _repeated_createdPathList_codec);
      if (RewardType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RewardType);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (Reward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Reward);
      }
      if (Chair != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Chair);
      }
      if (Money != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Money);
      }
      if (Ratio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Ratio);
      }
      if (GunType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GunType);
      }
      if (Arena != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Arena);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(WeaponId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      createdPathList_.WriteTo(ref output, _repeated_createdPathList_codec);
      if (RewardType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RewardType);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (Reward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Reward);
      }
      if (Chair != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Chair);
      }
      if (Money != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Money);
      }
      if (Ratio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Ratio);
      }
      if (GunType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GunType);
      }
      if (Arena != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Arena);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(WeaponId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += createdPathList_.CalculateSize(_repeated_createdPathList_codec);
      if (RewardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardType);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (Money != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Money);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (GunType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunType);
      }
      if (Arena != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arena);
      }
      if (WeaponId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetVideo other) {
      if (other == null) {
        return;
      }
      createdPathList_.Add(other.createdPathList_);
      if (other.RewardType != 0) {
        RewardType = other.RewardType;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.Money != 0L) {
        Money = other.Money;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.GunType != 0) {
        GunType = other.GunType;
      }
      if (other.Arena != 0) {
        Arena = other.Arena;
      }
      if (other.WeaponId != 0) {
        WeaponId = other.WeaponId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            createdPathList_.AddEntriesFrom(input, _repeated_createdPathList_codec);
            break;
          }
          case 16: {
            RewardType = input.ReadInt32();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 32: {
            Reward = input.ReadInt32();
            break;
          }
          case 40: {
            Chair = input.ReadInt32();
            break;
          }
          case 48: {
            Money = input.ReadInt64();
            break;
          }
          case 56: {
            Ratio = input.ReadInt32();
            break;
          }
          case 64: {
            GunType = input.ReadInt32();
            break;
          }
          case 72: {
            Arena = input.ReadInt32();
            break;
          }
          case 80: {
            WeaponId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            createdPathList_.AddEntriesFrom(ref input, _repeated_createdPathList_codec);
            break;
          }
          case 16: {
            RewardType = input.ReadInt32();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 32: {
            Reward = input.ReadInt32();
            break;
          }
          case 40: {
            Chair = input.ReadInt32();
            break;
          }
          case 48: {
            Money = input.ReadInt64();
            break;
          }
          case 56: {
            Ratio = input.ReadInt32();
            break;
          }
          case 64: {
            GunType = input.ReadInt32();
            break;
          }
          case 72: {
            Arena = input.ReadInt32();
            break;
          }
          case 80: {
            WeaponId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VideoCommon : pb::IMessage<VideoCommon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VideoCommon> _parser = new pb::MessageParser<VideoCommon>(() => new VideoCommon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoCommon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[242]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoCommon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoCommon(VideoCommon other) : this() {
      reward_ = other.reward_;
      rewardType_ = other.rewardType_;
      timestamp_ = other.timestamp_;
      videoId_ = other.videoId_;
      unread_ = other.unread_;
      weaponId_ = other.weaponId_;
      arenaId_ = other.arenaId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoCommon Clone() {
      return new VideoCommon(this);
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 1;
    private int reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "rewardType" field.</summary>
    public const int RewardTypeFieldNumber = 2;
    private int rewardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardType {
      get { return rewardType_; }
      set {
        rewardType_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "videoId" field.</summary>
    public const int VideoIdFieldNumber = 4;
    private string videoId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VideoId {
      get { return videoId_; }
      set {
        videoId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unread" field.</summary>
    public const int UnreadFieldNumber = 5;
    private bool unread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unread {
      get { return unread_; }
      set {
        unread_ = value;
      }
    }

    /// <summary>Field number for the "weaponId" field.</summary>
    public const int WeaponIdFieldNumber = 6;
    private int weaponId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    /// <summary>Field number for the "arenaId" field.</summary>
    public const int ArenaIdFieldNumber = 7;
    private int arenaId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArenaId {
      get { return arenaId_; }
      set {
        arenaId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoCommon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoCommon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reward != other.Reward) return false;
      if (RewardType != other.RewardType) return false;
      if (Timestamp != other.Timestamp) return false;
      if (VideoId != other.VideoId) return false;
      if (Unread != other.Unread) return false;
      if (WeaponId != other.WeaponId) return false;
      if (ArenaId != other.ArenaId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (RewardType != 0) hash ^= RewardType.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (VideoId.Length != 0) hash ^= VideoId.GetHashCode();
      if (Unread != false) hash ^= Unread.GetHashCode();
      if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
      if (ArenaId != 0) hash ^= ArenaId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Reward != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Reward);
      }
      if (RewardType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RewardType);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (VideoId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(VideoId);
      }
      if (Unread != false) {
        output.WriteRawTag(40);
        output.WriteBool(Unread);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WeaponId);
      }
      if (ArenaId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ArenaId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Reward != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Reward);
      }
      if (RewardType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RewardType);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (VideoId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(VideoId);
      }
      if (Unread != false) {
        output.WriteRawTag(40);
        output.WriteBool(Unread);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WeaponId);
      }
      if (ArenaId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ArenaId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reward);
      }
      if (RewardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardType);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (VideoId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VideoId);
      }
      if (Unread != false) {
        size += 1 + 1;
      }
      if (WeaponId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponId);
      }
      if (ArenaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArenaId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoCommon other) {
      if (other == null) {
        return;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      if (other.RewardType != 0) {
        RewardType = other.RewardType;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.VideoId.Length != 0) {
        VideoId = other.VideoId;
      }
      if (other.Unread != false) {
        Unread = other.Unread;
      }
      if (other.WeaponId != 0) {
        WeaponId = other.WeaponId;
      }
      if (other.ArenaId != 0) {
        ArenaId = other.ArenaId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Reward = input.ReadInt32();
            break;
          }
          case 16: {
            RewardType = input.ReadInt32();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 34: {
            VideoId = input.ReadString();
            break;
          }
          case 40: {
            Unread = input.ReadBool();
            break;
          }
          case 48: {
            WeaponId = input.ReadInt32();
            break;
          }
          case 56: {
            ArenaId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Reward = input.ReadInt32();
            break;
          }
          case 16: {
            RewardType = input.ReadInt32();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 34: {
            VideoId = input.ReadString();
            break;
          }
          case 40: {
            Unread = input.ReadBool();
            break;
          }
          case 48: {
            WeaponId = input.ReadInt32();
            break;
          }
          case 56: {
            ArenaId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GlobalVideoInfo : pb::IMessage<GlobalVideoInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GlobalVideoInfo> _parser = new pb::MessageParser<GlobalVideoInfo>(() => new GlobalVideoInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalVideoInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[243]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalVideoInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalVideoInfo(GlobalVideoInfo other) : this() {
      niceName_ = other.niceName_;
      self_ = other.self_;
      common_ = other.common_ != null ? other.common_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalVideoInfo Clone() {
      return new GlobalVideoInfo(this);
    }

    /// <summary>Field number for the "niceName" field.</summary>
    public const int NiceNameFieldNumber = 1;
    private string niceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NiceName {
      get { return niceName_; }
      set {
        niceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 2;
    private bool self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 3;
    private global::PlaneWar.VideoCommon common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.VideoCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalVideoInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalVideoInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NiceName != other.NiceName) return false;
      if (Self != other.Self) return false;
      if (!object.Equals(Common, other.Common)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NiceName.Length != 0) hash ^= NiceName.GetHashCode();
      if (Self != false) hash ^= Self.GetHashCode();
      if (common_ != null) hash ^= Common.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NiceName);
      }
      if (Self != false) {
        output.WriteRawTag(16);
        output.WriteBool(Self);
      }
      if (common_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Common);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NiceName);
      }
      if (Self != false) {
        output.WriteRawTag(16);
        output.WriteBool(Self);
      }
      if (common_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Common);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NiceName);
      }
      if (Self != false) {
        size += 1 + 1;
      }
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalVideoInfo other) {
      if (other == null) {
        return;
      }
      if (other.NiceName.Length != 0) {
        NiceName = other.NiceName;
      }
      if (other.Self != false) {
        Self = other.Self;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::PlaneWar.VideoCommon();
        }
        Common.MergeFrom(other.Common);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NiceName = input.ReadString();
            break;
          }
          case 16: {
            Self = input.ReadBool();
            break;
          }
          case 26: {
            if (common_ == null) {
              Common = new global::PlaneWar.VideoCommon();
            }
            input.ReadMessage(Common);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            NiceName = input.ReadString();
            break;
          }
          case 16: {
            Self = input.ReadBool();
            break;
          }
          case 26: {
            if (common_ == null) {
              Common = new global::PlaneWar.VideoCommon();
            }
            input.ReadMessage(Common);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SelfVideoInfo : pb::IMessage<SelfVideoInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SelfVideoInfo> _parser = new pb::MessageParser<SelfVideoInfo>(() => new SelfVideoInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelfVideoInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[244]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelfVideoInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelfVideoInfo(SelfVideoInfo other) : this() {
      ratio_ = other.ratio_;
      common_ = other.common_ != null ? other.common_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelfVideoInfo Clone() {
      return new SelfVideoInfo(this);
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 1;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 2;
    private global::PlaneWar.VideoCommon common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.VideoCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelfVideoInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelfVideoInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ratio != other.Ratio) return false;
      if (!object.Equals(Common, other.Common)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (common_ != null) hash ^= Common.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ratio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ratio);
      }
      if (common_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Common);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ratio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ratio);
      }
      if (common_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Common);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelfVideoInfo other) {
      if (other == null) {
        return;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::PlaneWar.VideoCommon();
        }
        Common.MergeFrom(other.Common);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ratio = input.ReadInt32();
            break;
          }
          case 18: {
            if (common_ == null) {
              Common = new global::PlaneWar.VideoCommon();
            }
            input.ReadMessage(Common);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ratio = input.ReadInt32();
            break;
          }
          case 18: {
            if (common_ == null) {
              Common = new global::PlaneWar.VideoCommon();
            }
            input.ReadMessage(Common);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSelfVideoRecord : pb::IMessage<CSSelfVideoRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSelfVideoRecord> _parser = new pb::MessageParser<CSSelfVideoRecord>(() => new CSSelfVideoRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSelfVideoRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[245]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelfVideoRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelfVideoRecord(CSSelfVideoRecord other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelfVideoRecord Clone() {
      return new CSSelfVideoRecord(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private int to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSelfVideoRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSelfVideoRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (To != 0) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (To != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSelfVideoRecord other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.To != 0) {
        To = other.To;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSelfVideoRecord : pb::IMessage<SCSelfVideoRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSelfVideoRecord> _parser = new pb::MessageParser<SCSelfVideoRecord>(() => new SCSelfVideoRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSelfVideoRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[246]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSelfVideoRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSelfVideoRecord(SCSelfVideoRecord other) : this() {
      videoList_ = other.videoList_.Clone();
      refreshTime_ = other.refreshTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSelfVideoRecord Clone() {
      return new SCSelfVideoRecord(this);
    }

    /// <summary>Field number for the "videoList" field.</summary>
    public const int VideoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.SelfVideoInfo> _repeated_videoList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.SelfVideoInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.SelfVideoInfo> videoList_ = new pbc::RepeatedField<global::PlaneWar.SelfVideoInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.SelfVideoInfo> VideoList {
      get { return videoList_; }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 2;
    private int refreshTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSelfVideoRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSelfVideoRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!videoList_.Equals(other.videoList_)) return false;
      if (RefreshTime != other.RefreshTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= videoList_.GetHashCode();
      if (RefreshTime != 0) hash ^= RefreshTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      videoList_.WriteTo(output, _repeated_videoList_codec);
      if (RefreshTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RefreshTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      videoList_.WriteTo(ref output, _repeated_videoList_codec);
      if (RefreshTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RefreshTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += videoList_.CalculateSize(_repeated_videoList_codec);
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSelfVideoRecord other) {
      if (other == null) {
        return;
      }
      videoList_.Add(other.videoList_);
      if (other.RefreshTime != 0) {
        RefreshTime = other.RefreshTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            videoList_.AddEntriesFrom(input, _repeated_videoList_codec);
            break;
          }
          case 16: {
            RefreshTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            videoList_.AddEntriesFrom(ref input, _repeated_videoList_codec);
            break;
          }
          case 16: {
            RefreshTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSVideoRank : pb::IMessage<CSVideoRank>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSVideoRank> _parser = new pb::MessageParser<CSVideoRank>(() => new CSVideoRank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVideoRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[247]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVideoRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVideoRank(CSVideoRank other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVideoRank Clone() {
      return new CSVideoRank(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private int to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVideoRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVideoRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (To != 0) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (To != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVideoRank other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.To != 0) {
        To = other.To;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCVideoRank : pb::IMessage<SCVideoRank>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCVideoRank> _parser = new pb::MessageParser<SCVideoRank>(() => new SCVideoRank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCVideoRank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[248]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVideoRank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVideoRank(SCVideoRank other) : this() {
      videoList_ = other.videoList_.Clone();
      refreshTime_ = other.refreshTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVideoRank Clone() {
      return new SCVideoRank(this);
    }

    /// <summary>Field number for the "videoList" field.</summary>
    public const int VideoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.GlobalVideoInfo> _repeated_videoList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.GlobalVideoInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.GlobalVideoInfo> videoList_ = new pbc::RepeatedField<global::PlaneWar.GlobalVideoInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.GlobalVideoInfo> VideoList {
      get { return videoList_; }
    }

    /// <summary>Field number for the "refreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 2;
    private int refreshTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCVideoRank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCVideoRank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!videoList_.Equals(other.videoList_)) return false;
      if (RefreshTime != other.RefreshTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= videoList_.GetHashCode();
      if (RefreshTime != 0) hash ^= RefreshTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      videoList_.WriteTo(output, _repeated_videoList_codec);
      if (RefreshTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RefreshTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      videoList_.WriteTo(ref output, _repeated_videoList_codec);
      if (RefreshTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RefreshTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += videoList_.CalculateSize(_repeated_videoList_codec);
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCVideoRank other) {
      if (other == null) {
        return;
      }
      videoList_.Add(other.videoList_);
      if (other.RefreshTime != 0) {
        RefreshTime = other.RefreshTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            videoList_.AddEntriesFrom(input, _repeated_videoList_codec);
            break;
          }
          case 16: {
            RefreshTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            videoList_.AddEntriesFrom(ref input, _repeated_videoList_codec);
            break;
          }
          case 16: {
            RefreshTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReceiveReward : pb::IMessage<ReceiveReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReceiveReward> _parser = new pb::MessageParser<ReceiveReward>(() => new ReceiveReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiveReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[249]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveReward(ReceiveReward other) : this() {
      propId_ = other.propId_;
      num_ = other.num_;
      advance_ = other.advance_;
      minNum_ = other.minNum_;
      maxNum_ = other.maxNum_;
      box_ = other.box_;
      uniqueId_ = other.uniqueId_;
      desc_ = other.desc_;
      timeLimit_ = other.timeLimit_;
      title_ = other.title_;
      propType_ = other.propType_;
      special_ = other.special_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveReward Clone() {
      return new ReceiveReward(this);
    }

    /// <summary>Field number for the "propId" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "advance" field.</summary>
    public const int AdvanceFieldNumber = 3;
    private bool advance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Advance {
      get { return advance_; }
      set {
        advance_ = value;
      }
    }

    /// <summary>Field number for the "minNum" field.</summary>
    public const int MinNumFieldNumber = 4;
    private int minNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinNum {
      get { return minNum_; }
      set {
        minNum_ = value;
      }
    }

    /// <summary>Field number for the "maxNum" field.</summary>
    public const int MaxNumFieldNumber = 5;
    private int maxNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    /// <summary>Field number for the "box" field.</summary>
    public const int BoxFieldNumber = 6;
    private bool box_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Box {
      get { return box_; }
      set {
        box_ = value;
      }
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 7;
    private int uniqueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 8;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeLimit" field.</summary>
    public const int TimeLimitFieldNumber = 9;
    private int timeLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeLimit {
      get { return timeLimit_; }
      set {
        timeLimit_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 10;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "propType" field.</summary>
    public const int PropTypeFieldNumber = 11;
    private int propType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropType {
      get { return propType_; }
      set {
        propType_ = value;
      }
    }

    /// <summary>Field number for the "special" field.</summary>
    public const int SpecialFieldNumber = 12;
    private int special_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Special {
      get { return special_; }
      set {
        special_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiveReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiveReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropId != other.PropId) return false;
      if (Num != other.Num) return false;
      if (Advance != other.Advance) return false;
      if (MinNum != other.MinNum) return false;
      if (MaxNum != other.MaxNum) return false;
      if (Box != other.Box) return false;
      if (UniqueId != other.UniqueId) return false;
      if (Desc != other.Desc) return false;
      if (TimeLimit != other.TimeLimit) return false;
      if (Title != other.Title) return false;
      if (PropType != other.PropType) return false;
      if (Special != other.Special) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Advance != false) hash ^= Advance.GetHashCode();
      if (MinNum != 0) hash ^= MinNum.GetHashCode();
      if (MaxNum != 0) hash ^= MaxNum.GetHashCode();
      if (Box != false) hash ^= Box.GetHashCode();
      if (UniqueId != 0) hash ^= UniqueId.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (TimeLimit != 0) hash ^= TimeLimit.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (PropType != 0) hash ^= PropType.GetHashCode();
      if (Special != 0) hash ^= Special.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Advance != false) {
        output.WriteRawTag(24);
        output.WriteBool(Advance);
      }
      if (MinNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinNum);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxNum);
      }
      if (Box != false) {
        output.WriteRawTag(48);
        output.WriteBool(Box);
      }
      if (UniqueId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UniqueId);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Desc);
      }
      if (TimeLimit != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TimeLimit);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Title);
      }
      if (PropType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PropType);
      }
      if (Special != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Special);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Advance != false) {
        output.WriteRawTag(24);
        output.WriteBool(Advance);
      }
      if (MinNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MinNum);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxNum);
      }
      if (Box != false) {
        output.WriteRawTag(48);
        output.WriteBool(Box);
      }
      if (UniqueId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UniqueId);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Desc);
      }
      if (TimeLimit != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TimeLimit);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Title);
      }
      if (PropType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PropType);
      }
      if (Special != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Special);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Advance != false) {
        size += 1 + 1;
      }
      if (MinNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinNum);
      }
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNum);
      }
      if (Box != false) {
        size += 1 + 1;
      }
      if (UniqueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueId);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (TimeLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeLimit);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (PropType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropType);
      }
      if (Special != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Special);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiveReward other) {
      if (other == null) {
        return;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Advance != false) {
        Advance = other.Advance;
      }
      if (other.MinNum != 0) {
        MinNum = other.MinNum;
      }
      if (other.MaxNum != 0) {
        MaxNum = other.MaxNum;
      }
      if (other.Box != false) {
        Box = other.Box;
      }
      if (other.UniqueId != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.TimeLimit != 0) {
        TimeLimit = other.TimeLimit;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.PropType != 0) {
        PropType = other.PropType;
      }
      if (other.Special != 0) {
        Special = other.Special;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            Advance = input.ReadBool();
            break;
          }
          case 32: {
            MinNum = input.ReadInt32();
            break;
          }
          case 40: {
            MaxNum = input.ReadInt32();
            break;
          }
          case 48: {
            Box = input.ReadBool();
            break;
          }
          case 56: {
            UniqueId = input.ReadInt32();
            break;
          }
          case 66: {
            Desc = input.ReadString();
            break;
          }
          case 72: {
            TimeLimit = input.ReadInt32();
            break;
          }
          case 82: {
            Title = input.ReadString();
            break;
          }
          case 88: {
            PropType = input.ReadInt32();
            break;
          }
          case 96: {
            Special = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            Advance = input.ReadBool();
            break;
          }
          case 32: {
            MinNum = input.ReadInt32();
            break;
          }
          case 40: {
            MaxNum = input.ReadInt32();
            break;
          }
          case 48: {
            Box = input.ReadBool();
            break;
          }
          case 56: {
            UniqueId = input.ReadInt32();
            break;
          }
          case 66: {
            Desc = input.ReadString();
            break;
          }
          case 72: {
            TimeLimit = input.ReadInt32();
            break;
          }
          case 82: {
            Title = input.ReadString();
            break;
          }
          case 88: {
            PropType = input.ReadInt32();
            break;
          }
          case 96: {
            Special = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSReceiveGradeReward : pb::IMessage<CSReceiveGradeReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSReceiveGradeReward> _parser = new pb::MessageParser<CSReceiveGradeReward>(() => new CSReceiveGradeReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSReceiveGradeReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[250]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReceiveGradeReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReceiveGradeReward(CSReceiveGradeReward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReceiveGradeReward Clone() {
      return new CSReceiveGradeReward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSReceiveGradeReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSReceiveGradeReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSReceiveGradeReward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCReceiveGradeReward : pb::IMessage<SCReceiveGradeReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCReceiveGradeReward> _parser = new pb::MessageParser<SCReceiveGradeReward>(() => new SCReceiveGradeReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCReceiveGradeReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[251]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReceiveGradeReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReceiveGradeReward(SCReceiveGradeReward other) : this() {
      receiveRewardList_ = other.receiveRewardList_.Clone();
      unReceiveRewardList_ = other.unReceiveRewardList_.Clone();
      seasonEnd_ = other.seasonEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReceiveGradeReward Clone() {
      return new SCReceiveGradeReward(this);
    }

    /// <summary>Field number for the "receiveRewardList" field.</summary>
    public const int ReceiveRewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.ReceiveReward> _repeated_receiveRewardList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.ReceiveReward.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.ReceiveReward> receiveRewardList_ = new pbc::RepeatedField<global::PlaneWar.ReceiveReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.ReceiveReward> ReceiveRewardList {
      get { return receiveRewardList_; }
    }

    /// <summary>Field number for the "unReceiveRewardList" field.</summary>
    public const int UnReceiveRewardListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.ReceiveReward> _repeated_unReceiveRewardList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.ReceiveReward.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.ReceiveReward> unReceiveRewardList_ = new pbc::RepeatedField<global::PlaneWar.ReceiveReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.ReceiveReward> UnReceiveRewardList {
      get { return unReceiveRewardList_; }
    }

    /// <summary>Field number for the "seasonEnd" field.</summary>
    public const int SeasonEndFieldNumber = 3;
    private bool seasonEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SeasonEnd {
      get { return seasonEnd_; }
      set {
        seasonEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCReceiveGradeReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCReceiveGradeReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!receiveRewardList_.Equals(other.receiveRewardList_)) return false;
      if(!unReceiveRewardList_.Equals(other.unReceiveRewardList_)) return false;
      if (SeasonEnd != other.SeasonEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= receiveRewardList_.GetHashCode();
      hash ^= unReceiveRewardList_.GetHashCode();
      if (SeasonEnd != false) hash ^= SeasonEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      receiveRewardList_.WriteTo(output, _repeated_receiveRewardList_codec);
      unReceiveRewardList_.WriteTo(output, _repeated_unReceiveRewardList_codec);
      if (SeasonEnd != false) {
        output.WriteRawTag(24);
        output.WriteBool(SeasonEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      receiveRewardList_.WriteTo(ref output, _repeated_receiveRewardList_codec);
      unReceiveRewardList_.WriteTo(ref output, _repeated_unReceiveRewardList_codec);
      if (SeasonEnd != false) {
        output.WriteRawTag(24);
        output.WriteBool(SeasonEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += receiveRewardList_.CalculateSize(_repeated_receiveRewardList_codec);
      size += unReceiveRewardList_.CalculateSize(_repeated_unReceiveRewardList_codec);
      if (SeasonEnd != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCReceiveGradeReward other) {
      if (other == null) {
        return;
      }
      receiveRewardList_.Add(other.receiveRewardList_);
      unReceiveRewardList_.Add(other.unReceiveRewardList_);
      if (other.SeasonEnd != false) {
        SeasonEnd = other.SeasonEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            receiveRewardList_.AddEntriesFrom(input, _repeated_receiveRewardList_codec);
            break;
          }
          case 18: {
            unReceiveRewardList_.AddEntriesFrom(input, _repeated_unReceiveRewardList_codec);
            break;
          }
          case 24: {
            SeasonEnd = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            receiveRewardList_.AddEntriesFrom(ref input, _repeated_receiveRewardList_codec);
            break;
          }
          case 18: {
            unReceiveRewardList_.AddEntriesFrom(ref input, _repeated_unReceiveRewardList_codec);
            break;
          }
          case 24: {
            SeasonEnd = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GradeRewardDetail : pb::IMessage<GradeRewardDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GradeRewardDetail> _parser = new pb::MessageParser<GradeRewardDetail>(() => new GradeRewardDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeRewardDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[252]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRewardDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRewardDetail(GradeRewardDetail other) : this() {
      rewardInfo_ = other.rewardInfo_ != null ? other.rewardInfo_.Clone() : null;
      reach_ = other.reach_;
      receive_ = other.receive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRewardDetail Clone() {
      return new GradeRewardDetail(this);
    }

    /// <summary>Field number for the "rewardInfo" field.</summary>
    public const int RewardInfoFieldNumber = 1;
    private global::PlaneWar.ReceiveReward rewardInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ReceiveReward RewardInfo {
      get { return rewardInfo_; }
      set {
        rewardInfo_ = value;
      }
    }

    /// <summary>Field number for the "reach" field.</summary>
    public const int ReachFieldNumber = 2;
    private bool reach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reach {
      get { return reach_; }
      set {
        reach_ = value;
      }
    }

    /// <summary>Field number for the "receive" field.</summary>
    public const int ReceiveFieldNumber = 3;
    private bool receive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Receive {
      get { return receive_; }
      set {
        receive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeRewardDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeRewardDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RewardInfo, other.RewardInfo)) return false;
      if (Reach != other.Reach) return false;
      if (Receive != other.Receive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rewardInfo_ != null) hash ^= RewardInfo.GetHashCode();
      if (Reach != false) hash ^= Reach.GetHashCode();
      if (Receive != false) hash ^= Receive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (rewardInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RewardInfo);
      }
      if (Reach != false) {
        output.WriteRawTag(16);
        output.WriteBool(Reach);
      }
      if (Receive != false) {
        output.WriteRawTag(24);
        output.WriteBool(Receive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (rewardInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RewardInfo);
      }
      if (Reach != false) {
        output.WriteRawTag(16);
        output.WriteBool(Reach);
      }
      if (Receive != false) {
        output.WriteRawTag(24);
        output.WriteBool(Receive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rewardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardInfo);
      }
      if (Reach != false) {
        size += 1 + 1;
      }
      if (Receive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeRewardDetail other) {
      if (other == null) {
        return;
      }
      if (other.rewardInfo_ != null) {
        if (rewardInfo_ == null) {
          RewardInfo = new global::PlaneWar.ReceiveReward();
        }
        RewardInfo.MergeFrom(other.RewardInfo);
      }
      if (other.Reach != false) {
        Reach = other.Reach;
      }
      if (other.Receive != false) {
        Receive = other.Receive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rewardInfo_ == null) {
              RewardInfo = new global::PlaneWar.ReceiveReward();
            }
            input.ReadMessage(RewardInfo);
            break;
          }
          case 16: {
            Reach = input.ReadBool();
            break;
          }
          case 24: {
            Receive = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (rewardInfo_ == null) {
              RewardInfo = new global::PlaneWar.ReceiveReward();
            }
            input.ReadMessage(RewardInfo);
            break;
          }
          case 16: {
            Reach = input.ReadBool();
            break;
          }
          case 24: {
            Receive = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GradeRewardInfo : pb::IMessage<GradeRewardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GradeRewardInfo> _parser = new pb::MessageParser<GradeRewardInfo>(() => new GradeRewardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeRewardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[253]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRewardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRewardInfo(GradeRewardInfo other) : this() {
      rankName_ = other.rankName_;
      commRewardList_ = other.commRewardList_.Clone();
      advanceRewardList_ = other.advanceRewardList_.Clone();
      first_ = other.first_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRewardInfo Clone() {
      return new GradeRewardInfo(this);
    }

    /// <summary>Field number for the "rankName" field.</summary>
    public const int RankNameFieldNumber = 1;
    private string rankName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RankName {
      get { return rankName_; }
      set {
        rankName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commRewardList" field.</summary>
    public const int CommRewardListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.GradeRewardDetail> _repeated_commRewardList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.GradeRewardDetail.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.GradeRewardDetail> commRewardList_ = new pbc::RepeatedField<global::PlaneWar.GradeRewardDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.GradeRewardDetail> CommRewardList {
      get { return commRewardList_; }
    }

    /// <summary>Field number for the "advanceRewardList" field.</summary>
    public const int AdvanceRewardListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PlaneWar.GradeRewardDetail> _repeated_advanceRewardList_codec
        = pb::FieldCodec.ForMessage(26, global::PlaneWar.GradeRewardDetail.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.GradeRewardDetail> advanceRewardList_ = new pbc::RepeatedField<global::PlaneWar.GradeRewardDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.GradeRewardDetail> AdvanceRewardList {
      get { return advanceRewardList_; }
    }

    /// <summary>Field number for the "first" field.</summary>
    public const int FirstFieldNumber = 4;
    private bool first_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool First {
      get { return first_; }
      set {
        first_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeRewardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeRewardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RankName != other.RankName) return false;
      if(!commRewardList_.Equals(other.commRewardList_)) return false;
      if(!advanceRewardList_.Equals(other.advanceRewardList_)) return false;
      if (First != other.First) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RankName.Length != 0) hash ^= RankName.GetHashCode();
      hash ^= commRewardList_.GetHashCode();
      hash ^= advanceRewardList_.GetHashCode();
      if (First != false) hash ^= First.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RankName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RankName);
      }
      commRewardList_.WriteTo(output, _repeated_commRewardList_codec);
      advanceRewardList_.WriteTo(output, _repeated_advanceRewardList_codec);
      if (First != false) {
        output.WriteRawTag(32);
        output.WriteBool(First);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RankName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RankName);
      }
      commRewardList_.WriteTo(ref output, _repeated_commRewardList_codec);
      advanceRewardList_.WriteTo(ref output, _repeated_advanceRewardList_codec);
      if (First != false) {
        output.WriteRawTag(32);
        output.WriteBool(First);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RankName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RankName);
      }
      size += commRewardList_.CalculateSize(_repeated_commRewardList_codec);
      size += advanceRewardList_.CalculateSize(_repeated_advanceRewardList_codec);
      if (First != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeRewardInfo other) {
      if (other == null) {
        return;
      }
      if (other.RankName.Length != 0) {
        RankName = other.RankName;
      }
      commRewardList_.Add(other.commRewardList_);
      advanceRewardList_.Add(other.advanceRewardList_);
      if (other.First != false) {
        First = other.First;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RankName = input.ReadString();
            break;
          }
          case 18: {
            commRewardList_.AddEntriesFrom(input, _repeated_commRewardList_codec);
            break;
          }
          case 26: {
            advanceRewardList_.AddEntriesFrom(input, _repeated_advanceRewardList_codec);
            break;
          }
          case 32: {
            First = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RankName = input.ReadString();
            break;
          }
          case 18: {
            commRewardList_.AddEntriesFrom(ref input, _repeated_commRewardList_codec);
            break;
          }
          case 26: {
            advanceRewardList_.AddEntriesFrom(ref input, _repeated_advanceRewardList_codec);
            break;
          }
          case 32: {
            First = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GradeRankInfo : pb::IMessage<GradeRankInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GradeRankInfo> _parser = new pb::MessageParser<GradeRankInfo>(() => new GradeRankInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GradeRankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[254]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRankInfo(GradeRankInfo other) : this() {
      currentRank_ = other.currentRank_;
      star_ = other.star_;
      rankName_ = other.rankName_;
      historyRank_ = other.historyRank_;
      historyRankName_ = other.historyRankName_;
      kingTag_ = other.kingTag_;
      currentExp_ = other.currentExp_;
      nextExp_ = other.nextExp_;
      extraExp_ = other.extraExp_;
      playerName_ = other.playerName_;
      availableGift_ = other.availableGift_;
      isLast_ = other.isLast_;
      isSelf_ = other.isSelf_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GradeRankInfo Clone() {
      return new GradeRankInfo(this);
    }

    /// <summary>Field number for the "currentRank" field.</summary>
    public const int CurrentRankFieldNumber = 1;
    private int currentRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentRank {
      get { return currentRank_; }
      set {
        currentRank_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 2;
    private int star_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "rankName" field.</summary>
    public const int RankNameFieldNumber = 3;
    private string rankName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RankName {
      get { return rankName_; }
      set {
        rankName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "historyRank" field.</summary>
    public const int HistoryRankFieldNumber = 4;
    private int historyRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HistoryRank {
      get { return historyRank_; }
      set {
        historyRank_ = value;
      }
    }

    /// <summary>Field number for the "historyRankName" field.</summary>
    public const int HistoryRankNameFieldNumber = 5;
    private string historyRankName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HistoryRankName {
      get { return historyRankName_; }
      set {
        historyRankName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kingTag" field.</summary>
    public const int KingTagFieldNumber = 6;
    private int kingTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KingTag {
      get { return kingTag_; }
      set {
        kingTag_ = value;
      }
    }

    /// <summary>Field number for the "currentExp" field.</summary>
    public const int CurrentExpFieldNumber = 7;
    private float currentExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentExp {
      get { return currentExp_; }
      set {
        currentExp_ = value;
      }
    }

    /// <summary>Field number for the "nextExp" field.</summary>
    public const int NextExpFieldNumber = 8;
    private float nextExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NextExp {
      get { return nextExp_; }
      set {
        nextExp_ = value;
      }
    }

    /// <summary>Field number for the "extraExp" field.</summary>
    public const int ExtraExpFieldNumber = 9;
    private float extraExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExtraExp {
      get { return extraExp_; }
      set {
        extraExp_ = value;
      }
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 10;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "availableGift" field.</summary>
    public const int AvailableGiftFieldNumber = 11;
    private int availableGift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvailableGift {
      get { return availableGift_; }
      set {
        availableGift_ = value;
      }
    }

    /// <summary>Field number for the "isLast" field.</summary>
    public const int IsLastFieldNumber = 12;
    private bool isLast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLast {
      get { return isLast_; }
      set {
        isLast_ = value;
      }
    }

    /// <summary>Field number for the "isSelf" field.</summary>
    public const int IsSelfFieldNumber = 13;
    private bool isSelf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSelf {
      get { return isSelf_; }
      set {
        isSelf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GradeRankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GradeRankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentRank != other.CurrentRank) return false;
      if (Star != other.Star) return false;
      if (RankName != other.RankName) return false;
      if (HistoryRank != other.HistoryRank) return false;
      if (HistoryRankName != other.HistoryRankName) return false;
      if (KingTag != other.KingTag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentExp, other.CurrentExp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NextExp, other.NextExp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExtraExp, other.ExtraExp)) return false;
      if (PlayerName != other.PlayerName) return false;
      if (AvailableGift != other.AvailableGift) return false;
      if (IsLast != other.IsLast) return false;
      if (IsSelf != other.IsSelf) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentRank != 0) hash ^= CurrentRank.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (RankName.Length != 0) hash ^= RankName.GetHashCode();
      if (HistoryRank != 0) hash ^= HistoryRank.GetHashCode();
      if (HistoryRankName.Length != 0) hash ^= HistoryRankName.GetHashCode();
      if (KingTag != 0) hash ^= KingTag.GetHashCode();
      if (CurrentExp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentExp);
      if (NextExp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NextExp);
      if (ExtraExp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExtraExp);
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (AvailableGift != 0) hash ^= AvailableGift.GetHashCode();
      if (IsLast != false) hash ^= IsLast.GetHashCode();
      if (IsSelf != false) hash ^= IsSelf.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurrentRank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentRank);
      }
      if (Star != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Star);
      }
      if (RankName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RankName);
      }
      if (HistoryRank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HistoryRank);
      }
      if (HistoryRankName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HistoryRankName);
      }
      if (KingTag != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(KingTag);
      }
      if (CurrentExp != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CurrentExp);
      }
      if (NextExp != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(NextExp);
      }
      if (ExtraExp != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ExtraExp);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PlayerName);
      }
      if (AvailableGift != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(AvailableGift);
      }
      if (IsLast != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsLast);
      }
      if (IsSelf != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsSelf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurrentRank != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentRank);
      }
      if (Star != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Star);
      }
      if (RankName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RankName);
      }
      if (HistoryRank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HistoryRank);
      }
      if (HistoryRankName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HistoryRankName);
      }
      if (KingTag != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(KingTag);
      }
      if (CurrentExp != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CurrentExp);
      }
      if (NextExp != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(NextExp);
      }
      if (ExtraExp != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ExtraExp);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PlayerName);
      }
      if (AvailableGift != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(AvailableGift);
      }
      if (IsLast != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsLast);
      }
      if (IsSelf != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsSelf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentRank);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (RankName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RankName);
      }
      if (HistoryRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HistoryRank);
      }
      if (HistoryRankName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HistoryRankName);
      }
      if (KingTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KingTag);
      }
      if (CurrentExp != 0F) {
        size += 1 + 4;
      }
      if (NextExp != 0F) {
        size += 1 + 4;
      }
      if (ExtraExp != 0F) {
        size += 1 + 4;
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (AvailableGift != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableGift);
      }
      if (IsLast != false) {
        size += 1 + 1;
      }
      if (IsSelf != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GradeRankInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurrentRank != 0) {
        CurrentRank = other.CurrentRank;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.RankName.Length != 0) {
        RankName = other.RankName;
      }
      if (other.HistoryRank != 0) {
        HistoryRank = other.HistoryRank;
      }
      if (other.HistoryRankName.Length != 0) {
        HistoryRankName = other.HistoryRankName;
      }
      if (other.KingTag != 0) {
        KingTag = other.KingTag;
      }
      if (other.CurrentExp != 0F) {
        CurrentExp = other.CurrentExp;
      }
      if (other.NextExp != 0F) {
        NextExp = other.NextExp;
      }
      if (other.ExtraExp != 0F) {
        ExtraExp = other.ExtraExp;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.AvailableGift != 0) {
        AvailableGift = other.AvailableGift;
      }
      if (other.IsLast != false) {
        IsLast = other.IsLast;
      }
      if (other.IsSelf != false) {
        IsSelf = other.IsSelf;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrentRank = input.ReadInt32();
            break;
          }
          case 16: {
            Star = input.ReadInt32();
            break;
          }
          case 26: {
            RankName = input.ReadString();
            break;
          }
          case 32: {
            HistoryRank = input.ReadInt32();
            break;
          }
          case 42: {
            HistoryRankName = input.ReadString();
            break;
          }
          case 48: {
            KingTag = input.ReadInt32();
            break;
          }
          case 61: {
            CurrentExp = input.ReadFloat();
            break;
          }
          case 69: {
            NextExp = input.ReadFloat();
            break;
          }
          case 77: {
            ExtraExp = input.ReadFloat();
            break;
          }
          case 82: {
            PlayerName = input.ReadString();
            break;
          }
          case 88: {
            AvailableGift = input.ReadInt32();
            break;
          }
          case 96: {
            IsLast = input.ReadBool();
            break;
          }
          case 104: {
            IsSelf = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurrentRank = input.ReadInt32();
            break;
          }
          case 16: {
            Star = input.ReadInt32();
            break;
          }
          case 26: {
            RankName = input.ReadString();
            break;
          }
          case 32: {
            HistoryRank = input.ReadInt32();
            break;
          }
          case 42: {
            HistoryRankName = input.ReadString();
            break;
          }
          case 48: {
            KingTag = input.ReadInt32();
            break;
          }
          case 61: {
            CurrentExp = input.ReadFloat();
            break;
          }
          case 69: {
            NextExp = input.ReadFloat();
            break;
          }
          case 77: {
            ExtraExp = input.ReadFloat();
            break;
          }
          case 82: {
            PlayerName = input.ReadString();
            break;
          }
          case 88: {
            AvailableGift = input.ReadInt32();
            break;
          }
          case 96: {
            IsLast = input.ReadBool();
            break;
          }
          case 104: {
            IsSelf = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetTableUserInfo : pb::IMessage<CSGetTableUserInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetTableUserInfo> _parser = new pb::MessageParser<CSGetTableUserInfo>(() => new CSGetTableUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetTableUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[255]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTableUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTableUserInfo(CSGetTableUserInfo other) : this() {
      chairId_ = other.chairId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetTableUserInfo Clone() {
      return new CSGetTableUserInfo(this);
    }

    /// <summary>Field number for the "chairId" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetTableUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetTableUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetTableUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetTableUserInfo : pb::IMessage<SCGetTableUserInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetTableUserInfo> _parser = new pb::MessageParser<SCGetTableUserInfo>(() => new SCGetTableUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetTableUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[256]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTableUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTableUserInfo(SCGetTableUserInfo other) : this() {
      playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
      gradeRankInfo_ = other.gradeRankInfo_ != null ? other.gradeRankInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetTableUserInfo Clone() {
      return new SCGetTableUserInfo(this);
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::PlaneWar.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "gradeRankInfo" field.</summary>
    public const int GradeRankInfoFieldNumber = 2;
    private global::PlaneWar.GradeRankInfo gradeRankInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GradeRankInfo GradeRankInfo {
      get { return gradeRankInfo_; }
      set {
        gradeRankInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetTableUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetTableUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (!object.Equals(GradeRankInfo, other.GradeRankInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (gradeRankInfo_ != null) hash ^= GradeRankInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (gradeRankInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GradeRankInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (gradeRankInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GradeRankInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (gradeRankInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GradeRankInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetTableUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          PlayerInfo = new global::PlaneWar.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.gradeRankInfo_ != null) {
        if (gradeRankInfo_ == null) {
          GradeRankInfo = new global::PlaneWar.GradeRankInfo();
        }
        GradeRankInfo.MergeFrom(other.GradeRankInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::PlaneWar.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 18: {
            if (gradeRankInfo_ == null) {
              GradeRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(GradeRankInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (playerInfo_ == null) {
              PlayerInfo = new global::PlaneWar.PlayerInfo();
            }
            input.ReadMessage(PlayerInfo);
            break;
          }
          case 18: {
            if (gradeRankInfo_ == null) {
              GradeRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(GradeRankInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetGradeRewardInfo : pb::IMessage<CSGetGradeRewardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetGradeRewardInfo> _parser = new pb::MessageParser<CSGetGradeRewardInfo>(() => new CSGetGradeRewardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetGradeRewardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[257]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetGradeRewardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetGradeRewardInfo(CSGetGradeRewardInfo other) : this() {
      startIdx_ = other.startIdx_;
      endIdx_ = other.endIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetGradeRewardInfo Clone() {
      return new CSGetGradeRewardInfo(this);
    }

    /// <summary>Field number for the "startIdx" field.</summary>
    public const int StartIdxFieldNumber = 1;
    private int startIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartIdx {
      get { return startIdx_; }
      set {
        startIdx_ = value;
      }
    }

    /// <summary>Field number for the "endIdx" field.</summary>
    public const int EndIdxFieldNumber = 2;
    private int endIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndIdx {
      get { return endIdx_; }
      set {
        endIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetGradeRewardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetGradeRewardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartIdx != other.StartIdx) return false;
      if (EndIdx != other.EndIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartIdx != 0) hash ^= StartIdx.GetHashCode();
      if (EndIdx != 0) hash ^= EndIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartIdx);
      }
      if (EndIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartIdx);
      }
      if (EndIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartIdx);
      }
      if (EndIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetGradeRewardInfo other) {
      if (other == null) {
        return;
      }
      if (other.StartIdx != 0) {
        StartIdx = other.StartIdx;
      }
      if (other.EndIdx != 0) {
        EndIdx = other.EndIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartIdx = input.ReadInt32();
            break;
          }
          case 16: {
            EndIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartIdx = input.ReadInt32();
            break;
          }
          case 16: {
            EndIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetGradeRewardInfo : pb::IMessage<SCGetGradeRewardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetGradeRewardInfo> _parser = new pb::MessageParser<SCGetGradeRewardInfo>(() => new SCGetGradeRewardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetGradeRewardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[258]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetGradeRewardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetGradeRewardInfo(SCGetGradeRewardInfo other) : this() {
      gradeRewardInfoList_ = other.gradeRewardInfoList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetGradeRewardInfo Clone() {
      return new SCGetGradeRewardInfo(this);
    }

    /// <summary>Field number for the "gradeRewardInfoList" field.</summary>
    public const int GradeRewardInfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.GradeRewardInfo> _repeated_gradeRewardInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.GradeRewardInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.GradeRewardInfo> gradeRewardInfoList_ = new pbc::RepeatedField<global::PlaneWar.GradeRewardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.GradeRewardInfo> GradeRewardInfoList {
      get { return gradeRewardInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetGradeRewardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetGradeRewardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gradeRewardInfoList_.Equals(other.gradeRewardInfoList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gradeRewardInfoList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gradeRewardInfoList_.WriteTo(output, _repeated_gradeRewardInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gradeRewardInfoList_.WriteTo(ref output, _repeated_gradeRewardInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gradeRewardInfoList_.CalculateSize(_repeated_gradeRewardInfoList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetGradeRewardInfo other) {
      if (other == null) {
        return;
      }
      gradeRewardInfoList_.Add(other.gradeRewardInfoList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gradeRewardInfoList_.AddEntriesFrom(input, _repeated_gradeRewardInfoList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gradeRewardInfoList_.AddEntriesFrom(ref input, _repeated_gradeRewardInfoList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetGradeRankInfo : pb::IMessage<CSGetGradeRankInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetGradeRankInfo> _parser = new pb::MessageParser<CSGetGradeRankInfo>(() => new CSGetGradeRankInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetGradeRankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[259]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetGradeRankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetGradeRankInfo(CSGetGradeRankInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetGradeRankInfo Clone() {
      return new CSGetGradeRankInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetGradeRankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetGradeRankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetGradeRankInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetGradeRankInfo : pb::IMessage<SCGetGradeRankInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetGradeRankInfo> _parser = new pb::MessageParser<SCGetGradeRankInfo>(() => new SCGetGradeRankInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetGradeRankInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[260]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetGradeRankInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetGradeRankInfo(SCGetGradeRankInfo other) : this() {
      gradeRankInfo_ = other.gradeRankInfo_ != null ? other.gradeRankInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetGradeRankInfo Clone() {
      return new SCGetGradeRankInfo(this);
    }

    /// <summary>Field number for the "gradeRankInfo" field.</summary>
    public const int GradeRankInfoFieldNumber = 1;
    private global::PlaneWar.GradeRankInfo gradeRankInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GradeRankInfo GradeRankInfo {
      get { return gradeRankInfo_; }
      set {
        gradeRankInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetGradeRankInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetGradeRankInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GradeRankInfo, other.GradeRankInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gradeRankInfo_ != null) hash ^= GradeRankInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (gradeRankInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GradeRankInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (gradeRankInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GradeRankInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gradeRankInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GradeRankInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetGradeRankInfo other) {
      if (other == null) {
        return;
      }
      if (other.gradeRankInfo_ != null) {
        if (gradeRankInfo_ == null) {
          GradeRankInfo = new global::PlaneWar.GradeRankInfo();
        }
        GradeRankInfo.MergeFrom(other.GradeRankInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gradeRankInfo_ == null) {
              GradeRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(GradeRankInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (gradeRankInfo_ == null) {
              GradeRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(GradeRankInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCRankUpgrade : pb::IMessage<SCRankUpgrade>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCRankUpgrade> _parser = new pb::MessageParser<SCRankUpgrade>(() => new SCRankUpgrade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCRankUpgrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[261]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRankUpgrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRankUpgrade(SCRankUpgrade other) : this() {
      gradeRankInfo_ = other.gradeRankInfo_ != null ? other.gradeRankInfo_.Clone() : null;
      advance_ = other.advance_;
      chair_ = other.chair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRankUpgrade Clone() {
      return new SCRankUpgrade(this);
    }

    /// <summary>Field number for the "gradeRankInfo" field.</summary>
    public const int GradeRankInfoFieldNumber = 1;
    private global::PlaneWar.GradeRankInfo gradeRankInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GradeRankInfo GradeRankInfo {
      get { return gradeRankInfo_; }
      set {
        gradeRankInfo_ = value;
      }
    }

    /// <summary>Field number for the "advance" field.</summary>
    public const int AdvanceFieldNumber = 2;
    private bool advance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Advance {
      get { return advance_; }
      set {
        advance_ = value;
      }
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 3;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCRankUpgrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCRankUpgrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GradeRankInfo, other.GradeRankInfo)) return false;
      if (Advance != other.Advance) return false;
      if (Chair != other.Chair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gradeRankInfo_ != null) hash ^= GradeRankInfo.GetHashCode();
      if (Advance != false) hash ^= Advance.GetHashCode();
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (gradeRankInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GradeRankInfo);
      }
      if (Advance != false) {
        output.WriteRawTag(16);
        output.WriteBool(Advance);
      }
      if (Chair != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Chair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (gradeRankInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GradeRankInfo);
      }
      if (Advance != false) {
        output.WriteRawTag(16);
        output.WriteBool(Advance);
      }
      if (Chair != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Chair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gradeRankInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GradeRankInfo);
      }
      if (Advance != false) {
        size += 1 + 1;
      }
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCRankUpgrade other) {
      if (other == null) {
        return;
      }
      if (other.gradeRankInfo_ != null) {
        if (gradeRankInfo_ == null) {
          GradeRankInfo = new global::PlaneWar.GradeRankInfo();
        }
        GradeRankInfo.MergeFrom(other.GradeRankInfo);
      }
      if (other.Advance != false) {
        Advance = other.Advance;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gradeRankInfo_ == null) {
              GradeRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(GradeRankInfo);
            break;
          }
          case 16: {
            Advance = input.ReadBool();
            break;
          }
          case 24: {
            Chair = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (gradeRankInfo_ == null) {
              GradeRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(GradeRankInfo);
            break;
          }
          case 16: {
            Advance = input.ReadBool();
            break;
          }
          case 24: {
            Chair = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSRankSeasonStatus : pb::IMessage<CSRankSeasonStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSRankSeasonStatus> _parser = new pb::MessageParser<CSRankSeasonStatus>(() => new CSRankSeasonStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRankSeasonStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[262]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRankSeasonStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRankSeasonStatus(CSRankSeasonStatus other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRankSeasonStatus Clone() {
      return new CSRankSeasonStatus(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSRankSeasonStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSRankSeasonStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSRankSeasonStatus other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCRankSeasonStatus : pb::IMessage<SCRankSeasonStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCRankSeasonStatus> _parser = new pb::MessageParser<SCRankSeasonStatus>(() => new SCRankSeasonStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCRankSeasonStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[263]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRankSeasonStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRankSeasonStatus(SCRankSeasonStatus other) : this() {
      enable_ = other.enable_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      seasonName_ = other.seasonName_;
      season_ = other.season_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCRankSeasonStatus Clone() {
      return new SCRankSeasonStatus(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private int startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private int endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "seasonName" field.</summary>
    public const int SeasonNameFieldNumber = 4;
    private string seasonName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SeasonName {
      get { return seasonName_; }
      set {
        seasonName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "season" field.</summary>
    public const int SeasonFieldNumber = 5;
    private int season_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Season {
      get { return season_; }
      set {
        season_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCRankSeasonStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCRankSeasonStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (SeasonName != other.SeasonName) return false;
      if (Season != other.Season) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (StartTime != 0) hash ^= StartTime.GetHashCode();
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      if (SeasonName.Length != 0) hash ^= SeasonName.GetHashCode();
      if (Season != 0) hash ^= Season.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndTime);
      }
      if (SeasonName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SeasonName);
      }
      if (Season != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Season);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndTime);
      }
      if (SeasonName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SeasonName);
      }
      if (Season != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Season);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      if (SeasonName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SeasonName);
      }
      if (Season != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Season);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCRankSeasonStatus other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.StartTime != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      if (other.SeasonName.Length != 0) {
        SeasonName = other.SeasonName;
      }
      if (other.Season != 0) {
        Season = other.Season;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 16: {
            StartTime = input.ReadInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadInt32();
            break;
          }
          case 34: {
            SeasonName = input.ReadString();
            break;
          }
          case 40: {
            Season = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 16: {
            StartTime = input.ReadInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadInt32();
            break;
          }
          case 34: {
            SeasonName = input.ReadString();
            break;
          }
          case 40: {
            Season = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncTime : pb::IMessage<SCSyncTime>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncTime> _parser = new pb::MessageParser<SCSyncTime>(() => new SCSyncTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[264]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncTime(SCSyncTime other) : this() {
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncTime Clone() {
      return new SCSyncTime(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncTime other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCNoticePropsOverdue : pb::IMessage<SCNoticePropsOverdue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCNoticePropsOverdue> _parser = new pb::MessageParser<SCNoticePropsOverdue>(() => new SCNoticePropsOverdue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCNoticePropsOverdue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[265]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticePropsOverdue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticePropsOverdue(SCNoticePropsOverdue other) : this() {
      propId_ = other.propId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNoticePropsOverdue Clone() {
      return new SCNoticePropsOverdue(this);
    }

    /// <summary>Field number for the "propId" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCNoticePropsOverdue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCNoticePropsOverdue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropId != other.PropId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCNoticePropsOverdue other) {
      if (other == null) {
        return;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PurchaseResult : pb::IMessage<PurchaseResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PurchaseResult> _parser = new pb::MessageParser<PurchaseResult>(() => new PurchaseResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PurchaseResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[266]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseResult(PurchaseResult other) : this() {
      wareId_ = other.wareId_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PurchaseResult Clone() {
      return new PurchaseResult(this);
    }

    /// <summary>Field number for the "wareId" field.</summary>
    public const int WareIdFieldNumber = 1;
    private string wareId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WareId {
      get { return wareId_; }
      set {
        wareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private bool status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PurchaseResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PurchaseResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WareId != other.WareId) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WareId.Length != 0) hash ^= WareId.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WareId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WareId);
      }
      if (Status != false) {
        output.WriteRawTag(16);
        output.WriteBool(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WareId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WareId);
      }
      if (Status != false) {
        output.WriteRawTag(16);
        output.WriteBool(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WareId);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PurchaseResult other) {
      if (other == null) {
        return;
      }
      if (other.WareId.Length != 0) {
        WareId = other.WareId;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WareId = input.ReadString();
            break;
          }
          case 16: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            WareId = input.ReadString();
            break;
          }
          case 16: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSQueryPackagePurchase : pb::IMessage<CSQueryPackagePurchase>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSQueryPackagePurchase> _parser = new pb::MessageParser<CSQueryPackagePurchase>(() => new CSQueryPackagePurchase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSQueryPackagePurchase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[267]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryPackagePurchase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryPackagePurchase(CSQueryPackagePurchase other) : this() {
      wareIdList_ = other.wareIdList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryPackagePurchase Clone() {
      return new CSQueryPackagePurchase(this);
    }

    /// <summary>Field number for the "wareIdList" field.</summary>
    public const int WareIdListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_wareIdList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> wareIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WareIdList {
      get { return wareIdList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSQueryPackagePurchase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSQueryPackagePurchase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!wareIdList_.Equals(other.wareIdList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= wareIdList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      wareIdList_.WriteTo(output, _repeated_wareIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      wareIdList_.WriteTo(ref output, _repeated_wareIdList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += wareIdList_.CalculateSize(_repeated_wareIdList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSQueryPackagePurchase other) {
      if (other == null) {
        return;
      }
      wareIdList_.Add(other.wareIdList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            wareIdList_.AddEntriesFrom(input, _repeated_wareIdList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            wareIdList_.AddEntriesFrom(ref input, _repeated_wareIdList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCQueryPackagePurchase : pb::IMessage<SCQueryPackagePurchase>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCQueryPackagePurchase> _parser = new pb::MessageParser<SCQueryPackagePurchase>(() => new SCQueryPackagePurchase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCQueryPackagePurchase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[268]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryPackagePurchase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryPackagePurchase(SCQueryPackagePurchase other) : this() {
      purchaseResList_ = other.purchaseResList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryPackagePurchase Clone() {
      return new SCQueryPackagePurchase(this);
    }

    /// <summary>Field number for the "purchaseResList" field.</summary>
    public const int PurchaseResListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.PurchaseResult> _repeated_purchaseResList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.PurchaseResult.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PurchaseResult> purchaseResList_ = new pbc::RepeatedField<global::PlaneWar.PurchaseResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PurchaseResult> PurchaseResList {
      get { return purchaseResList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCQueryPackagePurchase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCQueryPackagePurchase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!purchaseResList_.Equals(other.purchaseResList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= purchaseResList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      purchaseResList_.WriteTo(output, _repeated_purchaseResList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      purchaseResList_.WriteTo(ref output, _repeated_purchaseResList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += purchaseResList_.CalculateSize(_repeated_purchaseResList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCQueryPackagePurchase other) {
      if (other == null) {
        return;
      }
      purchaseResList_.Add(other.purchaseResList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            purchaseResList_.AddEntriesFrom(input, _repeated_purchaseResList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            purchaseResList_.AddEntriesFrom(ref input, _repeated_purchaseResList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PropsInfo : pb::IMessage<PropsInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PropsInfo> _parser = new pb::MessageParser<PropsInfo>(() => new PropsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[269]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropsInfo(PropsInfo other) : this() {
      propId_ = other.propId_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropsInfo Clone() {
      return new PropsInfo(this);
    }

    /// <summary>Field number for the "propId" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropId != other.PropId) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropsInfo other) {
      if (other == null) {
        return;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGamePurchasePush : pb::IMessage<SCGamePurchasePush>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGamePurchasePush> _parser = new pb::MessageParser<SCGamePurchasePush>(() => new SCGamePurchasePush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGamePurchasePush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[270]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGamePurchasePush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGamePurchasePush(SCGamePurchasePush other) : this() {
      propsList_ = other.propsList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGamePurchasePush Clone() {
      return new SCGamePurchasePush(this);
    }

    /// <summary>Field number for the "propsList" field.</summary>
    public const int PropsListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.PropsInfo> _repeated_propsList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.PropsInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PropsInfo> propsList_ = new pbc::RepeatedField<global::PlaneWar.PropsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PropsInfo> PropsList {
      get { return propsList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGamePurchasePush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGamePurchasePush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!propsList_.Equals(other.propsList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= propsList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      propsList_.WriteTo(output, _repeated_propsList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      propsList_.WriteTo(ref output, _repeated_propsList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += propsList_.CalculateSize(_repeated_propsList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGamePurchasePush other) {
      if (other == null) {
        return;
      }
      propsList_.Add(other.propsList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            propsList_.AddEntriesFrom(input, _repeated_propsList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            propsList_.AddEntriesFrom(ref input, _repeated_propsList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PackageMarquee : pb::IMessage<PackageMarquee>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PackageMarquee> _parser = new pb::MessageParser<PackageMarquee>(() => new PackageMarquee());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageMarquee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[271]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageMarquee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageMarquee(PackageMarquee other) : this() {
      nickname_ = other.nickname_;
      wareId_ = other.wareId_;
      props_ = other.props_ != null ? other.props_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageMarquee Clone() {
      return new PackageMarquee(this);
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 1;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wareId" field.</summary>
    public const int WareIdFieldNumber = 2;
    private string wareId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WareId {
      get { return wareId_; }
      set {
        wareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 3;
    private global::PlaneWar.PropsInfo props_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.PropsInfo Props {
      get { return props_; }
      set {
        props_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageMarquee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageMarquee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nickname != other.Nickname) return false;
      if (WareId != other.WareId) return false;
      if (!object.Equals(Props, other.Props)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (WareId.Length != 0) hash ^= WareId.GetHashCode();
      if (props_ != null) hash ^= Props.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Nickname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nickname);
      }
      if (WareId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WareId);
      }
      if (props_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Props);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Nickname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nickname);
      }
      if (WareId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WareId);
      }
      if (props_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Props);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (WareId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WareId);
      }
      if (props_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Props);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageMarquee other) {
      if (other == null) {
        return;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.WareId.Length != 0) {
        WareId = other.WareId;
      }
      if (other.props_ != null) {
        if (props_ == null) {
          Props = new global::PlaneWar.PropsInfo();
        }
        Props.MergeFrom(other.Props);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Nickname = input.ReadString();
            break;
          }
          case 18: {
            WareId = input.ReadString();
            break;
          }
          case 26: {
            if (props_ == null) {
              Props = new global::PlaneWar.PropsInfo();
            }
            input.ReadMessage(Props);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Nickname = input.ReadString();
            break;
          }
          case 18: {
            WareId = input.ReadString();
            break;
          }
          case 26: {
            if (props_ == null) {
              Props = new global::PlaneWar.PropsInfo();
            }
            input.ReadMessage(Props);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSQueryPackageMarquee : pb::IMessage<CSQueryPackageMarquee>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSQueryPackageMarquee> _parser = new pb::MessageParser<CSQueryPackageMarquee>(() => new CSQueryPackageMarquee());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSQueryPackageMarquee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[272]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryPackageMarquee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryPackageMarquee(CSQueryPackageMarquee other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryPackageMarquee Clone() {
      return new CSQueryPackageMarquee(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSQueryPackageMarquee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSQueryPackageMarquee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSQueryPackageMarquee other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCQueryPackageMarquee : pb::IMessage<SCQueryPackageMarquee>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCQueryPackageMarquee> _parser = new pb::MessageParser<SCQueryPackageMarquee>(() => new SCQueryPackageMarquee());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCQueryPackageMarquee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[273]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryPackageMarquee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryPackageMarquee(SCQueryPackageMarquee other) : this() {
      marqueeModel_ = other.marqueeModel_;
      packageMarqueeList_ = other.packageMarqueeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryPackageMarquee Clone() {
      return new SCQueryPackageMarquee(this);
    }

    /// <summary>Field number for the "marqueeModel" field.</summary>
    public const int MarqueeModelFieldNumber = 1;
    private string marqueeModel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarqueeModel {
      get { return marqueeModel_; }
      set {
        marqueeModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "packageMarqueeList" field.</summary>
    public const int PackageMarqueeListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.PackageMarquee> _repeated_packageMarqueeList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.PackageMarquee.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.PackageMarquee> packageMarqueeList_ = new pbc::RepeatedField<global::PlaneWar.PackageMarquee>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.PackageMarquee> PackageMarqueeList {
      get { return packageMarqueeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCQueryPackageMarquee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCQueryPackageMarquee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarqueeModel != other.MarqueeModel) return false;
      if(!packageMarqueeList_.Equals(other.packageMarqueeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarqueeModel.Length != 0) hash ^= MarqueeModel.GetHashCode();
      hash ^= packageMarqueeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MarqueeModel.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MarqueeModel);
      }
      packageMarqueeList_.WriteTo(output, _repeated_packageMarqueeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MarqueeModel.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MarqueeModel);
      }
      packageMarqueeList_.WriteTo(ref output, _repeated_packageMarqueeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarqueeModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MarqueeModel);
      }
      size += packageMarqueeList_.CalculateSize(_repeated_packageMarqueeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCQueryPackageMarquee other) {
      if (other == null) {
        return;
      }
      if (other.MarqueeModel.Length != 0) {
        MarqueeModel = other.MarqueeModel;
      }
      packageMarqueeList_.Add(other.packageMarqueeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MarqueeModel = input.ReadString();
            break;
          }
          case 18: {
            packageMarqueeList_.AddEntriesFrom(input, _repeated_packageMarqueeList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MarqueeModel = input.ReadString();
            break;
          }
          case 18: {
            packageMarqueeList_.AddEntriesFrom(ref input, _repeated_packageMarqueeList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSetWings : pb::IMessage<CSSetWings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSetWings> _parser = new pb::MessageParser<CSSetWings>(() => new CSSetWings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSetWings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[274]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetWings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetWings(CSSetWings other) : this() {
      wingId_ = other.wingId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetWings Clone() {
      return new CSSetWings(this);
    }

    /// <summary>Field number for the "wingId" field.</summary>
    public const int WingIdFieldNumber = 1;
    private int wingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingId {
      get { return wingId_; }
      set {
        wingId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSetWings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSetWings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WingId != other.WingId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WingId != 0) hash ^= WingId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WingId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WingId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WingId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSetWings other) {
      if (other == null) {
        return;
      }
      if (other.WingId != 0) {
        WingId = other.WingId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WingId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WingId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSetWings : pb::IMessage<SCSetWings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSetWings> _parser = new pb::MessageParser<SCSetWings>(() => new SCSetWings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSetWings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[275]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetWings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetWings(SCSetWings other) : this() {
      chair_ = other.chair_;
      wingId_ = other.wingId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetWings Clone() {
      return new SCSetWings(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "wingId" field.</summary>
    public const int WingIdFieldNumber = 2;
    private int wingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingId {
      get { return wingId_; }
      set {
        wingId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSetWings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSetWings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (WingId != other.WingId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (WingId != 0) hash ^= WingId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (WingId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WingId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (WingId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WingId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (WingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WingId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSetWings other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.WingId != 0) {
        WingId = other.WingId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            WingId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            WingId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSVerifySeasonChange : pb::IMessage<CSVerifySeasonChange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSVerifySeasonChange> _parser = new pb::MessageParser<CSVerifySeasonChange>(() => new CSVerifySeasonChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVerifySeasonChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[276]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVerifySeasonChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVerifySeasonChange(CSVerifySeasonChange other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVerifySeasonChange Clone() {
      return new CSVerifySeasonChange(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVerifySeasonChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVerifySeasonChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVerifySeasonChange other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCVerifySeasonChange : pb::IMessage<SCVerifySeasonChange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCVerifySeasonChange> _parser = new pb::MessageParser<SCVerifySeasonChange>(() => new SCVerifySeasonChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCVerifySeasonChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[277]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVerifySeasonChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVerifySeasonChange(SCVerifySeasonChange other) : this() {
      change_ = other.change_;
      beforeGradeRankInfo_ = other.beforeGradeRankInfo_ != null ? other.beforeGradeRankInfo_.Clone() : null;
      currentGradeRankInfo_ = other.currentGradeRankInfo_ != null ? other.currentGradeRankInfo_.Clone() : null;
      beforeSeason_ = other.beforeSeason_;
      currentSeason_ = other.currentSeason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVerifySeasonChange Clone() {
      return new SCVerifySeasonChange(this);
    }

    /// <summary>Field number for the "change" field.</summary>
    public const int ChangeFieldNumber = 1;
    private bool change_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Change {
      get { return change_; }
      set {
        change_ = value;
      }
    }

    /// <summary>Field number for the "beforeGradeRankInfo" field.</summary>
    public const int BeforeGradeRankInfoFieldNumber = 2;
    private global::PlaneWar.GradeRankInfo beforeGradeRankInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GradeRankInfo BeforeGradeRankInfo {
      get { return beforeGradeRankInfo_; }
      set {
        beforeGradeRankInfo_ = value;
      }
    }

    /// <summary>Field number for the "currentGradeRankInfo" field.</summary>
    public const int CurrentGradeRankInfoFieldNumber = 3;
    private global::PlaneWar.GradeRankInfo currentGradeRankInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GradeRankInfo CurrentGradeRankInfo {
      get { return currentGradeRankInfo_; }
      set {
        currentGradeRankInfo_ = value;
      }
    }

    /// <summary>Field number for the "beforeSeason" field.</summary>
    public const int BeforeSeasonFieldNumber = 4;
    private int beforeSeason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeforeSeason {
      get { return beforeSeason_; }
      set {
        beforeSeason_ = value;
      }
    }

    /// <summary>Field number for the "currentSeason" field.</summary>
    public const int CurrentSeasonFieldNumber = 5;
    private int currentSeason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentSeason {
      get { return currentSeason_; }
      set {
        currentSeason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCVerifySeasonChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCVerifySeasonChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Change != other.Change) return false;
      if (!object.Equals(BeforeGradeRankInfo, other.BeforeGradeRankInfo)) return false;
      if (!object.Equals(CurrentGradeRankInfo, other.CurrentGradeRankInfo)) return false;
      if (BeforeSeason != other.BeforeSeason) return false;
      if (CurrentSeason != other.CurrentSeason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Change != false) hash ^= Change.GetHashCode();
      if (beforeGradeRankInfo_ != null) hash ^= BeforeGradeRankInfo.GetHashCode();
      if (currentGradeRankInfo_ != null) hash ^= CurrentGradeRankInfo.GetHashCode();
      if (BeforeSeason != 0) hash ^= BeforeSeason.GetHashCode();
      if (CurrentSeason != 0) hash ^= CurrentSeason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Change != false) {
        output.WriteRawTag(8);
        output.WriteBool(Change);
      }
      if (beforeGradeRankInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BeforeGradeRankInfo);
      }
      if (currentGradeRankInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CurrentGradeRankInfo);
      }
      if (BeforeSeason != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BeforeSeason);
      }
      if (CurrentSeason != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentSeason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Change != false) {
        output.WriteRawTag(8);
        output.WriteBool(Change);
      }
      if (beforeGradeRankInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BeforeGradeRankInfo);
      }
      if (currentGradeRankInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CurrentGradeRankInfo);
      }
      if (BeforeSeason != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BeforeSeason);
      }
      if (CurrentSeason != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentSeason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Change != false) {
        size += 1 + 1;
      }
      if (beforeGradeRankInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeforeGradeRankInfo);
      }
      if (currentGradeRankInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentGradeRankInfo);
      }
      if (BeforeSeason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeforeSeason);
      }
      if (CurrentSeason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentSeason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCVerifySeasonChange other) {
      if (other == null) {
        return;
      }
      if (other.Change != false) {
        Change = other.Change;
      }
      if (other.beforeGradeRankInfo_ != null) {
        if (beforeGradeRankInfo_ == null) {
          BeforeGradeRankInfo = new global::PlaneWar.GradeRankInfo();
        }
        BeforeGradeRankInfo.MergeFrom(other.BeforeGradeRankInfo);
      }
      if (other.currentGradeRankInfo_ != null) {
        if (currentGradeRankInfo_ == null) {
          CurrentGradeRankInfo = new global::PlaneWar.GradeRankInfo();
        }
        CurrentGradeRankInfo.MergeFrom(other.CurrentGradeRankInfo);
      }
      if (other.BeforeSeason != 0) {
        BeforeSeason = other.BeforeSeason;
      }
      if (other.CurrentSeason != 0) {
        CurrentSeason = other.CurrentSeason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Change = input.ReadBool();
            break;
          }
          case 18: {
            if (beforeGradeRankInfo_ == null) {
              BeforeGradeRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(BeforeGradeRankInfo);
            break;
          }
          case 26: {
            if (currentGradeRankInfo_ == null) {
              CurrentGradeRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(CurrentGradeRankInfo);
            break;
          }
          case 32: {
            BeforeSeason = input.ReadInt32();
            break;
          }
          case 40: {
            CurrentSeason = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Change = input.ReadBool();
            break;
          }
          case 18: {
            if (beforeGradeRankInfo_ == null) {
              BeforeGradeRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(BeforeGradeRankInfo);
            break;
          }
          case 26: {
            if (currentGradeRankInfo_ == null) {
              CurrentGradeRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(CurrentGradeRankInfo);
            break;
          }
          case 32: {
            BeforeSeason = input.ReadInt32();
            break;
          }
          case 40: {
            CurrentSeason = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSExistUnReceiveRankReward : pb::IMessage<CSExistUnReceiveRankReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSExistUnReceiveRankReward> _parser = new pb::MessageParser<CSExistUnReceiveRankReward>(() => new CSExistUnReceiveRankReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExistUnReceiveRankReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[278]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExistUnReceiveRankReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExistUnReceiveRankReward(CSExistUnReceiveRankReward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExistUnReceiveRankReward Clone() {
      return new CSExistUnReceiveRankReward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSExistUnReceiveRankReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSExistUnReceiveRankReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSExistUnReceiveRankReward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCExistUnReceiveRankReward : pb::IMessage<SCExistUnReceiveRankReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCExistUnReceiveRankReward> _parser = new pb::MessageParser<SCExistUnReceiveRankReward>(() => new SCExistUnReceiveRankReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCExistUnReceiveRankReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[279]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExistUnReceiveRankReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExistUnReceiveRankReward(SCExistUnReceiveRankReward other) : this() {
      exist_ = other.exist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExistUnReceiveRankReward Clone() {
      return new SCExistUnReceiveRankReward(this);
    }

    /// <summary>Field number for the "exist" field.</summary>
    public const int ExistFieldNumber = 1;
    private bool exist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Exist {
      get { return exist_; }
      set {
        exist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCExistUnReceiveRankReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCExistUnReceiveRankReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exist != other.Exist) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Exist != false) hash ^= Exist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Exist != false) {
        output.WriteRawTag(8);
        output.WriteBool(Exist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Exist != false) {
        output.WriteRawTag(8);
        output.WriteBool(Exist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exist != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCExistUnReceiveRankReward other) {
      if (other == null) {
        return;
      }
      if (other.Exist != false) {
        Exist = other.Exist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Exist = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Exist = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSReceiveExtraGradeReward : pb::IMessage<CSReceiveExtraGradeReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSReceiveExtraGradeReward> _parser = new pb::MessageParser<CSReceiveExtraGradeReward>(() => new CSReceiveExtraGradeReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSReceiveExtraGradeReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[280]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReceiveExtraGradeReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReceiveExtraGradeReward(CSReceiveExtraGradeReward other) : this() {
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReceiveExtraGradeReward Clone() {
      return new CSReceiveExtraGradeReward(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSReceiveExtraGradeReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSReceiveExtraGradeReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSReceiveExtraGradeReward other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCReceiveExtraGradeReward : pb::IMessage<SCReceiveExtraGradeReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCReceiveExtraGradeReward> _parser = new pb::MessageParser<SCReceiveExtraGradeReward>(() => new SCReceiveExtraGradeReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCReceiveExtraGradeReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[281]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReceiveExtraGradeReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReceiveExtraGradeReward(SCReceiveExtraGradeReward other) : this() {
      receiveRewardList_ = other.receiveRewardList_.Clone();
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReceiveExtraGradeReward Clone() {
      return new SCReceiveExtraGradeReward(this);
    }

    /// <summary>Field number for the "receiveRewardList" field.</summary>
    public const int ReceiveRewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.ReceiveReward> _repeated_receiveRewardList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.ReceiveReward.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.ReceiveReward> receiveRewardList_ = new pbc::RepeatedField<global::PlaneWar.ReceiveReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.ReceiveReward> ReceiveRewardList {
      get { return receiveRewardList_; }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCReceiveExtraGradeReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCReceiveExtraGradeReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!receiveRewardList_.Equals(other.receiveRewardList_)) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= receiveRewardList_.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      receiveRewardList_.WriteTo(output, _repeated_receiveRewardList_codec);
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      receiveRewardList_.WriteTo(ref output, _repeated_receiveRewardList_codec);
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += receiveRewardList_.CalculateSize(_repeated_receiveRewardList_codec);
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCReceiveExtraGradeReward other) {
      if (other == null) {
        return;
      }
      receiveRewardList_.Add(other.receiveRewardList_);
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            receiveRewardList_.AddEntriesFrom(input, _repeated_receiveRewardList_codec);
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            receiveRewardList_.AddEntriesFrom(ref input, _repeated_receiveRewardList_codec);
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetGradeRankList : pb::IMessage<CSGetGradeRankList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetGradeRankList> _parser = new pb::MessageParser<CSGetGradeRankList>(() => new CSGetGradeRankList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetGradeRankList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[282]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetGradeRankList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetGradeRankList(CSGetGradeRankList other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      season_ = other.season_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetGradeRankList Clone() {
      return new CSGetGradeRankList(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private int to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "season" field.</summary>
    public const int SeasonFieldNumber = 3;
    private int season_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Season {
      get { return season_; }
      set {
        season_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetGradeRankList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetGradeRankList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Season != other.Season) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (To != 0) hash ^= To.GetHashCode();
      if (Season != 0) hash ^= Season.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (Season != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Season);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (To != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(To);
      }
      if (Season != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Season);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (To != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(To);
      }
      if (Season != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Season);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetGradeRankList other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.To != 0) {
        To = other.To;
      }
      if (other.Season != 0) {
        Season = other.Season;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
          case 24: {
            Season = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            To = input.ReadInt32();
            break;
          }
          case 24: {
            Season = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetGradeRankList : pb::IMessage<SCGetGradeRankList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetGradeRankList> _parser = new pb::MessageParser<SCGetGradeRankList>(() => new SCGetGradeRankList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetGradeRankList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[283]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetGradeRankList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetGradeRankList(SCGetGradeRankList other) : this() {
      gradeRankList_ = other.gradeRankList_.Clone();
      selfRankInfo_ = other.selfRankInfo_ != null ? other.selfRankInfo_.Clone() : null;
      ord_ = other.ord_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetGradeRankList Clone() {
      return new SCGetGradeRankList(this);
    }

    /// <summary>Field number for the "gradeRankList" field.</summary>
    public const int GradeRankListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.GradeRankInfo> _repeated_gradeRankList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.GradeRankInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.GradeRankInfo> gradeRankList_ = new pbc::RepeatedField<global::PlaneWar.GradeRankInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.GradeRankInfo> GradeRankList {
      get { return gradeRankList_; }
    }

    /// <summary>Field number for the "selfRankInfo" field.</summary>
    public const int SelfRankInfoFieldNumber = 2;
    private global::PlaneWar.GradeRankInfo selfRankInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.GradeRankInfo SelfRankInfo {
      get { return selfRankInfo_; }
      set {
        selfRankInfo_ = value;
      }
    }

    /// <summary>Field number for the "ord" field.</summary>
    public const int OrdFieldNumber = 3;
    private int ord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ord {
      get { return ord_; }
      set {
        ord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetGradeRankList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetGradeRankList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gradeRankList_.Equals(other.gradeRankList_)) return false;
      if (!object.Equals(SelfRankInfo, other.SelfRankInfo)) return false;
      if (Ord != other.Ord) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gradeRankList_.GetHashCode();
      if (selfRankInfo_ != null) hash ^= SelfRankInfo.GetHashCode();
      if (Ord != 0) hash ^= Ord.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gradeRankList_.WriteTo(output, _repeated_gradeRankList_codec);
      if (selfRankInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfRankInfo);
      }
      if (Ord != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gradeRankList_.WriteTo(ref output, _repeated_gradeRankList_codec);
      if (selfRankInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelfRankInfo);
      }
      if (Ord != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gradeRankList_.CalculateSize(_repeated_gradeRankList_codec);
      if (selfRankInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfRankInfo);
      }
      if (Ord != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ord);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetGradeRankList other) {
      if (other == null) {
        return;
      }
      gradeRankList_.Add(other.gradeRankList_);
      if (other.selfRankInfo_ != null) {
        if (selfRankInfo_ == null) {
          SelfRankInfo = new global::PlaneWar.GradeRankInfo();
        }
        SelfRankInfo.MergeFrom(other.SelfRankInfo);
      }
      if (other.Ord != 0) {
        Ord = other.Ord;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gradeRankList_.AddEntriesFrom(input, _repeated_gradeRankList_codec);
            break;
          }
          case 18: {
            if (selfRankInfo_ == null) {
              SelfRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(SelfRankInfo);
            break;
          }
          case 24: {
            Ord = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gradeRankList_.AddEntriesFrom(ref input, _repeated_gradeRankList_codec);
            break;
          }
          case 18: {
            if (selfRankInfo_ == null) {
              SelfRankInfo = new global::PlaneWar.GradeRankInfo();
            }
            input.ReadMessage(SelfRankInfo);
            break;
          }
          case 24: {
            Ord = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSBuyPlane : pb::IMessage<CSBuyPlane>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSBuyPlane> _parser = new pb::MessageParser<CSBuyPlane>(() => new CSBuyPlane());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBuyPlane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[284]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyPlane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyPlane(CSBuyPlane other) : this() {
      planeId_ = other.planeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyPlane Clone() {
      return new CSBuyPlane(this);
    }

    /// <summary>Field number for the "plane_id" field.</summary>
    public const int PlaneIdFieldNumber = 1;
    private int planeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaneId {
      get { return planeId_; }
      set {
        planeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBuyPlane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBuyPlane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlaneId != other.PlaneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlaneId != 0) hash ^= PlaneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlaneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlaneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBuyPlane other) {
      if (other == null) {
        return;
      }
      if (other.PlaneId != 0) {
        PlaneId = other.PlaneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlaneId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlaneId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCBuyPlane : pb::IMessage<SCBuyPlane>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCBuyPlane> _parser = new pb::MessageParser<SCBuyPlane>(() => new SCBuyPlane());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCBuyPlane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[285]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyPlane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyPlane(SCBuyPlane other) : this() {
      planeId_ = other.planeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyPlane Clone() {
      return new SCBuyPlane(this);
    }

    /// <summary>Field number for the "plane_id" field.</summary>
    public const int PlaneIdFieldNumber = 1;
    private int planeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaneId {
      get { return planeId_; }
      set {
        planeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCBuyPlane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCBuyPlane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlaneId != other.PlaneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlaneId != 0) hash ^= PlaneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlaneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlaneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCBuyPlane other) {
      if (other == null) {
        return;
      }
      if (other.PlaneId != 0) {
        PlaneId = other.PlaneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlaneId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlaneId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSBuyWings : pb::IMessage<CSBuyWings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSBuyWings> _parser = new pb::MessageParser<CSBuyWings>(() => new CSBuyWings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBuyWings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[286]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyWings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyWings(CSBuyWings other) : this() {
      wingsId_ = other.wingsId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyWings Clone() {
      return new CSBuyWings(this);
    }

    /// <summary>Field number for the "wings_id" field.</summary>
    public const int WingsIdFieldNumber = 1;
    private int wingsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingsId {
      get { return wingsId_; }
      set {
        wingsId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBuyWings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBuyWings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WingsId != other.WingsId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WingsId != 0) hash ^= WingsId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WingsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WingsId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBuyWings other) {
      if (other == null) {
        return;
      }
      if (other.WingsId != 0) {
        WingsId = other.WingsId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCBuyWings : pb::IMessage<SCBuyWings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCBuyWings> _parser = new pb::MessageParser<SCBuyWings>(() => new SCBuyWings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCBuyWings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[287]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyWings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyWings(SCBuyWings other) : this() {
      wingsId_ = other.wingsId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyWings Clone() {
      return new SCBuyWings(this);
    }

    /// <summary>Field number for the "wings_id" field.</summary>
    public const int WingsIdFieldNumber = 1;
    private int wingsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingsId {
      get { return wingsId_; }
      set {
        wingsId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCBuyWings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCBuyWings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WingsId != other.WingsId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WingsId != 0) hash ^= WingsId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WingsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WingsId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCBuyWings other) {
      if (other == null) {
        return;
      }
      if (other.WingsId != 0) {
        WingsId = other.WingsId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OpenChestReward : pb::IMessage<OpenChestReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpenChestReward> _parser = new pb::MessageParser<OpenChestReward>(() => new OpenChestReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenChestReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[288]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChestReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChestReward(OpenChestReward other) : this() {
      id_ = other.id_;
      num_ = other.num_ != null ? other.num_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChestReward Clone() {
      return new OpenChestReward(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private global::PlaneWar.Decimal num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.Decimal Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenChestReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenChestReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Num, other.Num)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (num_ != null) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (num_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (num_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (num_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenChestReward other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.num_ != null) {
        if (num_ == null) {
          Num = new global::PlaneWar.Decimal();
        }
        Num.MergeFrom(other.Num);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (num_ == null) {
              Num = new global::PlaneWar.Decimal();
            }
            input.ReadMessage(Num);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (num_ == null) {
              Num = new global::PlaneWar.Decimal();
            }
            input.ReadMessage(Num);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUpdateChestStatus : pb::IMessage<SCUpdateChestStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUpdateChestStatus> _parser = new pb::MessageParser<SCUpdateChestStatus>(() => new SCUpdateChestStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUpdateChestStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[289]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateChestStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateChestStatus(SCUpdateChestStatus other) : this() {
      isActive_ = other.isActive_;
      chestType_ = other.chestType_;
      totalProgress_ = other.totalProgress_;
      remainProgress_ = other.remainProgress_;
      guide_ = other.guide_;
      availableReward_ = other.availableReward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateChestStatus Clone() {
      return new SCUpdateChestStatus(this);
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 1;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "chest_type" field.</summary>
    public const int ChestTypeFieldNumber = 2;
    private global::PlaneWar.ChestType chestType_ = global::PlaneWar.ChestType.Porcelain;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ChestType ChestType {
      get { return chestType_; }
      set {
        chestType_ = value;
      }
    }

    /// <summary>Field number for the "total_progress" field.</summary>
    public const int TotalProgressFieldNumber = 3;
    private int totalProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalProgress {
      get { return totalProgress_; }
      set {
        totalProgress_ = value;
      }
    }

    /// <summary>Field number for the "remain_progress" field.</summary>
    public const int RemainProgressFieldNumber = 4;
    private int remainProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainProgress {
      get { return remainProgress_; }
      set {
        remainProgress_ = value;
      }
    }

    /// <summary>Field number for the "guide" field.</summary>
    public const int GuideFieldNumber = 5;
    private bool guide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Guide {
      get { return guide_; }
      set {
        guide_ = value;
      }
    }

    /// <summary>Field number for the "available_reward" field.</summary>
    public const int AvailableRewardFieldNumber = 6;
    private int availableReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvailableReward {
      get { return availableReward_; }
      set {
        availableReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUpdateChestStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUpdateChestStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsActive != other.IsActive) return false;
      if (ChestType != other.ChestType) return false;
      if (TotalProgress != other.TotalProgress) return false;
      if (RemainProgress != other.RemainProgress) return false;
      if (Guide != other.Guide) return false;
      if (AvailableReward != other.AvailableReward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (ChestType != global::PlaneWar.ChestType.Porcelain) hash ^= ChestType.GetHashCode();
      if (TotalProgress != 0) hash ^= TotalProgress.GetHashCode();
      if (RemainProgress != 0) hash ^= RemainProgress.GetHashCode();
      if (Guide != false) hash ^= Guide.GetHashCode();
      if (AvailableReward != 0) hash ^= AvailableReward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsActive != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsActive);
      }
      if (ChestType != global::PlaneWar.ChestType.Porcelain) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChestType);
      }
      if (TotalProgress != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalProgress);
      }
      if (RemainProgress != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RemainProgress);
      }
      if (Guide != false) {
        output.WriteRawTag(40);
        output.WriteBool(Guide);
      }
      if (AvailableReward != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AvailableReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsActive != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsActive);
      }
      if (ChestType != global::PlaneWar.ChestType.Porcelain) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChestType);
      }
      if (TotalProgress != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalProgress);
      }
      if (RemainProgress != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RemainProgress);
      }
      if (Guide != false) {
        output.WriteRawTag(40);
        output.WriteBool(Guide);
      }
      if (AvailableReward != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AvailableReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (ChestType != global::PlaneWar.ChestType.Porcelain) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChestType);
      }
      if (TotalProgress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalProgress);
      }
      if (RemainProgress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainProgress);
      }
      if (Guide != false) {
        size += 1 + 1;
      }
      if (AvailableReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableReward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUpdateChestStatus other) {
      if (other == null) {
        return;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.ChestType != global::PlaneWar.ChestType.Porcelain) {
        ChestType = other.ChestType;
      }
      if (other.TotalProgress != 0) {
        TotalProgress = other.TotalProgress;
      }
      if (other.RemainProgress != 0) {
        RemainProgress = other.RemainProgress;
      }
      if (other.Guide != false) {
        Guide = other.Guide;
      }
      if (other.AvailableReward != 0) {
        AvailableReward = other.AvailableReward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsActive = input.ReadBool();
            break;
          }
          case 16: {
            ChestType = (global::PlaneWar.ChestType) input.ReadEnum();
            break;
          }
          case 24: {
            TotalProgress = input.ReadInt32();
            break;
          }
          case 32: {
            RemainProgress = input.ReadInt32();
            break;
          }
          case 40: {
            Guide = input.ReadBool();
            break;
          }
          case 48: {
            AvailableReward = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsActive = input.ReadBool();
            break;
          }
          case 16: {
            ChestType = (global::PlaneWar.ChestType) input.ReadEnum();
            break;
          }
          case 24: {
            TotalProgress = input.ReadInt32();
            break;
          }
          case 32: {
            RemainProgress = input.ReadInt32();
            break;
          }
          case 40: {
            Guide = input.ReadBool();
            break;
          }
          case 48: {
            AvailableReward = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChestBrief : pb::IMessage<ChestBrief>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChestBrief> _parser = new pb::MessageParser<ChestBrief>(() => new ChestBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChestBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[290]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChestBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChestBrief(ChestBrief other) : this() {
      chestType_ = other.chestType_;
      reward_ = other.reward_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChestBrief Clone() {
      return new ChestBrief(this);
    }

    /// <summary>Field number for the "chest_type" field.</summary>
    public const int ChestTypeFieldNumber = 1;
    private global::PlaneWar.ChestType chestType_ = global::PlaneWar.ChestType.Porcelain;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ChestType ChestType {
      get { return chestType_; }
      set {
        chestType_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.OpenChestReward> _repeated_reward_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.OpenChestReward.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.OpenChestReward> reward_ = new pbc::RepeatedField<global::PlaneWar.OpenChestReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.OpenChestReward> Reward {
      get { return reward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChestBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChestBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChestType != other.ChestType) return false;
      if(!reward_.Equals(other.reward_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChestType != global::PlaneWar.ChestType.Porcelain) hash ^= ChestType.GetHashCode();
      hash ^= reward_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChestType != global::PlaneWar.ChestType.Porcelain) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChestType);
      }
      reward_.WriteTo(output, _repeated_reward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChestType != global::PlaneWar.ChestType.Porcelain) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChestType);
      }
      reward_.WriteTo(ref output, _repeated_reward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChestType != global::PlaneWar.ChestType.Porcelain) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChestType);
      }
      size += reward_.CalculateSize(_repeated_reward_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChestBrief other) {
      if (other == null) {
        return;
      }
      if (other.ChestType != global::PlaneWar.ChestType.Porcelain) {
        ChestType = other.ChestType;
      }
      reward_.Add(other.reward_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChestType = (global::PlaneWar.ChestType) input.ReadEnum();
            break;
          }
          case 18: {
            reward_.AddEntriesFrom(input, _repeated_reward_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChestType = (global::PlaneWar.ChestType) input.ReadEnum();
            break;
          }
          case 18: {
            reward_.AddEntriesFrom(ref input, _repeated_reward_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCChestConfig : pb::IMessage<SCChestConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCChestConfig> _parser = new pb::MessageParser<SCChestConfig>(() => new SCChestConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCChestConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[291]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestConfig(SCChestConfig other) : this() {
      endTime_ = other.endTime_;
      chestBriefList_ = other.chestBriefList_.Clone();
      minRatio_ = other.minRatio_;
      autoOpen_ = other.autoOpen_;
      autoOption_ = other.autoOption_;
      isEnable_ = other.isEnable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestConfig Clone() {
      return new SCChestConfig(this);
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 1;
    private int endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "chest_brief_list" field.</summary>
    public const int ChestBriefListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlaneWar.ChestBrief> _repeated_chestBriefList_codec
        = pb::FieldCodec.ForMessage(18, global::PlaneWar.ChestBrief.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.ChestBrief> chestBriefList_ = new pbc::RepeatedField<global::PlaneWar.ChestBrief>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.ChestBrief> ChestBriefList {
      get { return chestBriefList_; }
    }

    /// <summary>Field number for the "min_ratio" field.</summary>
    public const int MinRatioFieldNumber = 3;
    private int minRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinRatio {
      get { return minRatio_; }
      set {
        minRatio_ = value;
      }
    }

    /// <summary>Field number for the "auto_open" field.</summary>
    public const int AutoOpenFieldNumber = 4;
    private bool autoOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoOpen {
      get { return autoOpen_; }
      set {
        autoOpen_ = value;
      }
    }

    /// <summary>Field number for the "auto_option" field.</summary>
    public const int AutoOptionFieldNumber = 5;
    private global::PlaneWar.ChestAutoSelectOption autoOption_ = global::PlaneWar.ChestAutoSelectOption.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ChestAutoSelectOption AutoOption {
      get { return autoOption_; }
      set {
        autoOption_ = value;
      }
    }

    /// <summary>Field number for the "is_enable" field.</summary>
    public const int IsEnableFieldNumber = 6;
    private bool isEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnable {
      get { return isEnable_; }
      set {
        isEnable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCChestConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCChestConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndTime != other.EndTime) return false;
      if(!chestBriefList_.Equals(other.chestBriefList_)) return false;
      if (MinRatio != other.MinRatio) return false;
      if (AutoOpen != other.AutoOpen) return false;
      if (AutoOption != other.AutoOption) return false;
      if (IsEnable != other.IsEnable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      hash ^= chestBriefList_.GetHashCode();
      if (MinRatio != 0) hash ^= MinRatio.GetHashCode();
      if (AutoOpen != false) hash ^= AutoOpen.GetHashCode();
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) hash ^= AutoOption.GetHashCode();
      if (IsEnable != false) hash ^= IsEnable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EndTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EndTime);
      }
      chestBriefList_.WriteTo(output, _repeated_chestBriefList_codec);
      if (MinRatio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinRatio);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(32);
        output.WriteBool(AutoOpen);
      }
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AutoOption);
      }
      if (IsEnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EndTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EndTime);
      }
      chestBriefList_.WriteTo(ref output, _repeated_chestBriefList_codec);
      if (MinRatio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinRatio);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(32);
        output.WriteBool(AutoOpen);
      }
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AutoOption);
      }
      if (IsEnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      size += chestBriefList_.CalculateSize(_repeated_chestBriefList_codec);
      if (MinRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinRatio);
      }
      if (AutoOpen != false) {
        size += 1 + 1;
      }
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutoOption);
      }
      if (IsEnable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCChestConfig other) {
      if (other == null) {
        return;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      chestBriefList_.Add(other.chestBriefList_);
      if (other.MinRatio != 0) {
        MinRatio = other.MinRatio;
      }
      if (other.AutoOpen != false) {
        AutoOpen = other.AutoOpen;
      }
      if (other.AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        AutoOption = other.AutoOption;
      }
      if (other.IsEnable != false) {
        IsEnable = other.IsEnable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndTime = input.ReadInt32();
            break;
          }
          case 18: {
            chestBriefList_.AddEntriesFrom(input, _repeated_chestBriefList_codec);
            break;
          }
          case 24: {
            MinRatio = input.ReadInt32();
            break;
          }
          case 32: {
            AutoOpen = input.ReadBool();
            break;
          }
          case 40: {
            AutoOption = (global::PlaneWar.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 48: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EndTime = input.ReadInt32();
            break;
          }
          case 18: {
            chestBriefList_.AddEntriesFrom(ref input, _repeated_chestBriefList_codec);
            break;
          }
          case 24: {
            MinRatio = input.ReadInt32();
            break;
          }
          case 32: {
            AutoOpen = input.ReadBool();
            break;
          }
          case 40: {
            AutoOption = (global::PlaneWar.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 48: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCOpenChest : pb::IMessage<SCOpenChest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCOpenChest> _parser = new pb::MessageParser<SCOpenChest>(() => new SCOpenChest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOpenChest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[292]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenChest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenChest(SCOpenChest other) : this() {
      rewardList_ = other.rewardList_.Clone();
      autoOption_ = other.autoOption_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenChest Clone() {
      return new SCOpenChest(this);
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.OpenChestReward> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.OpenChestReward.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.OpenChestReward> rewardList_ = new pbc::RepeatedField<global::PlaneWar.OpenChestReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.OpenChestReward> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "auto_option" field.</summary>
    public const int AutoOptionFieldNumber = 2;
    private global::PlaneWar.ChestAutoSelectOption autoOption_ = global::PlaneWar.ChestAutoSelectOption.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ChestAutoSelectOption AutoOption {
      get { return autoOption_; }
      set {
        autoOption_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOpenChest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOpenChest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (AutoOption != other.AutoOption) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewardList_.GetHashCode();
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) hash ^= AutoOption.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AutoOption);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AutoOption);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutoOption);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOpenChest other) {
      if (other == null) {
        return;
      }
      rewardList_.Add(other.rewardList_);
      if (other.AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        AutoOption = other.AutoOption;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 16: {
            AutoOption = (global::PlaneWar.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
          case 16: {
            AutoOption = (global::PlaneWar.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSelectChestReward : pb::IMessage<CSSelectChestReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSelectChestReward> _parser = new pb::MessageParser<CSSelectChestReward>(() => new CSSelectChestReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSelectChestReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[293]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelectChestReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelectChestReward(CSSelectChestReward other) : this() {
      selectIndex_ = other.selectIndex_;
      reward_ = other.reward_ != null ? other.reward_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelectChestReward Clone() {
      return new CSSelectChestReward(this);
    }

    /// <summary>Field number for the "select_index" field.</summary>
    public const int SelectIndexFieldNumber = 1;
    private int selectIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectIndex {
      get { return selectIndex_; }
      set {
        selectIndex_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private global::PlaneWar.OpenChestReward reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.OpenChestReward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSelectChestReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSelectChestReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SelectIndex != other.SelectIndex) return false;
      if (!object.Equals(Reward, other.Reward)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SelectIndex != 0) hash ^= SelectIndex.GetHashCode();
      if (reward_ != null) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SelectIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SelectIndex);
      }
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SelectIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SelectIndex);
      }
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SelectIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectIndex);
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSelectChestReward other) {
      if (other == null) {
        return;
      }
      if (other.SelectIndex != 0) {
        SelectIndex = other.SelectIndex;
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          Reward = new global::PlaneWar.OpenChestReward();
        }
        Reward.MergeFrom(other.Reward);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SelectIndex = input.ReadInt32();
            break;
          }
          case 18: {
            if (reward_ == null) {
              Reward = new global::PlaneWar.OpenChestReward();
            }
            input.ReadMessage(Reward);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SelectIndex = input.ReadInt32();
            break;
          }
          case 18: {
            if (reward_ == null) {
              Reward = new global::PlaneWar.OpenChestReward();
            }
            input.ReadMessage(Reward);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSChestSetAutoSelect : pb::IMessage<CSChestSetAutoSelect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSChestSetAutoSelect> _parser = new pb::MessageParser<CSChestSetAutoSelect>(() => new CSChestSetAutoSelect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChestSetAutoSelect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[294]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetAutoSelect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetAutoSelect(CSChestSetAutoSelect other) : this() {
      autoOption_ = other.autoOption_;
      autoOpen_ = other.autoOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetAutoSelect Clone() {
      return new CSChestSetAutoSelect(this);
    }

    /// <summary>Field number for the "auto_option" field.</summary>
    public const int AutoOptionFieldNumber = 1;
    private global::PlaneWar.ChestAutoSelectOption autoOption_ = global::PlaneWar.ChestAutoSelectOption.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ChestAutoSelectOption AutoOption {
      get { return autoOption_; }
      set {
        autoOption_ = value;
      }
    }

    /// <summary>Field number for the "auto_open" field.</summary>
    public const int AutoOpenFieldNumber = 2;
    private bool autoOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoOpen {
      get { return autoOpen_; }
      set {
        autoOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSChestSetAutoSelect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSChestSetAutoSelect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoOption != other.AutoOption) return false;
      if (AutoOpen != other.AutoOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) hash ^= AutoOption.GetHashCode();
      if (AutoOpen != false) hash ^= AutoOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AutoOption);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AutoOption);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutoOption);
      }
      if (AutoOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSChestSetAutoSelect other) {
      if (other == null) {
        return;
      }
      if (other.AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        AutoOption = other.AutoOption;
      }
      if (other.AutoOpen != false) {
        AutoOpen = other.AutoOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutoOption = (global::PlaneWar.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 16: {
            AutoOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutoOption = (global::PlaneWar.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 16: {
            AutoOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCChestSetAutoSelect : pb::IMessage<SCChestSetAutoSelect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCChestSetAutoSelect> _parser = new pb::MessageParser<SCChestSetAutoSelect>(() => new SCChestSetAutoSelect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCChestSetAutoSelect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[295]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetAutoSelect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetAutoSelect(SCChestSetAutoSelect other) : this() {
      autoOption_ = other.autoOption_;
      autoOpen_ = other.autoOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetAutoSelect Clone() {
      return new SCChestSetAutoSelect(this);
    }

    /// <summary>Field number for the "auto_option" field.</summary>
    public const int AutoOptionFieldNumber = 1;
    private global::PlaneWar.ChestAutoSelectOption autoOption_ = global::PlaneWar.ChestAutoSelectOption.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlaneWar.ChestAutoSelectOption AutoOption {
      get { return autoOption_; }
      set {
        autoOption_ = value;
      }
    }

    /// <summary>Field number for the "auto_open" field.</summary>
    public const int AutoOpenFieldNumber = 2;
    private bool autoOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoOpen {
      get { return autoOpen_; }
      set {
        autoOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCChestSetAutoSelect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCChestSetAutoSelect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoOption != other.AutoOption) return false;
      if (AutoOpen != other.AutoOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) hash ^= AutoOption.GetHashCode();
      if (AutoOpen != false) hash ^= AutoOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AutoOption);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AutoOption);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutoOption);
      }
      if (AutoOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCChestSetAutoSelect other) {
      if (other == null) {
        return;
      }
      if (other.AutoOption != global::PlaneWar.ChestAutoSelectOption.None) {
        AutoOption = other.AutoOption;
      }
      if (other.AutoOpen != false) {
        AutoOpen = other.AutoOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutoOption = (global::PlaneWar.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 16: {
            AutoOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutoOption = (global::PlaneWar.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 16: {
            AutoOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSChestSetEnable : pb::IMessage<CSChestSetEnable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSChestSetEnable> _parser = new pb::MessageParser<CSChestSetEnable>(() => new CSChestSetEnable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChestSetEnable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[296]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetEnable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetEnable(CSChestSetEnable other) : this() {
      isEnable_ = other.isEnable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetEnable Clone() {
      return new CSChestSetEnable(this);
    }

    /// <summary>Field number for the "is_enable" field.</summary>
    public const int IsEnableFieldNumber = 1;
    private bool isEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnable {
      get { return isEnable_; }
      set {
        isEnable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSChestSetEnable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSChestSetEnable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsEnable != other.IsEnable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsEnable != false) hash ^= IsEnable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsEnable != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsEnable != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsEnable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSChestSetEnable other) {
      if (other == null) {
        return;
      }
      if (other.IsEnable != false) {
        IsEnable = other.IsEnable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCChestSetEnable : pb::IMessage<SCChestSetEnable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCChestSetEnable> _parser = new pb::MessageParser<SCChestSetEnable>(() => new SCChestSetEnable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCChestSetEnable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[297]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetEnable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetEnable(SCChestSetEnable other) : this() {
      isEnable_ = other.isEnable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetEnable Clone() {
      return new SCChestSetEnable(this);
    }

    /// <summary>Field number for the "is_enable" field.</summary>
    public const int IsEnableFieldNumber = 1;
    private bool isEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnable {
      get { return isEnable_; }
      set {
        isEnable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCChestSetEnable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCChestSetEnable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsEnable != other.IsEnable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsEnable != false) hash ^= IsEnable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsEnable != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsEnable != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsEnable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCChestSetEnable other) {
      if (other == null) {
        return;
      }
      if (other.IsEnable != false) {
        IsEnable = other.IsEnable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCWaterDropInfo : pb::IMessage<SCWaterDropInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCWaterDropInfo> _parser = new pb::MessageParser<SCWaterDropInfo>(() => new SCWaterDropInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCWaterDropInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[298]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWaterDropInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWaterDropInfo(SCWaterDropInfo other) : this() {
      enable_ = other.enable_;
      dropCount_ = other.dropCount_;
      fragmentCount_ = other.fragmentCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWaterDropInfo Clone() {
      return new SCWaterDropInfo(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "dropCount" field.</summary>
    public const int DropCountFieldNumber = 2;
    private int dropCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropCount {
      get { return dropCount_; }
      set {
        dropCount_ = value;
      }
    }

    /// <summary>Field number for the "fragmentCount" field.</summary>
    public const int FragmentCountFieldNumber = 3;
    private int fragmentCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FragmentCount {
      get { return fragmentCount_; }
      set {
        fragmentCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCWaterDropInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCWaterDropInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      if (DropCount != other.DropCount) return false;
      if (FragmentCount != other.FragmentCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (DropCount != 0) hash ^= DropCount.GetHashCode();
      if (FragmentCount != 0) hash ^= FragmentCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (DropCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DropCount);
      }
      if (FragmentCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FragmentCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (DropCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DropCount);
      }
      if (FragmentCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FragmentCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (DropCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DropCount);
      }
      if (FragmentCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FragmentCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCWaterDropInfo other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.DropCount != 0) {
        DropCount = other.DropCount;
      }
      if (other.FragmentCount != 0) {
        FragmentCount = other.FragmentCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 16: {
            DropCount = input.ReadInt32();
            break;
          }
          case 24: {
            FragmentCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 16: {
            DropCount = input.ReadInt32();
            break;
          }
          case 24: {
            FragmentCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TextInfo : pb::IMessage<TextInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextInfo> _parser = new pb::MessageParser<TextInfo>(() => new TextInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[299]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextInfo(TextInfo other) : this() {
      index_ = other.index_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextInfo Clone() {
      return new TextInfo(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextInfo other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSyncTextConfig : pb::IMessage<CSSyncTextConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSyncTextConfig> _parser = new pb::MessageParser<CSSyncTextConfig>(() => new CSSyncTextConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncTextConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[300]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncTextConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncTextConfig(CSSyncTextConfig other) : this() {
      startIdx_ = other.startIdx_;
      endIdx_ = other.endIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncTextConfig Clone() {
      return new CSSyncTextConfig(this);
    }

    /// <summary>Field number for the "startIdx" field.</summary>
    public const int StartIdxFieldNumber = 1;
    private int startIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartIdx {
      get { return startIdx_; }
      set {
        startIdx_ = value;
      }
    }

    /// <summary>Field number for the "endIdx" field.</summary>
    public const int EndIdxFieldNumber = 2;
    private int endIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndIdx {
      get { return endIdx_; }
      set {
        endIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncTextConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncTextConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartIdx != other.StartIdx) return false;
      if (EndIdx != other.EndIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartIdx != 0) hash ^= StartIdx.GetHashCode();
      if (EndIdx != 0) hash ^= EndIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartIdx);
      }
      if (EndIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartIdx);
      }
      if (EndIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartIdx);
      }
      if (EndIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncTextConfig other) {
      if (other == null) {
        return;
      }
      if (other.StartIdx != 0) {
        StartIdx = other.StartIdx;
      }
      if (other.EndIdx != 0) {
        EndIdx = other.EndIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartIdx = input.ReadInt32();
            break;
          }
          case 16: {
            EndIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartIdx = input.ReadInt32();
            break;
          }
          case 16: {
            EndIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncTextConfig : pb::IMessage<SCSyncTextConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncTextConfig> _parser = new pb::MessageParser<SCSyncTextConfig>(() => new SCSyncTextConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncTextConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[301]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncTextConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncTextConfig(SCSyncTextConfig other) : this() {
      textList_ = other.textList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncTextConfig Clone() {
      return new SCSyncTextConfig(this);
    }

    /// <summary>Field number for the "textList" field.</summary>
    public const int TextListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlaneWar.TextInfo> _repeated_textList_codec
        = pb::FieldCodec.ForMessage(10, global::PlaneWar.TextInfo.Parser);
    private readonly pbc::RepeatedField<global::PlaneWar.TextInfo> textList_ = new pbc::RepeatedField<global::PlaneWar.TextInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlaneWar.TextInfo> TextList {
      get { return textList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncTextConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncTextConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!textList_.Equals(other.textList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= textList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      textList_.WriteTo(output, _repeated_textList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      textList_.WriteTo(ref output, _repeated_textList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += textList_.CalculateSize(_repeated_textList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncTextConfig other) {
      if (other == null) {
        return;
      }
      textList_.Add(other.textList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            textList_.AddEntriesFrom(input, _repeated_textList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            textList_.AddEntriesFrom(ref input, _repeated_textList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSExtraMul : pb::IMessage<CSExtraMul>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSExtraMul> _parser = new pb::MessageParser<CSExtraMul>(() => new CSExtraMul());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExtraMul> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[302]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExtraMul() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExtraMul(CSExtraMul other) : this() {
      extraMul_ = other.extraMul_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExtraMul Clone() {
      return new CSExtraMul(this);
    }

    /// <summary>Field number for the "extra_mul" field.</summary>
    public const int ExtraMulFieldNumber = 1;
    private bool extraMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExtraMul {
      get { return extraMul_; }
      set {
        extraMul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSExtraMul);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSExtraMul other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExtraMul != other.ExtraMul) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExtraMul != false) hash ^= ExtraMul.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ExtraMul != false) {
        output.WriteRawTag(8);
        output.WriteBool(ExtraMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ExtraMul != false) {
        output.WriteRawTag(8);
        output.WriteBool(ExtraMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExtraMul != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSExtraMul other) {
      if (other == null) {
        return;
      }
      if (other.ExtraMul != false) {
        ExtraMul = other.ExtraMul;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ExtraMul = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ExtraMul = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCExtraMul : pb::IMessage<SCExtraMul>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCExtraMul> _parser = new pb::MessageParser<SCExtraMul>(() => new SCExtraMul());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCExtraMul> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlaneWar.PlaneWarReflection.Descriptor.MessageTypes[303]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExtraMul() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExtraMul(SCExtraMul other) : this() {
      chairId_ = other.chairId_;
      extraMul_ = other.extraMul_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExtraMul Clone() {
      return new SCExtraMul(this);
    }

    /// <summary>Field number for the "chairId" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "extra_mul" field.</summary>
    public const int ExtraMulFieldNumber = 2;
    private bool extraMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExtraMul {
      get { return extraMul_; }
      set {
        extraMul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCExtraMul);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCExtraMul other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (ExtraMul != other.ExtraMul) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (ExtraMul != false) hash ^= ExtraMul.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ExtraMul != false) {
        output.WriteRawTag(16);
        output.WriteBool(ExtraMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ExtraMul != false) {
        output.WriteRawTag(16);
        output.WriteBool(ExtraMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (ExtraMul != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCExtraMul other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.ExtraMul != false) {
        ExtraMul = other.ExtraMul;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ExtraMul = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ExtraMul = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
