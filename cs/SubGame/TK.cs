// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/TK.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TK {

  /// <summary>Holder for reflection information generated from Proto/SubGame/TK.proto</summary>
  public static partial class TKReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/TK.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TKReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZQcm90by9TdWJHYW1lL1RLLnByb3RvEgJUSyK/AQoMU0NfU2NlbmVJbmZv",
            "EhIKCmZyZWVfY291bnQYASABKAUSDwoHY3VyX2JldBgCIAEoBRILCgNiZXQY",
            "BCADKAUSEQoJZnJlZV90eXBlGAUgASgFEg8KB2V4dF9vZGQYBiABKAUSEQoJ",
            "c3RhcnRfcm93GAcgASgFEhEKCXN0YXJ0X2NvbBgIIAEoBRIMCgR0eXBlGAkg",
            "ASgFEhYKDmV4dF93aWxkX2NvdW50GAogASgFEg0KBWZpeGVkGAsgAygFIhwK",
            "CEhpdF9JY29uEhAKCGhpdF9pY29uGAEgAygFIoACChBDTURfM0RfU0NfUmVz",
            "dWx0EgwKBGljb24YASADKAUSHgoIaGl0X2ljb24YAiADKAsyDC5USy5IaXRf",
            "SWNvbhIQCgh3aW5fZ29sZBgDIAEoBRISCgpmcmVlX2NvdW50GAQgASgFEhEK",
            "CWZyZWVfdHlwZRgFIAEoBRIZChFub19sbWFsX2ZyZWVfdHlwZRgGIAEoBRIP",
            "CgdleHRfb2RkGAcgASgFEhEKCXN0YXJ0X3JvdxgIIAEoBRIRCglzdGFydF9j",
            "b2wYCSABKAUSDAoEdHlwZRgKIAEoBRIWCg5leHRfd2lsZF9jb3VudBgLIAEo",
            "BRINCgVmaXhlZBgMIAMoBSpNCghFTXNnSURUSxIVChFTVUJfQ1NfR0FNRV9T",
            "VEFSVBAAEhUKEVNVQl9TQ19HQU1FX1NUQVJUEAESEwoPU1VCX1NDX0JFVF9G",
            "QUlMEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TK.EMsgIDTK), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TK.SC_SceneInfo), global::TK.SC_SceneInfo.Parser, new[]{ "FreeCount", "CurBet", "Bet", "FreeType", "ExtOdd", "StartRow", "StartCol", "Type", "ExtWildCount", "Fixed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TK.Hit_Icon), global::TK.Hit_Icon.Parser, new[]{ "HitIcon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TK.CMD_3D_SC_Result), global::TK.CMD_3D_SC_Result.Parser, new[]{ "Icon", "HitIcon", "WinGold", "FreeCount", "FreeType", "NoLmalFreeType", "ExtOdd", "StartRow", "StartCol", "Type", "ExtWildCount", "Fixed" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDTK {
    /// <summary>
    ///开始游戏(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_CS_GAME_START")] SubCsGameStart = 0,
    /// <summary>
    ///启动游戏 (CMD_3D_SC_Result)
    /// </summary>
    [pbr::OriginalName("SUB_SC_GAME_START")] SubScGameStart = 1,
    /// <summary>
    ///游戏结束(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_SC_BET_FAIL")] SubScBetFail = 2,
  }

  #endregion

  #region Messages
  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TK.TKReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      freeCount_ = other.freeCount_;
      curBet_ = other.curBet_;
      bet_ = other.bet_.Clone();
      freeType_ = other.freeType_;
      extOdd_ = other.extOdd_;
      startRow_ = other.startRow_;
      startCol_ = other.startCol_;
      type_ = other.type_;
      extWildCount_ = other.extWildCount_;
      fixed_ = other.fixed_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 1;
    private int freeCount_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "cur_bet" field.</summary>
    public const int CurBetFieldNumber = 2;
    private int curBet_;
    /// <summary>
    /// 当前下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurBet {
      get { return curBet_; }
      set {
        curBet_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_bet_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> bet_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bet {
      get { return bet_; }
    }

    /// <summary>Field number for the "free_type" field.</summary>
    public const int FreeTypeFieldNumber = 5;
    private int freeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeType {
      get { return freeType_; }
      set {
        freeType_ = value;
      }
    }

    /// <summary>Field number for the "ext_odd" field.</summary>
    public const int ExtOddFieldNumber = 6;
    private int extOdd_;
    /// <summary>
    /// 额外倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtOdd {
      get { return extOdd_; }
      set {
        extOdd_ = value;
      }
    }

    /// <summary>Field number for the "start_row" field.</summary>
    public const int StartRowFieldNumber = 7;
    private int startRow_;
    /// <summary>
    /// 浮动起始行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartRow {
      get { return startRow_; }
      set {
        startRow_ = value;
      }
    }

    /// <summary>Field number for the "start_col" field.</summary>
    public const int StartColFieldNumber = 8;
    private int startCol_;
    /// <summary>
    /// 浮动起始列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartCol {
      get { return startCol_; }
      set {
        startCol_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private int type_;
    /// <summary>
    /// 浮动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ext_wild_count" field.</summary>
    public const int ExtWildCountFieldNumber = 10;
    private int extWildCount_;
    /// <summary>
    /// 额外wild数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtWildCount {
      get { return extWildCount_; }
      set {
        extWildCount_ = value;
      }
    }

    /// <summary>Field number for the "fixed" field.</summary>
    public const int FixedFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_fixed_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> fixed_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 固定wild
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Fixed {
      get { return fixed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FreeCount != other.FreeCount) return false;
      if (CurBet != other.CurBet) return false;
      if(!bet_.Equals(other.bet_)) return false;
      if (FreeType != other.FreeType) return false;
      if (ExtOdd != other.ExtOdd) return false;
      if (StartRow != other.StartRow) return false;
      if (StartCol != other.StartCol) return false;
      if (Type != other.Type) return false;
      if (ExtWildCount != other.ExtWildCount) return false;
      if(!fixed_.Equals(other.fixed_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (CurBet != 0) hash ^= CurBet.GetHashCode();
      hash ^= bet_.GetHashCode();
      if (FreeType != 0) hash ^= FreeType.GetHashCode();
      if (ExtOdd != 0) hash ^= ExtOdd.GetHashCode();
      if (StartRow != 0) hash ^= StartRow.GetHashCode();
      if (StartCol != 0) hash ^= StartCol.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ExtWildCount != 0) hash ^= ExtWildCount.GetHashCode();
      hash ^= fixed_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeCount);
      }
      if (CurBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurBet);
      }
      bet_.WriteTo(output, _repeated_bet_codec);
      if (FreeType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeType);
      }
      if (ExtOdd != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ExtOdd);
      }
      if (StartRow != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StartRow);
      }
      if (StartCol != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StartCol);
      }
      if (Type != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Type);
      }
      if (ExtWildCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ExtWildCount);
      }
      fixed_.WriteTo(output, _repeated_fixed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeCount);
      }
      if (CurBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurBet);
      }
      bet_.WriteTo(ref output, _repeated_bet_codec);
      if (FreeType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeType);
      }
      if (ExtOdd != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ExtOdd);
      }
      if (StartRow != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StartRow);
      }
      if (StartCol != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StartCol);
      }
      if (Type != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Type);
      }
      if (ExtWildCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ExtWildCount);
      }
      fixed_.WriteTo(ref output, _repeated_fixed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (CurBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurBet);
      }
      size += bet_.CalculateSize(_repeated_bet_codec);
      if (FreeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeType);
      }
      if (ExtOdd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtOdd);
      }
      if (StartRow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartRow);
      }
      if (StartCol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartCol);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ExtWildCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtWildCount);
      }
      size += fixed_.CalculateSize(_repeated_fixed_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.CurBet != 0) {
        CurBet = other.CurBet;
      }
      bet_.Add(other.bet_);
      if (other.FreeType != 0) {
        FreeType = other.FreeType;
      }
      if (other.ExtOdd != 0) {
        ExtOdd = other.ExtOdd;
      }
      if (other.StartRow != 0) {
        StartRow = other.StartRow;
      }
      if (other.StartCol != 0) {
        StartCol = other.StartCol;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ExtWildCount != 0) {
        ExtWildCount = other.ExtWildCount;
      }
      fixed_.Add(other.fixed_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            CurBet = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
          case 40: {
            FreeType = input.ReadInt32();
            break;
          }
          case 48: {
            ExtOdd = input.ReadInt32();
            break;
          }
          case 56: {
            StartRow = input.ReadInt32();
            break;
          }
          case 64: {
            StartCol = input.ReadInt32();
            break;
          }
          case 72: {
            Type = input.ReadInt32();
            break;
          }
          case 80: {
            ExtWildCount = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            fixed_.AddEntriesFrom(input, _repeated_fixed_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            CurBet = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
          case 40: {
            FreeType = input.ReadInt32();
            break;
          }
          case 48: {
            ExtOdd = input.ReadInt32();
            break;
          }
          case 56: {
            StartRow = input.ReadInt32();
            break;
          }
          case 64: {
            StartCol = input.ReadInt32();
            break;
          }
          case 72: {
            Type = input.ReadInt32();
            break;
          }
          case 80: {
            ExtWildCount = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            fixed_.AddEntriesFrom(ref input, _repeated_fixed_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 击中的图标
  /// </summary>
  public sealed partial class Hit_Icon : pb::IMessage<Hit_Icon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Hit_Icon> _parser = new pb::MessageParser<Hit_Icon>(() => new Hit_Icon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hit_Icon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TK.TKReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit_Icon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit_Icon(Hit_Icon other) : this() {
      hitIcon_ = other.hitIcon_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit_Icon Clone() {
      return new Hit_Icon(this);
    }

    /// <summary>Field number for the "hit_icon" field.</summary>
    public const int HitIconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_hitIcon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> hitIcon_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HitIcon {
      get { return hitIcon_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hit_Icon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hit_Icon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hitIcon_.Equals(other.hitIcon_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hitIcon_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      hitIcon_.WriteTo(output, _repeated_hitIcon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      hitIcon_.WriteTo(ref output, _repeated_hitIcon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hitIcon_.CalculateSize(_repeated_hitIcon_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hit_Icon other) {
      if (other == null) {
        return;
      }
      hitIcon_.Add(other.hitIcon_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            hitIcon_.AddEntriesFrom(input, _repeated_hitIcon_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            hitIcon_.AddEntriesFrom(ref input, _repeated_hitIcon_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 游戏结果返回
  /// </summary>
  public sealed partial class CMD_3D_SC_Result : pb::IMessage<CMD_3D_SC_Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_Result> _parser = new pb::MessageParser<CMD_3D_SC_Result>(() => new CMD_3D_SC_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TK.TKReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result(CMD_3D_SC_Result other) : this() {
      icon_ = other.icon_.Clone();
      hitIcon_ = other.hitIcon_.Clone();
      winGold_ = other.winGold_;
      freeCount_ = other.freeCount_;
      freeType_ = other.freeType_;
      noLmalFreeType_ = other.noLmalFreeType_;
      extOdd_ = other.extOdd_;
      startRow_ = other.startRow_;
      startCol_ = other.startCol_;
      type_ = other.type_;
      extWildCount_ = other.extWildCount_;
      fixed_ = other.fixed_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result Clone() {
      return new CMD_3D_SC_Result(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "hit_icon" field.</summary>
    public const int HitIconFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TK.Hit_Icon> _repeated_hitIcon_codec
        = pb::FieldCodec.ForMessage(18, global::TK.Hit_Icon.Parser);
    private readonly pbc::RepeatedField<global::TK.Hit_Icon> hitIcon_ = new pbc::RepeatedField<global::TK.Hit_Icon>();
    /// <summary>
    /// 击中的图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TK.Hit_Icon> HitIcon {
      get { return hitIcon_; }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 3;
    private int winGold_;
    /// <summary>
    /// 赢得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 4;
    private int freeCount_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "free_type" field.</summary>
    public const int FreeTypeFieldNumber = 5;
    private int freeType_;
    /// <summary>
    /// 免费类型（1：扩散 2：固定 3：倍数 4：浮动）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeType {
      get { return freeType_; }
      set {
        freeType_ = value;
      }
    }

    /// <summary>Field number for the "no_lmal_free_type" field.</summary>
    public const int NoLmalFreeTypeFieldNumber = 6;
    private int noLmalFreeType_;
    /// <summary>
    /// 普通免费游戏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NoLmalFreeType {
      get { return noLmalFreeType_; }
      set {
        noLmalFreeType_ = value;
      }
    }

    /// <summary>Field number for the "ext_odd" field.</summary>
    public const int ExtOddFieldNumber = 7;
    private int extOdd_;
    /// <summary>
    /// 额外倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtOdd {
      get { return extOdd_; }
      set {
        extOdd_ = value;
      }
    }

    /// <summary>Field number for the "start_row" field.</summary>
    public const int StartRowFieldNumber = 8;
    private int startRow_;
    /// <summary>
    /// 浮动起始行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartRow {
      get { return startRow_; }
      set {
        startRow_ = value;
      }
    }

    /// <summary>Field number for the "start_col" field.</summary>
    public const int StartColFieldNumber = 9;
    private int startCol_;
    /// <summary>
    /// 浮动起始列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartCol {
      get { return startCol_; }
      set {
        startCol_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 10;
    private int type_;
    /// <summary>
    /// 浮动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ext_wild_count" field.</summary>
    public const int ExtWildCountFieldNumber = 11;
    private int extWildCount_;
    /// <summary>
    /// 额外wild个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtWildCount {
      get { return extWildCount_; }
      set {
        extWildCount_ = value;
      }
    }

    /// <summary>Field number for the "fixed" field.</summary>
    public const int FixedFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_fixed_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> fixed_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 固定wild
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Fixed {
      get { return fixed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icon_.Equals(other.icon_)) return false;
      if(!hitIcon_.Equals(other.hitIcon_)) return false;
      if (WinGold != other.WinGold) return false;
      if (FreeCount != other.FreeCount) return false;
      if (FreeType != other.FreeType) return false;
      if (NoLmalFreeType != other.NoLmalFreeType) return false;
      if (ExtOdd != other.ExtOdd) return false;
      if (StartRow != other.StartRow) return false;
      if (StartCol != other.StartCol) return false;
      if (Type != other.Type) return false;
      if (ExtWildCount != other.ExtWildCount) return false;
      if(!fixed_.Equals(other.fixed_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icon_.GetHashCode();
      hash ^= hitIcon_.GetHashCode();
      if (WinGold != 0) hash ^= WinGold.GetHashCode();
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (FreeType != 0) hash ^= FreeType.GetHashCode();
      if (NoLmalFreeType != 0) hash ^= NoLmalFreeType.GetHashCode();
      if (ExtOdd != 0) hash ^= ExtOdd.GetHashCode();
      if (StartRow != 0) hash ^= StartRow.GetHashCode();
      if (StartCol != 0) hash ^= StartCol.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ExtWildCount != 0) hash ^= ExtWildCount.GetHashCode();
      hash ^= fixed_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      icon_.WriteTo(output, _repeated_icon_codec);
      hitIcon_.WriteTo(output, _repeated_hitIcon_codec);
      if (WinGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinGold);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeCount);
      }
      if (FreeType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeType);
      }
      if (NoLmalFreeType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NoLmalFreeType);
      }
      if (ExtOdd != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExtOdd);
      }
      if (StartRow != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StartRow);
      }
      if (StartCol != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartCol);
      }
      if (Type != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Type);
      }
      if (ExtWildCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ExtWildCount);
      }
      fixed_.WriteTo(output, _repeated_fixed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      icon_.WriteTo(ref output, _repeated_icon_codec);
      hitIcon_.WriteTo(ref output, _repeated_hitIcon_codec);
      if (WinGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinGold);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeCount);
      }
      if (FreeType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeType);
      }
      if (NoLmalFreeType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NoLmalFreeType);
      }
      if (ExtOdd != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExtOdd);
      }
      if (StartRow != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StartRow);
      }
      if (StartCol != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartCol);
      }
      if (Type != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Type);
      }
      if (ExtWildCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ExtWildCount);
      }
      fixed_.WriteTo(ref output, _repeated_fixed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += hitIcon_.CalculateSize(_repeated_hitIcon_codec);
      if (WinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinGold);
      }
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (FreeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeType);
      }
      if (NoLmalFreeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NoLmalFreeType);
      }
      if (ExtOdd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtOdd);
      }
      if (StartRow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartRow);
      }
      if (StartCol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartCol);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (ExtWildCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtWildCount);
      }
      size += fixed_.CalculateSize(_repeated_fixed_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_Result other) {
      if (other == null) {
        return;
      }
      icon_.Add(other.icon_);
      hitIcon_.Add(other.hitIcon_);
      if (other.WinGold != 0) {
        WinGold = other.WinGold;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.FreeType != 0) {
        FreeType = other.FreeType;
      }
      if (other.NoLmalFreeType != 0) {
        NoLmalFreeType = other.NoLmalFreeType;
      }
      if (other.ExtOdd != 0) {
        ExtOdd = other.ExtOdd;
      }
      if (other.StartRow != 0) {
        StartRow = other.StartRow;
      }
      if (other.StartCol != 0) {
        StartCol = other.StartCol;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ExtWildCount != 0) {
        ExtWildCount = other.ExtWildCount;
      }
      fixed_.Add(other.fixed_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 18: {
            hitIcon_.AddEntriesFrom(input, _repeated_hitIcon_codec);
            break;
          }
          case 24: {
            WinGold = input.ReadInt32();
            break;
          }
          case 32: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 40: {
            FreeType = input.ReadInt32();
            break;
          }
          case 48: {
            NoLmalFreeType = input.ReadInt32();
            break;
          }
          case 56: {
            ExtOdd = input.ReadInt32();
            break;
          }
          case 64: {
            StartRow = input.ReadInt32();
            break;
          }
          case 72: {
            StartCol = input.ReadInt32();
            break;
          }
          case 80: {
            Type = input.ReadInt32();
            break;
          }
          case 88: {
            ExtWildCount = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            fixed_.AddEntriesFrom(input, _repeated_fixed_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 18: {
            hitIcon_.AddEntriesFrom(ref input, _repeated_hitIcon_codec);
            break;
          }
          case 24: {
            WinGold = input.ReadInt32();
            break;
          }
          case 32: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 40: {
            FreeType = input.ReadInt32();
            break;
          }
          case 48: {
            NoLmalFreeType = input.ReadInt32();
            break;
          }
          case 56: {
            ExtOdd = input.ReadInt32();
            break;
          }
          case 64: {
            StartRow = input.ReadInt32();
            break;
          }
          case 72: {
            StartCol = input.ReadInt32();
            break;
          }
          case 80: {
            Type = input.ReadInt32();
            break;
          }
          case 88: {
            ExtWildCount = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            fixed_.AddEntriesFrom(ref input, _repeated_fixed_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
