// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/SG777.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SG777 {

  /// <summary>Holder for reflection information generated from Proto/SubGame/SG777.proto</summary>
  public static partial class SG777Reflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/SG777.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SG777Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlQcm90by9TdWJHYW1lL1NHNzc3LnByb3RvEgVTRzc3NyJ0CgxTQ19TY2Vu",
            "ZUluZm8SEAoIY3VyX2NoaXAYASABKAUSCwoDYmV0GAIgAygFEhAKCGZyZWVf",
            "Y250GAMgASgFEhAKCGJlbGxfY250GAQgASgFEg8KB2lzX29wZW4YBSADKAUS",
            "EAoId2luX2dvbGQYBiADKAMiHAoISGl0X0ljb24SEAoIaGl0X2ljb24YASAD",
            "KAUiuAEKEENNRF8zRF9TQ19SZXN1bHQSDAoEaWNvbhgBIAMoBRIhCghoaXRf",
            "aWNvbhgCIAMoCzIPLlNHNzc3LkhpdF9JY29uEgsKA29kZBgDIAEoBRIYChBm",
            "dWxsX3NjcmVlbl90eXBlGAQgASgFEhAKCHdpbl9nb2xkGAUgASgDEhAKCGZy",
            "ZWVfY250GAYgASgFEhUKDWlzX3NtYWxsX2dhbWUYByABKAgSEQoJb3Blbl93",
            "aWxkGAggAygIIkYKEUNNRF9TdGFydEJhbGxHYW1lEhAKCHdpbl9nb2xkGAEg",
            "ASgDEg0KBWluZGV4GAIgASgFEhAKCGJlbGxfbnVtGAMgASgFKmoKC0VNc2dJ",
            "RFNHNzc3EhUKEVNVQl9DU19HQU1FX1NUQVJUEAASGAoUU1VCX0NTX0JFTExf",
            "R0FNRV9FTkQQARIUChBTVUJfU0NfR0FNRV9PVkVSEAISFAoQU1VCX1NDX0JF",
            "TExfR0FNRRADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SG777.EMsgIDSG777), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SG777.SC_SceneInfo), global::SG777.SC_SceneInfo.Parser, new[]{ "CurChip", "Bet", "FreeCnt", "BellCnt", "IsOpen", "WinGold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SG777.Hit_Icon), global::SG777.Hit_Icon.Parser, new[]{ "HitIcon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SG777.CMD_3D_SC_Result), global::SG777.CMD_3D_SC_Result.Parser, new[]{ "Icon", "HitIcon", "Odd", "FullScreenType", "WinGold", "FreeCnt", "IsSmallGame", "OpenWild" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SG777.CMD_StartBallGame), global::SG777.CMD_StartBallGame.Parser, new[]{ "WinGold", "Index", "BellNum" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDSG777 {
    /// <summary>
    ///开始游戏(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_CS_GAME_START")] SubCsGameStart = 0,
    /// <summary>
    ///小游戏(MsgCommonN32)	
    /// </summary>
    [pbr::OriginalName("SUB_CS_BELL_GAME_END")] SubCsBellGameEnd = 1,
    /// <summary>
    ///游戏结束(CMD_3D_SC_Result)
    /// </summary>
    [pbr::OriginalName("SUB_SC_GAME_OVER")] SubScGameOver = 2,
    /// <summary>
    ///铃铛游戏结算(CMD_StartBallGame)
    /// </summary>
    [pbr::OriginalName("SUB_SC_BELL_GAME")] SubScBellGame = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///场景
  /// </summary>
  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SG777.SG777Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      curChip_ = other.curChip_;
      bet_ = other.bet_.Clone();
      freeCnt_ = other.freeCnt_;
      bellCnt_ = other.bellCnt_;
      isOpen_ = other.isOpen_.Clone();
      winGold_ = other.winGold_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "cur_chip" field.</summary>
    public const int CurChipFieldNumber = 1;
    private int curChip_;
    /// <summary>
    /// 当前押注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChip {
      get { return curChip_; }
      set {
        curChip_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_bet_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> bet_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 押注列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bet {
      get { return bet_; }
    }

    /// <summary>Field number for the "free_cnt" field.</summary>
    public const int FreeCntFieldNumber = 3;
    private int freeCnt_;
    /// <summary>
    /// 免费次数  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCnt {
      get { return freeCnt_; }
      set {
        freeCnt_ = value;
      }
    }

    /// <summary>Field number for the "bell_cnt" field.</summary>
    public const int BellCntFieldNumber = 4;
    private int bellCnt_;
    /// <summary>
    /// 铃铛次数	 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BellCnt {
      get { return bellCnt_; }
      set {
        bellCnt_ = value;
      }
    }

    /// <summary>Field number for the "is_open" field.</summary>
    public const int IsOpenFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_isOpen_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> isOpen_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 铃铛是否开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IsOpen {
      get { return isOpen_; }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 6;
    private static readonly pb::FieldCodec<long> _repeated_winGold_codec
        = pb::FieldCodec.ForInt64(50);
    private readonly pbc::RepeatedField<long> winGold_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> WinGold {
      get { return winGold_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurChip != other.CurChip) return false;
      if(!bet_.Equals(other.bet_)) return false;
      if (FreeCnt != other.FreeCnt) return false;
      if (BellCnt != other.BellCnt) return false;
      if(!isOpen_.Equals(other.isOpen_)) return false;
      if(!winGold_.Equals(other.winGold_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurChip != 0) hash ^= CurChip.GetHashCode();
      hash ^= bet_.GetHashCode();
      if (FreeCnt != 0) hash ^= FreeCnt.GetHashCode();
      if (BellCnt != 0) hash ^= BellCnt.GetHashCode();
      hash ^= isOpen_.GetHashCode();
      hash ^= winGold_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurChip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChip);
      }
      bet_.WriteTo(output, _repeated_bet_codec);
      if (FreeCnt != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FreeCnt);
      }
      if (BellCnt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BellCnt);
      }
      isOpen_.WriteTo(output, _repeated_isOpen_codec);
      winGold_.WriteTo(output, _repeated_winGold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurChip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChip);
      }
      bet_.WriteTo(ref output, _repeated_bet_codec);
      if (FreeCnt != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FreeCnt);
      }
      if (BellCnt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BellCnt);
      }
      isOpen_.WriteTo(ref output, _repeated_isOpen_codec);
      winGold_.WriteTo(ref output, _repeated_winGold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurChip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChip);
      }
      size += bet_.CalculateSize(_repeated_bet_codec);
      if (FreeCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCnt);
      }
      if (BellCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BellCnt);
      }
      size += isOpen_.CalculateSize(_repeated_isOpen_codec);
      size += winGold_.CalculateSize(_repeated_winGold_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurChip != 0) {
        CurChip = other.CurChip;
      }
      bet_.Add(other.bet_);
      if (other.FreeCnt != 0) {
        FreeCnt = other.FreeCnt;
      }
      if (other.BellCnt != 0) {
        BellCnt = other.BellCnt;
      }
      isOpen_.Add(other.isOpen_);
      winGold_.Add(other.winGold_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurChip = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
          case 24: {
            FreeCnt = input.ReadInt32();
            break;
          }
          case 32: {
            BellCnt = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            isOpen_.AddEntriesFrom(input, _repeated_isOpen_codec);
            break;
          }
          case 50:
          case 48: {
            winGold_.AddEntriesFrom(input, _repeated_winGold_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurChip = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
          case 24: {
            FreeCnt = input.ReadInt32();
            break;
          }
          case 32: {
            BellCnt = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            isOpen_.AddEntriesFrom(ref input, _repeated_isOpen_codec);
            break;
          }
          case 50:
          case 48: {
            winGold_.AddEntriesFrom(ref input, _repeated_winGold_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 击中的图标
  /// </summary>
  public sealed partial class Hit_Icon : pb::IMessage<Hit_Icon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Hit_Icon> _parser = new pb::MessageParser<Hit_Icon>(() => new Hit_Icon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hit_Icon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SG777.SG777Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit_Icon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit_Icon(Hit_Icon other) : this() {
      hitIcon_ = other.hitIcon_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hit_Icon Clone() {
      return new Hit_Icon(this);
    }

    /// <summary>Field number for the "hit_icon" field.</summary>
    public const int HitIconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_hitIcon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> hitIcon_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HitIcon {
      get { return hitIcon_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hit_Icon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hit_Icon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hitIcon_.Equals(other.hitIcon_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hitIcon_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      hitIcon_.WriteTo(output, _repeated_hitIcon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      hitIcon_.WriteTo(ref output, _repeated_hitIcon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hitIcon_.CalculateSize(_repeated_hitIcon_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hit_Icon other) {
      if (other == null) {
        return;
      }
      hitIcon_.Add(other.hitIcon_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            hitIcon_.AddEntriesFrom(input, _repeated_hitIcon_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            hitIcon_.AddEntriesFrom(ref input, _repeated_hitIcon_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 游戏结果返回
  /// </summary>
  public sealed partial class CMD_3D_SC_Result : pb::IMessage<CMD_3D_SC_Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_Result> _parser = new pb::MessageParser<CMD_3D_SC_Result>(() => new CMD_3D_SC_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SG777.SG777Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result(CMD_3D_SC_Result other) : this() {
      icon_ = other.icon_.Clone();
      hitIcon_ = other.hitIcon_.Clone();
      odd_ = other.odd_;
      fullScreenType_ = other.fullScreenType_;
      winGold_ = other.winGold_;
      freeCnt_ = other.freeCnt_;
      isSmallGame_ = other.isSmallGame_;
      openWild_ = other.openWild_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result Clone() {
      return new CMD_3D_SC_Result(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "hit_icon" field.</summary>
    public const int HitIconFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SG777.Hit_Icon> _repeated_hitIcon_codec
        = pb::FieldCodec.ForMessage(18, global::SG777.Hit_Icon.Parser);
    private readonly pbc::RepeatedField<global::SG777.Hit_Icon> hitIcon_ = new pbc::RepeatedField<global::SG777.Hit_Icon>();
    /// <summary>
    /// 击中的图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SG777.Hit_Icon> HitIcon {
      get { return hitIcon_; }
    }

    /// <summary>Field number for the "odd" field.</summary>
    public const int OddFieldNumber = 3;
    private int odd_;
    /// <summary>
    /// 获得的倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Odd {
      get { return odd_; }
      set {
        odd_ = value;
      }
    }

    /// <summary>Field number for the "full_screen_type" field.</summary>
    public const int FullScreenTypeFieldNumber = 4;
    private int fullScreenType_;
    /// <summary>
    /// 全屏类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FullScreenType {
      get { return fullScreenType_; }
      set {
        fullScreenType_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 5;
    private long winGold_;
    /// <summary>
    /// 赢得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "free_cnt" field.</summary>
    public const int FreeCntFieldNumber = 6;
    private int freeCnt_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCnt {
      get { return freeCnt_; }
      set {
        freeCnt_ = value;
      }
    }

    /// <summary>Field number for the "is_small_game" field.</summary>
    public const int IsSmallGameFieldNumber = 7;
    private bool isSmallGame_;
    /// <summary>
    /// 是否小游戏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSmallGame {
      get { return isSmallGame_; }
      set {
        isSmallGame_ = value;
      }
    }

    /// <summary>Field number for the "open_wild" field.</summary>
    public const int OpenWildFieldNumber = 8;
    private static readonly pb::FieldCodec<bool> _repeated_openWild_codec
        = pb::FieldCodec.ForBool(66);
    private readonly pbc::RepeatedField<bool> openWild_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// 是否开出wild
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> OpenWild {
      get { return openWild_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icon_.Equals(other.icon_)) return false;
      if(!hitIcon_.Equals(other.hitIcon_)) return false;
      if (Odd != other.Odd) return false;
      if (FullScreenType != other.FullScreenType) return false;
      if (WinGold != other.WinGold) return false;
      if (FreeCnt != other.FreeCnt) return false;
      if (IsSmallGame != other.IsSmallGame) return false;
      if(!openWild_.Equals(other.openWild_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icon_.GetHashCode();
      hash ^= hitIcon_.GetHashCode();
      if (Odd != 0) hash ^= Odd.GetHashCode();
      if (FullScreenType != 0) hash ^= FullScreenType.GetHashCode();
      if (WinGold != 0L) hash ^= WinGold.GetHashCode();
      if (FreeCnt != 0) hash ^= FreeCnt.GetHashCode();
      if (IsSmallGame != false) hash ^= IsSmallGame.GetHashCode();
      hash ^= openWild_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      icon_.WriteTo(output, _repeated_icon_codec);
      hitIcon_.WriteTo(output, _repeated_hitIcon_codec);
      if (Odd != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Odd);
      }
      if (FullScreenType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FullScreenType);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(WinGold);
      }
      if (FreeCnt != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeCnt);
      }
      if (IsSmallGame != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsSmallGame);
      }
      openWild_.WriteTo(output, _repeated_openWild_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      icon_.WriteTo(ref output, _repeated_icon_codec);
      hitIcon_.WriteTo(ref output, _repeated_hitIcon_codec);
      if (Odd != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Odd);
      }
      if (FullScreenType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FullScreenType);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(WinGold);
      }
      if (FreeCnt != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeCnt);
      }
      if (IsSmallGame != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsSmallGame);
      }
      openWild_.WriteTo(ref output, _repeated_openWild_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += hitIcon_.CalculateSize(_repeated_hitIcon_codec);
      if (Odd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Odd);
      }
      if (FullScreenType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FullScreenType);
      }
      if (WinGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinGold);
      }
      if (FreeCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCnt);
      }
      if (IsSmallGame != false) {
        size += 1 + 1;
      }
      size += openWild_.CalculateSize(_repeated_openWild_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_Result other) {
      if (other == null) {
        return;
      }
      icon_.Add(other.icon_);
      hitIcon_.Add(other.hitIcon_);
      if (other.Odd != 0) {
        Odd = other.Odd;
      }
      if (other.FullScreenType != 0) {
        FullScreenType = other.FullScreenType;
      }
      if (other.WinGold != 0L) {
        WinGold = other.WinGold;
      }
      if (other.FreeCnt != 0) {
        FreeCnt = other.FreeCnt;
      }
      if (other.IsSmallGame != false) {
        IsSmallGame = other.IsSmallGame;
      }
      openWild_.Add(other.openWild_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 18: {
            hitIcon_.AddEntriesFrom(input, _repeated_hitIcon_codec);
            break;
          }
          case 24: {
            Odd = input.ReadInt32();
            break;
          }
          case 32: {
            FullScreenType = input.ReadInt32();
            break;
          }
          case 40: {
            WinGold = input.ReadInt64();
            break;
          }
          case 48: {
            FreeCnt = input.ReadInt32();
            break;
          }
          case 56: {
            IsSmallGame = input.ReadBool();
            break;
          }
          case 66:
          case 64: {
            openWild_.AddEntriesFrom(input, _repeated_openWild_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 18: {
            hitIcon_.AddEntriesFrom(ref input, _repeated_hitIcon_codec);
            break;
          }
          case 24: {
            Odd = input.ReadInt32();
            break;
          }
          case 32: {
            FullScreenType = input.ReadInt32();
            break;
          }
          case 40: {
            WinGold = input.ReadInt64();
            break;
          }
          case 48: {
            FreeCnt = input.ReadInt32();
            break;
          }
          case 56: {
            IsSmallGame = input.ReadBool();
            break;
          }
          case 66:
          case 64: {
            openWild_.AddEntriesFrom(ref input, _repeated_openWild_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMD_StartBallGame : pb::IMessage<CMD_StartBallGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_StartBallGame> _parser = new pb::MessageParser<CMD_StartBallGame>(() => new CMD_StartBallGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_StartBallGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SG777.SG777Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_StartBallGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_StartBallGame(CMD_StartBallGame other) : this() {
      winGold_ = other.winGold_;
      index_ = other.index_;
      bellNum_ = other.bellNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_StartBallGame Clone() {
      return new CMD_StartBallGame(this);
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 1;
    private long winGold_;
    /// <summary>
    /// 铃铛得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    /// 铃铛位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "bell_num" field.</summary>
    public const int BellNumFieldNumber = 3;
    private int bellNum_;
    /// <summary>
    /// 铃铛已经点过数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BellNum {
      get { return bellNum_; }
      set {
        bellNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_StartBallGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_StartBallGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinGold != other.WinGold) return false;
      if (Index != other.Index) return false;
      if (BellNum != other.BellNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WinGold != 0L) hash ^= WinGold.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (BellNum != 0) hash ^= BellNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WinGold != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(WinGold);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (BellNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BellNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WinGold != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(WinGold);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (BellNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BellNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinGold);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (BellNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BellNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_StartBallGame other) {
      if (other == null) {
        return;
      }
      if (other.WinGold != 0L) {
        WinGold = other.WinGold;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.BellNum != 0) {
        BellNum = other.BellNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WinGold = input.ReadInt64();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            BellNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WinGold = input.ReadInt64();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            BellNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
