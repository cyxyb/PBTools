// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/F4BY.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace F4BY {

  /// <summary>Holder for reflection information generated from Proto/SubGame/F4BY.proto</summary>
  public static partial class F4BYReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/F4BY.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static F4BYReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9TdWJHYW1lL0Y0QlkucHJvdG8SBEY0QlkinwEKDFNDX1NjZW5l",
            "SW5mbxIsChFzdGF0aW9uX2Jhc2VfbGlzdBgBIAMoCzIRLkY0QlkuU3RhdGlv",
            "bkJhc2USHwoIZ3VuX2luZm8YAiADKAsyDS5GNEJZLkd1bkluZm8SFQoNZ3Vu",
            "X3JhdGlvX251bRgDIAEoBRIVCg1ndW5fbGV2ZWxfbnVtGAQgASgFEhIKCnJh",
            "dGlvX2xpc3QYBSADKAUiKwoKQ29tbW9uUmVzcBIMCgRjb2RlGAEgASgFEg8K",
            "B21lc3NhZ2UYAiABKAkiqgEKBk9iamVjdBIKCgJpZBgBIAEoBRINCgVjb3Vu",
            "dBgCIAEoBRINCgVyYXRpbxgDIAEoBRIMCgR0aW1lGAQgASgCEhAKCG11bHRp",
            "cGxlGAUgASgFEgsKA3VpZBgGIAEoBRIQCghvcmlnaW5JZBgHIAEoBRIjCgpt",
            "dWx0aV9saXN0GAggAygLMg8uRjRCWS5NdWx0aUluZm8SEgoKb3JpZ2luX3Vp",
            "ZBgJIAEoBSIgCgNPYmoSCgoCaWQYASABKAUSDQoFdmFsdWUYAiABKAUiJQoH",
            "T2JqZWN0MRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAUiJQoHT2JqZWN0",
            "MhILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAkiJQoHT2JqZWN0MxILCgNr",
            "ZXkYASABKAUSDQoFdmFsdWUYAiABKAUiOwoLV2hlZWxPYmplY3QSHQoGd2hl",
            "ZWxzGAEgAygLMg0uRjRCWS5PYmplY3QzEg0KBXJhdGlvGAIgASgFIiUKB0Rl",
            "Y2ltYWwSCwoDbnVtGAEgASgFEg0KBWRlbm9tGAIgASgFIm4KFENTTG9naW5H",
            "YW1lV2l0aFRva2VuEhAKCHBsYXllcklkGAEgASgFEg0KBXRva2VuGAIgASgJ",
            "Eg4KBm9TVHlwZRgDIAEoBRIPCgd0YWJsZUlkGAQgASgFEhQKDGxhc3RfdGFi",
            "bGVJZBgFIAEoBSI8ChRTQ0xvZ2luR2FtZVdpdGhUb2tlbhITCgtzY2VuZV9p",
            "bmRleBgBIAEoBRIPCgd0YWJsZUlkGAIgASgFIh8KC0NTVXNlclJlYWR5EhAK",
            "CHBsYXllcklkGAEgASgFIjIKCkVmZmVjdEluZm8SEQoJZWZmZWN0X2lkGAEg",
            "ASgFEhEKCWlzX2dsb2JhbBgCIAEoCCLbAgoLU3RhdGlvbkJhc2USEQoJZ3Vu",
            "X3JhdGlvGAEgASgFEhEKCWd1bl9sZXZlbBgCIAEoBRISCgp1c2VyX3Njb3Jl",
            "GAMgASgDEhEKCWNoYWlyX2lkeBgEIAEoBRITCgtwbGF5ZXJfbmFtZRgFIAEo",
            "CRIRCglwbGF5ZXJfaWQYBiABKAUSCwoDdmlwGAcgASgFEg4KBnN0YXR1cxgI",
            "IAEoBRIYChBjcmF6eV9za2lsbF9vcGVuGAkgASgIEhMKC3VzZXJfdGlja2V0",
            "GAogASgFEg4KBmVmZmVjdBgLIAEoBRISCgpleHRyYV9kYXRhGAwgASgFEigK",
            "EXJlZF9wYWNrZXRfdGlja2V0GA0gASgLMg0uRjRCWS5EZWNpbWFsEiUKC2Vm",
            "ZmVjdF9pbmZvGA4gASgLMhAuRjRCWS5FZmZlY3RJbmZvEhYKDndpbmdzX3By",
            "b3BzX2lkGA8gASgFIjsKC1NDVXNlclJlYWR5EiwKEXN0YXRpb25fYmFzZV9s",
            "aXN0GAEgAygLMhEuRjRCWS5TdGF0aW9uQmFzZSI9Cg1TQ05vdGlmeUxvZ2lu",
            "EiwKEXN0YXRpb25fYmFzZV9saXN0GAEgASgLMhEuRjRCWS5TdGF0aW9uQmFz",
            "ZSIQCg5DU05vdGlmeUxvZ291dCIjCg5TQ05vdGlmeUxvZ291dBIRCgljaGFp",
            "cl9pZHgYASABKAUiTQoQQ1NTZXRQcm9iYWJpbGl0eRIRCglndW5fcmF0aW8Y",
            "ASABKAUSEQoJZ3VuX2xldmVsGAIgASgFEhMKC2lzX3VzZV9hdXRvGAMgASgI",
            "Io0BChBTQ1NldFByb2JhYmlsaXR5EgwKBGNvZGUYASABKAUSEQoJY2hhaXJf",
            "aWR4GAIgASgFEhEKCWd1bl9yYXRpbxgDIAEoBRIRCglndW5fbGV2ZWwYBCAB",
            "KAUSCwoDbXNnGAUgASgJEhEKCWlzX3VubG9jaxgGIAEoCBISCgpleHRyYV9k",
            "YXRhGAcgASgFIiMKCkNTU2V0V2luZ3MSFQoNd2luZ3NfcHJvcF9pZBgBIAEo",
            "BSJECgpTQ1NldFdpbmdzEhEKCWNoYWlyX2lkeBgBIAEoBRIVCg13aW5nc19w",
            "cm9wX2lkGAIgASgFEgwKBGNvZGUYAyABKAUiiwEKC0NTVXNlclNob290Eg0K",
            "BWFuZ2xlGAEgASgFEhEKCWJ1bGxldF9pZBgCIAMoBRINCgVyYXRpbxgDIAEo",
            "BRITCgtidWxsZXRfdHlwZRgEIAEoBRIRCglpc19vZmZzZXQYBSABKAgSEAoI",
            "Y2hhaXJfaWQYBiABKAUSEQoJZXh0cmFfbXVsGAcgASgFImoKC1NDVXNlclNo",
            "b290EhEKCWNoYWlyX2lkeBgBIAEoBRINCgVhbmdsZRgCIAEoBRINCgVzY29y",
            "ZRgDIAEoBRITCgtidWxsZXRfdHlwZRgEIAEoBRIVCg1idWxsZXRfb2Zmc2V0",
            "GAUgASgIImgKCUNTSGl0RmlzaBIQCghmaXNoX3VpZBgBIAEoBRIRCglidWxs",
            "ZXRfaWQYAiABKAUSFQoNc2NyZWVuX2Zpc2hlcxgDIAMoBRIQCghjaGFpcl9p",
            "ZBgEIAEoBRINCgVyYXRpbxgFIAEoBSI/CglNdWx0aUluZm8SDwoHYnRfdHlw",
            "ZRgBIAEoBRIQCghidF9tdWx0aRgCIAEoBRIPCgdidF9iYXNlGAMgASgFIoYC",
            "CglTQ0hpdEZpc2gSEQoJY2hhaXJfaWR4GAEgASgFEhAKCGZpc2hfdWlkGAIg",
            "ASgFEgwKBGVhcm4YAyABKAUSEgoKdXNlcl9zY29yZRgEIAEoAxISCgpmaXNo",
            "X3ZhbHVlGAUgASgFEhAKCG11bHRpcGxlGAYgASgFEhcKD2hpdF9idWxsZXRf",
            "dHlwZRgHIAEoBRIYChBtYWdpY19jdWJlX211bHRpGAggASgFEiMKCm11bHRp",
            "X2xpc3QYCSADKAsyDy5GNEJZLk11bHRpSW5mbxISCgpvcmlnaW5fdWlkGAog",
            "ASgFEiAKCmRyb3BfcHJvcHMYCyADKAsyDC5GNEJZLk9iamVjdCKdAwoQU0NI",
            "aXRTcGVjaWFsRmlzaBIRCgljaGFpcl9pZHgYASABKAUSEAoIZmlzaF91aWQY",
            "AiABKAUSDAoEZWFybhgDIAEoBRISCgpmaXNoX3ZhbHVlGAQgASgFEhIKCnVz",
            "ZXJfc2NvcmUYBSABKAMSDQoFZGVhdGgYBiABKAgSEgoKZ3Jvd19zdGFnZRgH",
            "IAEoBRIQCghtdWx0aXBsZRgIIAEoBRIiCgxzaG9ja19maXNoZXMYCSADKAsy",
            "DC5GNEJZLk9iamVjdBIgCgpkcm9wX3Byb3BzGAogAygLMgwuRjRCWS5PYmpl",
            "Y3QSIAoFd2hlZWwYCyABKAsyES5GNEJZLldoZWVsT2JqZWN0EhcKD2hpdF9i",
            "dWxsZXRfdHlwZRgMIAEoBRIPCgdwcm9wX25vGA0gASgFEhgKEG1hZ2ljX2N1",
            "YmVfbXVsdGkYDiABKAUSIwoKbXVsdGlfbGlzdBgPIAMoCzIPLkY0QlkuTXVs",
            "dGlJbmZvEhIKCm9yaWdpbl91aWQYECABKAUSFAoMZHJhZ29uX3Njb3JlGBEg",
            "ASgFImAKDVN5bmNQcm9wSW5mb1gSGgoEcHJvcBgBIAEoCzIMLkY0QlkuT2Jq",
            "ZWN0EgkKAXgYAiABKAISCQoBeRgDIAEoAhINCgVhbmdsZRgEIAEoAhIOCgZz",
            "dGF0dXMYBSABKAUiSQoQVXNlclN5bmNQcm9wSW5mbxIRCgljaGFpcl9pZHgY",
            "ASABKAUSIgoFcHJvcHMYAiADKAsyEy5GNEJZLlN5bmNQcm9wSW5mb1giRgoO",
            "Q1NTeW5jUHJvcEluZm8SIQoEaW5mbxgBIAEoCzITLkY0QlkuU3luY1Byb3BJ",
            "bmZvWBIRCgljaGFpcl9pZHgYAiABKAUiNwoOU0NTeW5jUHJvcEluZm8SJQoF",
            "dXNlcnMYASADKAsyFi5GNEJZLlVzZXJTeW5jUHJvcEluZm8iGwoLQ1NTeW5j",
            "TW9uZXkSDAoEdHlwZRgBIAEoBSJpCgtTQ1N5bmNNb25leRIRCgljaGFpcl9p",
            "ZHgYASABKAUSDQoFc2NvcmUYAiABKAUSDAoEdHlwZRgDIAEoBRINCgVkZWx0",
            "YRgEIAEoBRIOCgZ0aWNrZXQYBSABKAUSCwoDdmlwGAYgASgFIrwBCglGaXNo",
            "VHJhY2USEAoIZmlzaF91aWQYASABKAUSEQoJZmlzaF90eXBlGAIgASgFEhIK",
            "CmZpc2hfbGF5ZXIYAyABKAUSEgoKZmlzaF9zdGFnZRgEIAEoBRIPCgdpc19h",
            "Y2VkGAUgASgIEhIKCmFsaXZlX3RpbWUYBiABKAUSEgoKYmVhZHNfbGlzdBgH",
            "IAMoBRIWCg5maXNoX3RvcnBlZG9JZBgIIAEoBRIRCglmaXNoX3JvYWQYCSAB",
            "KAUiggIKEFNDRmlzaFRyYWNlc0xpc3QSJAoLZmlzaF90cmFjZXMYASADKAsy",
            "Dy5GNEJZLkZpc2hUcmFjZRIRCglmaXNoX3JvYWQYAiABKAUSEgoKZmlzaF9h",
            "cnJheRgDIAEoBRIXCg9jcmVhdGVfaW50ZXJ2YWwYBCABKAUSEQoJaXNfY2Fs",
            "bGVkGAUgASgIEhgKEGFmdGVyX3RpZGVfZmlyc3QYBiABKAgSJQoJY2FsbF90",
            "eXBlGAcgASgOMhIuRjRCWS5DYWxsRmlzaFR5cGUSEgoKbW92ZV9kZWxheRgI",
            "IAEoAhIQCghyb2FkX2lkeBgJIAEoBRIOCgZtb3ZlX3QYCiABKAIiIQoNQ1NT",
            "eW5jRmlzaFJlcRIQCghjaGFpcl9pZBgBIAEoBSImCg1TQ1N5bmNGaXNoUmVx",
            "EhUKDXJlcV9wbGF5ZXJfaWQYASABKAUiuQEKDUNTU3luY0Zpc2hSc3ASJAoL",
            "ZmlzaF90cmFjZXMYASADKAsyDy5GNEJZLkZpc2hUcmFjZRIRCglmaXNoX3Jv",
            "YWQYAiABKAUSEgoKZmlzaF9hcnJheRgDIAEoBRISCgptb3ZlX2RlbGF5GAQg",
            "ASgCEhAKCHJvYWRfaWR4GAUgASgFEg4KBm1vdmVfdBgGIAEoAhIOCgZmaW5p",
            "c2gYByABKAgSFQoNcmVxX3BsYXllcl9pZBgIIAEoBSLlAQoNU0NTeW5jRmlz",
            "aFJzcBIkCgtmaXNoX3RyYWNlcxgBIAMoCzIPLkY0QlkuRmlzaFRyYWNlEhEK",
            "CWZpc2hfcm9hZBgCIAEoBRISCgpmaXNoX2FycmF5GAMgASgFEhIKCm1vdmVf",
            "ZGVsYXkYBCABKAISEAoIcm9hZF9pZHgYBSABKAUSDgoGbW92ZV90GAYgASgC",
            "EhcKD2NyZWF0ZV9pbnRlcnZhbBgHIAEoAhIRCglpc19jYWxsZWQYCCABKAgS",
            "JQoJY2FsbF90eXBlGAkgASgOMhIuRjRCWS5DYWxsRmlzaFR5cGUiJAoNU0ND",
            "aGFuZ2VTY2VuZRITCgtzY2VuZV9pbmRleBgBIAEoBSInChNDU0Zpc2hPdXRz",
            "aWRlU2NyZWVuEhAKCGZpc2hfdWlkGAEgASgFIkIKCkNTTG9ja0Zpc2gSEAoI",
            "ZmlzaF91aWQYASABKAUSDwoHaXNfb3BlbhgCIAEoCBIRCgljaGFpcl9pZHgY",
            "AyABKAUiQgoKU0NMb2NrRmlzaBIRCgljaGFpcl9pZHgYASABKAUSEAoIZmlz",
            "aF91aWQYAiABKAUSDwoHaXNfb3BlbhgDIAEoCCIfCgxDU0NyYXp5U2tpbGwS",
            "DwoHaXNfb3BlbhgBIAEoCCIyCgxTQ0NyYXp5U2tpbGwSEQoJY2hhaXJfaWR4",
            "GAEgASgFEg8KB2lzX29wZW4YAiABKAgiIAoNQ1NUcmVibGVTa2lsbBIPCgdp",
            "c19vcGVuGAEgASgIIjMKDVNDVHJlYmxlU2tpbGwSEQoJY2hhaXJfaWR4GAEg",
            "ASgFEg8KB2lzX29wZW4YAiABKAgiKQoTQ1NVc2VyUnVuQmFja2dyb3VuZBIS",
            "CgpiYWNrZ3JvdW5kGAEgASgIIjwKE1NDVXNlclJ1bkJhY2tncm91bmQSEQoJ",
            "Y2hhaXJfaWR4GAEgASgFEhIKCmJhY2tncm91bmQYAiABKAgiDQoLQ1NIZWFy",
            "dEJlYXQiDQoLU0NIZWFydEJlYXQiogEKDUd1blNwZWNFZmZlY3QSEgoKcmF0",
            "aW9MaW1pdBgBIAEoBRIVCg1oaXRDaGFuZ2VSYXRlGAIgASgCEhcKD21vbmV5",
            "Q2hhbmdlUmF0ZRgDIAEoAhIUCgx2aW9sZW5jZVJhdGUYBCABKAISEQoJc3Bl",
            "ZWRSYXRlGAUgASgCEhAKCGFkdmFuY2VkGAYgASgIEhIKCmRvdWJsZV90YWcY",
            "ByABKAgijgEKD1dpbmdzU3BlY0VmZmVjdBIRCglzcGVlZFJhdGUYASABKAIS",
            "EgoKcmF0aW9MaW1pdBgCIAEoBRIVCg1oaXRDaGFuZ2VSYXRlGAMgASgCEhcK",
            "D21vbmV5Q2hhbmdlUmF0ZRgEIAEoAhIQCghhZHZhbmNlZBgFIAEoCBISCgpk",
            "b3VibGVfdGFnGAYgASgIIsEBCglXaW5nc0luZm8SEAoId2luZ3NfaWQYASAB",
            "KAUSDgoGZW5hYmxlGAIgASgIEjAKEXdpbmdzX3NwZWNfZWZmZWN0GAMgASgL",
            "MhUuRjRCWS5XaW5nc1NwZWNFZmZlY3QSFAoMcmVjZWl2ZV90eXBlGAQgASgF",
            "EhMKC2FjdGl2aXR5X2lkGAUgASgFEg0KBXByaWNlGAYgASgFEhIKCm5ld19l",
            "bmFibGUYByABKAgSEgoKZG91YmxlX3RhZxgIIAEoCCLMAgoHR3VuSW5mbxIR",
            "CglndW5fbGV2ZWwYASABKAUSEQoJcmF0aW9fbWluGAIgASgFEhEKCXJhdGlv",
            "X21heBgDIAEoBRIOCgZlbmFibGUYBCABKAgSEgoKbmV3X2VuYWJsZRgFIAEo",
            "CBIOCgZpc192aXAYBiABKAgSEQoJdmlwX2xpbWl0GAcgASgFEhEKCWlzX21l",
            "bWJlchgIIAEoCBISCgptZW1iZXJfc2VjGAkgASgFEhIKCmV4dHJhX2RhdGEY",
            "CiABKAUSKgoNZ3VuU3BlY0VmZmVjdBgLIAEoCzITLkY0QlkuR3VuU3BlY0Vm",
            "ZmVjdBINCgVwcmljZRgMIAEoBRIUCgxhdHRhY2tfc3BlZWQYDSABKAISDAoE",
            "cmFnZRgOIAEoAhITCgthY3Rpdml0eV9pZBgPIAEoBRISCgpyYXRpb19saXN0",
            "GBAgAygFIisKB1ZpcEluZm8SDwoHb2xkX3ZpcBgBIAEoBRIPCgdjdXJfdmlw",
            "GAIgASgFIjYKCFByb3BJbmZvEg4KBmVuYWJsZRgBIAEoCBIaCgRwcm9wGAIg",
            "ASgLMgwuRjRCWS5PYmplY3QiJQoQQ1NVc2VySW5mb05vdGlmeRIRCglicm9h",
            "ZGNhc3QYASABKAgi9gEKEFNDVXNlckluZm9Ob3RpZnkSEQoJY2hhaXJfaWR4",
            "GAEgASgFEh8KCGd1bl9pbmZvGAIgAygLMg0uRjRCWS5HdW5JbmZvEiMKCndp",
            "bmdzX2luZm8YAyADKAsyDy5GNEJZLldpbmdzSW5mbxIfCgh2aXBfaW5mbxgE",
            "IAEoCzINLkY0QlkuVmlwSW5mbxIhCglwcm9wX2luZm8YBSADKAsyDi5GNEJZ",
            "LlByb3BJbmZvEhYKDmxhc3RfZ3VuX2xldmVsGAYgASgFEhIKCmxhc3RfcmF0",
            "aW8YByABKAUSGQoRbGFzdF93aW5nc19wcm9wSWQYCCABKAUiYQoQU0NHYW1l",
            "SW5mb05vdGlmeRIRCgl1c2VyX3Bvb2wYASABKAgSEgoKYXdhcmRfZmlzaBgC",
            "IAMoBRImCg91c2VyX3Bvb2xfbGltaXQYAyADKAsyDS5GNEJZLk9iamVjdDMi",
            "MgoMU0NJbmZvUmVkRG90EhEKCXNldmVuX2RheRgBIAEoCBIPCgdyZWRfZG90",
            "GAIgASgIIlwKDUp1bXBIaWdoQXJlbmESDwoHaXNfb3BlbhgBIAEoCBILCgN2",
            "aXAYAiABKAUSDAoEY29pbhgDIAEoBRIRCglnYW1lX3RpbWUYBCABKAUSDAoE",
            "dGlwcxgFIAEoCSJYCg5TQ0FjdGl2aXR5SW5mbxIhCgRqdW1wGAEgASgLMhMu",
            "RjRCWS5KdW1wSGlnaEFyZW5hEg0KBWxpbWl0GAIgASgFEhQKDHBvb2xfaXNf",
            "b3BlbhgDIAEoCCI+CgZDU0NoYXQSEAoIbXNnX3R5cGUYASABKAUSDwoHbXNn",
            "X2lkeBgCIAEoBRIRCgljaGFpcl9pZHgYAyABKAUiPgoGU0NDaGF0EhEKCWNo",
            "YWlyX2lkeBgBIAEoBRIQCghtc2dfdHlwZRgCIAEoBRIPCgdtc2dfaWR4GAMg",
            "ASgFIkwKC1NDR2FpbkF3YXJkEhEKCWNoYWlyX2lkeBgBIAEoBRINCgVzY29y",
            "ZRgCIAEoBRIbCgVhd2FyZBgDIAEoCzIMLkY0QlkuT2JqZWN0Ig0KC0NTQXdh",
            "cmRQb29sIioKC1NDQXdhcmRQb29sEhsKBHBvb2wYASADKAsyDS5GNEJZLk9i",
            "amVjdDMiLwoMQ1NQcm9wU3RhdHVzEg8KB3Byb3BfaWQYASABKAUSDgoGc3Rh",
            "dHVzGAIgASgFIlEKDFNDUHJvcFN0YXR1cxIRCgljaGFpcl9pZHgYASABKAUS",
            "DwoHcHJvcF9pZBgCIAEoBRIOCgZzdGF0dXMYAyABKAUSDQoFYnRfaWQYBCAB",
            "KAUiQgoOR2l2ZW5DYXJkQXdhcmQSEAoIY2FyZF9pZHgYASABKAUSDAoEYmFz",
            "ZRgCIAEoBRIQCghtdWx0aXBsZRgDIAEoBSJcCg1Vc2VyQXdhcmRJdGVtEg0K",
            "BWluZGV4GAEgASgFEhAKCGl0ZW1fbWF4GAIgASgFEgwKBG5hbWUYAyABKAkS",
            "HAoFZ29vZHMYBCADKAsyDS5GNEJZLk9iamVjdDIiIwoOQ1NVc2VyUG9vbElu",
            "Zm8SEQoJb3Blbl9wYWdlGAEgASgIIosBCg5TQ1VzZXJQb29sSW5mbxIRCglj",
            "aGFpcl9pZHgYASABKAUSEQoJb3Blbl9wYWdlGAIgASgIEg4KBnN0YXR1cxgD",
            "IAEoCBINCgVjb3VudBgEIAEoBRIQCghwb29sX21heBgFIAEoBRIiCgVpdGVt",
            "cxgGIAMoCzITLkY0QlkuVXNlckF3YXJkSXRlbSIgChBDU1VzZXJQb29sU3Rh",
            "dHVzEgwKBG9wZW4YASABKAgiIAoQU0NVc2VyUG9vbFN0YXR1cxIMCgRvcGVu",
            "GAEgASgIIiIKEUNTVXNlclBvb2xQcmVEcmF3Eg0KBWxldmVsGAEgASgFIj0K",
            "EVNDVXNlclBvb2xQcmVEcmF3EgwKBGNvZGUYASABKAUSDQoFbGV2ZWwYAiAB",
            "KAUSCwoDbXNnGAMgASgJIhAKDkNTVXNlclBvb2xEcmF3IoABCg5TQ1VzZXJQ",
            "b29sRHJhdxIRCgljaGFpcl9pZHgYASABKAUSHAoFZ29vZHMYAiADKAsyDS5G",
            "NEJZLk9iamVjdDISHAoFYXdhcmQYAyABKAsyDS5GNEJZLk9iamVjdDISHwoJ",
            "YXdhcmRfY250GAQgASgLMgwuRjRCWS5PYmplY3QidAoNU0NVc2VyUG9vbEFk",
            "ZBILCgNhZGQYASABKAUSDQoFY291bnQYAiABKAUSEQoJZmlyc3RfbWF4GAMg",
            "ASgFEhAKCHBvb2xfbWF4GAQgASgFEg4KBnN0YXR1cxgFIAEoCBISCgpsZXZl",
            "bF9uYW1lGAYgASgJIhYKFENTVXNlclBvb2xEb3VibGVJbmZvImwKFFNDVXNl",
            "clBvb2xEb3VibGVJbmZvEgwKBGNvc3QYASABKAUSIgoLaXRlbV9iZWZvcmUY",
            "AiABKAsyDS5GNEJZLk9iamVjdDISIgoLaXRlbV9kb3VibGUYAyABKAsyDS5G",
            "NEJZLk9iamVjdDIiJQoQQ1NVc2VyUG9vbERvdWJsZRIRCglpc19kb3VibGUY",
            "ASABKAgigwEKEFNDVXNlclBvb2xEb3VibGUSDAoEY29kZRgBIAEoBRIOCgZy",
            "ZXN1bHQYAiABKAUSEQoJY2hhaXJfaWR4GAMgASgFEhsKBGl0ZW0YBCABKAsy",
            "DS5GNEJZLk9iamVjdDMSIQoKZXh0cmFfaXRlbRgFIAEoCzINLkY0QlkuT2Jq",
            "ZWN0MyIRCg9DU0x1Y2t5UG9vbEluZm8iLQoPU0NMdWNreVBvb2xJbmZvEg0K",
            "BWNvdW50GAEgASgFEgsKA21heBgCIAEoBSIRCg9DU0x1Y2t5UG9vbERyYXci",
            "LgoPU0NMdWNreVBvb2xEcmF3EhsKBGl0ZW0YASABKAsyDS5GNEJZLk9iamVj",
            "dDMiIwoRQ1NUb3JwZWRvUHJlU2hvb3QSDgoGcHJvcElkGAEgASgFIlEKEVND",
            "VG9ycGVkb1ByZVNob290EhEKCWNoYWlyX2lkeBgBIAEoBRIOCgZwcm9wSWQY",
            "AiABKAUSDAoEY29kZRgDIAEoBRILCgNtc2cYBCABKAkiFgoUQ1NUb3JwZWRv",
            "Q2FuY2VsU2hvb3QiKQoUU0NUb3JwZWRvQ2FuY2VsU2hvb3QSEQoJY2hhaXJf",
            "aWR4GAEgASgFIjgKDkNTVG9ycGVkb1Nob290EhAKCGZpc2hfdWlkGAEgASgF",
            "EgkKAXgYAiABKAISCQoBeRgDIAEoAiJLCg5TQ1RvcnBlZG9TaG9vdBIRCglj",
            "aGFpcl9pZHgYASABKAUSEAoIZmlzaF91aWQYAiABKAUSCQoBeBgDIAEoAhIJ",
            "CgF5GAQgASgCIg4KDENTVG9ycGVkb0hpdCKGAQoMU0NUb3JwZWRvSGl0EhEK",
            "CWNoYWlyX2lkeBgBIAEoBRIMCgRlYXJuGAIgASgFEg0KBXNjb3JlGAMgASgF",
            "Eg4KBnByb3BJZBgEIAEoBRIOCgZyZW1haW4YBSABKAUSEAoIZmlzaF91aWQY",
            "BiABKAUSCQoBeBgHIAEoAhIJCgF5GAggASgCIjMKCkNTQ2FsbEZpc2gSJQoJ",
            "Y2FsbF90eXBlGAEgASgOMhIuRjRCWS5DYWxsRmlzaFR5cGUiWgoKU0NDYWxs",
            "RmlzaBIRCgljaGFpcl9pZHgYASABKAUSDgoGcHJvcElkGAIgASgFEg4KBnJl",
            "bWFpbhgDIAEoBRIMCgRjb2RlGAQgASgFEgsKA21zZxgFIAEoCSJQCglTQ0Nv",
            "bVRhc2sSEQoJZ3VuX3JhdGlvGAEgASgFEhEKCWd1bl9sZXZlbBgCIAEoBRIN",
            "CgVhd2FyZBgDIAEoBRIOCgZ0aWNrZXQYBCABKAUisgEKClNDVGFza0luZm8S",
            "EQoJZ3VuX3JhdGlvGAEgASgFEhEKCWd1bl9sZXZlbBgCIAEoBRIPCgdjdXJf",
            "bnVtGAMgASgFEhEKCXRvdGFsX251bRgEIAEoBRIRCgl2aXBfbGV2ZWwYBSAB",
            "KAUSEQoJaXNfdW5sb2NrGAYgASgIEg0KBWF3YXJkGAcgASgFEhUKDWlzX3Zp",
            "cF91bmxvY2sYCCABKAgSDgoGdGlja2V0GAkgASgFIkwKD0NTU2F2ZVNraWxs",
            "VGltZRIMCgRhdXRvGAEgASgFEgwKBGxvY2sYAiABKAUSDQoFYW5ncnkYAyAB",
            "KAUSDgoGdHJlYmxlGAQgASgFInEKDFNldmVuRGF5VGFzaxINCgVpbmRleBgB",
            "IAEoBRIPCgdmaXNoX2lkGAIgASgFEhEKCXRvdGFsX251bRgDIAEoBRIPCgdj",
            "dXJfbnVtGAQgASgFEg4KBnN0YXR1cxgFIAEoBRINCgVhd2FyZBgGIAEoBSJT",
            "Cg5TZXZlbkRheURldGFpbBILCgNkYXkYASABKAUSEgoKYm94X3N0YXR1cxgC",
            "IAEoBRIgCgR0YXNrGAMgASgLMhIuRjRCWS5TZXZlbkRheVRhc2siEAoOQ1NT",
            "ZXZlbkRheUluZm8iuwEKDlNDU2V2ZW5EYXlJbmZvEhIKCnN0YXJ0X2RhdGUY",
            "ASABKAkSEAoIZW5kX2RhdGUYAiABKAkSDwoHY3VyX2RheRgDIAEoBRISCgpn",
            "ZXRfcmVtYWluGAQgASgFEhQKDHJlbWFpbl9zY29yZRgFIAEoBRIOCgZ0aWNr",
            "ZXQYBiABKAUSJAoGZGV0YWlsGAcgASgLMhQuRjRCWS5TZXZlbkRheURldGFp",
            "bBISCgpndW5fZW5hYmxlGAggASgFIkUKD0NTU2V2ZW5EYXlBd2FyZBILCgNk",
            "YXkYASABKAUSDQoFaW5kZXgYAiABKAUSFgoOZ2V0X2F3YXJkX3R5cGUYAyAB",
            "KAUiVAoPU0NTZXZlbkRheUF3YXJkEg0KBXNjb3JlGAEgASgFEg4KBnRpY2tl",
            "dBgCIAEoBRIiCgR0YXNrGAMgASgLMhQuRjRCWS5TZXZlbkRheURldGFpbCIx",
            "ChBTQ1ZpcENoYXJnZUF3YXJkEg0KBXNjb3JlGAEgASgFEg4KBnRpY2tldBgC",
            "IAEoBSIzChBDU0NsaWNrU3RhdGlzdGljEgsKA251bRgBIAEoCRISCgpub3Rf",
            "cmVwZWF0GAIgASgIIiIKE0NTTmV3Q2xpY2tTdGF0aXN0aWMSCwoDbnVtGAEg",
            "ASgJIjkKCUNTVXNlckxvZxIMCgR0eXBlGAEgASgFEg0KBXNjb3JlGAIgASgJ",
            "Eg8KB2NvbnRlbnQYAyABKAkiKQoLQ1NVc2VyRXZlbnQSCgoCaWQYASABKAUS",
            "DgoGc3RhdHVzGAIgASgFIhYKFENTR2V0QXdhcmRQb29sUmVjb3JkIl4KD0F3",
            "YXJkUG9vbFJlY29yZBIMCgR0aW1lGAEgASgJEgwKBG5hbWUYAiABKAkSDgoG",
            "cG9vbElkGAMgASgFEg0KBWF3YXJkGAQgASgFEhAKCHBsYXllcklkGAUgASgF",
            "Ij4KFFNDR2V0QXdhcmRQb29sUmVjb3JkEiYKB3JlY29yZHMYASADKAsyFS5G",
            "NEJZLkF3YXJkUG9vbFJlY29yZCJZChBTQ1Byb3BEcm9wTm90aWZ5EhEKCWNo",
            "YWlyX2lkeBgBIAEoBRIQCghmaXNoX3VpZBgCIAEoBRIgCgpkcm9wX3Byb3Bz",
            "GAMgAygLMgwuRjRCWS5PYmplY3QiHAoJQ1NVc2VQcm9wEg8KB3Byb3BfaWQY",
            "ASABKAUiWgoJU0NVc2VQcm9wEhEKCWNoYWlyX2lkeBgBIAEoBRIPCgdwcm9w",
            "X2lkGAIgASgFEg4KBnJlbWFpbhgDIAEoBRIMCgRjb2RlGAQgASgFEgsKA21z",
            "ZxgFIAEoCSJHCgxTQ0Zyb3plblRpbWUSEQoJY2hhaXJfaWR4GAEgASgFEhEK",
            "CWlzX2Zyb3plbhgCIAEoCBIRCglmcm96ZW5fY2QYAyABKAIiYgoSU0NUcmVh",
            "c3VyZUZpc2hJbmZvEhAKCGZpc2hfdWlkGAEgASgFEhEKCWN1cl9zdGFnZRgC",
            "IAEoBRITCgthY2N1bV9tb25leRgDIAEoBRISCgpmaXNoX3ZhbHVlGAQgASgF",
            "IrcCChVTQ1RyZWFzdXJlRmlzaENhdGNoZWQSEQoJY2hhaXJfaWR4GAEgASgF",
            "Eg0KBXJhdGlvGAIgASgFEhAKCGZpc2hfdWlkGAMgASgFEhIKCmZpc2hfdmFs",
            "dWUYBCABKAUSEwoLYWNjdW1fbW9uZXkYBSABKAUSEAoIbXVsdGlwbGUYBiAB",
            "KAUSDQoFZGVhdGgYByABKAgSDAoEZWFybhgIIAEoBRISCgp1c2VyX3Njb3Jl",
            "GAkgASgDEhgKEGRpc3BsYXlfbXVsdGlwbGUYCiABKAgSEQoJY3VyX3N0YWdl",
            "GAsgASgFEhgKEG1hZ2ljX2N1YmVfbXVsdGkYDCABKAUSIwoKbXVsdGlfbGlz",
            "dBgNIAMoCzIPLkY0QlkuTXVsdGlJbmZvEhIKCm9yaWdpbl91aWQYDiABKAUi",
            "fAoRTWF0Y2hQYWNrQWRkaXRpb24SCgoCaWQYASABKAkSDgoGaXNfYnV5GAIg",
            "ASgIEhYKDnNjb3JlX2FkZGl0aW9uGAMgASgCEhgKEHJlYXdhcmRfYWRkaXRp",
            "b24YBCABKAISDAoEY2FyZBgFIAEoBRILCgNzZWMYBiABKAUiFQoTQ1NNYXRj",
            "aFBhY2tBZGRpdGlvbiJAChNTQ01hdGNoUGFja0FkZGl0aW9uEikKCGFkZGl0",
            "aW9uGAEgAygLMhcuRjRCWS5NYXRjaFBhY2tBZGRpdGlvbiIjChFTQ01hdGNo",
            "UGFja0ludmFpbBIOCgZwYWNrSWQYASABKAkiIwoRQ1NNYXRjaFBhY2tCdXlp",
            "bmcSDgoGcGFja0lkGAEgASgJImcKC0F3YXJkRGV0YWlsEhAKCHBsYXllcklk",
            "GAEgASgFEgwKBG51bXMYAiABKAUSDgoGcGVyaW9kGAMgASgFEgsKA3ZpcBgE",
            "IAEoBRIMCgRuaWNrGAUgASgJEg0KBXBob3RvGAYgASgJIkgKEEx1Y2t5QXdh",
            "cmROb3RpZnkSEQoJYXdhcmRUeXBlGAEgASgFEiEKBmRldGFpbBgCIAMoCzIR",
            "LkY0QlkuQXdhcmREZXRhaWwiEgoQQ1NHYW1lSXRlbVN3aXRjaCImChBTQ0dh",
            "bWVJdGVtU3dpdGNoEhIKCmx1Y2t5X3Rhc2sYASABKAgiKQoJQXdhcmRQcm9w",
            "Eg8KB3Byb3BfaWQYASABKAUSCwoDbnVtGAIgASgFImgKDUx1Y2t5VGFza0lu",
            "Zm8SCgoCaWQYASABKAUSDgoGc3RhdHVzGAIgASgFEg0KBXNjb3JlGAMgASgF",
            "EgwKBHRleHQYBCABKAkSDgoGYW1vdW50GAUgASgFEg4KBnRhcmdldBgGIAEo",
            "BSIRCg9DU0x1Y2t5RHJhd0luZm8ilQMKD1NDTHVja3lEcmF3SW5mbxIXCg9o",
            "b3VyX3JlbWFpbl9zZWMYASABKAUSFgoOZGF5X3JlbWFpbl9zZWMYAiABKAUS",
            "JAoLaG91cl9yZXdhcmQYAyADKAsyDy5GNEJZLkF3YXJkUHJvcBIjCgpkYXlf",
            "cmV3YXJkGAQgAygLMg8uRjRCWS5Bd2FyZFByb3ASFgoOZGF5X2x1Y2t5X251",
            "bXMYBSADKAUSDQoFc2NvcmUYBiABKAUSEgoKaG91cl90b3RhbBgHIAEoBRIR",
            "CglkYXlfdG90YWwYCCABKAUSFgoOaG91cl9hd2FyZF9udW0YCSABKAUSFQoN",
            "ZGF5X2F3YXJkX251bRgKIAEoBRIXCg9uZXh0X3N0YXJ0X3RpY2sYCyABKAUS",
            "JgoJdGFza19pbmZvGAwgAygLMhMuRjRCWS5MdWNreVRhc2tJbmZvEhYKDmV4",
            "Y2hhbmdlX3Njb3JlGA0gASgFEhcKD25leHRfcmVtYWluX3NlYxgOIAEoBRIX",
            "Cg9ob3VyX2x1Y2t5X251bXMYDyADKAUiJgoTQ1NHZXRMdWNreVRhc2tBd2Fy",
            "ZBIPCgd0YXNrX2lkGAEgASgFIlUKE1NDR2V0THVja3lUYXNrQXdhcmQSIQoE",
            "dGFzaxgBIAEoCzITLkY0QlkuTHVja3lUYXNrSW5mbxINCgVzY29yZRgCIAEo",
            "BRIMCgRjb2RlGAMgASgFIh4KDUNTR2V0THVja3lOdW0SDQoFdGltZXMYASAB",
            "KAUiRgoNU0NHZXRMdWNreU51bRINCgVzY29yZRgBIAEoBRISCgplcnJvcl9j",
            "b2RlGAIgASgFEhIKCmx1Y2t5X251bXMYAyADKAUiDwoNQ1NMdWNreVJlZERv",
            "dCIdCg1TQ0x1Y2t5UmVkRG90EgwKBHNob3cYASABKAgiXQoLTHVja3lSZWNv",
            "cmQSCwoDdmlwGAEgASgFEg0KBXRpbWVzGAIgASgFEhEKCWx1Y2t5X251bRgD",
            "IAEoBRIMCgR0aWNrGAQgASgFEhEKCW5pY2tfbmFtZRgFIAEoCSJdCglPd25S",
            "ZWNvcmQSHwoGcmV3YXJkGAEgAygLMg8uRjRCWS5Bd2FyZFByb3ASDgoGc3Rh",
            "dHVzGAIgASgFEgwKBHRpY2sYAyABKAUSEQoJbHVja3lfbnVtGAQgASgFIh0K",
            "DUNTTHVja3lSZWNvcmQSDAoEdHlwZRgBIAEoBSJACg1TQ0x1Y2t5UmVjb3Jk",
            "EgwKBHR5cGUYASABKAUSIQoGcmVjb3JkGAIgAygLMhEuRjRCWS5MdWNreVJl",
            "Y29yZCIuCgtTQ093blJlY29yZBIfCgZyZWNvcmQYASADKAsyDy5GNEJZLk93",
            "blJlY29yZCI1CgpDU0JvbWJJbmZvEgkKAXgYASABKAISCQoBeRgCIAEoAhIR",
            "CgljaGFpcl9pZHgYAyABKAUilwEKClNDU3luY0JvbWISEQoJY2hhaXJfaWR4",
            "GAEgASgFEg4KBmJvbWJJZBgCIAEoBRIRCgljdXJTdGF0dXMYAyABKAUSCQoB",
            "eBgEIAEoAhIJCgF5GAUgASgCEg0KBW5leHRYGAYgASgCEg0KBW5leHRZGAcg",
            "ASgCEg0KBXNjb3JlGAggASgFEhAKCGlzRmluaXNoGAkgASgIIkoKEFNDU3lu",
            "Y0JvbWJGaW5pc2gSEQoJY2hhaXJfaWR4GAEgASgFEg4KBmJvbWJJZBgCIAEo",
            "BRITCgtyZXR1cm5Nb25leRgDIAEoBSJGChFDU0JvbWJIaXRGaXNoSW5mbxIO",
            "CgZib21iSWQYASABKAUSDgoGZmlzaElkGAIgAygFEhEKCWNoYWlyX2lkeBgD",
            "IAEoBSKfAQoOU0NHZXRNYWdpY0N1YmUSEQoJY2hhaXJfaWR4GAEgASgFEhIK",
            "CmJ1bGxldFR5cGUYAiABKAUSFAoMY3JlYXRlV2VhcG9uGAMgASgIEhIKCmlz",
            "U3luY0luZm8YBCABKAgSEAoIaXNGaW5pc2gYBSABKAgSEAoIZ3VuUmF0aW8Y",
            "BiABKAUSGAoQbWFnaWNfY3ViZV9tdWx0aRgHIAEoBSJMChVTQ01hZ2ljQ3Vi",
            "ZUJ1bGxldEluZm8SEQoJY2hhaXJfaWR4GAEgASgFEhAKCHRvdGFsTnVtGAIg",
            "ASgFEg4KBmN1ck51bRgDIAEoBSIfCghDU1ByZUhpdBITCgtzY3JlZW5fZmlz",
            "aBgBIAMoBSI7CghTQ1ByZUhpdBILCgNlcnIYASABKAUSEAoIZmlzaF91aWQY",
            "AiABKAUSEAoIY2hhaXJfaWQYAyABKAUiQgoKQ1NQcmVTaG9vdBIRCgljaGFp",
            "cl9pZHgYASABKAUSDQoFYW5nbGUYAiABKAUSEgoKc2hvb3RfdHlwZRgDIAEo",
            "BSJCCgpTQ1ByZVNob290EhEKCWNoYWlyX2lkeBgBIAEoBRINCgVhbmdsZRgC",
            "IAEoBRISCgpzaG9vdF90eXBlGAMgASgFIjIKCkZyb3plbkZpc2gSDwoHZmlz",
            "aF9pZBgBIAEoBRITCgtmcm96ZW5fdGltZRgCIAEoBSI0CgxTQ0Zyb3plbkZp",
            "c2gSJAoKZnJvemVuRmlzaBgBIAMoCzIQLkY0QlkuRnJvemVuRmlzaCKEAQoS",
            "U0NWYWxlbnRpbmVEYXlGaXNoEiIKCWZpc2hfaW5mbxgBIAEoCzIPLkY0Qlku",
            "U0NIaXRGaXNoEhAKCGJ0X3JhdGlvGAIgASgFEhIKCnJhbmRfbXVsdGkYAyAB",
            "KAUSEgoKYmFsbF9tdWx0aRgEIAEoBRIQCgh1aWRfbGlzdBgFIAMoBSJ0CgtT",
            "Q0tpUmluRmlzaBIiCglmaXNoX2luZm8YASABKAsyDy5GNEJZLlNDSGl0Rmlz",
            "aBIQCghidF9yYXRpbxgCIAEoBRINCgVtdWx0aRgDIAEoBRIRCglpc19zZW5p",
            "b3IYBCABKAgSDQoFbGV2ZWwYBSABKAUilAEKEVNDTnZXYUZpc2hDYXB0dXJl",
            "EhEKCWNoYWlyX2lkeBgBIAEoBRIQCghmaXNoX3VpZBgCIAEoBRINCgVyYXRp",
            "bxgDIAEoBRIVCg1udndhX211bHRpcGxlGAQgASgFEg8KB2J0X2tpbmQYBSAB",
            "KAUSIwoKbXVsdGlfbGlzdBgGIAMoCzIPLkY0QlkuTXVsdGlJbmZvIqMBChNT",
            "Q0JvbWJHbG9iZUZpc2hJbmZvEhEKCWNoYWlyX2lkeBgBIAEoBRINCgVyYXRp",
            "bxgCIAEoBRIQCghmaXNoX3VpZBgDIAEoBRINCgVzdGFnZRgEIAEoBRIOCgZi",
            "b21iSWQYBSABKAUSEgoKdG90YWxfZWFybhgGIAEoBRITCgtzZWxmX2JvbWJJ",
            "ZBgHIAEoBRIQCghvcmlnaW5JZBgIIAEoBSJMChJDU0JvbWJHbG9iZUZpc2hI",
            "aXQSDgoGYm9tYklkGAEgASgFEg8KB2J0X3R5cGUYAiABKAUSFQoNc2NyZWVu",
            "X2Zpc2hlcxgDIAMoBSJlChdTQ0Fubml2ZXJzYXJ5U2hvd1NlbGVjdBIRCglj",
            "aGFpcl9pZHgYASABKAUSEwoLc2hvd19zZWxlY3QYAiABKAgSEwoLcmVtYWlu",
            "X3RpbWUYAyABKAUSDQoFc3RhZ2UYBCABKAUiJwoWQ1NBbm5pdmVyc2FyeVNl",
            "bGVjdFJlcRINCgVzdGFnZRgBIAEoBSI6ChdBbm5pdmVyc2FyeVN0YWdlMVJl",
            "c3VsdBINCgVzY29yZRgBIAEoBRIQCghmaXNoX3VpZBgCIAEoBSJTChdBbm5p",
            "dmVyc2FyeVN0YWdlMlJlc3VsdBISCgpzY29yZV9saXN0GAEgAygFEhIKCmRy",
            "b3BfdGltZXMYAiABKAUSEAoIbXVsdGlwbGUYAyABKAUiPQoXQW5uaXZlcnNh",
            "cnlTdGFnZTNSZXN1bHQSEQoJb3JpZ2luX2lkGAEgASgFEg8KB3NlbGZfaWQY",
            "AiABKAUipwIKGVNDQW5uaXZlcnNhcnlTZWxlY3RSZXN1bHQSEQoJY2hhaXJf",
            "aWR4GAEgASgFEg0KBXN0YWdlGAIgASgFEhAKCGJ0X3JhdGlvGAMgASgFEiMK",
            "Cm11bHRpX2xpc3QYBCADKAsyDy5GNEJZLk11bHRpSW5mbxISCgp0b3RhbF9l",
            "YXJuGAUgASgFEg0KBWRlYXRoGAYgASgIEi4KB3Jlc3VsdDEYByABKAsyHS5G",
            "NEJZLkFubml2ZXJzYXJ5U3RhZ2UxUmVzdWx0Ei4KB3Jlc3VsdDIYCCABKAsy",
            "HS5GNEJZLkFubml2ZXJzYXJ5U3RhZ2UyUmVzdWx0Ei4KB3Jlc3VsdDMYCSAB",
            "KAsyHS5GNEJZLkFubml2ZXJzYXJ5U3RhZ2UzUmVzdWx0IkoKEENTQW5uaXZl",
            "cnNhcnlIaXQSDgoGYm9tYklkGAEgASgFEg8KB2J0X3R5cGUYAiABKAUSFQoN",
            "c2NyZWVuX2Zpc2hlcxgDIAMoBSKLAQoZU0NTeW5jQW5uaXZlcnNhcnlIaXRT",
            "dGFnZRIRCgljaGFpcl9pZHgYASABKAUSEQoJb3JpZ2luX2lkGAIgASgFEg8K",
            "B3NlbGZfaWQYAyABKAUSDQoFc3RhZ2UYBCABKAUSEgoKdG90YWxfZWFybhgF",
            "IAEoBRIUCgxpbnZhbGlkX2Vhcm4YBiABKAUiVQoOU2NhbGxvcExvdHRlcnkS",
            "CgoCaWQYASABKAUSDAoEdHlwZRgCIAEoBRIOCgZzdGF0dXMYAyABKAUSGQoG",
            "cmV3YXJkGAQgASgLMgkuRjRCWS5PYmoiogEKEFNDQ2FwdHVyZVNjYWxsb3AS",
            "EQoJY2hhaXJfaWR4GAEgASgFEhAKCGZpc2hfdWlkGAIgASgFEg0KBXJhdGlv",
            "GAMgASgFEgwKBHRpbWUYBCABKAUSKgoMbG90dGVyeV9saXN0GAUgAygLMhQu",
            "RjRCWS5TY2FsbG9wTG90dGVyeRIgCg1yZXdhcmRfY29uZmlnGAYgAygLMgku",
            "RjRCWS5PYmoiGwoNQ1NPcGVuU2NhbGxvcBIKCgJpZBgBIAEoBSJJCg1TQ09w",
            "ZW5TY2FsbG9wEhEKCWNoYWlyX2lkeBgBIAEoBRIlCgdzY2FsbG9wGAIgASgL",
            "MhQuRjRCWS5TY2FsbG9wTG90dGVyeSKKAQoWU0NTZXR0bGVTY2FsbG9wTG90",
            "dGVyeRIRCgljaGFpcl9pZHgYASABKAUSDAoEZWFybhgCIAEoBRIqCgxsb3R0",
            "ZXJ5X2xpc3QYAyADKAsyFC5GNEJZLlNjYWxsb3BMb3R0ZXJ5EiMKCm11bHRp",
            "X2xpc3QYBCADKAsyDy5GNEJZLk11bHRpSW5mbyKUAQoUU0NTeW5jU2NhbGxv",
            "cExvdHRlcnkSEQoJY2hhaXJfaWR4GAEgASgFEg0KBXJhdGlvGAIgASgFEgwK",
            "BHRpbWUYAyABKAUSKgoMbG90dGVyeV9saXN0GAQgAygLMhQuRjRCWS5TY2Fs",
            "bG9wTG90dGVyeRIgCg1yZXdhcmRfY29uZmlnGAUgAygLMgkuRjRCWS5PYmoi",
            "OQoPT3BlbkNoZXN0UmV3YXJkEgoKAmlkGAEgASgFEhoKA251bRgCIAEoCzIN",
            "LkY0QlkuRGVjaW1hbCKnAQoTU0NVcGRhdGVDaGVzdFN0YXR1cxIRCglpc19h",
            "Y3RpdmUYASABKAgSIwoKY2hlc3RfdHlwZRgCIAEoDjIPLkY0QlkuQ2hlc3RU",
            "eXBlEhYKDnRvdGFsX3Byb2dyZXNzGAMgASgFEhcKD3JlbWFpbl9wcm9ncmVz",
            "cxgEIAEoBRINCgVndWlkZRgFIAEoCBIYChBhdmFpbGFibGVfcmV3YXJkGAYg",
            "ASgFIg8KDUNTQ2hlc3RDb25maWciWAoKQ2hlc3RCcmllZhIjCgpjaGVzdF90",
            "eXBlGAEgASgOMg8uRjRCWS5DaGVzdFR5cGUSJQoGcmV3YXJkGAIgAygLMhUu",
            "RjRCWS5PcGVuQ2hlc3RSZXdhcmQiuAEKDVNDQ2hlc3RDb25maWcSEAoIZW5k",
            "X3RpbWUYASABKAUSKgoQY2hlc3RfYnJpZWZfbGlzdBgCIAMoCzIQLkY0Qlku",
            "Q2hlc3RCcmllZhIRCgltaW5fcmF0aW8YAyABKAUSEQoJYXV0b19vcGVuGAQg",
            "ASgIEjAKC2F1dG9fb3B0aW9uGAUgASgOMhsuRjRCWS5DaGVzdEF1dG9TZWxl",
            "Y3RPcHRpb24SEQoJaXNfZW5hYmxlGAYgASgIImsKC1NDT3BlbkNoZXN0EioK",
            "C3Jld2FyZF9saXN0GAEgAygLMhUuRjRCWS5PcGVuQ2hlc3RSZXdhcmQSMAoL",
            "YXV0b19vcHRpb24YAiABKA4yGy5GNEJZLkNoZXN0QXV0b1NlbGVjdE9wdGlv",
            "biIrChNDU1NlbGVjdENoZXN0UmV3YXJkEhQKDHNlbGVjdF9pbmRleBgBIAEo",
            "BSI8ChNTQ1NlbGVjdENoZXN0UmV3YXJkEiUKBnJld2FyZBgBIAEoCzIVLkY0",
            "QlkuT3BlbkNoZXN0UmV3YXJkIlsKFENTQ2hlc3RTZXRBdXRvU2VsZWN0EjAK",
            "C2F1dG9fb3B0aW9uGAEgASgOMhsuRjRCWS5DaGVzdEF1dG9TZWxlY3RPcHRp",
            "b24SEQoJYXV0b19vcGVuGAIgASgIIlsKFFNDQ2hlc3RTZXRBdXRvU2VsZWN0",
            "EjAKC2F1dG9fb3B0aW9uGAEgASgOMhsuRjRCWS5DaGVzdEF1dG9TZWxlY3RP",
            "cHRpb24SEQoJYXV0b19vcGVuGAIgASgIIiUKEENTQ2hlc3RTZXRFbmFibGUS",
            "EQoJaXNfZW5hYmxlGAEgASgIIiUKEFNDQ2hlc3RTZXRFbmFibGUSEQoJaXNf",
            "ZW5hYmxlGAEgASgIIjQKDFNDU3BlY0VmZmVjdBIRCgljb3N0TW9uZXkYASAB",
            "KAUSEQoJZWFybk1vbmV5GAIgASgFIm4KEVNDVG9ydG9pc2VFeHBsb2RlEhEK",
            "CWNoYWlyX2lkeBgBIAEoBRIQCghmaXNoX3VpZBgCIAEoBRIRCglidWxsZXRf",
            "aWQYAyABKAUSDQoFcmF0aW8YBCABKAUSEgoKbWF4X2VmZmVjdBgFIAEoBSJT",
            "CgpSZXdhcmRJbmZvEg8KB3Byb3BfaWQYASABKAUSEAoIcHJvcF9udW0YAiAB",
            "KAUSDwoHcXVhbGl0eRgDIAEoBRIRCglzcGVjX3Nob3cYBCABKAgifwoLTWlz",
            "c2lvbkluZm8SEgoKZHJhd190aW1lcxgBIAEoBRIlCgtyZXdhcmRfbGlzdBgC",
            "IAMoCzIQLkY0QlkuUmV3YXJkSW5mbxIQCghjb21wbGV0ZRgDIAEoCBIPCgdy",
            "ZWNlaXZlGAQgASgIEhIKCm1pc3Npb25faWQYBSABKAUiVAoNQmlnUmV3YXJk",
            "SW5mbxIYChBiaWdfcmV3YXJkX3RpbWVzGAEgASgFEikKD2RyYXdfcmV3YXJk",
            "TGlzdBgCIAMoCzIQLkY0QlkuUmV3YXJkSW5mbyLgAQoSVHJlYXN1cmVIdW50",
            "Q29uZmlnEgwKBHRlcm0YASABKAUSEgoKc3RhcnRfdGltZRgCIAEoBRIQCghl",
            "bmRfdGltZRgDIAEoBRIOCgZlbmFibGUYBCABKAgSLAoPYmlnX3Jld2FyZF9p",
            "bmZvGAUgASgLMhMuRjRCWS5CaWdSZXdhcmRJbmZvEiUKC3Jld2FyZF9saXN0",
            "GAYgAygLMhAuRjRCWS5SZXdhcmRJbmZvEhAKCG1pbl9kcmF3GAcgASgFEhAK",
            "CG1heF9kcmF3GAggASgFEg0KBXRvcGljGAkgASgFIiQKDUNTU3luY0NvbmZp",
            "Z3MSEwoLY29uZmlnX3R5cGUYASABKAUiQgoNU0NTeW5jQ29uZmlncxIxCg90",
            "cmVhc3VyZV9jb25maWcYASABKAsyGC5GNEJZLlRyZWFzdXJlSHVudENvbmZp",
            "ZyIuCgxDU0RyYXdSZXdhcmQSCwoDbnVtGAEgASgFEhEKCWRyYXdfdHlwZRgC",
            "IAEoBSI1CgxTQ0RyYXdSZXdhcmQSJQoLcmV3YXJkX2xpc3QYASADKAsyEC5G",
            "NEJZLlJld2FyZEluZm8iFwoVQ1NUcmVhc3VyZUh1bnRNaXNzaW9uIlQKFVND",
            "VHJlYXN1cmVIdW50TWlzc2lvbhInCgxtaXNzaW9uX2xpc3QYASADKAsyES5G",
            "NEJZLk1pc3Npb25JbmZvEhIKCmRyYXdfdGltZXMYAiABKAUiLAoWQ1NSZWNl",
            "aXZlTWlzc2lvblJld2FyZBISCgptaXNzaW9uX2lkGAEgASgFIj8KFlNDUmVj",
            "ZWl2ZU1pc3Npb25SZXdhcmQSJQoLcmV3YXJkX2xpc3QYASADKAsyEC5GNEJZ",
            "LlJld2FyZEluZm8iDQoLQ1NEcmF3VGltZXMidgoLU0NEcmF3VGltZXMSGAoQ",
            "dG90YWxfZHJhd190aW1lcxgBIAEoBRIaChJiaWdfcmV3YXJkX3Byb2Nlc3MY",
            "AiABKAUSFwoPZnJlZV9kcmF3X3RpbWVzGAMgASgFEhgKEGRyYXdfdGlja2Vy",
            "c19udW0YBCABKAUiJwoQQ1NWZXJpZnlBY3Rpdml0eRITCgthY3Rpdml0eV9p",
            "ZBgBIAEoBSI1ChBTQ1ZlcmlmeUFjdGl2aXR5EgwKBG9wZW4YASABKAgSEwoL",
            "YWN0aXZpdHlfaWQYAiABKAUizgEKB1BhY2thZ2USEgoKcGFja2FnZV9pZBgB",
            "IAEoBRINCgVsaW1pdBgCIAEoBRIVCg1jb25zdW1lX3ByaWNlGAMgASgFEhIK",
            "CmxpbWl0X3R5cGUYBCABKAUSFQoNY29uc3VtZV9wcm9wcxgFIAEoBRIWCg5w",
            "dXJjaGFzZV90aW1lcxgGIAEoBRIlCgtyZXdhcmRfbGlzdBgHIAMoCzIQLkY0",
            "QlkuUmV3YXJkSW5mbxIMCgRsb2NrGAggASgIEhEKCXZpcF9saW1pdBgJIAEo",
            "BSItChVDU1RyZWFzdXJlSHVudFBhY2thZ2USFAoMcGFja2FnZV90eXBlGAEg",
            "ASgFIlIKFVNDVHJlYXN1cmVIdW50UGFja2FnZRIjCgxwYWNrYWdlX2xpc3QY",
            "ASADKAsyDS5GNEJZLlBhY2thZ2USFAoMcGFja2FnZV90eXBlGAIgASgFIlYK",
            "EEV4Y2hhbmdlU2hvcEluZm8SDQoFbGV2ZWwYASABKAUSIwoMcGFja2FnZV9s",
            "aXN0GAIgAygLMg0uRjRCWS5QYWNrYWdlEg4KBnVubG9jaxgDIAEoCCIQCg5D",
            "U0V4Y2hhbmdlU2hvcCJCCg5TQ0V4Y2hhbmdlU2hvcBIwChBleGNoYW5nZVNo",
            "b3BMaXN0GAEgAygLMhYuRjRCWS5FeGNoYW5nZVNob3BJbmZvIicKEUNTUHVy",
            "Y2hhc2VQYWNrYWdlEhIKCnBhY2thZ2VfaWQYASABKAUiMwoRU0NQdXJjaGFz",
            "ZVBhY2thZ2USHgoHcGFja2FnZRgBIAEoCzINLkY0QlkuUGFja2FnZSIUChJD",
            "U1ZlcmlmeVRlcm1DaGFuZ2UiSwoSU0NWZXJpZnlUZXJtQ2hhbmdlEg4KBmNo",
            "YW5nZRgBIAEoCBIlCgtyZXdhcmRfbGlzdBgCIAMoCzIQLkY0QlkuUmV3YXJk",
            "SW5mbyJNCg9TQ1dhdGVyRHJvcEluZm8SDgoGZW5hYmxlGAEgASgIEhIKCmRy",
            "b3BfY291bnQYAiABKAUSFgoOZnJhZ21lbnRfY291bnQYAyABKAUiHQoIQ1NC",
            "dXlHdW4SEQoJZ3VuX2xldmVsGAEgASgFIiwKCFNDQnV5R3VuEhEKCWd1bl9s",
            "ZXZlbBgBIAEoBRINCgVwcmljZRgCIAEoBSIeCgpDU0J1eVdpbmdzEhAKCHdp",
            "bmdzX2lkGAEgASgFIi0KClNDQnV5V2luZ3MSEAoId2luZ3NfaWQYASABKAUS",
            "DQoFcHJpY2UYAiABKAUiOQoRU0NOb3RpZnlBY3RTdGF0dXMSEAoIYWN0X3R5",
            "cGUYASABKAUSEgoKYWN0X3N0YXR1cxgCIAEoBSIlChBDU1NldERvdWJsZVNo",
            "b290EhEKCWV4dHJhX211bBgBIAEoBSIoCg5DU0ZyZWVQb29sSW5mbxIWCg5w",
            "cmVwYXJlTG90dGVyeRgBIAEoCCIiChFDU0ZyZWVQb29sTG90dGVyeRINCgVs",
            "ZXZlbBgBIAEoBSImCg5DU0ZyZWVQb29sT3BlbhIUCgxvcGVuRnJlZVBvb2wY",
            "ASABKAgqlhMKDUVNc2dJRFN1YkdhbWUSCAoETm9uZRAAEg4KCUhlYXJ0QmVh",
            "dBDoBxIXChJMb2dpbkdhbWVXaXRoVG9rZW4Q6QcSDgoJVXNlclJlYWR5EOoH",
            "EhMKDlNldFByb2JhYmlsaXR5EOsHEhMKDkZpc2hUcmFjZXNMaXN0EOwHEhAK",
            "C0NoYW5nZVNjZW5lEO0HEhYKEUZpc2hPdXRzaWRlU2NyZWVuEO4HEg0KCExv",
            "Y2tGaXNoEO8HEg4KCVVzZXJTaG9vdBDwBxIMCgdIaXRGaXNoEPEHEg8KCkNy",
            "YXp5U2tpbGwQ8gcSDgoJU3luY01vbmV5EPMHEhEKDE5vdGlmeUxvZ291dBD0",
            "BxIQCgtTeW5jRmlzaFJlcRD1BxIQCgtTeW5jRmlzaFJzcBD2BxIWChFVc2Vy",
            "UnVuQmFja2dyb3VuZBD3BxITCg5IaXRTcGVjaWFsRmlzaBD4BxIRCgxTeW5j",
            "UHJvcEluZm8Q+QcSEAoLTm90aWZ5TG9naW4Q+gcSEAoLVHJlYmxlU2tpbGwQ",
            "+wcSDAoHVXNlckxvZxD8BxIOCglVc2VyRXZlbnQQ/QcSEwoOVXNlckluZm9O",
            "b3RpZnkQgQgSEwoOR2FtZUluZm9Ob3RpZnkQgggSCQoEQ2hhdBCDCBIOCglH",
            "YWluQXdhcmQQhAgSDwoKUHJvcFN0YXR1cxCFCBITCg5Qcm9wRHJvcE5vdGlm",
            "eRCGCBIMCgdVc2VQcm9wEIcIEg8KCkZyb3plblRpbWUQiAgSEQoMVXNlclBv",
            "b2xJbmZvEJIIEhMKDlVzZXJQb29sU3RhdHVzEJMIEhQKD1VzZXJQb29sUHJl",
            "RHJhdxCUCBIRCgxVc2VyUG9vbERyYXcQlQgSEAoLVXNlclBvb2xBZGQQlggS",
            "FAoPVG9ycGVkb1ByZVNob290EJcIEhcKElRvcnBlZG9DYW5jZWxTaG9vdBCY",
            "CBIRCgxUb3JwZWRvU2hvb3QQmQgSDwoKVG9ycGVkb0hpdBCaCBINCghDYWxs",
            "RmlzaBCbCBIMCgdDb21UYXNrEJwIEg0KCFRhc2tJbmZvEJ0IEhIKDVNhdmVT",
            "a2lsbFRpbWUQnggSEQoMU2V2ZW5EYXlJbmZvEJ8IEhIKDVNldmVuRGF5QXdh",
            "cmQQoAgSEwoOVmlwQ2hhcmdlQXdhcmQQoQgSDwoKSW5mb1JlZERvdBCiCBIR",
            "CgxBY3Rpdml0eUluZm8QowgSEwoOQ2xpY2tTdGF0aXN0aWMQpAgSDgoJQXdh",
            "cmRQb29sEKUIEhYKEU5ld0NsaWNrU3RhdGlzdGljEKYIEhcKEkdldEF3YXJk",
            "UG9vbFJlY29yZBCnCBIVChBUcmVhc3VyZUZpc2hJbmZvEKgIEhgKE1RyZWFz",
            "dXJlRmlzaENhdGNoZWQQqQgSFwoSTWF0Y2hQYWNrQWRkaXRpb25YEKoIEhQK",
            "D01hdGNoUGFja0ludmFpbBCrCBIUCg9NYXRjaFBhY2tCdXlpbmcQrAgSEwoO",
            "R2FtZUl0ZW1Td2l0Y2gQrQgSEgoNTHVja3lEcmF3SW5mbxCuCBIWChFHZXRM",
            "dWNreVRhc2tBd2FyZBCvCBIQCgtMdWNreVJlZERvdBCwCBIQCgtHZXRMdWNr",
            "eU51bRCxCBITCg5HZXRMdWNreVJlY29yZBCyCBIRCgxHZXRPd25SZWNvcmQQ",
            "swgSFwoSVXNlclBvb2xEb3VibGVJbmZvEMwIEhMKDlVzZXJQb29sRG91Ymxl",
            "EM0IEhIKDUx1Y2t5UG9vbEluZm8QzggSEgoNTHVja3lQb29sRHJhdxDPCBIN",
            "CghCb21iSW5mbxDWCBIUCg9Cb21iSGl0RmlzaEluZm8Q1wgSDQoIU3luY0Jv",
            "bWIQ2AgSEwoOU3luY0JvbWJGaW5pc2gQ2QgSEQoMR2V0TWFnaWNDdWJlENoI",
            "EhgKE1N5bmNNYWdpY0N1YmVCdEluZm8Q2wgSCwoGUHJlSGl0ENwIEg0KCFBy",
            "ZVNob290EN0IEhkKFFN5bmNWYWxlbnRpbmVEYXlGaXNoEN4IEhYKEUJvbWJH",
            "bG9iZUZpc2hJbmZvEN8IEhUKEEJvbWJHbG9iZUZpc2hIaXQQ4AgSGgoVQW5u",
            "aXZlcnNhcnlTaG93U2VsZWN0EO0IEhkKFEFubml2ZXJzYXJ5U2VsZWN0UmVx",
            "EO4IEhwKF0Fubml2ZXJzYXJ5U2VsZWN0UmVzdWx0EO8IEhMKDkFubml2ZXJz",
            "YXJ5SGl0EPAIEhwKF1N5bmNBbm5pdmVyc2FyeUhpdFN0YWdlEPEIEhYKEVN5",
            "bmNLaVJpbkhpdFN0YWdlEPIIEhQKD052V2FGaXNoQ2FwdHVyZRDzCBITCg5D",
            "YXB0dXJlU2NhbGxvcBD1CBIZChRTZXR0bGVTY2FsbG9wTG90dGVyeRD2CBIX",
            "ChJTeW5jU2NhbGxvcExvdHRlcnkQ9wgSEAoLT3BlblNjYWxsb3AQ+AgSFgoR",
            "VXBkYXRlQ2hlc3RTdGF0dXMQ+QgSEAoLQ2hlc3RDb25maWcQ+ggSDgoJT3Bl",
            "bkNoZXN0EPsIEhYKEVNlbGVjdENoZXN0UmV3YXJkEPwIEhcKEkNoZXN0U2V0",
            "QXV0b1NlbGVjdBD9CBIPCgpTcGVjRWZmZWN0EP4IEhMKDkNoZXN0U2V0RW5h",
            "YmxlEP8IEhIKDUZyb3plbkZpc2hSZXAQsAkSFAoPVG9ydG9pc2VFeHBsb2Rl",
            "ELoJEg0KCFNldFdpbmdzELsJEhAKC1N5bmNDb25maWdzELwJEg8KCkRyYXdS",
            "ZXdhcmQQvQkSGAoTVHJlYXN1cmVIdW50TWlzc2lvbhC+CRIZChRSZWNlaXZl",
            "TWlzc2lvblJld2FyZBC/CRIOCglEcmF3VGltZXMQwQkSEwoOVmVyaWZ5QWN0",
            "aXZpdHkQwgkSEQoMRXhjaGFuZ2VTaG9wEMMJEhgKE1RyZWFzdXJlSHVudFBh",
            "Y2thZ2UQxAkSFAoPUHVyY2hhc2VQYWNrYWdlEMUJEhUKEFZlcmlmeVRlcm1D",
            "aGFuZ2UQxgkSCwoGQnV5R3VuEMcJEg0KCEJ1eVdpbmdzEMgJEhIKDVdhdGVy",
            "RHJvcEluZm8QzgkSFAoPTm90aWZ5QWN0U3RhdHVzEM8JEhMKDlNldERvdWJs",
            "ZVNob290ENAJEhcKEUxvdHRlcnlSZXN1bHQzMDAyEKGcARIXChFMb3R0ZXJ5",
            "UmVzdWx0MzAwNRCinAESEgoMRnJlZVBvb2xJbmZvEImkARIVCg9GcmVlUG9v",
            "bExvdHRlcnkQiqQBEhIKDEZyZWVQb29sT3BlbhCLpAEq+wcKB0VyckNvZGUS",
            "CAoEU3VjYxAAEhcKEkFscmVhZHlJbk90aGVyR2FtZRDxARIJCgRGYWlsEOgH",
            "EhgKE0xvYWRQcm9wc0RhdGFGYWlsZWQQkU4SGgoVQ2FuTm90RmluZFBsYXll",
            "clBvaW50EJJOEhUKEFBhcmFtZXRlcklzV3JvbmcQk04SEAoLTGFja09mTW9u",
            "ZXkQlE4SGQoURnJlZVRpbWVzQ2hhbmdlUmF0aW8QlU4SDQoISXNOb3RTdXAQ",
            "lk4SFgoRRGVzZXJpYWxpemVGYWlsZWQQl04SEwoOUGxheWVyTm90RXhpc3QQ",
            "mE4SFwoSUGxheWVyQWxyZWFkeUxvZ2luEJlOEhkKFExvYWRQbGF5ZXJEYXRh",
            "RmFpbGVkEJpOEhUKEEFsbG9jVGFibGVGYWlsZWQQm04SEQoMRGVmZW5kUGx1",
            "Z0luEJxOEhYKEVFQRW50ZXJSb29tRmFpbGVkEJ1OEhwKF1FQQmFzZVVzZXJJ",
            "bmZvR2V0RmFpbGVkEJ5OEhUKEFFQUmVhZEdvbGRGYWlsZWQQn04SFAoPVGhp",
            "c1RhYmxlSXNGdWxsEKBOEhEKDFByb3BOb0Vub3VnaBChThISCg1Qcm9wUm9v",
            "bUxpbWl0EKJOEg4KCVByb3BVc2luZxCjThIRCgxQcm9wTm90RXhpc3QQpE4S",
            "FAoPUHJvcFVzaW5nU2V0R3VuEKVOEhMKDlRoaXNSb29tSXNGdWxsEKZOEhEK",
            "DFNlcnZlckNsb3NlZBCnThINCghQcm9wSGF2ZRCoThISCg1Qcm9wQ2FuTm90",
            "QnV5EKlOEhMKDlVzZXJQb29sTm9NZWV0EK5OEhUKEFVzZXJQb29sVG9IaWdo",
            "ZXIQr04SFwoSQ2FsbEZpc2hUaWRlQ29taW5nELBOEhEKDENhbGxGaXNoRnVs",
            "bBCxThIVChBVc2VyUG9vbExvYWRGYWlsELJOEhkKFEZyb3plbkZpc2hUaWRl",
            "Q29taW5nELNOEhQKD0Zyb3plbk5vdEVub3VnaBC0ThIRCgxGcm96ZW5XYWl0",
            "Q0QQtU4SEwoORnJvemVuRmlzaFRpZGUQtk4SEQoMSWxsZWdhbFBhcmFtELhO",
            "EhAKC0NvbmZpZ0Vycm9yELlOEhgKE1ByZXZlbnRDaGVhdFdhcm5pbmcQuk4S",
            "EgoNT3BlbkNoZXN0RmFpbBDCThIaChVTZWxlY3RDaGVzdFJld2FyZEZhaWwQ",
            "w04SHQoYTm90TWV0VGFza0NvbmRpdGlvbkVycm9yEMROEhEKDERyYXdOdW1F",
            "cnJvchDFThIXChJQdXJjaGFzZUxpbWl0RXJyb3IQxk4SHgoZVHJlYXN1cmVI",
            "dW50Tm90U3RhcnRFcnJvchDHTirnAQoNVXNlckV2ZW50VHlwZRIZChVVc2Vy",
            "RXZlbnRUeXBlSGlkZUljb24QABIbChdVc2VyRXZlbnRUeXBlQ3JhenlTa2ls",
            "bBABEhkKFVVzZXJFdmVudFR5cGVVc2VyUG9vbBACEhsKF1VzZXJFdmVudFR5",
            "cGVNdWx0aVNob290EAMSFgoSVXNlckV2ZW50VHlwZVN0b3JlEAQSHAoYVXNl",
            "ckV2ZW50VHlwZUN1c3RvbVRhYmxlEAUSHAoYVXNlckV2ZW50VHlwZUNoYW5n",
            "ZVRhYmxlEAYSEgoOVXNlckxvZ1R5cGVNYXgQByo3CgxDYWxsRmlzaFR5cGUS",
            "EgoOQ2FsbFR5cGVOb3JtYWwQABITCg9DYWxsVHlwZVNwZWNpYWwQASpzCglD",
            "aGVzdFR5cGUSEQoNQ2hlc3RUeXBlTm9uZRAAEhYKEkNoZXN0VHlwZVBvcmNl",
            "bGFpbhABEhMKD0NoZXN0VHlwZUJyb256ZRACEhMKD0NoZXN0VHlwZVNpbHZl",
            "chADEhEKDUNoZXN0VHlwZUdvbGQQBCpWChVDaGVzdEF1dG9TZWxlY3RPcHRp",
            "b24SHQoZQ2hlc3RBdXRvU2VsZWN0T3B0aW9uTm9uZRAAEhMKD1JlZFBhY2tl",
            "dFRpY2tldBABEgkKBU1vbmV5EAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::F4BY.EMsgIDSubGame), typeof(global::F4BY.ErrCode), typeof(global::F4BY.UserEventType), typeof(global::F4BY.CallFishType), typeof(global::F4BY.ChestType), typeof(global::F4BY.ChestAutoSelectOption), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SC_SceneInfo), global::F4BY.SC_SceneInfo.Parser, new[]{ "StationBaseList", "GunInfo", "GunRatioNum", "GunLevelNum", "RatioList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CommonResp), global::F4BY.CommonResp.Parser, new[]{ "Code", "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.Object), global::F4BY.Object.Parser, new[]{ "Id", "Count", "Ratio", "Time", "Multiple", "Uid", "OriginId", "MultiList", "OriginUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.Obj), global::F4BY.Obj.Parser, new[]{ "Id", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.Object1), global::F4BY.Object1.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.Object2), global::F4BY.Object2.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.Object3), global::F4BY.Object3.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.WheelObject), global::F4BY.WheelObject.Parser, new[]{ "Wheels", "Ratio" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.Decimal), global::F4BY.Decimal.Parser, new[]{ "Num", "Denom" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSLoginGameWithToken), global::F4BY.CSLoginGameWithToken.Parser, new[]{ "PlayerId", "Token", "OSType", "TableId", "LastTableId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCLoginGameWithToken), global::F4BY.SCLoginGameWithToken.Parser, new[]{ "SceneIndex", "TableId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserReady), global::F4BY.CSUserReady.Parser, new[]{ "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.EffectInfo), global::F4BY.EffectInfo.Parser, new[]{ "EffectId", "IsGlobal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.StationBase), global::F4BY.StationBase.Parser, new[]{ "GunRatio", "GunLevel", "UserScore", "ChairIdx", "PlayerName", "PlayerId", "Vip", "Status", "CrazySkillOpen", "UserTicket", "Effect", "ExtraData", "RedPacketTicket", "EffectInfo", "WingsPropsId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUserReady), global::F4BY.SCUserReady.Parser, new[]{ "StationBaseList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCNotifyLogin), global::F4BY.SCNotifyLogin.Parser, new[]{ "StationBaseList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSNotifyLogout), global::F4BY.CSNotifyLogout.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCNotifyLogout), global::F4BY.SCNotifyLogout.Parser, new[]{ "ChairIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSetProbability), global::F4BY.CSSetProbability.Parser, new[]{ "GunRatio", "GunLevel", "IsUseAuto" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSetProbability), global::F4BY.SCSetProbability.Parser, new[]{ "Code", "ChairIdx", "GunRatio", "GunLevel", "Msg", "IsUnlock", "ExtraData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSetWings), global::F4BY.CSSetWings.Parser, new[]{ "WingsPropId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSetWings), global::F4BY.SCSetWings.Parser, new[]{ "ChairIdx", "WingsPropId", "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserShoot), global::F4BY.CSUserShoot.Parser, new[]{ "Angle", "BulletId", "Ratio", "BulletType", "IsOffset", "ChairId", "ExtraMul" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUserShoot), global::F4BY.SCUserShoot.Parser, new[]{ "ChairIdx", "Angle", "Score", "BulletType", "BulletOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSHitFish), global::F4BY.CSHitFish.Parser, new[]{ "FishUid", "BulletId", "ScreenFishes", "ChairId", "Ratio" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.MultiInfo), global::F4BY.MultiInfo.Parser, new[]{ "BtType", "BtMulti", "BtBase" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCHitFish), global::F4BY.SCHitFish.Parser, new[]{ "ChairIdx", "FishUid", "Earn", "UserScore", "FishValue", "Multiple", "HitBulletType", "MagicCubeMulti", "MultiList", "OriginUid", "DropProps" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCHitSpecialFish), global::F4BY.SCHitSpecialFish.Parser, new[]{ "ChairIdx", "FishUid", "Earn", "FishValue", "UserScore", "Death", "GrowStage", "Multiple", "ShockFishes", "DropProps", "Wheel", "HitBulletType", "PropNo", "MagicCubeMulti", "MultiList", "OriginUid", "DragonScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SyncPropInfoX), global::F4BY.SyncPropInfoX.Parser, new[]{ "Prop", "X", "Y", "Angle", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.UserSyncPropInfo), global::F4BY.UserSyncPropInfo.Parser, new[]{ "ChairIdx", "Props" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSyncPropInfo), global::F4BY.CSSyncPropInfo.Parser, new[]{ "Info", "ChairIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSyncPropInfo), global::F4BY.SCSyncPropInfo.Parser, new[]{ "Users" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSyncMoney), global::F4BY.CSSyncMoney.Parser, new[]{ "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSyncMoney), global::F4BY.SCSyncMoney.Parser, new[]{ "ChairIdx", "Score", "Type", "Delta", "Ticket", "Vip" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.FishTrace), global::F4BY.FishTrace.Parser, new[]{ "FishUid", "FishType", "FishLayer", "FishStage", "IsAced", "AliveTime", "BeadsList", "FishTorpedoId", "FishRoad" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCFishTracesList), global::F4BY.SCFishTracesList.Parser, new[]{ "FishTraces", "FishRoad", "FishArray", "CreateInterval", "IsCalled", "AfterTideFirst", "CallType", "MoveDelay", "RoadIdx", "MoveT" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSyncFishReq), global::F4BY.CSSyncFishReq.Parser, new[]{ "ChairId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSyncFishReq), global::F4BY.SCSyncFishReq.Parser, new[]{ "ReqPlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSyncFishRsp), global::F4BY.CSSyncFishRsp.Parser, new[]{ "FishTraces", "FishRoad", "FishArray", "MoveDelay", "RoadIdx", "MoveT", "Finish", "ReqPlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSyncFishRsp), global::F4BY.SCSyncFishRsp.Parser, new[]{ "FishTraces", "FishRoad", "FishArray", "MoveDelay", "RoadIdx", "MoveT", "CreateInterval", "IsCalled", "CallType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCChangeScene), global::F4BY.SCChangeScene.Parser, new[]{ "SceneIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSFishOutsideScreen), global::F4BY.CSFishOutsideScreen.Parser, new[]{ "FishUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSLockFish), global::F4BY.CSLockFish.Parser, new[]{ "FishUid", "IsOpen", "ChairIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCLockFish), global::F4BY.SCLockFish.Parser, new[]{ "ChairIdx", "FishUid", "IsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSCrazySkill), global::F4BY.CSCrazySkill.Parser, new[]{ "IsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCCrazySkill), global::F4BY.SCCrazySkill.Parser, new[]{ "ChairIdx", "IsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSTrebleSkill), global::F4BY.CSTrebleSkill.Parser, new[]{ "IsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCTrebleSkill), global::F4BY.SCTrebleSkill.Parser, new[]{ "ChairIdx", "IsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserRunBackground), global::F4BY.CSUserRunBackground.Parser, new[]{ "Background" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUserRunBackground), global::F4BY.SCUserRunBackground.Parser, new[]{ "ChairIdx", "Background" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSHeartBeat), global::F4BY.CSHeartBeat.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCHeartBeat), global::F4BY.SCHeartBeat.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.GunSpecEffect), global::F4BY.GunSpecEffect.Parser, new[]{ "RatioLimit", "HitChangeRate", "MoneyChangeRate", "ViolenceRate", "SpeedRate", "Advanced", "DoubleTag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.WingsSpecEffect), global::F4BY.WingsSpecEffect.Parser, new[]{ "SpeedRate", "RatioLimit", "HitChangeRate", "MoneyChangeRate", "Advanced", "DoubleTag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.WingsInfo), global::F4BY.WingsInfo.Parser, new[]{ "WingsId", "Enable", "WingsSpecEffect", "ReceiveType", "ActivityId", "Price", "NewEnable", "DoubleTag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.GunInfo), global::F4BY.GunInfo.Parser, new[]{ "GunLevel", "RatioMin", "RatioMax", "Enable", "NewEnable", "IsVip", "VipLimit", "IsMember", "MemberSec", "ExtraData", "GunSpecEffect", "Price", "AttackSpeed", "Rage", "ActivityId", "RatioList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.VipInfo), global::F4BY.VipInfo.Parser, new[]{ "OldVip", "CurVip" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.PropInfo), global::F4BY.PropInfo.Parser, new[]{ "Enable", "Prop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserInfoNotify), global::F4BY.CSUserInfoNotify.Parser, new[]{ "Broadcast" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUserInfoNotify), global::F4BY.SCUserInfoNotify.Parser, new[]{ "ChairIdx", "GunInfo", "WingsInfo", "VipInfo", "PropInfo", "LastGunLevel", "LastRatio", "LastWingsPropId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCGameInfoNotify), global::F4BY.SCGameInfoNotify.Parser, new[]{ "UserPool", "AwardFish", "UserPoolLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCInfoRedDot), global::F4BY.SCInfoRedDot.Parser, new[]{ "SevenDay", "RedDot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.JumpHighArena), global::F4BY.JumpHighArena.Parser, new[]{ "IsOpen", "Vip", "Coin", "GameTime", "Tips" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCActivityInfo), global::F4BY.SCActivityInfo.Parser, new[]{ "Jump", "Limit", "PoolIsOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSChat), global::F4BY.CSChat.Parser, new[]{ "MsgType", "MsgIdx", "ChairIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCChat), global::F4BY.SCChat.Parser, new[]{ "ChairIdx", "MsgType", "MsgIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCGainAward), global::F4BY.SCGainAward.Parser, new[]{ "ChairIdx", "Score", "Award" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSAwardPool), global::F4BY.CSAwardPool.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCAwardPool), global::F4BY.SCAwardPool.Parser, new[]{ "Pool" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSPropStatus), global::F4BY.CSPropStatus.Parser, new[]{ "PropId", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCPropStatus), global::F4BY.SCPropStatus.Parser, new[]{ "ChairIdx", "PropId", "Status", "BtId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.GivenCardAward), global::F4BY.GivenCardAward.Parser, new[]{ "CardIdx", "Base", "Multiple" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.UserAwardItem), global::F4BY.UserAwardItem.Parser, new[]{ "Index", "ItemMax", "Name", "Goods" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserPoolInfo), global::F4BY.CSUserPoolInfo.Parser, new[]{ "OpenPage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUserPoolInfo), global::F4BY.SCUserPoolInfo.Parser, new[]{ "ChairIdx", "OpenPage", "Status", "Count", "PoolMax", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserPoolStatus), global::F4BY.CSUserPoolStatus.Parser, new[]{ "Open" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUserPoolStatus), global::F4BY.SCUserPoolStatus.Parser, new[]{ "Open" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserPoolPreDraw), global::F4BY.CSUserPoolPreDraw.Parser, new[]{ "Level" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUserPoolPreDraw), global::F4BY.SCUserPoolPreDraw.Parser, new[]{ "Code", "Level", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserPoolDraw), global::F4BY.CSUserPoolDraw.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUserPoolDraw), global::F4BY.SCUserPoolDraw.Parser, new[]{ "ChairIdx", "Goods", "Award", "AwardCnt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUserPoolAdd), global::F4BY.SCUserPoolAdd.Parser, new[]{ "Add", "Count", "FirstMax", "PoolMax", "Status", "LevelName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserPoolDoubleInfo), global::F4BY.CSUserPoolDoubleInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUserPoolDoubleInfo), global::F4BY.SCUserPoolDoubleInfo.Parser, new[]{ "Cost", "ItemBefore", "ItemDouble" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserPoolDouble), global::F4BY.CSUserPoolDouble.Parser, new[]{ "IsDouble" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUserPoolDouble), global::F4BY.SCUserPoolDouble.Parser, new[]{ "Code", "Result", "ChairIdx", "Item", "ExtraItem" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSLuckyPoolInfo), global::F4BY.CSLuckyPoolInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCLuckyPoolInfo), global::F4BY.SCLuckyPoolInfo.Parser, new[]{ "Count", "Max" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSLuckyPoolDraw), global::F4BY.CSLuckyPoolDraw.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCLuckyPoolDraw), global::F4BY.SCLuckyPoolDraw.Parser, new[]{ "Item" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSTorpedoPreShoot), global::F4BY.CSTorpedoPreShoot.Parser, new[]{ "PropId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCTorpedoPreShoot), global::F4BY.SCTorpedoPreShoot.Parser, new[]{ "ChairIdx", "PropId", "Code", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSTorpedoCancelShoot), global::F4BY.CSTorpedoCancelShoot.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCTorpedoCancelShoot), global::F4BY.SCTorpedoCancelShoot.Parser, new[]{ "ChairIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSTorpedoShoot), global::F4BY.CSTorpedoShoot.Parser, new[]{ "FishUid", "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCTorpedoShoot), global::F4BY.SCTorpedoShoot.Parser, new[]{ "ChairIdx", "FishUid", "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSTorpedoHit), global::F4BY.CSTorpedoHit.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCTorpedoHit), global::F4BY.SCTorpedoHit.Parser, new[]{ "ChairIdx", "Earn", "Score", "PropId", "Remain", "FishUid", "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSCallFish), global::F4BY.CSCallFish.Parser, new[]{ "CallType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCCallFish), global::F4BY.SCCallFish.Parser, new[]{ "ChairIdx", "PropId", "Remain", "Code", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCComTask), global::F4BY.SCComTask.Parser, new[]{ "GunRatio", "GunLevel", "Award", "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCTaskInfo), global::F4BY.SCTaskInfo.Parser, new[]{ "GunRatio", "GunLevel", "CurNum", "TotalNum", "VipLevel", "IsUnlock", "Award", "IsVipUnlock", "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSaveSkillTime), global::F4BY.CSSaveSkillTime.Parser, new[]{ "Auto", "Lock", "Angry", "Treble" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SevenDayTask), global::F4BY.SevenDayTask.Parser, new[]{ "Index", "FishId", "TotalNum", "CurNum", "Status", "Award" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SevenDayDetail), global::F4BY.SevenDayDetail.Parser, new[]{ "Day", "BoxStatus", "Task" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSevenDayInfo), global::F4BY.CSSevenDayInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSevenDayInfo), global::F4BY.SCSevenDayInfo.Parser, new[]{ "StartDate", "EndDate", "CurDay", "GetRemain", "RemainScore", "Ticket", "Detail", "GunEnable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSevenDayAward), global::F4BY.CSSevenDayAward.Parser, new[]{ "Day", "Index", "GetAwardType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSevenDayAward), global::F4BY.SCSevenDayAward.Parser, new[]{ "Score", "Ticket", "Task" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCVipChargeAward), global::F4BY.SCVipChargeAward.Parser, new[]{ "Score", "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSClickStatistic), global::F4BY.CSClickStatistic.Parser, new[]{ "Num", "NotRepeat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSNewClickStatistic), global::F4BY.CSNewClickStatistic.Parser, new[]{ "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserLog), global::F4BY.CSUserLog.Parser, new[]{ "Type", "Score", "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUserEvent), global::F4BY.CSUserEvent.Parser, new[]{ "Id", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSGetAwardPoolRecord), global::F4BY.CSGetAwardPoolRecord.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.AwardPoolRecord), global::F4BY.AwardPoolRecord.Parser, new[]{ "Time", "Name", "PoolId", "Award", "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCGetAwardPoolRecord), global::F4BY.SCGetAwardPoolRecord.Parser, new[]{ "Records" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCPropDropNotify), global::F4BY.SCPropDropNotify.Parser, new[]{ "ChairIdx", "FishUid", "DropProps" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSUseProp), global::F4BY.CSUseProp.Parser, new[]{ "PropId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUseProp), global::F4BY.SCUseProp.Parser, new[]{ "ChairIdx", "PropId", "Remain", "Code", "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCFrozenTime), global::F4BY.SCFrozenTime.Parser, new[]{ "ChairIdx", "IsFrozen", "FrozenCd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCTreasureFishInfo), global::F4BY.SCTreasureFishInfo.Parser, new[]{ "FishUid", "CurStage", "AccumMoney", "FishValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCTreasureFishCatched), global::F4BY.SCTreasureFishCatched.Parser, new[]{ "ChairIdx", "Ratio", "FishUid", "FishValue", "AccumMoney", "Multiple", "Death", "Earn", "UserScore", "DisplayMultiple", "CurStage", "MagicCubeMulti", "MultiList", "OriginUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.MatchPackAddition), global::F4BY.MatchPackAddition.Parser, new[]{ "Id", "IsBuy", "ScoreAddition", "ReawardAddition", "Card", "Sec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSMatchPackAddition), global::F4BY.CSMatchPackAddition.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCMatchPackAddition), global::F4BY.SCMatchPackAddition.Parser, new[]{ "Addition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCMatchPackInvail), global::F4BY.SCMatchPackInvail.Parser, new[]{ "PackId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSMatchPackBuying), global::F4BY.CSMatchPackBuying.Parser, new[]{ "PackId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.AwardDetail), global::F4BY.AwardDetail.Parser, new[]{ "PlayerId", "Nums", "Period", "Vip", "Nick", "Photo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.LuckyAwardNotify), global::F4BY.LuckyAwardNotify.Parser, new[]{ "AwardType", "Detail" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSGameItemSwitch), global::F4BY.CSGameItemSwitch.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCGameItemSwitch), global::F4BY.SCGameItemSwitch.Parser, new[]{ "LuckyTask" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.AwardProp), global::F4BY.AwardProp.Parser, new[]{ "PropId", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.LuckyTaskInfo), global::F4BY.LuckyTaskInfo.Parser, new[]{ "Id", "Status", "Score", "Text", "Amount", "Target" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSLuckyDrawInfo), global::F4BY.CSLuckyDrawInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCLuckyDrawInfo), global::F4BY.SCLuckyDrawInfo.Parser, new[]{ "HourRemainSec", "DayRemainSec", "HourReward", "DayReward", "DayLuckyNums", "Score", "HourTotal", "DayTotal", "HourAwardNum", "DayAwardNum", "NextStartTick", "TaskInfo", "ExchangeScore", "NextRemainSec", "HourLuckyNums" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSGetLuckyTaskAward), global::F4BY.CSGetLuckyTaskAward.Parser, new[]{ "TaskId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCGetLuckyTaskAward), global::F4BY.SCGetLuckyTaskAward.Parser, new[]{ "Task", "Score", "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSGetLuckyNum), global::F4BY.CSGetLuckyNum.Parser, new[]{ "Times" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCGetLuckyNum), global::F4BY.SCGetLuckyNum.Parser, new[]{ "Score", "ErrorCode", "LuckyNums" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSLuckyRedDot), global::F4BY.CSLuckyRedDot.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCLuckyRedDot), global::F4BY.SCLuckyRedDot.Parser, new[]{ "Show" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.LuckyRecord), global::F4BY.LuckyRecord.Parser, new[]{ "Vip", "Times", "LuckyNum", "Tick", "NickName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.OwnRecord), global::F4BY.OwnRecord.Parser, new[]{ "Reward", "Status", "Tick", "LuckyNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSLuckyRecord), global::F4BY.CSLuckyRecord.Parser, new[]{ "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCLuckyRecord), global::F4BY.SCLuckyRecord.Parser, new[]{ "Type", "Record" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCOwnRecord), global::F4BY.SCOwnRecord.Parser, new[]{ "Record" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSBombInfo), global::F4BY.CSBombInfo.Parser, new[]{ "X", "Y", "ChairIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSyncBomb), global::F4BY.SCSyncBomb.Parser, new[]{ "ChairIdx", "BombId", "CurStatus", "X", "Y", "NextX", "NextY", "Score", "IsFinish" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSyncBombFinish), global::F4BY.SCSyncBombFinish.Parser, new[]{ "ChairIdx", "BombId", "ReturnMoney" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSBombHitFishInfo), global::F4BY.CSBombHitFishInfo.Parser, new[]{ "BombId", "FishId", "ChairIdx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCGetMagicCube), global::F4BY.SCGetMagicCube.Parser, new[]{ "ChairIdx", "BulletType", "CreateWeapon", "IsSyncInfo", "IsFinish", "GunRatio", "MagicCubeMulti" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCMagicCubeBulletInfo), global::F4BY.SCMagicCubeBulletInfo.Parser, new[]{ "ChairIdx", "TotalNum", "CurNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSPreHit), global::F4BY.CSPreHit.Parser, new[]{ "ScreenFish" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCPreHit), global::F4BY.SCPreHit.Parser, new[]{ "Err", "FishUid", "ChairId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSPreShoot), global::F4BY.CSPreShoot.Parser, new[]{ "ChairIdx", "Angle", "ShootType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCPreShoot), global::F4BY.SCPreShoot.Parser, new[]{ "ChairIdx", "Angle", "ShootType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.FrozenFish), global::F4BY.FrozenFish.Parser, new[]{ "FishId", "FrozenTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCFrozenFish), global::F4BY.SCFrozenFish.Parser, new[]{ "FrozenFish" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCValentineDayFish), global::F4BY.SCValentineDayFish.Parser, new[]{ "FishInfo", "BtRatio", "RandMulti", "BallMulti", "UidList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCKiRinFish), global::F4BY.SCKiRinFish.Parser, new[]{ "FishInfo", "BtRatio", "Multi", "IsSenior", "Level" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCNvWaFishCapture), global::F4BY.SCNvWaFishCapture.Parser, new[]{ "ChairIdx", "FishUid", "Ratio", "NvwaMultiple", "BtKind", "MultiList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCBombGlobeFishInfo), global::F4BY.SCBombGlobeFishInfo.Parser, new[]{ "ChairIdx", "Ratio", "FishUid", "Stage", "BombId", "TotalEarn", "SelfBombId", "OriginId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSBombGlobeFishHit), global::F4BY.CSBombGlobeFishHit.Parser, new[]{ "BombId", "BtType", "ScreenFishes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCAnniversaryShowSelect), global::F4BY.SCAnniversaryShowSelect.Parser, new[]{ "ChairIdx", "ShowSelect", "RemainTime", "Stage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSAnniversarySelectReq), global::F4BY.CSAnniversarySelectReq.Parser, new[]{ "Stage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.AnniversaryStage1Result), global::F4BY.AnniversaryStage1Result.Parser, new[]{ "Score", "FishUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.AnniversaryStage2Result), global::F4BY.AnniversaryStage2Result.Parser, new[]{ "ScoreList", "DropTimes", "Multiple" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.AnniversaryStage3Result), global::F4BY.AnniversaryStage3Result.Parser, new[]{ "OriginId", "SelfId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCAnniversarySelectResult), global::F4BY.SCAnniversarySelectResult.Parser, new[]{ "ChairIdx", "Stage", "BtRatio", "MultiList", "TotalEarn", "Death", "Result1", "Result2", "Result3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSAnniversaryHit), global::F4BY.CSAnniversaryHit.Parser, new[]{ "BombId", "BtType", "ScreenFishes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSyncAnniversaryHitStage), global::F4BY.SCSyncAnniversaryHitStage.Parser, new[]{ "ChairIdx", "OriginId", "SelfId", "Stage", "TotalEarn", "InvalidEarn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.ScallopLottery), global::F4BY.ScallopLottery.Parser, new[]{ "Id", "Type", "Status", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCCaptureScallop), global::F4BY.SCCaptureScallop.Parser, new[]{ "ChairIdx", "FishUid", "Ratio", "Time", "LotteryList", "RewardConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSOpenScallop), global::F4BY.CSOpenScallop.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCOpenScallop), global::F4BY.SCOpenScallop.Parser, new[]{ "ChairIdx", "Scallop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSettleScallopLottery), global::F4BY.SCSettleScallopLottery.Parser, new[]{ "ChairIdx", "Earn", "LotteryList", "MultiList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSyncScallopLottery), global::F4BY.SCSyncScallopLottery.Parser, new[]{ "ChairIdx", "Ratio", "Time", "LotteryList", "RewardConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.OpenChestReward), global::F4BY.OpenChestReward.Parser, new[]{ "Id", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCUpdateChestStatus), global::F4BY.SCUpdateChestStatus.Parser, new[]{ "IsActive", "ChestType", "TotalProgress", "RemainProgress", "Guide", "AvailableReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSChestConfig), global::F4BY.CSChestConfig.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.ChestBrief), global::F4BY.ChestBrief.Parser, new[]{ "ChestType", "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCChestConfig), global::F4BY.SCChestConfig.Parser, new[]{ "EndTime", "ChestBriefList", "MinRatio", "AutoOpen", "AutoOption", "IsEnable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCOpenChest), global::F4BY.SCOpenChest.Parser, new[]{ "RewardList", "AutoOption" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSelectChestReward), global::F4BY.CSSelectChestReward.Parser, new[]{ "SelectIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSelectChestReward), global::F4BY.SCSelectChestReward.Parser, new[]{ "Reward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSChestSetAutoSelect), global::F4BY.CSChestSetAutoSelect.Parser, new[]{ "AutoOption", "AutoOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCChestSetAutoSelect), global::F4BY.SCChestSetAutoSelect.Parser, new[]{ "AutoOption", "AutoOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSChestSetEnable), global::F4BY.CSChestSetEnable.Parser, new[]{ "IsEnable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCChestSetEnable), global::F4BY.SCChestSetEnable.Parser, new[]{ "IsEnable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSpecEffect), global::F4BY.SCSpecEffect.Parser, new[]{ "CostMoney", "EarnMoney" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCTortoiseExplode), global::F4BY.SCTortoiseExplode.Parser, new[]{ "ChairIdx", "FishUid", "BulletId", "Ratio", "MaxEffect" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.RewardInfo), global::F4BY.RewardInfo.Parser, new[]{ "PropId", "PropNum", "Quality", "SpecShow" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.MissionInfo), global::F4BY.MissionInfo.Parser, new[]{ "DrawTimes", "RewardList", "Complete", "Receive", "MissionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.BigRewardInfo), global::F4BY.BigRewardInfo.Parser, new[]{ "BigRewardTimes", "DrawRewardList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.TreasureHuntConfig), global::F4BY.TreasureHuntConfig.Parser, new[]{ "Term", "StartTime", "EndTime", "Enable", "BigRewardInfo", "RewardList", "MinDraw", "MaxDraw", "Topic" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSyncConfigs), global::F4BY.CSSyncConfigs.Parser, new[]{ "ConfigType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCSyncConfigs), global::F4BY.SCSyncConfigs.Parser, new[]{ "TreasureConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSDrawReward), global::F4BY.CSDrawReward.Parser, new[]{ "Num", "DrawType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCDrawReward), global::F4BY.SCDrawReward.Parser, new[]{ "RewardList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSTreasureHuntMission), global::F4BY.CSTreasureHuntMission.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCTreasureHuntMission), global::F4BY.SCTreasureHuntMission.Parser, new[]{ "MissionList", "DrawTimes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSReceiveMissionReward), global::F4BY.CSReceiveMissionReward.Parser, new[]{ "MissionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCReceiveMissionReward), global::F4BY.SCReceiveMissionReward.Parser, new[]{ "RewardList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSDrawTimes), global::F4BY.CSDrawTimes.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCDrawTimes), global::F4BY.SCDrawTimes.Parser, new[]{ "TotalDrawTimes", "BigRewardProcess", "FreeDrawTimes", "DrawTickersNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSVerifyActivity), global::F4BY.CSVerifyActivity.Parser, new[]{ "ActivityId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCVerifyActivity), global::F4BY.SCVerifyActivity.Parser, new[]{ "Open", "ActivityId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.Package), global::F4BY.Package.Parser, new[]{ "PackageId", "Limit", "ConsumePrice", "LimitType", "ConsumeProps", "PurchaseTimes", "RewardList", "Lock", "VipLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSTreasureHuntPackage), global::F4BY.CSTreasureHuntPackage.Parser, new[]{ "PackageType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCTreasureHuntPackage), global::F4BY.SCTreasureHuntPackage.Parser, new[]{ "PackageList", "PackageType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.ExchangeShopInfo), global::F4BY.ExchangeShopInfo.Parser, new[]{ "Level", "PackageList", "Unlock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSExchangeShop), global::F4BY.CSExchangeShop.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCExchangeShop), global::F4BY.SCExchangeShop.Parser, new[]{ "ExchangeShopList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSPurchasePackage), global::F4BY.CSPurchasePackage.Parser, new[]{ "PackageId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCPurchasePackage), global::F4BY.SCPurchasePackage.Parser, new[]{ "Package" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSVerifyTermChange), global::F4BY.CSVerifyTermChange.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCVerifyTermChange), global::F4BY.SCVerifyTermChange.Parser, new[]{ "Change", "RewardList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCWaterDropInfo), global::F4BY.SCWaterDropInfo.Parser, new[]{ "Enable", "DropCount", "FragmentCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSBuyGun), global::F4BY.CSBuyGun.Parser, new[]{ "GunLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCBuyGun), global::F4BY.SCBuyGun.Parser, new[]{ "GunLevel", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSBuyWings), global::F4BY.CSBuyWings.Parser, new[]{ "WingsId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCBuyWings), global::F4BY.SCBuyWings.Parser, new[]{ "WingsId", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.SCNotifyActStatus), global::F4BY.SCNotifyActStatus.Parser, new[]{ "ActType", "ActStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSSetDoubleShoot), global::F4BY.CSSetDoubleShoot.Parser, new[]{ "ExtraMul" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSFreePoolInfo), global::F4BY.CSFreePoolInfo.Parser, new[]{ "PrepareLottery" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSFreePoolLottery), global::F4BY.CSFreePoolLottery.Parser, new[]{ "Level" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::F4BY.CSFreePoolOpen), global::F4BY.CSFreePoolOpen.Parser, new[]{ "OpenFreePool" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDSubGame {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("HeartBeat")] HeartBeat = 1000,
    [pbr::OriginalName("LoginGameWithToken")] LoginGameWithToken = 1001,
    [pbr::OriginalName("UserReady")] UserReady = 1002,
    [pbr::OriginalName("SetProbability")] SetProbability = 1003,
    [pbr::OriginalName("FishTracesList")] FishTracesList = 1004,
    [pbr::OriginalName("ChangeScene")] ChangeScene = 1005,
    [pbr::OriginalName("FishOutsideScreen")] FishOutsideScreen = 1006,
    [pbr::OriginalName("LockFish")] LockFish = 1007,
    [pbr::OriginalName("UserShoot")] UserShoot = 1008,
    [pbr::OriginalName("HitFish")] HitFish = 1009,
    [pbr::OriginalName("CrazySkill")] CrazySkill = 1010,
    [pbr::OriginalName("SyncMoney")] SyncMoney = 1011,
    [pbr::OriginalName("NotifyLogout")] NotifyLogout = 1012,
    [pbr::OriginalName("SyncFishReq")] SyncFishReq = 1013,
    [pbr::OriginalName("SyncFishRsp")] SyncFishRsp = 1014,
    [pbr::OriginalName("UserRunBackground")] UserRunBackground = 1015,
    [pbr::OriginalName("HitSpecialFish")] HitSpecialFish = 1016,
    [pbr::OriginalName("SyncPropInfo")] SyncPropInfo = 1017,
    [pbr::OriginalName("NotifyLogin")] NotifyLogin = 1018,
    [pbr::OriginalName("TrebleSkill")] TrebleSkill = 1019,
    [pbr::OriginalName("UserLog")] UserLog = 1020,
    [pbr::OriginalName("UserEvent")] UserEvent = 1021,
    [pbr::OriginalName("UserInfoNotify")] UserInfoNotify = 1025,
    [pbr::OriginalName("GameInfoNotify")] GameInfoNotify = 1026,
    [pbr::OriginalName("Chat")] Chat = 1027,
    [pbr::OriginalName("GainAward")] GainAward = 1028,
    [pbr::OriginalName("PropStatus")] PropStatus = 1029,
    [pbr::OriginalName("PropDropNotify")] PropDropNotify = 1030,
    [pbr::OriginalName("UseProp")] UseProp = 1031,
    [pbr::OriginalName("FrozenTime")] FrozenTime = 1032,
    [pbr::OriginalName("UserPoolInfo")] UserPoolInfo = 1042,
    [pbr::OriginalName("UserPoolStatus")] UserPoolStatus = 1043,
    [pbr::OriginalName("UserPoolPreDraw")] UserPoolPreDraw = 1044,
    [pbr::OriginalName("UserPoolDraw")] UserPoolDraw = 1045,
    [pbr::OriginalName("UserPoolAdd")] UserPoolAdd = 1046,
    [pbr::OriginalName("TorpedoPreShoot")] TorpedoPreShoot = 1047,
    [pbr::OriginalName("TorpedoCancelShoot")] TorpedoCancelShoot = 1048,
    [pbr::OriginalName("TorpedoShoot")] TorpedoShoot = 1049,
    [pbr::OriginalName("TorpedoHit")] TorpedoHit = 1050,
    [pbr::OriginalName("CallFish")] CallFish = 1051,
    [pbr::OriginalName("ComTask")] ComTask = 1052,
    [pbr::OriginalName("TaskInfo")] TaskInfo = 1053,
    [pbr::OriginalName("SaveSkillTime")] SaveSkillTime = 1054,
    [pbr::OriginalName("SevenDayInfo")] SevenDayInfo = 1055,
    [pbr::OriginalName("SevenDayAward")] SevenDayAward = 1056,
    [pbr::OriginalName("VipChargeAward")] VipChargeAward = 1057,
    [pbr::OriginalName("InfoRedDot")] InfoRedDot = 1058,
    [pbr::OriginalName("ActivityInfo")] ActivityInfo = 1059,
    [pbr::OriginalName("ClickStatistic")] ClickStatistic = 1060,
    [pbr::OriginalName("AwardPool")] AwardPool = 1061,
    [pbr::OriginalName("NewClickStatistic")] NewClickStatistic = 1062,
    [pbr::OriginalName("GetAwardPoolRecord")] GetAwardPoolRecord = 1063,
    [pbr::OriginalName("TreasureFishInfo")] TreasureFishInfo = 1064,
    [pbr::OriginalName("TreasureFishCatched")] TreasureFishCatched = 1065,
    [pbr::OriginalName("MatchPackAdditionX")] MatchPackAdditionX = 1066,
    [pbr::OriginalName("MatchPackInvail")] MatchPackInvail = 1067,
    [pbr::OriginalName("MatchPackBuying")] MatchPackBuying = 1068,
    [pbr::OriginalName("GameItemSwitch")] GameItemSwitch = 1069,
    [pbr::OriginalName("LuckyDrawInfo")] LuckyDrawInfo = 1070,
    [pbr::OriginalName("GetLuckyTaskAward")] GetLuckyTaskAward = 1071,
    [pbr::OriginalName("LuckyRedDot")] LuckyRedDot = 1072,
    [pbr::OriginalName("GetLuckyNum")] GetLuckyNum = 1073,
    [pbr::OriginalName("GetLuckyRecord")] GetLuckyRecord = 1074,
    [pbr::OriginalName("GetOwnRecord")] GetOwnRecord = 1075,
    [pbr::OriginalName("UserPoolDoubleInfo")] UserPoolDoubleInfo = 1100,
    [pbr::OriginalName("UserPoolDouble")] UserPoolDouble = 1101,
    [pbr::OriginalName("LuckyPoolInfo")] LuckyPoolInfo = 1102,
    [pbr::OriginalName("LuckyPoolDraw")] LuckyPoolDraw = 1103,
    [pbr::OriginalName("BombInfo")] BombInfo = 1110,
    [pbr::OriginalName("BombHitFishInfo")] BombHitFishInfo = 1111,
    [pbr::OriginalName("SyncBomb")] SyncBomb = 1112,
    [pbr::OriginalName("SyncBombFinish")] SyncBombFinish = 1113,
    [pbr::OriginalName("GetMagicCube")] GetMagicCube = 1114,
    [pbr::OriginalName("SyncMagicCubeBtInfo")] SyncMagicCubeBtInfo = 1115,
    [pbr::OriginalName("PreHit")] PreHit = 1116,
    [pbr::OriginalName("PreShoot")] PreShoot = 1117,
    [pbr::OriginalName("SyncValentineDayFish")] SyncValentineDayFish = 1118,
    [pbr::OriginalName("BombGlobeFishInfo")] BombGlobeFishInfo = 1119,
    [pbr::OriginalName("BombGlobeFishHit")] BombGlobeFishHit = 1120,
    [pbr::OriginalName("AnniversaryShowSelect")] AnniversaryShowSelect = 1133,
    [pbr::OriginalName("AnniversarySelectReq")] AnniversarySelectReq = 1134,
    [pbr::OriginalName("AnniversarySelectResult")] AnniversarySelectResult = 1135,
    [pbr::OriginalName("AnniversaryHit")] AnniversaryHit = 1136,
    [pbr::OriginalName("SyncAnniversaryHitStage")] SyncAnniversaryHitStage = 1137,
    [pbr::OriginalName("SyncKiRinHitStage")] SyncKiRinHitStage = 1138,
    [pbr::OriginalName("NvWaFishCapture")] NvWaFishCapture = 1139,
    [pbr::OriginalName("CaptureScallop")] CaptureScallop = 1141,
    [pbr::OriginalName("SettleScallopLottery")] SettleScallopLottery = 1142,
    [pbr::OriginalName("SyncScallopLottery")] SyncScallopLottery = 1143,
    [pbr::OriginalName("OpenScallop")] OpenScallop = 1144,
    [pbr::OriginalName("UpdateChestStatus")] UpdateChestStatus = 1145,
    [pbr::OriginalName("ChestConfig")] ChestConfig = 1146,
    [pbr::OriginalName("OpenChest")] OpenChest = 1147,
    [pbr::OriginalName("SelectChestReward")] SelectChestReward = 1148,
    [pbr::OriginalName("ChestSetAutoSelect")] ChestSetAutoSelect = 1149,
    [pbr::OriginalName("SpecEffect")] SpecEffect = 1150,
    [pbr::OriginalName("ChestSetEnable")] ChestSetEnable = 1151,
    [pbr::OriginalName("FrozenFishRep")] FrozenFishRep = 1200,
    [pbr::OriginalName("TortoiseExplode")] TortoiseExplode = 1210,
    [pbr::OriginalName("SetWings")] SetWings = 1211,
    [pbr::OriginalName("SyncConfigs")] SyncConfigs = 1212,
    [pbr::OriginalName("DrawReward")] DrawReward = 1213,
    [pbr::OriginalName("TreasureHuntMission")] TreasureHuntMission = 1214,
    [pbr::OriginalName("ReceiveMissionReward")] ReceiveMissionReward = 1215,
    [pbr::OriginalName("DrawTimes")] DrawTimes = 1217,
    [pbr::OriginalName("VerifyActivity")] VerifyActivity = 1218,
    [pbr::OriginalName("ExchangeShop")] ExchangeShop = 1219,
    [pbr::OriginalName("TreasureHuntPackage")] TreasureHuntPackage = 1220,
    [pbr::OriginalName("PurchasePackage")] PurchasePackage = 1221,
    [pbr::OriginalName("VerifyTermChange")] VerifyTermChange = 1222,
    [pbr::OriginalName("BuyGun")] BuyGun = 1223,
    [pbr::OriginalName("BuyWings")] BuyWings = 1224,
    [pbr::OriginalName("WaterDropInfo")] WaterDropInfo = 1230,
    [pbr::OriginalName("NotifyActStatus")] NotifyActStatus = 1231,
    [pbr::OriginalName("SetDoubleShoot")] SetDoubleShoot = 1232,
    [pbr::OriginalName("LotteryResult3002")] LotteryResult3002 = 20001,
    [pbr::OriginalName("LotteryResult3005")] LotteryResult3005 = 20002,
    [pbr::OriginalName("FreePoolInfo")] FreePoolInfo = 21001,
    [pbr::OriginalName("FreePoolLottery")] FreePoolLottery = 21002,
    [pbr::OriginalName("FreePoolOpen")] FreePoolOpen = 21003,
  }

  public enum ErrCode {
    [pbr::OriginalName("Succ")] Succ = 0,
    [pbr::OriginalName("AlreadyInOtherGame")] AlreadyInOtherGame = 241,
    [pbr::OriginalName("Fail")] Fail = 1000,
    [pbr::OriginalName("LoadPropsDataFailed")] LoadPropsDataFailed = 10001,
    [pbr::OriginalName("CanNotFindPlayerPoint")] CanNotFindPlayerPoint = 10002,
    [pbr::OriginalName("ParameterIsWrong")] ParameterIsWrong = 10003,
    [pbr::OriginalName("LackOfMoney")] LackOfMoney = 10004,
    [pbr::OriginalName("FreeTimesChangeRatio")] FreeTimesChangeRatio = 10005,
    [pbr::OriginalName("IsNotSup")] IsNotSup = 10006,
    [pbr::OriginalName("DeserializeFailed")] DeserializeFailed = 10007,
    [pbr::OriginalName("PlayerNotExist")] PlayerNotExist = 10008,
    [pbr::OriginalName("PlayerAlreadyLogin")] PlayerAlreadyLogin = 10009,
    [pbr::OriginalName("LoadPlayerDataFailed")] LoadPlayerDataFailed = 10010,
    [pbr::OriginalName("AllocTableFailed")] AllocTableFailed = 10011,
    [pbr::OriginalName("DefendPlugIn")] DefendPlugIn = 10012,
    [pbr::OriginalName("QPEnterRoomFailed")] QpenterRoomFailed = 10013,
    [pbr::OriginalName("QPBaseUserInfoGetFailed")] QpbaseUserInfoGetFailed = 10014,
    [pbr::OriginalName("QPReadGoldFailed")] QpreadGoldFailed = 10015,
    [pbr::OriginalName("ThisTableIsFull")] ThisTableIsFull = 10016,
    [pbr::OriginalName("PropNoEnough")] PropNoEnough = 10017,
    [pbr::OriginalName("PropRoomLimit")] PropRoomLimit = 10018,
    [pbr::OriginalName("PropUsing")] PropUsing = 10019,
    [pbr::OriginalName("PropNotExist")] PropNotExist = 10020,
    [pbr::OriginalName("PropUsingSetGun")] PropUsingSetGun = 10021,
    [pbr::OriginalName("ThisRoomIsFull")] ThisRoomIsFull = 10022,
    [pbr::OriginalName("ServerClosed")] ServerClosed = 10023,
    [pbr::OriginalName("PropHave")] PropHave = 10024,
    [pbr::OriginalName("PropCanNotBuy")] PropCanNotBuy = 10025,
    [pbr::OriginalName("UserPoolNoMeet")] UserPoolNoMeet = 10030,
    [pbr::OriginalName("UserPoolToHigher")] UserPoolToHigher = 10031,
    [pbr::OriginalName("CallFishTideComing")] CallFishTideComing = 10032,
    [pbr::OriginalName("CallFishFull")] CallFishFull = 10033,
    [pbr::OriginalName("UserPoolLoadFail")] UserPoolLoadFail = 10034,
    [pbr::OriginalName("FrozenFishTideComing")] FrozenFishTideComing = 10035,
    [pbr::OriginalName("FrozenNotEnough")] FrozenNotEnough = 10036,
    [pbr::OriginalName("FrozenWaitCD")] FrozenWaitCd = 10037,
    [pbr::OriginalName("FrozenFishTide")] FrozenFishTide = 10038,
    [pbr::OriginalName("IllegalParam")] IllegalParam = 10040,
    [pbr::OriginalName("ConfigError")] ConfigError = 10041,
    [pbr::OriginalName("PreventCheatWarning")] PreventCheatWarning = 10042,
    [pbr::OriginalName("OpenChestFail")] OpenChestFail = 10050,
    [pbr::OriginalName("SelectChestRewardFail")] SelectChestRewardFail = 10051,
    [pbr::OriginalName("NotMetTaskConditionError")] NotMetTaskConditionError = 10052,
    [pbr::OriginalName("DrawNumError")] DrawNumError = 10053,
    [pbr::OriginalName("PurchaseLimitError")] PurchaseLimitError = 10054,
    [pbr::OriginalName("TreasureHuntNotStartError")] TreasureHuntNotStartError = 10055,
  }

  public enum UserEventType {
    [pbr::OriginalName("UserEventTypeHideIcon")] HideIcon = 0,
    [pbr::OriginalName("UserEventTypeCrazySkill")] CrazySkill = 1,
    [pbr::OriginalName("UserEventTypeUserPool")] UserPool = 2,
    [pbr::OriginalName("UserEventTypeMultiShoot")] MultiShoot = 3,
    [pbr::OriginalName("UserEventTypeStore")] Store = 4,
    [pbr::OriginalName("UserEventTypeCustomTable")] CustomTable = 5,
    [pbr::OriginalName("UserEventTypeChangeTable")] ChangeTable = 6,
    [pbr::OriginalName("UserLogTypeMax")] UserLogTypeMax = 7,
  }

  public enum CallFishType {
    [pbr::OriginalName("CallTypeNormal")] CallTypeNormal = 0,
    [pbr::OriginalName("CallTypeSpecial")] CallTypeSpecial = 1,
  }

  public enum ChestType {
    [pbr::OriginalName("ChestTypeNone")] None = 0,
    [pbr::OriginalName("ChestTypePorcelain")] Porcelain = 1,
    [pbr::OriginalName("ChestTypeBronze")] Bronze = 2,
    [pbr::OriginalName("ChestTypeSilver")] Silver = 3,
    [pbr::OriginalName("ChestTypeGold")] Gold = 4,
  }

  public enum ChestAutoSelectOption {
    [pbr::OriginalName("ChestAutoSelectOptionNone")] None = 0,
    [pbr::OriginalName("RedPacketTicket")] RedPacketTicket = 1,
    [pbr::OriginalName("Money")] Money = 2,
  }

  #endregion

  #region Messages
  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      stationBaseList_ = other.stationBaseList_.Clone();
      gunInfo_ = other.gunInfo_.Clone();
      gunRatioNum_ = other.gunRatioNum_;
      gunLevelNum_ = other.gunLevelNum_;
      ratioList_ = other.ratioList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "station_base_list" field.</summary>
    public const int StationBaseListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.StationBase> _repeated_stationBaseList_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.StationBase.Parser);
    private readonly pbc::RepeatedField<global::F4BY.StationBase> stationBaseList_ = new pbc::RepeatedField<global::F4BY.StationBase>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.StationBase> StationBaseList {
      get { return stationBaseList_; }
    }

    /// <summary>Field number for the "gun_info" field.</summary>
    public const int GunInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.GunInfo> _repeated_gunInfo_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.GunInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.GunInfo> gunInfo_ = new pbc::RepeatedField<global::F4BY.GunInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.GunInfo> GunInfo {
      get { return gunInfo_; }
    }

    /// <summary>Field number for the "gun_ratio_num" field.</summary>
    public const int GunRatioNumFieldNumber = 3;
    private int gunRatioNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunRatioNum {
      get { return gunRatioNum_; }
      set {
        gunRatioNum_ = value;
      }
    }

    /// <summary>Field number for the "gun_level_num" field.</summary>
    public const int GunLevelNumFieldNumber = 4;
    private int gunLevelNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunLevelNum {
      get { return gunLevelNum_; }
      set {
        gunLevelNum_ = value;
      }
    }

    /// <summary>Field number for the "ratio_list" field.</summary>
    public const int RatioListFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_ratioList_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> ratioList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RatioList {
      get { return ratioList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stationBaseList_.Equals(other.stationBaseList_)) return false;
      if(!gunInfo_.Equals(other.gunInfo_)) return false;
      if (GunRatioNum != other.GunRatioNum) return false;
      if (GunLevelNum != other.GunLevelNum) return false;
      if(!ratioList_.Equals(other.ratioList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stationBaseList_.GetHashCode();
      hash ^= gunInfo_.GetHashCode();
      if (GunRatioNum != 0) hash ^= GunRatioNum.GetHashCode();
      if (GunLevelNum != 0) hash ^= GunLevelNum.GetHashCode();
      hash ^= ratioList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      stationBaseList_.WriteTo(output, _repeated_stationBaseList_codec);
      gunInfo_.WriteTo(output, _repeated_gunInfo_codec);
      if (GunRatioNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GunRatioNum);
      }
      if (GunLevelNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GunLevelNum);
      }
      ratioList_.WriteTo(output, _repeated_ratioList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      stationBaseList_.WriteTo(ref output, _repeated_stationBaseList_codec);
      gunInfo_.WriteTo(ref output, _repeated_gunInfo_codec);
      if (GunRatioNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GunRatioNum);
      }
      if (GunLevelNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GunLevelNum);
      }
      ratioList_.WriteTo(ref output, _repeated_ratioList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stationBaseList_.CalculateSize(_repeated_stationBaseList_codec);
      size += gunInfo_.CalculateSize(_repeated_gunInfo_codec);
      if (GunRatioNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunRatioNum);
      }
      if (GunLevelNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunLevelNum);
      }
      size += ratioList_.CalculateSize(_repeated_ratioList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      stationBaseList_.Add(other.stationBaseList_);
      gunInfo_.Add(other.gunInfo_);
      if (other.GunRatioNum != 0) {
        GunRatioNum = other.GunRatioNum;
      }
      if (other.GunLevelNum != 0) {
        GunLevelNum = other.GunLevelNum;
      }
      ratioList_.Add(other.ratioList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stationBaseList_.AddEntriesFrom(input, _repeated_stationBaseList_codec);
            break;
          }
          case 18: {
            gunInfo_.AddEntriesFrom(input, _repeated_gunInfo_codec);
            break;
          }
          case 24: {
            GunRatioNum = input.ReadInt32();
            break;
          }
          case 32: {
            GunLevelNum = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            ratioList_.AddEntriesFrom(input, _repeated_ratioList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            stationBaseList_.AddEntriesFrom(ref input, _repeated_stationBaseList_codec);
            break;
          }
          case 18: {
            gunInfo_.AddEntriesFrom(ref input, _repeated_gunInfo_codec);
            break;
          }
          case 24: {
            GunRatioNum = input.ReadInt32();
            break;
          }
          case 32: {
            GunLevelNum = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            ratioList_.AddEntriesFrom(ref input, _repeated_ratioList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommonResp : pb::IMessage<CommonResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommonResp> _parser = new pb::MessageParser<CommonResp>(() => new CommonResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonResp(CommonResp other) : this() {
      code_ = other.code_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonResp Clone() {
      return new CommonResp(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonResp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Object : pb::IMessage<Object>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Object> _parser = new pb::MessageParser<Object>(() => new Object());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Object> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object(Object other) : this() {
      id_ = other.id_;
      count_ = other.count_;
      ratio_ = other.ratio_;
      time_ = other.time_;
      multiple_ = other.multiple_;
      uid_ = other.uid_;
      originId_ = other.originId_;
      multiList_ = other.multiList_.Clone();
      originUid_ = other.originUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object Clone() {
      return new Object(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 3;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 5;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 6;
    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "originId" field.</summary>
    public const int OriginIdFieldNumber = 7;
    private int originId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginId {
      get { return originId_; }
      set {
        originId_ = value;
      }
    }

    /// <summary>Field number for the "multi_list" field.</summary>
    public const int MultiListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::F4BY.MultiInfo> _repeated_multiList_codec
        = pb::FieldCodec.ForMessage(66, global::F4BY.MultiInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.MultiInfo> multiList_ = new pbc::RepeatedField<global::F4BY.MultiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.MultiInfo> MultiList {
      get { return multiList_; }
    }

    /// <summary>Field number for the "origin_uid" field.</summary>
    public const int OriginUidFieldNumber = 9;
    private int originUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUid {
      get { return originUid_; }
      set {
        originUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Object);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Object other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if (Ratio != other.Ratio) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (Multiple != other.Multiple) return false;
      if (Uid != other.Uid) return false;
      if (OriginId != other.OriginId) return false;
      if(!multiList_.Equals(other.multiList_)) return false;
      if (OriginUid != other.OriginUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (Uid != 0) hash ^= Uid.GetHashCode();
      if (OriginId != 0) hash ^= OriginId.GetHashCode();
      hash ^= multiList_.GetHashCode();
      if (OriginUid != 0) hash ^= OriginUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (Time != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Time);
      }
      if (Multiple != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Multiple);
      }
      if (Uid != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Uid);
      }
      if (OriginId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OriginId);
      }
      multiList_.WriteTo(output, _repeated_multiList_codec);
      if (OriginUid != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OriginUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (Time != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Time);
      }
      if (Multiple != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Multiple);
      }
      if (Uid != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Uid);
      }
      if (OriginId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OriginId);
      }
      multiList_.WriteTo(ref output, _repeated_multiList_codec);
      if (OriginUid != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OriginUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (Uid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (OriginId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginId);
      }
      size += multiList_.CalculateSize(_repeated_multiList_codec);
      if (OriginUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Object other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      if (other.Uid != 0) {
        Uid = other.Uid;
      }
      if (other.OriginId != 0) {
        OriginId = other.OriginId;
      }
      multiList_.Add(other.multiList_);
      if (other.OriginUid != 0) {
        OriginUid = other.OriginUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 37: {
            Time = input.ReadFloat();
            break;
          }
          case 40: {
            Multiple = input.ReadInt32();
            break;
          }
          case 48: {
            Uid = input.ReadInt32();
            break;
          }
          case 56: {
            OriginId = input.ReadInt32();
            break;
          }
          case 66: {
            multiList_.AddEntriesFrom(input, _repeated_multiList_codec);
            break;
          }
          case 72: {
            OriginUid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 37: {
            Time = input.ReadFloat();
            break;
          }
          case 40: {
            Multiple = input.ReadInt32();
            break;
          }
          case 48: {
            Uid = input.ReadInt32();
            break;
          }
          case 56: {
            OriginId = input.ReadInt32();
            break;
          }
          case 66: {
            multiList_.AddEntriesFrom(ref input, _repeated_multiList_codec);
            break;
          }
          case 72: {
            OriginUid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Obj : pb::IMessage<Obj>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Obj> _parser = new pb::MessageParser<Obj>(() => new Obj());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Obj> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Obj() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Obj(Obj other) : this() {
      id_ = other.id_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Obj Clone() {
      return new Obj(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Obj);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Obj other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Obj other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Object1 : pb::IMessage<Object1>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Object1> _parser = new pb::MessageParser<Object1>(() => new Object1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Object1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object1(Object1 other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object1 Clone() {
      return new Object1(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Object1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Object1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Object1 other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Object2 : pb::IMessage<Object2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Object2> _parser = new pb::MessageParser<Object2>(() => new Object2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Object2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object2(Object2 other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object2 Clone() {
      return new Object2(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Object2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Object2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Object2 other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Object3 : pb::IMessage<Object3>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Object3> _parser = new pb::MessageParser<Object3>(() => new Object3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Object3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object3(Object3 other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Object3 Clone() {
      return new Object3(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Object3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Object3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Object3 other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WheelObject : pb::IMessage<WheelObject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WheelObject> _parser = new pb::MessageParser<WheelObject>(() => new WheelObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WheelObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WheelObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WheelObject(WheelObject other) : this() {
      wheels_ = other.wheels_.Clone();
      ratio_ = other.ratio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WheelObject Clone() {
      return new WheelObject(this);
    }

    /// <summary>Field number for the "wheels" field.</summary>
    public const int WheelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.Object3> _repeated_wheels_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.Object3.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Object3> wheels_ = new pbc::RepeatedField<global::F4BY.Object3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Object3> Wheels {
      get { return wheels_; }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 2;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WheelObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WheelObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!wheels_.Equals(other.wheels_)) return false;
      if (Ratio != other.Ratio) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= wheels_.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      wheels_.WriteTo(output, _repeated_wheels_codec);
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      wheels_.WriteTo(ref output, _repeated_wheels_codec);
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += wheels_.CalculateSize(_repeated_wheels_codec);
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WheelObject other) {
      if (other == null) {
        return;
      }
      wheels_.Add(other.wheels_);
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            wheels_.AddEntriesFrom(input, _repeated_wheels_codec);
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            wheels_.AddEntriesFrom(ref input, _repeated_wheels_codec);
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Decimal : pb::IMessage<Decimal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Decimal> _parser = new pb::MessageParser<Decimal>(() => new Decimal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Decimal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal(Decimal other) : this() {
      num_ = other.num_;
      denom_ = other.denom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Decimal Clone() {
      return new Decimal(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "denom" field.</summary>
    public const int DenomFieldNumber = 2;
    private int denom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Denom {
      get { return denom_; }
      set {
        denom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Decimal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Decimal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      if (Denom != other.Denom) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Denom != 0) hash ^= Denom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (Denom != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Denom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (Denom != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Denom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Denom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Denom);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Decimal other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Denom != 0) {
        Denom = other.Denom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 16: {
            Denom = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 16: {
            Denom = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSLoginGameWithToken : pb::IMessage<CSLoginGameWithToken>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSLoginGameWithToken> _parser = new pb::MessageParser<CSLoginGameWithToken>(() => new CSLoginGameWithToken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLoginGameWithToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoginGameWithToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoginGameWithToken(CSLoginGameWithToken other) : this() {
      playerId_ = other.playerId_;
      token_ = other.token_;
      oSType_ = other.oSType_;
      tableId_ = other.tableId_;
      lastTableId_ = other.lastTableId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoginGameWithToken Clone() {
      return new CSLoginGameWithToken(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oSType" field.</summary>
    public const int OSTypeFieldNumber = 3;
    private int oSType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OSType {
      get { return oSType_; }
      set {
        oSType_ = value;
      }
    }

    /// <summary>Field number for the "tableId" field.</summary>
    public const int TableIdFieldNumber = 4;
    private int tableId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "last_tableId" field.</summary>
    public const int LastTableIdFieldNumber = 5;
    private int lastTableId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTableId {
      get { return lastTableId_; }
      set {
        lastTableId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLoginGameWithToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLoginGameWithToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Token != other.Token) return false;
      if (OSType != other.OSType) return false;
      if (TableId != other.TableId) return false;
      if (LastTableId != other.LastTableId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (OSType != 0) hash ^= OSType.GetHashCode();
      if (TableId != 0) hash ^= TableId.GetHashCode();
      if (LastTableId != 0) hash ^= LastTableId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (OSType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OSType);
      }
      if (TableId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TableId);
      }
      if (LastTableId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LastTableId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (OSType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OSType);
      }
      if (TableId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TableId);
      }
      if (LastTableId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LastTableId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (OSType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OSType);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
      }
      if (LastTableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTableId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLoginGameWithToken other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.OSType != 0) {
        OSType = other.OSType;
      }
      if (other.TableId != 0) {
        TableId = other.TableId;
      }
      if (other.LastTableId != 0) {
        LastTableId = other.LastTableId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            OSType = input.ReadInt32();
            break;
          }
          case 32: {
            TableId = input.ReadInt32();
            break;
          }
          case 40: {
            LastTableId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            OSType = input.ReadInt32();
            break;
          }
          case 32: {
            TableId = input.ReadInt32();
            break;
          }
          case 40: {
            LastTableId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCLoginGameWithToken : pb::IMessage<SCLoginGameWithToken>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCLoginGameWithToken> _parser = new pb::MessageParser<SCLoginGameWithToken>(() => new SCLoginGameWithToken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLoginGameWithToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLoginGameWithToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLoginGameWithToken(SCLoginGameWithToken other) : this() {
      sceneIndex_ = other.sceneIndex_;
      tableId_ = other.tableId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLoginGameWithToken Clone() {
      return new SCLoginGameWithToken(this);
    }

    /// <summary>Field number for the "scene_index" field.</summary>
    public const int SceneIndexFieldNumber = 1;
    private int sceneIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneIndex {
      get { return sceneIndex_; }
      set {
        sceneIndex_ = value;
      }
    }

    /// <summary>Field number for the "tableId" field.</summary>
    public const int TableIdFieldNumber = 2;
    private int tableId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLoginGameWithToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLoginGameWithToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneIndex != other.SceneIndex) return false;
      if (TableId != other.TableId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneIndex != 0) hash ^= SceneIndex.GetHashCode();
      if (TableId != 0) hash ^= TableId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SceneIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneIndex);
      }
      if (TableId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SceneIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneIndex);
      }
      if (TableId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneIndex);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLoginGameWithToken other) {
      if (other == null) {
        return;
      }
      if (other.SceneIndex != 0) {
        SceneIndex = other.SceneIndex;
      }
      if (other.TableId != 0) {
        TableId = other.TableId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneIndex = input.ReadInt32();
            break;
          }
          case 16: {
            TableId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SceneIndex = input.ReadInt32();
            break;
          }
          case 16: {
            TableId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserReady : pb::IMessage<CSUserReady>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserReady> _parser = new pb::MessageParser<CSUserReady>(() => new CSUserReady());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserReady(CSUserReady other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserReady Clone() {
      return new CSUserReady(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserReady other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EffectInfo : pb::IMessage<EffectInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EffectInfo> _parser = new pb::MessageParser<EffectInfo>(() => new EffectInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectInfo(EffectInfo other) : this() {
      effectId_ = other.effectId_;
      isGlobal_ = other.isGlobal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectInfo Clone() {
      return new EffectInfo(this);
    }

    /// <summary>Field number for the "effect_id" field.</summary>
    public const int EffectIdFieldNumber = 1;
    private int effectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectId {
      get { return effectId_; }
      set {
        effectId_ = value;
      }
    }

    /// <summary>Field number for the "is_global" field.</summary>
    public const int IsGlobalFieldNumber = 2;
    private bool isGlobal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGlobal {
      get { return isGlobal_; }
      set {
        isGlobal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectId != other.EffectId) return false;
      if (IsGlobal != other.IsGlobal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EffectId != 0) hash ^= EffectId.GetHashCode();
      if (IsGlobal != false) hash ^= IsGlobal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EffectId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EffectId);
      }
      if (IsGlobal != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGlobal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EffectId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EffectId);
      }
      if (IsGlobal != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGlobal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectId);
      }
      if (IsGlobal != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectInfo other) {
      if (other == null) {
        return;
      }
      if (other.EffectId != 0) {
        EffectId = other.EffectId;
      }
      if (other.IsGlobal != false) {
        IsGlobal = other.IsGlobal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EffectId = input.ReadInt32();
            break;
          }
          case 16: {
            IsGlobal = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EffectId = input.ReadInt32();
            break;
          }
          case 16: {
            IsGlobal = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StationBase : pb::IMessage<StationBase>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StationBase> _parser = new pb::MessageParser<StationBase>(() => new StationBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationBase(StationBase other) : this() {
      gunRatio_ = other.gunRatio_;
      gunLevel_ = other.gunLevel_;
      userScore_ = other.userScore_;
      chairIdx_ = other.chairIdx_;
      playerName_ = other.playerName_;
      playerId_ = other.playerId_;
      vip_ = other.vip_;
      status_ = other.status_;
      crazySkillOpen_ = other.crazySkillOpen_;
      userTicket_ = other.userTicket_;
      effect_ = other.effect_;
      extraData_ = other.extraData_;
      redPacketTicket_ = other.redPacketTicket_ != null ? other.redPacketTicket_.Clone() : null;
      effectInfo_ = other.effectInfo_ != null ? other.effectInfo_.Clone() : null;
      wingsPropsId_ = other.wingsPropsId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationBase Clone() {
      return new StationBase(this);
    }

    /// <summary>Field number for the "gun_ratio" field.</summary>
    public const int GunRatioFieldNumber = 1;
    private int gunRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunRatio {
      get { return gunRatio_; }
      set {
        gunRatio_ = value;
      }
    }

    /// <summary>Field number for the "gun_level" field.</summary>
    public const int GunLevelFieldNumber = 2;
    private int gunLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunLevel {
      get { return gunLevel_; }
      set {
        gunLevel_ = value;
      }
    }

    /// <summary>Field number for the "user_score" field.</summary>
    public const int UserScoreFieldNumber = 3;
    private long userScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserScore {
      get { return userScore_; }
      set {
        userScore_ = value;
      }
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 4;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 5;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 6;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 7;
    private int vip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "crazy_skill_open" field.</summary>
    public const int CrazySkillOpenFieldNumber = 9;
    private bool crazySkillOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CrazySkillOpen {
      get { return crazySkillOpen_; }
      set {
        crazySkillOpen_ = value;
      }
    }

    /// <summary>Field number for the "user_ticket" field.</summary>
    public const int UserTicketFieldNumber = 10;
    private int userTicket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserTicket {
      get { return userTicket_; }
      set {
        userTicket_ = value;
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 11;
    private int effect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Effect {
      get { return effect_; }
      set {
        effect_ = value;
      }
    }

    /// <summary>Field number for the "extra_data" field.</summary>
    public const int ExtraDataFieldNumber = 12;
    private int extraData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraData {
      get { return extraData_; }
      set {
        extraData_ = value;
      }
    }

    /// <summary>Field number for the "red_packet_ticket" field.</summary>
    public const int RedPacketTicketFieldNumber = 13;
    private global::F4BY.Decimal redPacketTicket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Decimal RedPacketTicket {
      get { return redPacketTicket_; }
      set {
        redPacketTicket_ = value;
      }
    }

    /// <summary>Field number for the "effect_info" field.</summary>
    public const int EffectInfoFieldNumber = 14;
    private global::F4BY.EffectInfo effectInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.EffectInfo EffectInfo {
      get { return effectInfo_; }
      set {
        effectInfo_ = value;
      }
    }

    /// <summary>Field number for the "wings_props_id" field.</summary>
    public const int WingsPropsIdFieldNumber = 15;
    private int wingsPropsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingsPropsId {
      get { return wingsPropsId_; }
      set {
        wingsPropsId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GunRatio != other.GunRatio) return false;
      if (GunLevel != other.GunLevel) return false;
      if (UserScore != other.UserScore) return false;
      if (ChairIdx != other.ChairIdx) return false;
      if (PlayerName != other.PlayerName) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Vip != other.Vip) return false;
      if (Status != other.Status) return false;
      if (CrazySkillOpen != other.CrazySkillOpen) return false;
      if (UserTicket != other.UserTicket) return false;
      if (Effect != other.Effect) return false;
      if (ExtraData != other.ExtraData) return false;
      if (!object.Equals(RedPacketTicket, other.RedPacketTicket)) return false;
      if (!object.Equals(EffectInfo, other.EffectInfo)) return false;
      if (WingsPropsId != other.WingsPropsId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GunRatio != 0) hash ^= GunRatio.GetHashCode();
      if (GunLevel != 0) hash ^= GunLevel.GetHashCode();
      if (UserScore != 0L) hash ^= UserScore.GetHashCode();
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Vip != 0) hash ^= Vip.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CrazySkillOpen != false) hash ^= CrazySkillOpen.GetHashCode();
      if (UserTicket != 0) hash ^= UserTicket.GetHashCode();
      if (Effect != 0) hash ^= Effect.GetHashCode();
      if (ExtraData != 0) hash ^= ExtraData.GetHashCode();
      if (redPacketTicket_ != null) hash ^= RedPacketTicket.GetHashCode();
      if (effectInfo_ != null) hash ^= EffectInfo.GetHashCode();
      if (WingsPropsId != 0) hash ^= WingsPropsId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (GunLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GunLevel);
      }
      if (UserScore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserScore);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChairIdx);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PlayerName);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerId);
      }
      if (Vip != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Vip);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Status);
      }
      if (CrazySkillOpen != false) {
        output.WriteRawTag(72);
        output.WriteBool(CrazySkillOpen);
      }
      if (UserTicket != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UserTicket);
      }
      if (Effect != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Effect);
      }
      if (ExtraData != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ExtraData);
      }
      if (redPacketTicket_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(RedPacketTicket);
      }
      if (effectInfo_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(EffectInfo);
      }
      if (WingsPropsId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(WingsPropsId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (GunLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GunLevel);
      }
      if (UserScore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserScore);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChairIdx);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PlayerName);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerId);
      }
      if (Vip != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Vip);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Status);
      }
      if (CrazySkillOpen != false) {
        output.WriteRawTag(72);
        output.WriteBool(CrazySkillOpen);
      }
      if (UserTicket != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UserTicket);
      }
      if (Effect != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Effect);
      }
      if (ExtraData != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ExtraData);
      }
      if (redPacketTicket_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(RedPacketTicket);
      }
      if (effectInfo_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(EffectInfo);
      }
      if (WingsPropsId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(WingsPropsId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GunRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunRatio);
      }
      if (GunLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunLevel);
      }
      if (UserScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserScore);
      }
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Vip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vip);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (CrazySkillOpen != false) {
        size += 1 + 1;
      }
      if (UserTicket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserTicket);
      }
      if (Effect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Effect);
      }
      if (ExtraData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraData);
      }
      if (redPacketTicket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedPacketTicket);
      }
      if (effectInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectInfo);
      }
      if (WingsPropsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WingsPropsId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationBase other) {
      if (other == null) {
        return;
      }
      if (other.GunRatio != 0) {
        GunRatio = other.GunRatio;
      }
      if (other.GunLevel != 0) {
        GunLevel = other.GunLevel;
      }
      if (other.UserScore != 0L) {
        UserScore = other.UserScore;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Vip != 0) {
        Vip = other.Vip;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CrazySkillOpen != false) {
        CrazySkillOpen = other.CrazySkillOpen;
      }
      if (other.UserTicket != 0) {
        UserTicket = other.UserTicket;
      }
      if (other.Effect != 0) {
        Effect = other.Effect;
      }
      if (other.ExtraData != 0) {
        ExtraData = other.ExtraData;
      }
      if (other.redPacketTicket_ != null) {
        if (redPacketTicket_ == null) {
          RedPacketTicket = new global::F4BY.Decimal();
        }
        RedPacketTicket.MergeFrom(other.RedPacketTicket);
      }
      if (other.effectInfo_ != null) {
        if (effectInfo_ == null) {
          EffectInfo = new global::F4BY.EffectInfo();
        }
        EffectInfo.MergeFrom(other.EffectInfo);
      }
      if (other.WingsPropsId != 0) {
        WingsPropsId = other.WingsPropsId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 24: {
            UserScore = input.ReadInt64();
            break;
          }
          case 32: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 42: {
            PlayerName = input.ReadString();
            break;
          }
          case 48: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 56: {
            Vip = input.ReadInt32();
            break;
          }
          case 64: {
            Status = input.ReadInt32();
            break;
          }
          case 72: {
            CrazySkillOpen = input.ReadBool();
            break;
          }
          case 80: {
            UserTicket = input.ReadInt32();
            break;
          }
          case 88: {
            Effect = input.ReadInt32();
            break;
          }
          case 96: {
            ExtraData = input.ReadInt32();
            break;
          }
          case 106: {
            if (redPacketTicket_ == null) {
              RedPacketTicket = new global::F4BY.Decimal();
            }
            input.ReadMessage(RedPacketTicket);
            break;
          }
          case 114: {
            if (effectInfo_ == null) {
              EffectInfo = new global::F4BY.EffectInfo();
            }
            input.ReadMessage(EffectInfo);
            break;
          }
          case 120: {
            WingsPropsId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 24: {
            UserScore = input.ReadInt64();
            break;
          }
          case 32: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 42: {
            PlayerName = input.ReadString();
            break;
          }
          case 48: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 56: {
            Vip = input.ReadInt32();
            break;
          }
          case 64: {
            Status = input.ReadInt32();
            break;
          }
          case 72: {
            CrazySkillOpen = input.ReadBool();
            break;
          }
          case 80: {
            UserTicket = input.ReadInt32();
            break;
          }
          case 88: {
            Effect = input.ReadInt32();
            break;
          }
          case 96: {
            ExtraData = input.ReadInt32();
            break;
          }
          case 106: {
            if (redPacketTicket_ == null) {
              RedPacketTicket = new global::F4BY.Decimal();
            }
            input.ReadMessage(RedPacketTicket);
            break;
          }
          case 114: {
            if (effectInfo_ == null) {
              EffectInfo = new global::F4BY.EffectInfo();
            }
            input.ReadMessage(EffectInfo);
            break;
          }
          case 120: {
            WingsPropsId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserReady : pb::IMessage<SCUserReady>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserReady> _parser = new pb::MessageParser<SCUserReady>(() => new SCUserReady());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserReady(SCUserReady other) : this() {
      stationBaseList_ = other.stationBaseList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserReady Clone() {
      return new SCUserReady(this);
    }

    /// <summary>Field number for the "station_base_list" field.</summary>
    public const int StationBaseListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.StationBase> _repeated_stationBaseList_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.StationBase.Parser);
    private readonly pbc::RepeatedField<global::F4BY.StationBase> stationBaseList_ = new pbc::RepeatedField<global::F4BY.StationBase>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.StationBase> StationBaseList {
      get { return stationBaseList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stationBaseList_.Equals(other.stationBaseList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stationBaseList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      stationBaseList_.WriteTo(output, _repeated_stationBaseList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      stationBaseList_.WriteTo(ref output, _repeated_stationBaseList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stationBaseList_.CalculateSize(_repeated_stationBaseList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserReady other) {
      if (other == null) {
        return;
      }
      stationBaseList_.Add(other.stationBaseList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stationBaseList_.AddEntriesFrom(input, _repeated_stationBaseList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            stationBaseList_.AddEntriesFrom(ref input, _repeated_stationBaseList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCNotifyLogin : pb::IMessage<SCNotifyLogin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCNotifyLogin> _parser = new pb::MessageParser<SCNotifyLogin>(() => new SCNotifyLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCNotifyLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNotifyLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNotifyLogin(SCNotifyLogin other) : this() {
      stationBaseList_ = other.stationBaseList_ != null ? other.stationBaseList_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNotifyLogin Clone() {
      return new SCNotifyLogin(this);
    }

    /// <summary>Field number for the "station_base_list" field.</summary>
    public const int StationBaseListFieldNumber = 1;
    private global::F4BY.StationBase stationBaseList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.StationBase StationBaseList {
      get { return stationBaseList_; }
      set {
        stationBaseList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCNotifyLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCNotifyLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StationBaseList, other.StationBaseList)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stationBaseList_ != null) hash ^= StationBaseList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (stationBaseList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StationBaseList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (stationBaseList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StationBaseList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stationBaseList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StationBaseList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCNotifyLogin other) {
      if (other == null) {
        return;
      }
      if (other.stationBaseList_ != null) {
        if (stationBaseList_ == null) {
          StationBaseList = new global::F4BY.StationBase();
        }
        StationBaseList.MergeFrom(other.StationBaseList);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stationBaseList_ == null) {
              StationBaseList = new global::F4BY.StationBase();
            }
            input.ReadMessage(StationBaseList);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (stationBaseList_ == null) {
              StationBaseList = new global::F4BY.StationBase();
            }
            input.ReadMessage(StationBaseList);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSNotifyLogout : pb::IMessage<CSNotifyLogout>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSNotifyLogout> _parser = new pb::MessageParser<CSNotifyLogout>(() => new CSNotifyLogout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSNotifyLogout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSNotifyLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSNotifyLogout(CSNotifyLogout other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSNotifyLogout Clone() {
      return new CSNotifyLogout(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSNotifyLogout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSNotifyLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSNotifyLogout other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCNotifyLogout : pb::IMessage<SCNotifyLogout>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCNotifyLogout> _parser = new pb::MessageParser<SCNotifyLogout>(() => new SCNotifyLogout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCNotifyLogout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNotifyLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNotifyLogout(SCNotifyLogout other) : this() {
      chairIdx_ = other.chairIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNotifyLogout Clone() {
      return new SCNotifyLogout(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCNotifyLogout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCNotifyLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCNotifyLogout other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSetProbability : pb::IMessage<CSSetProbability>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSetProbability> _parser = new pb::MessageParser<CSSetProbability>(() => new CSSetProbability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSetProbability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetProbability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetProbability(CSSetProbability other) : this() {
      gunRatio_ = other.gunRatio_;
      gunLevel_ = other.gunLevel_;
      isUseAuto_ = other.isUseAuto_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetProbability Clone() {
      return new CSSetProbability(this);
    }

    /// <summary>Field number for the "gun_ratio" field.</summary>
    public const int GunRatioFieldNumber = 1;
    private int gunRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunRatio {
      get { return gunRatio_; }
      set {
        gunRatio_ = value;
      }
    }

    /// <summary>Field number for the "gun_level" field.</summary>
    public const int GunLevelFieldNumber = 2;
    private int gunLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunLevel {
      get { return gunLevel_; }
      set {
        gunLevel_ = value;
      }
    }

    /// <summary>Field number for the "is_use_auto" field.</summary>
    public const int IsUseAutoFieldNumber = 3;
    private bool isUseAuto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUseAuto {
      get { return isUseAuto_; }
      set {
        isUseAuto_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSetProbability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSetProbability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GunRatio != other.GunRatio) return false;
      if (GunLevel != other.GunLevel) return false;
      if (IsUseAuto != other.IsUseAuto) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GunRatio != 0) hash ^= GunRatio.GetHashCode();
      if (GunLevel != 0) hash ^= GunLevel.GetHashCode();
      if (IsUseAuto != false) hash ^= IsUseAuto.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (GunLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GunLevel);
      }
      if (IsUseAuto != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUseAuto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (GunLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GunLevel);
      }
      if (IsUseAuto != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUseAuto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GunRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunRatio);
      }
      if (GunLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunLevel);
      }
      if (IsUseAuto != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSetProbability other) {
      if (other == null) {
        return;
      }
      if (other.GunRatio != 0) {
        GunRatio = other.GunRatio;
      }
      if (other.GunLevel != 0) {
        GunLevel = other.GunLevel;
      }
      if (other.IsUseAuto != false) {
        IsUseAuto = other.IsUseAuto;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 24: {
            IsUseAuto = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 24: {
            IsUseAuto = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSetProbability : pb::IMessage<SCSetProbability>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSetProbability> _parser = new pb::MessageParser<SCSetProbability>(() => new SCSetProbability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSetProbability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetProbability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetProbability(SCSetProbability other) : this() {
      code_ = other.code_;
      chairIdx_ = other.chairIdx_;
      gunRatio_ = other.gunRatio_;
      gunLevel_ = other.gunLevel_;
      msg_ = other.msg_;
      isUnlock_ = other.isUnlock_;
      extraData_ = other.extraData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetProbability Clone() {
      return new SCSetProbability(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 2;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "gun_ratio" field.</summary>
    public const int GunRatioFieldNumber = 3;
    private int gunRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunRatio {
      get { return gunRatio_; }
      set {
        gunRatio_ = value;
      }
    }

    /// <summary>Field number for the "gun_level" field.</summary>
    public const int GunLevelFieldNumber = 4;
    private int gunLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunLevel {
      get { return gunLevel_; }
      set {
        gunLevel_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 5;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_unlock" field.</summary>
    public const int IsUnlockFieldNumber = 6;
    private bool isUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    /// <summary>Field number for the "extra_data" field.</summary>
    public const int ExtraDataFieldNumber = 7;
    private int extraData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraData {
      get { return extraData_; }
      set {
        extraData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSetProbability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSetProbability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (ChairIdx != other.ChairIdx) return false;
      if (GunRatio != other.GunRatio) return false;
      if (GunLevel != other.GunLevel) return false;
      if (Msg != other.Msg) return false;
      if (IsUnlock != other.IsUnlock) return false;
      if (ExtraData != other.ExtraData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (GunRatio != 0) hash ^= GunRatio.GetHashCode();
      if (GunLevel != 0) hash ^= GunLevel.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (IsUnlock != false) hash ^= IsUnlock.GetHashCode();
      if (ExtraData != 0) hash ^= ExtraData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairIdx);
      }
      if (GunRatio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GunRatio);
      }
      if (GunLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GunLevel);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Msg);
      }
      if (IsUnlock != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsUnlock);
      }
      if (ExtraData != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExtraData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairIdx);
      }
      if (GunRatio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GunRatio);
      }
      if (GunLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GunLevel);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Msg);
      }
      if (IsUnlock != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsUnlock);
      }
      if (ExtraData != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExtraData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (GunRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunRatio);
      }
      if (GunLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunLevel);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (IsUnlock != false) {
        size += 1 + 1;
      }
      if (ExtraData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSetProbability other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.GunRatio != 0) {
        GunRatio = other.GunRatio;
      }
      if (other.GunLevel != 0) {
        GunLevel = other.GunLevel;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.IsUnlock != false) {
        IsUnlock = other.IsUnlock;
      }
      if (other.ExtraData != 0) {
        ExtraData = other.ExtraData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 24: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 32: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 42: {
            Msg = input.ReadString();
            break;
          }
          case 48: {
            IsUnlock = input.ReadBool();
            break;
          }
          case 56: {
            ExtraData = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 24: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 32: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 42: {
            Msg = input.ReadString();
            break;
          }
          case 48: {
            IsUnlock = input.ReadBool();
            break;
          }
          case 56: {
            ExtraData = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSetWings : pb::IMessage<CSSetWings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSetWings> _parser = new pb::MessageParser<CSSetWings>(() => new CSSetWings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSetWings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetWings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetWings(CSSetWings other) : this() {
      wingsPropId_ = other.wingsPropId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetWings Clone() {
      return new CSSetWings(this);
    }

    /// <summary>Field number for the "wings_prop_id" field.</summary>
    public const int WingsPropIdFieldNumber = 1;
    private int wingsPropId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingsPropId {
      get { return wingsPropId_; }
      set {
        wingsPropId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSetWings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSetWings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WingsPropId != other.WingsPropId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WingsPropId != 0) hash ^= WingsPropId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WingsPropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsPropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WingsPropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsPropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WingsPropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WingsPropId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSetWings other) {
      if (other == null) {
        return;
      }
      if (other.WingsPropId != 0) {
        WingsPropId = other.WingsPropId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WingsPropId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WingsPropId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSetWings : pb::IMessage<SCSetWings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSetWings> _parser = new pb::MessageParser<SCSetWings>(() => new SCSetWings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSetWings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetWings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetWings(SCSetWings other) : this() {
      chairIdx_ = other.chairIdx_;
      wingsPropId_ = other.wingsPropId_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetWings Clone() {
      return new SCSetWings(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "wings_prop_id" field.</summary>
    public const int WingsPropIdFieldNumber = 2;
    private int wingsPropId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingsPropId {
      get { return wingsPropId_; }
      set {
        wingsPropId_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSetWings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSetWings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (WingsPropId != other.WingsPropId) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (WingsPropId != 0) hash ^= WingsPropId.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (WingsPropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WingsPropId);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (WingsPropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WingsPropId);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (WingsPropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WingsPropId);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSetWings other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.WingsPropId != 0) {
        WingsPropId = other.WingsPropId;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            WingsPropId = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            WingsPropId = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserShoot : pb::IMessage<CSUserShoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserShoot> _parser = new pb::MessageParser<CSUserShoot>(() => new CSUserShoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserShoot(CSUserShoot other) : this() {
      angle_ = other.angle_;
      bulletId_ = other.bulletId_.Clone();
      ratio_ = other.ratio_;
      bulletType_ = other.bulletType_;
      isOffset_ = other.isOffset_;
      chairId_ = other.chairId_;
      extraMul_ = other.extraMul_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserShoot Clone() {
      return new CSUserShoot(this);
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 1;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "bullet_id" field.</summary>
    public const int BulletIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_bulletId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> bulletId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BulletId {
      get { return bulletId_; }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 3;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "bullet_type" field.</summary>
    public const int BulletTypeFieldNumber = 4;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "is_offset" field.</summary>
    public const int IsOffsetFieldNumber = 5;
    private bool isOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOffset {
      get { return isOffset_; }
      set {
        isOffset_ = value;
      }
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 6;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "extra_mul" field.</summary>
    public const int ExtraMulFieldNumber = 7;
    private int extraMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraMul {
      get { return extraMul_; }
      set {
        extraMul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Angle != other.Angle) return false;
      if(!bulletId_.Equals(other.bulletId_)) return false;
      if (Ratio != other.Ratio) return false;
      if (BulletType != other.BulletType) return false;
      if (IsOffset != other.IsOffset) return false;
      if (ChairId != other.ChairId) return false;
      if (ExtraMul != other.ExtraMul) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Angle != 0) hash ^= Angle.GetHashCode();
      hash ^= bulletId_.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (IsOffset != false) hash ^= IsOffset.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (ExtraMul != 0) hash ^= ExtraMul.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Angle != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Angle);
      }
      bulletId_.WriteTo(output, _repeated_bulletId_codec);
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (BulletType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BulletType);
      }
      if (IsOffset != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsOffset);
      }
      if (ChairId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChairId);
      }
      if (ExtraMul != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExtraMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Angle != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Angle);
      }
      bulletId_.WriteTo(ref output, _repeated_bulletId_codec);
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (BulletType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BulletType);
      }
      if (IsOffset != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsOffset);
      }
      if (ChairId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChairId);
      }
      if (ExtraMul != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExtraMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      size += bulletId_.CalculateSize(_repeated_bulletId_codec);
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (IsOffset != false) {
        size += 1 + 1;
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (ExtraMul != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraMul);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserShoot other) {
      if (other == null) {
        return;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      bulletId_.Add(other.bulletId_);
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.IsOffset != false) {
        IsOffset = other.IsOffset;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.ExtraMul != 0) {
        ExtraMul = other.ExtraMul;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Angle = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            bulletId_.AddEntriesFrom(input, _repeated_bulletId_codec);
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            BulletType = input.ReadInt32();
            break;
          }
          case 40: {
            IsOffset = input.ReadBool();
            break;
          }
          case 48: {
            ChairId = input.ReadInt32();
            break;
          }
          case 56: {
            ExtraMul = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Angle = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            bulletId_.AddEntriesFrom(ref input, _repeated_bulletId_codec);
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            BulletType = input.ReadInt32();
            break;
          }
          case 40: {
            IsOffset = input.ReadBool();
            break;
          }
          case 48: {
            ChairId = input.ReadInt32();
            break;
          }
          case 56: {
            ExtraMul = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserShoot : pb::IMessage<SCUserShoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserShoot> _parser = new pb::MessageParser<SCUserShoot>(() => new SCUserShoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserShoot(SCUserShoot other) : this() {
      chairIdx_ = other.chairIdx_;
      angle_ = other.angle_;
      score_ = other.score_;
      bulletType_ = other.bulletType_;
      bulletOffset_ = other.bulletOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserShoot Clone() {
      return new SCUserShoot(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 2;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "bullet_type" field.</summary>
    public const int BulletTypeFieldNumber = 4;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "bullet_offset" field.</summary>
    public const int BulletOffsetFieldNumber = 5;
    private bool bulletOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BulletOffset {
      get { return bulletOffset_; }
      set {
        bulletOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Angle != other.Angle) return false;
      if (Score != other.Score) return false;
      if (BulletType != other.BulletType) return false;
      if (BulletOffset != other.BulletOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (BulletOffset != false) hash ^= BulletOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Angle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Angle);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (BulletType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BulletType);
      }
      if (BulletOffset != false) {
        output.WriteRawTag(40);
        output.WriteBool(BulletOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Angle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Angle);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (BulletType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BulletType);
      }
      if (BulletOffset != false) {
        output.WriteRawTag(40);
        output.WriteBool(BulletOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (BulletOffset != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserShoot other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.BulletOffset != false) {
        BulletOffset = other.BulletOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Angle = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            BulletType = input.ReadInt32();
            break;
          }
          case 40: {
            BulletOffset = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Angle = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            BulletType = input.ReadInt32();
            break;
          }
          case 40: {
            BulletOffset = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSHitFish : pb::IMessage<CSHitFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSHitFish> _parser = new pb::MessageParser<CSHitFish>(() => new CSHitFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHitFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHitFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHitFish(CSHitFish other) : this() {
      fishUid_ = other.fishUid_;
      bulletId_ = other.bulletId_;
      screenFishes_ = other.screenFishes_.Clone();
      chairId_ = other.chairId_;
      ratio_ = other.ratio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHitFish Clone() {
      return new CSHitFish(this);
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 1;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "bullet_id" field.</summary>
    public const int BulletIdFieldNumber = 2;
    private int bulletId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletId {
      get { return bulletId_; }
      set {
        bulletId_ = value;
      }
    }

    /// <summary>Field number for the "screen_fishes" field.</summary>
    public const int ScreenFishesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_screenFishes_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> screenFishes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ScreenFishes {
      get { return screenFishes_; }
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 4;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 5;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSHitFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSHitFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishUid != other.FishUid) return false;
      if (BulletId != other.BulletId) return false;
      if(!screenFishes_.Equals(other.screenFishes_)) return false;
      if (ChairId != other.ChairId) return false;
      if (Ratio != other.Ratio) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (BulletId != 0) hash ^= BulletId.GetHashCode();
      hash ^= screenFishes_.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (BulletId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletId);
      }
      screenFishes_.WriteTo(output, _repeated_screenFishes_codec);
      if (ChairId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChairId);
      }
      if (Ratio != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Ratio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (BulletId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletId);
      }
      screenFishes_.WriteTo(ref output, _repeated_screenFishes_codec);
      if (ChairId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChairId);
      }
      if (Ratio != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Ratio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (BulletId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletId);
      }
      size += screenFishes_.CalculateSize(_repeated_screenFishes_codec);
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSHitFish other) {
      if (other == null) {
        return;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.BulletId != 0) {
        BulletId = other.BulletId;
      }
      screenFishes_.Add(other.screenFishes_);
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
          case 16: {
            BulletId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            screenFishes_.AddEntriesFrom(input, _repeated_screenFishes_codec);
            break;
          }
          case 32: {
            ChairId = input.ReadInt32();
            break;
          }
          case 40: {
            Ratio = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
          case 16: {
            BulletId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            screenFishes_.AddEntriesFrom(ref input, _repeated_screenFishes_codec);
            break;
          }
          case 32: {
            ChairId = input.ReadInt32();
            break;
          }
          case 40: {
            Ratio = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MultiInfo : pb::IMessage<MultiInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiInfo> _parser = new pb::MessageParser<MultiInfo>(() => new MultiInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiInfo(MultiInfo other) : this() {
      btType_ = other.btType_;
      btMulti_ = other.btMulti_;
      btBase_ = other.btBase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiInfo Clone() {
      return new MultiInfo(this);
    }

    /// <summary>Field number for the "bt_type" field.</summary>
    public const int BtTypeFieldNumber = 1;
    private int btType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtType {
      get { return btType_; }
      set {
        btType_ = value;
      }
    }

    /// <summary>Field number for the "bt_multi" field.</summary>
    public const int BtMultiFieldNumber = 2;
    private int btMulti_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtMulti {
      get { return btMulti_; }
      set {
        btMulti_ = value;
      }
    }

    /// <summary>Field number for the "bt_base" field.</summary>
    public const int BtBaseFieldNumber = 3;
    private int btBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtBase {
      get { return btBase_; }
      set {
        btBase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BtType != other.BtType) return false;
      if (BtMulti != other.BtMulti) return false;
      if (BtBase != other.BtBase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BtType != 0) hash ^= BtType.GetHashCode();
      if (BtMulti != 0) hash ^= BtMulti.GetHashCode();
      if (BtBase != 0) hash ^= BtBase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BtType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BtType);
      }
      if (BtMulti != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BtMulti);
      }
      if (BtBase != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BtBase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BtType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BtType);
      }
      if (BtMulti != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BtMulti);
      }
      if (BtBase != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BtBase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BtType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtType);
      }
      if (BtMulti != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtMulti);
      }
      if (BtBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtBase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiInfo other) {
      if (other == null) {
        return;
      }
      if (other.BtType != 0) {
        BtType = other.BtType;
      }
      if (other.BtMulti != 0) {
        BtMulti = other.BtMulti;
      }
      if (other.BtBase != 0) {
        BtBase = other.BtBase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BtType = input.ReadInt32();
            break;
          }
          case 16: {
            BtMulti = input.ReadInt32();
            break;
          }
          case 24: {
            BtBase = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BtType = input.ReadInt32();
            break;
          }
          case 16: {
            BtMulti = input.ReadInt32();
            break;
          }
          case 24: {
            BtBase = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCHitFish : pb::IMessage<SCHitFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCHitFish> _parser = new pb::MessageParser<SCHitFish>(() => new SCHitFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCHitFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHitFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHitFish(SCHitFish other) : this() {
      chairIdx_ = other.chairIdx_;
      fishUid_ = other.fishUid_;
      earn_ = other.earn_;
      userScore_ = other.userScore_;
      fishValue_ = other.fishValue_;
      multiple_ = other.multiple_;
      hitBulletType_ = other.hitBulletType_;
      magicCubeMulti_ = other.magicCubeMulti_;
      multiList_ = other.multiList_.Clone();
      originUid_ = other.originUid_;
      dropProps_ = other.dropProps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHitFish Clone() {
      return new SCHitFish(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 2;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "earn" field.</summary>
    public const int EarnFieldNumber = 3;
    private int earn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Earn {
      get { return earn_; }
      set {
        earn_ = value;
      }
    }

    /// <summary>Field number for the "user_score" field.</summary>
    public const int UserScoreFieldNumber = 4;
    private long userScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserScore {
      get { return userScore_; }
      set {
        userScore_ = value;
      }
    }

    /// <summary>Field number for the "fish_value" field.</summary>
    public const int FishValueFieldNumber = 5;
    private int fishValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishValue {
      get { return fishValue_; }
      set {
        fishValue_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 6;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "hit_bullet_type" field.</summary>
    public const int HitBulletTypeFieldNumber = 7;
    private int hitBulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitBulletType {
      get { return hitBulletType_; }
      set {
        hitBulletType_ = value;
      }
    }

    /// <summary>Field number for the "magic_cube_multi" field.</summary>
    public const int MagicCubeMultiFieldNumber = 8;
    private int magicCubeMulti_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicCubeMulti {
      get { return magicCubeMulti_; }
      set {
        magicCubeMulti_ = value;
      }
    }

    /// <summary>Field number for the "multi_list" field.</summary>
    public const int MultiListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::F4BY.MultiInfo> _repeated_multiList_codec
        = pb::FieldCodec.ForMessage(74, global::F4BY.MultiInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.MultiInfo> multiList_ = new pbc::RepeatedField<global::F4BY.MultiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.MultiInfo> MultiList {
      get { return multiList_; }
    }

    /// <summary>Field number for the "origin_uid" field.</summary>
    public const int OriginUidFieldNumber = 10;
    private int originUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUid {
      get { return originUid_; }
      set {
        originUid_ = value;
      }
    }

    /// <summary>Field number for the "drop_props" field.</summary>
    public const int DropPropsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::F4BY.Object> _repeated_dropProps_codec
        = pb::FieldCodec.ForMessage(90, global::F4BY.Object.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Object> dropProps_ = new pbc::RepeatedField<global::F4BY.Object>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Object> DropProps {
      get { return dropProps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCHitFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCHitFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (FishUid != other.FishUid) return false;
      if (Earn != other.Earn) return false;
      if (UserScore != other.UserScore) return false;
      if (FishValue != other.FishValue) return false;
      if (Multiple != other.Multiple) return false;
      if (HitBulletType != other.HitBulletType) return false;
      if (MagicCubeMulti != other.MagicCubeMulti) return false;
      if(!multiList_.Equals(other.multiList_)) return false;
      if (OriginUid != other.OriginUid) return false;
      if(!dropProps_.Equals(other.dropProps_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (Earn != 0) hash ^= Earn.GetHashCode();
      if (UserScore != 0L) hash ^= UserScore.GetHashCode();
      if (FishValue != 0) hash ^= FishValue.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (HitBulletType != 0) hash ^= HitBulletType.GetHashCode();
      if (MagicCubeMulti != 0) hash ^= MagicCubeMulti.GetHashCode();
      hash ^= multiList_.GetHashCode();
      if (OriginUid != 0) hash ^= OriginUid.GetHashCode();
      hash ^= dropProps_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (Earn != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Earn);
      }
      if (UserScore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserScore);
      }
      if (FishValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FishValue);
      }
      if (Multiple != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Multiple);
      }
      if (HitBulletType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HitBulletType);
      }
      if (MagicCubeMulti != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MagicCubeMulti);
      }
      multiList_.WriteTo(output, _repeated_multiList_codec);
      if (OriginUid != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OriginUid);
      }
      dropProps_.WriteTo(output, _repeated_dropProps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (Earn != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Earn);
      }
      if (UserScore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserScore);
      }
      if (FishValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FishValue);
      }
      if (Multiple != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Multiple);
      }
      if (HitBulletType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HitBulletType);
      }
      if (MagicCubeMulti != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MagicCubeMulti);
      }
      multiList_.WriteTo(ref output, _repeated_multiList_codec);
      if (OriginUid != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OriginUid);
      }
      dropProps_.WriteTo(ref output, _repeated_dropProps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (Earn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Earn);
      }
      if (UserScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserScore);
      }
      if (FishValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishValue);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (HitBulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitBulletType);
      }
      if (MagicCubeMulti != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicCubeMulti);
      }
      size += multiList_.CalculateSize(_repeated_multiList_codec);
      if (OriginUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUid);
      }
      size += dropProps_.CalculateSize(_repeated_dropProps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCHitFish other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.Earn != 0) {
        Earn = other.Earn;
      }
      if (other.UserScore != 0L) {
        UserScore = other.UserScore;
      }
      if (other.FishValue != 0) {
        FishValue = other.FishValue;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      if (other.HitBulletType != 0) {
        HitBulletType = other.HitBulletType;
      }
      if (other.MagicCubeMulti != 0) {
        MagicCubeMulti = other.MagicCubeMulti;
      }
      multiList_.Add(other.multiList_);
      if (other.OriginUid != 0) {
        OriginUid = other.OriginUid;
      }
      dropProps_.Add(other.dropProps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            Earn = input.ReadInt32();
            break;
          }
          case 32: {
            UserScore = input.ReadInt64();
            break;
          }
          case 40: {
            FishValue = input.ReadInt32();
            break;
          }
          case 48: {
            Multiple = input.ReadInt32();
            break;
          }
          case 56: {
            HitBulletType = input.ReadInt32();
            break;
          }
          case 64: {
            MagicCubeMulti = input.ReadInt32();
            break;
          }
          case 74: {
            multiList_.AddEntriesFrom(input, _repeated_multiList_codec);
            break;
          }
          case 80: {
            OriginUid = input.ReadInt32();
            break;
          }
          case 90: {
            dropProps_.AddEntriesFrom(input, _repeated_dropProps_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            Earn = input.ReadInt32();
            break;
          }
          case 32: {
            UserScore = input.ReadInt64();
            break;
          }
          case 40: {
            FishValue = input.ReadInt32();
            break;
          }
          case 48: {
            Multiple = input.ReadInt32();
            break;
          }
          case 56: {
            HitBulletType = input.ReadInt32();
            break;
          }
          case 64: {
            MagicCubeMulti = input.ReadInt32();
            break;
          }
          case 74: {
            multiList_.AddEntriesFrom(ref input, _repeated_multiList_codec);
            break;
          }
          case 80: {
            OriginUid = input.ReadInt32();
            break;
          }
          case 90: {
            dropProps_.AddEntriesFrom(ref input, _repeated_dropProps_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCHitSpecialFish : pb::IMessage<SCHitSpecialFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCHitSpecialFish> _parser = new pb::MessageParser<SCHitSpecialFish>(() => new SCHitSpecialFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCHitSpecialFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHitSpecialFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHitSpecialFish(SCHitSpecialFish other) : this() {
      chairIdx_ = other.chairIdx_;
      fishUid_ = other.fishUid_;
      earn_ = other.earn_;
      fishValue_ = other.fishValue_;
      userScore_ = other.userScore_;
      death_ = other.death_;
      growStage_ = other.growStage_;
      multiple_ = other.multiple_;
      shockFishes_ = other.shockFishes_.Clone();
      dropProps_ = other.dropProps_.Clone();
      wheel_ = other.wheel_ != null ? other.wheel_.Clone() : null;
      hitBulletType_ = other.hitBulletType_;
      propNo_ = other.propNo_;
      magicCubeMulti_ = other.magicCubeMulti_;
      multiList_ = other.multiList_.Clone();
      originUid_ = other.originUid_;
      dragonScore_ = other.dragonScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHitSpecialFish Clone() {
      return new SCHitSpecialFish(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 2;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "earn" field.</summary>
    public const int EarnFieldNumber = 3;
    private int earn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Earn {
      get { return earn_; }
      set {
        earn_ = value;
      }
    }

    /// <summary>Field number for the "fish_value" field.</summary>
    public const int FishValueFieldNumber = 4;
    private int fishValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishValue {
      get { return fishValue_; }
      set {
        fishValue_ = value;
      }
    }

    /// <summary>Field number for the "user_score" field.</summary>
    public const int UserScoreFieldNumber = 5;
    private long userScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserScore {
      get { return userScore_; }
      set {
        userScore_ = value;
      }
    }

    /// <summary>Field number for the "death" field.</summary>
    public const int DeathFieldNumber = 6;
    private bool death_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Death {
      get { return death_; }
      set {
        death_ = value;
      }
    }

    /// <summary>Field number for the "grow_stage" field.</summary>
    public const int GrowStageFieldNumber = 7;
    private int growStage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GrowStage {
      get { return growStage_; }
      set {
        growStage_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 8;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "shock_fishes" field.</summary>
    public const int ShockFishesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::F4BY.Object> _repeated_shockFishes_codec
        = pb::FieldCodec.ForMessage(74, global::F4BY.Object.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Object> shockFishes_ = new pbc::RepeatedField<global::F4BY.Object>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Object> ShockFishes {
      get { return shockFishes_; }
    }

    /// <summary>Field number for the "drop_props" field.</summary>
    public const int DropPropsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::F4BY.Object> _repeated_dropProps_codec
        = pb::FieldCodec.ForMessage(82, global::F4BY.Object.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Object> dropProps_ = new pbc::RepeatedField<global::F4BY.Object>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Object> DropProps {
      get { return dropProps_; }
    }

    /// <summary>Field number for the "wheel" field.</summary>
    public const int WheelFieldNumber = 11;
    private global::F4BY.WheelObject wheel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.WheelObject Wheel {
      get { return wheel_; }
      set {
        wheel_ = value;
      }
    }

    /// <summary>Field number for the "hit_bullet_type" field.</summary>
    public const int HitBulletTypeFieldNumber = 12;
    private int hitBulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitBulletType {
      get { return hitBulletType_; }
      set {
        hitBulletType_ = value;
      }
    }

    /// <summary>Field number for the "prop_no" field.</summary>
    public const int PropNoFieldNumber = 13;
    private int propNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropNo {
      get { return propNo_; }
      set {
        propNo_ = value;
      }
    }

    /// <summary>Field number for the "magic_cube_multi" field.</summary>
    public const int MagicCubeMultiFieldNumber = 14;
    private int magicCubeMulti_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicCubeMulti {
      get { return magicCubeMulti_; }
      set {
        magicCubeMulti_ = value;
      }
    }

    /// <summary>Field number for the "multi_list" field.</summary>
    public const int MultiListFieldNumber = 15;
    private static readonly pb::FieldCodec<global::F4BY.MultiInfo> _repeated_multiList_codec
        = pb::FieldCodec.ForMessage(122, global::F4BY.MultiInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.MultiInfo> multiList_ = new pbc::RepeatedField<global::F4BY.MultiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.MultiInfo> MultiList {
      get { return multiList_; }
    }

    /// <summary>Field number for the "origin_uid" field.</summary>
    public const int OriginUidFieldNumber = 16;
    private int originUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUid {
      get { return originUid_; }
      set {
        originUid_ = value;
      }
    }

    /// <summary>Field number for the "dragon_score" field.</summary>
    public const int DragonScoreFieldNumber = 17;
    private int dragonScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DragonScore {
      get { return dragonScore_; }
      set {
        dragonScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCHitSpecialFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCHitSpecialFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (FishUid != other.FishUid) return false;
      if (Earn != other.Earn) return false;
      if (FishValue != other.FishValue) return false;
      if (UserScore != other.UserScore) return false;
      if (Death != other.Death) return false;
      if (GrowStage != other.GrowStage) return false;
      if (Multiple != other.Multiple) return false;
      if(!shockFishes_.Equals(other.shockFishes_)) return false;
      if(!dropProps_.Equals(other.dropProps_)) return false;
      if (!object.Equals(Wheel, other.Wheel)) return false;
      if (HitBulletType != other.HitBulletType) return false;
      if (PropNo != other.PropNo) return false;
      if (MagicCubeMulti != other.MagicCubeMulti) return false;
      if(!multiList_.Equals(other.multiList_)) return false;
      if (OriginUid != other.OriginUid) return false;
      if (DragonScore != other.DragonScore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (Earn != 0) hash ^= Earn.GetHashCode();
      if (FishValue != 0) hash ^= FishValue.GetHashCode();
      if (UserScore != 0L) hash ^= UserScore.GetHashCode();
      if (Death != false) hash ^= Death.GetHashCode();
      if (GrowStage != 0) hash ^= GrowStage.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      hash ^= shockFishes_.GetHashCode();
      hash ^= dropProps_.GetHashCode();
      if (wheel_ != null) hash ^= Wheel.GetHashCode();
      if (HitBulletType != 0) hash ^= HitBulletType.GetHashCode();
      if (PropNo != 0) hash ^= PropNo.GetHashCode();
      if (MagicCubeMulti != 0) hash ^= MagicCubeMulti.GetHashCode();
      hash ^= multiList_.GetHashCode();
      if (OriginUid != 0) hash ^= OriginUid.GetHashCode();
      if (DragonScore != 0) hash ^= DragonScore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (Earn != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Earn);
      }
      if (FishValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FishValue);
      }
      if (UserScore != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(UserScore);
      }
      if (Death != false) {
        output.WriteRawTag(48);
        output.WriteBool(Death);
      }
      if (GrowStage != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GrowStage);
      }
      if (Multiple != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Multiple);
      }
      shockFishes_.WriteTo(output, _repeated_shockFishes_codec);
      dropProps_.WriteTo(output, _repeated_dropProps_codec);
      if (wheel_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Wheel);
      }
      if (HitBulletType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(HitBulletType);
      }
      if (PropNo != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PropNo);
      }
      if (MagicCubeMulti != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MagicCubeMulti);
      }
      multiList_.WriteTo(output, _repeated_multiList_codec);
      if (OriginUid != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(OriginUid);
      }
      if (DragonScore != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DragonScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (Earn != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Earn);
      }
      if (FishValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FishValue);
      }
      if (UserScore != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(UserScore);
      }
      if (Death != false) {
        output.WriteRawTag(48);
        output.WriteBool(Death);
      }
      if (GrowStage != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GrowStage);
      }
      if (Multiple != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Multiple);
      }
      shockFishes_.WriteTo(ref output, _repeated_shockFishes_codec);
      dropProps_.WriteTo(ref output, _repeated_dropProps_codec);
      if (wheel_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Wheel);
      }
      if (HitBulletType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(HitBulletType);
      }
      if (PropNo != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(PropNo);
      }
      if (MagicCubeMulti != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MagicCubeMulti);
      }
      multiList_.WriteTo(ref output, _repeated_multiList_codec);
      if (OriginUid != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(OriginUid);
      }
      if (DragonScore != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DragonScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (Earn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Earn);
      }
      if (FishValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishValue);
      }
      if (UserScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserScore);
      }
      if (Death != false) {
        size += 1 + 1;
      }
      if (GrowStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GrowStage);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      size += shockFishes_.CalculateSize(_repeated_shockFishes_codec);
      size += dropProps_.CalculateSize(_repeated_dropProps_codec);
      if (wheel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wheel);
      }
      if (HitBulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitBulletType);
      }
      if (PropNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropNo);
      }
      if (MagicCubeMulti != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicCubeMulti);
      }
      size += multiList_.CalculateSize(_repeated_multiList_codec);
      if (OriginUid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OriginUid);
      }
      if (DragonScore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DragonScore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCHitSpecialFish other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.Earn != 0) {
        Earn = other.Earn;
      }
      if (other.FishValue != 0) {
        FishValue = other.FishValue;
      }
      if (other.UserScore != 0L) {
        UserScore = other.UserScore;
      }
      if (other.Death != false) {
        Death = other.Death;
      }
      if (other.GrowStage != 0) {
        GrowStage = other.GrowStage;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      shockFishes_.Add(other.shockFishes_);
      dropProps_.Add(other.dropProps_);
      if (other.wheel_ != null) {
        if (wheel_ == null) {
          Wheel = new global::F4BY.WheelObject();
        }
        Wheel.MergeFrom(other.Wheel);
      }
      if (other.HitBulletType != 0) {
        HitBulletType = other.HitBulletType;
      }
      if (other.PropNo != 0) {
        PropNo = other.PropNo;
      }
      if (other.MagicCubeMulti != 0) {
        MagicCubeMulti = other.MagicCubeMulti;
      }
      multiList_.Add(other.multiList_);
      if (other.OriginUid != 0) {
        OriginUid = other.OriginUid;
      }
      if (other.DragonScore != 0) {
        DragonScore = other.DragonScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            Earn = input.ReadInt32();
            break;
          }
          case 32: {
            FishValue = input.ReadInt32();
            break;
          }
          case 40: {
            UserScore = input.ReadInt64();
            break;
          }
          case 48: {
            Death = input.ReadBool();
            break;
          }
          case 56: {
            GrowStage = input.ReadInt32();
            break;
          }
          case 64: {
            Multiple = input.ReadInt32();
            break;
          }
          case 74: {
            shockFishes_.AddEntriesFrom(input, _repeated_shockFishes_codec);
            break;
          }
          case 82: {
            dropProps_.AddEntriesFrom(input, _repeated_dropProps_codec);
            break;
          }
          case 90: {
            if (wheel_ == null) {
              Wheel = new global::F4BY.WheelObject();
            }
            input.ReadMessage(Wheel);
            break;
          }
          case 96: {
            HitBulletType = input.ReadInt32();
            break;
          }
          case 104: {
            PropNo = input.ReadInt32();
            break;
          }
          case 112: {
            MagicCubeMulti = input.ReadInt32();
            break;
          }
          case 122: {
            multiList_.AddEntriesFrom(input, _repeated_multiList_codec);
            break;
          }
          case 128: {
            OriginUid = input.ReadInt32();
            break;
          }
          case 136: {
            DragonScore = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            Earn = input.ReadInt32();
            break;
          }
          case 32: {
            FishValue = input.ReadInt32();
            break;
          }
          case 40: {
            UserScore = input.ReadInt64();
            break;
          }
          case 48: {
            Death = input.ReadBool();
            break;
          }
          case 56: {
            GrowStage = input.ReadInt32();
            break;
          }
          case 64: {
            Multiple = input.ReadInt32();
            break;
          }
          case 74: {
            shockFishes_.AddEntriesFrom(ref input, _repeated_shockFishes_codec);
            break;
          }
          case 82: {
            dropProps_.AddEntriesFrom(ref input, _repeated_dropProps_codec);
            break;
          }
          case 90: {
            if (wheel_ == null) {
              Wheel = new global::F4BY.WheelObject();
            }
            input.ReadMessage(Wheel);
            break;
          }
          case 96: {
            HitBulletType = input.ReadInt32();
            break;
          }
          case 104: {
            PropNo = input.ReadInt32();
            break;
          }
          case 112: {
            MagicCubeMulti = input.ReadInt32();
            break;
          }
          case 122: {
            multiList_.AddEntriesFrom(ref input, _repeated_multiList_codec);
            break;
          }
          case 128: {
            OriginUid = input.ReadInt32();
            break;
          }
          case 136: {
            DragonScore = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SyncPropInfoX : pb::IMessage<SyncPropInfoX>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SyncPropInfoX> _parser = new pb::MessageParser<SyncPropInfoX>(() => new SyncPropInfoX());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncPropInfoX> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPropInfoX() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPropInfoX(SyncPropInfoX other) : this() {
      prop_ = other.prop_ != null ? other.prop_.Clone() : null;
      x_ = other.x_;
      y_ = other.y_;
      angle_ = other.angle_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPropInfoX Clone() {
      return new SyncPropInfoX(this);
    }

    /// <summary>Field number for the "prop" field.</summary>
    public const int PropFieldNumber = 1;
    private global::F4BY.Object prop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Object Prop {
      get { return prop_; }
      set {
        prop_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 4;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncPropInfoX);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncPropInfoX other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Prop, other.Prop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (prop_ != null) hash ^= Prop.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (prop_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prop);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Angle != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Angle);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (prop_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prop);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Angle != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Angle);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (prop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prop);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncPropInfoX other) {
      if (other == null) {
        return;
      }
      if (other.prop_ != null) {
        if (prop_ == null) {
          Prop = new global::F4BY.Object();
        }
        Prop.MergeFrom(other.Prop);
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (prop_ == null) {
              Prop = new global::F4BY.Object();
            }
            input.ReadMessage(Prop);
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Angle = input.ReadFloat();
            break;
          }
          case 40: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (prop_ == null) {
              Prop = new global::F4BY.Object();
            }
            input.ReadMessage(Prop);
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Angle = input.ReadFloat();
            break;
          }
          case 40: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserSyncPropInfo : pb::IMessage<UserSyncPropInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserSyncPropInfo> _parser = new pb::MessageParser<UserSyncPropInfo>(() => new UserSyncPropInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSyncPropInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSyncPropInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSyncPropInfo(UserSyncPropInfo other) : this() {
      chairIdx_ = other.chairIdx_;
      props_ = other.props_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSyncPropInfo Clone() {
      return new UserSyncPropInfo(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.SyncPropInfoX> _repeated_props_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.SyncPropInfoX.Parser);
    private readonly pbc::RepeatedField<global::F4BY.SyncPropInfoX> props_ = new pbc::RepeatedField<global::F4BY.SyncPropInfoX>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.SyncPropInfoX> Props {
      get { return props_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSyncPropInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSyncPropInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if(!props_.Equals(other.props_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      hash ^= props_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      props_.WriteTo(output, _repeated_props_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      props_.WriteTo(ref output, _repeated_props_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      size += props_.CalculateSize(_repeated_props_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSyncPropInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      props_.Add(other.props_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 18: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 18: {
            props_.AddEntriesFrom(ref input, _repeated_props_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSyncPropInfo : pb::IMessage<CSSyncPropInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSyncPropInfo> _parser = new pb::MessageParser<CSSyncPropInfo>(() => new CSSyncPropInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncPropInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncPropInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncPropInfo(CSSyncPropInfo other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      chairIdx_ = other.chairIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncPropInfo Clone() {
      return new CSSyncPropInfo(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::F4BY.SyncPropInfoX info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.SyncPropInfoX Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 2;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncPropInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncPropInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if (ChairIdx != other.ChairIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncPropInfo other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::F4BY.SyncPropInfoX();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::F4BY.SyncPropInfoX();
            }
            input.ReadMessage(Info);
            break;
          }
          case 16: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::F4BY.SyncPropInfoX();
            }
            input.ReadMessage(Info);
            break;
          }
          case 16: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncPropInfo : pb::IMessage<SCSyncPropInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncPropInfo> _parser = new pb::MessageParser<SCSyncPropInfo>(() => new SCSyncPropInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncPropInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncPropInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncPropInfo(SCSyncPropInfo other) : this() {
      users_ = other.users_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncPropInfo Clone() {
      return new SCSyncPropInfo(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.UserSyncPropInfo> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.UserSyncPropInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.UserSyncPropInfo> users_ = new pbc::RepeatedField<global::F4BY.UserSyncPropInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.UserSyncPropInfo> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncPropInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncPropInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      users_.WriteTo(output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      users_.WriteTo(ref output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncPropInfo other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            users_.AddEntriesFrom(ref input, _repeated_users_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSyncMoney : pb::IMessage<CSSyncMoney>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSyncMoney> _parser = new pb::MessageParser<CSSyncMoney>(() => new CSSyncMoney());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncMoney> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncMoney() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncMoney(CSSyncMoney other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncMoney Clone() {
      return new CSSyncMoney(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncMoney);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncMoney other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncMoney other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncMoney : pb::IMessage<SCSyncMoney>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncMoney> _parser = new pb::MessageParser<SCSyncMoney>(() => new SCSyncMoney());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncMoney> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncMoney() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncMoney(SCSyncMoney other) : this() {
      chairIdx_ = other.chairIdx_;
      score_ = other.score_;
      type_ = other.type_;
      delta_ = other.delta_;
      ticket_ = other.ticket_;
      vip_ = other.vip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncMoney Clone() {
      return new SCSyncMoney(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 4;
    private int delta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 5;
    private int ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 6;
    private int vip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncMoney);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncMoney other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Score != other.Score) return false;
      if (Type != other.Type) return false;
      if (Delta != other.Delta) return false;
      if (Ticket != other.Ticket) return false;
      if (Vip != other.Vip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Delta != 0) hash ^= Delta.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      if (Vip != 0) hash ^= Vip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Delta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Delta);
      }
      if (Ticket != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Ticket);
      }
      if (Vip != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Vip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Delta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Delta);
      }
      if (Ticket != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Ticket);
      }
      if (Vip != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Vip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Delta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delta);
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (Vip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncMoney other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Delta != 0) {
        Delta = other.Delta;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      if (other.Vip != 0) {
        Vip = other.Vip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Delta = input.ReadInt32();
            break;
          }
          case 40: {
            Ticket = input.ReadInt32();
            break;
          }
          case 48: {
            Vip = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Delta = input.ReadInt32();
            break;
          }
          case 40: {
            Ticket = input.ReadInt32();
            break;
          }
          case 48: {
            Vip = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FishTrace : pb::IMessage<FishTrace>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FishTrace> _parser = new pb::MessageParser<FishTrace>(() => new FishTrace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FishTrace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishTrace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishTrace(FishTrace other) : this() {
      fishUid_ = other.fishUid_;
      fishType_ = other.fishType_;
      fishLayer_ = other.fishLayer_;
      fishStage_ = other.fishStage_;
      isAced_ = other.isAced_;
      aliveTime_ = other.aliveTime_;
      beadsList_ = other.beadsList_.Clone();
      fishTorpedoId_ = other.fishTorpedoId_;
      fishRoad_ = other.fishRoad_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FishTrace Clone() {
      return new FishTrace(this);
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 1;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "fish_type" field.</summary>
    public const int FishTypeFieldNumber = 2;
    private int fishType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishType {
      get { return fishType_; }
      set {
        fishType_ = value;
      }
    }

    /// <summary>Field number for the "fish_layer" field.</summary>
    public const int FishLayerFieldNumber = 3;
    private int fishLayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishLayer {
      get { return fishLayer_; }
      set {
        fishLayer_ = value;
      }
    }

    /// <summary>Field number for the "fish_stage" field.</summary>
    public const int FishStageFieldNumber = 4;
    private int fishStage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishStage {
      get { return fishStage_; }
      set {
        fishStage_ = value;
      }
    }

    /// <summary>Field number for the "is_aced" field.</summary>
    public const int IsAcedFieldNumber = 5;
    private bool isAced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAced {
      get { return isAced_; }
      set {
        isAced_ = value;
      }
    }

    /// <summary>Field number for the "alive_time" field.</summary>
    public const int AliveTimeFieldNumber = 6;
    private int aliveTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AliveTime {
      get { return aliveTime_; }
      set {
        aliveTime_ = value;
      }
    }

    /// <summary>Field number for the "beads_list" field.</summary>
    public const int BeadsListFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_beadsList_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> beadsList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BeadsList {
      get { return beadsList_; }
    }

    /// <summary>Field number for the "fish_torpedoId" field.</summary>
    public const int FishTorpedoIdFieldNumber = 8;
    private int fishTorpedoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishTorpedoId {
      get { return fishTorpedoId_; }
      set {
        fishTorpedoId_ = value;
      }
    }

    /// <summary>Field number for the "fish_road" field.</summary>
    public const int FishRoadFieldNumber = 9;
    private int fishRoad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishRoad {
      get { return fishRoad_; }
      set {
        fishRoad_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FishTrace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FishTrace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishUid != other.FishUid) return false;
      if (FishType != other.FishType) return false;
      if (FishLayer != other.FishLayer) return false;
      if (FishStage != other.FishStage) return false;
      if (IsAced != other.IsAced) return false;
      if (AliveTime != other.AliveTime) return false;
      if(!beadsList_.Equals(other.beadsList_)) return false;
      if (FishTorpedoId != other.FishTorpedoId) return false;
      if (FishRoad != other.FishRoad) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (FishType != 0) hash ^= FishType.GetHashCode();
      if (FishLayer != 0) hash ^= FishLayer.GetHashCode();
      if (FishStage != 0) hash ^= FishStage.GetHashCode();
      if (IsAced != false) hash ^= IsAced.GetHashCode();
      if (AliveTime != 0) hash ^= AliveTime.GetHashCode();
      hash ^= beadsList_.GetHashCode();
      if (FishTorpedoId != 0) hash ^= FishTorpedoId.GetHashCode();
      if (FishRoad != 0) hash ^= FishRoad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (FishType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishType);
      }
      if (FishLayer != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishLayer);
      }
      if (FishStage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FishStage);
      }
      if (IsAced != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAced);
      }
      if (AliveTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AliveTime);
      }
      beadsList_.WriteTo(output, _repeated_beadsList_codec);
      if (FishTorpedoId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FishTorpedoId);
      }
      if (FishRoad != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FishRoad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (FishType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishType);
      }
      if (FishLayer != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishLayer);
      }
      if (FishStage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FishStage);
      }
      if (IsAced != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAced);
      }
      if (AliveTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AliveTime);
      }
      beadsList_.WriteTo(ref output, _repeated_beadsList_codec);
      if (FishTorpedoId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FishTorpedoId);
      }
      if (FishRoad != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FishRoad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (FishType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishType);
      }
      if (FishLayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishLayer);
      }
      if (FishStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishStage);
      }
      if (IsAced != false) {
        size += 1 + 1;
      }
      if (AliveTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AliveTime);
      }
      size += beadsList_.CalculateSize(_repeated_beadsList_codec);
      if (FishTorpedoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishTorpedoId);
      }
      if (FishRoad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishRoad);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FishTrace other) {
      if (other == null) {
        return;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.FishType != 0) {
        FishType = other.FishType;
      }
      if (other.FishLayer != 0) {
        FishLayer = other.FishLayer;
      }
      if (other.FishStage != 0) {
        FishStage = other.FishStage;
      }
      if (other.IsAced != false) {
        IsAced = other.IsAced;
      }
      if (other.AliveTime != 0) {
        AliveTime = other.AliveTime;
      }
      beadsList_.Add(other.beadsList_);
      if (other.FishTorpedoId != 0) {
        FishTorpedoId = other.FishTorpedoId;
      }
      if (other.FishRoad != 0) {
        FishRoad = other.FishRoad;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
          case 16: {
            FishType = input.ReadInt32();
            break;
          }
          case 24: {
            FishLayer = input.ReadInt32();
            break;
          }
          case 32: {
            FishStage = input.ReadInt32();
            break;
          }
          case 40: {
            IsAced = input.ReadBool();
            break;
          }
          case 48: {
            AliveTime = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            beadsList_.AddEntriesFrom(input, _repeated_beadsList_codec);
            break;
          }
          case 64: {
            FishTorpedoId = input.ReadInt32();
            break;
          }
          case 72: {
            FishRoad = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
          case 16: {
            FishType = input.ReadInt32();
            break;
          }
          case 24: {
            FishLayer = input.ReadInt32();
            break;
          }
          case 32: {
            FishStage = input.ReadInt32();
            break;
          }
          case 40: {
            IsAced = input.ReadBool();
            break;
          }
          case 48: {
            AliveTime = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            beadsList_.AddEntriesFrom(ref input, _repeated_beadsList_codec);
            break;
          }
          case 64: {
            FishTorpedoId = input.ReadInt32();
            break;
          }
          case 72: {
            FishRoad = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCFishTracesList : pb::IMessage<SCFishTracesList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCFishTracesList> _parser = new pb::MessageParser<SCFishTracesList>(() => new SCFishTracesList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFishTracesList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFishTracesList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFishTracesList(SCFishTracesList other) : this() {
      fishTraces_ = other.fishTraces_.Clone();
      fishRoad_ = other.fishRoad_;
      fishArray_ = other.fishArray_;
      createInterval_ = other.createInterval_;
      isCalled_ = other.isCalled_;
      afterTideFirst_ = other.afterTideFirst_;
      callType_ = other.callType_;
      moveDelay_ = other.moveDelay_;
      roadIdx_ = other.roadIdx_;
      moveT_ = other.moveT_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFishTracesList Clone() {
      return new SCFishTracesList(this);
    }

    /// <summary>Field number for the "fish_traces" field.</summary>
    public const int FishTracesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.FishTrace> _repeated_fishTraces_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.FishTrace.Parser);
    private readonly pbc::RepeatedField<global::F4BY.FishTrace> fishTraces_ = new pbc::RepeatedField<global::F4BY.FishTrace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.FishTrace> FishTraces {
      get { return fishTraces_; }
    }

    /// <summary>Field number for the "fish_road" field.</summary>
    public const int FishRoadFieldNumber = 2;
    private int fishRoad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishRoad {
      get { return fishRoad_; }
      set {
        fishRoad_ = value;
      }
    }

    /// <summary>Field number for the "fish_array" field.</summary>
    public const int FishArrayFieldNumber = 3;
    private int fishArray_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishArray {
      get { return fishArray_; }
      set {
        fishArray_ = value;
      }
    }

    /// <summary>Field number for the "create_interval" field.</summary>
    public const int CreateIntervalFieldNumber = 4;
    private int createInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreateInterval {
      get { return createInterval_; }
      set {
        createInterval_ = value;
      }
    }

    /// <summary>Field number for the "is_called" field.</summary>
    public const int IsCalledFieldNumber = 5;
    private bool isCalled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCalled {
      get { return isCalled_; }
      set {
        isCalled_ = value;
      }
    }

    /// <summary>Field number for the "after_tide_first" field.</summary>
    public const int AfterTideFirstFieldNumber = 6;
    private bool afterTideFirst_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AfterTideFirst {
      get { return afterTideFirst_; }
      set {
        afterTideFirst_ = value;
      }
    }

    /// <summary>Field number for the "call_type" field.</summary>
    public const int CallTypeFieldNumber = 7;
    private global::F4BY.CallFishType callType_ = global::F4BY.CallFishType.CallTypeNormal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.CallFishType CallType {
      get { return callType_; }
      set {
        callType_ = value;
      }
    }

    /// <summary>Field number for the "move_delay" field.</summary>
    public const int MoveDelayFieldNumber = 8;
    private float moveDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveDelay {
      get { return moveDelay_; }
      set {
        moveDelay_ = value;
      }
    }

    /// <summary>Field number for the "road_idx" field.</summary>
    public const int RoadIdxFieldNumber = 9;
    private int roadIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadIdx {
      get { return roadIdx_; }
      set {
        roadIdx_ = value;
      }
    }

    /// <summary>Field number for the "move_t" field.</summary>
    public const int MoveTFieldNumber = 10;
    private float moveT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveT {
      get { return moveT_; }
      set {
        moveT_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFishTracesList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFishTracesList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fishTraces_.Equals(other.fishTraces_)) return false;
      if (FishRoad != other.FishRoad) return false;
      if (FishArray != other.FishArray) return false;
      if (CreateInterval != other.CreateInterval) return false;
      if (IsCalled != other.IsCalled) return false;
      if (AfterTideFirst != other.AfterTideFirst) return false;
      if (CallType != other.CallType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveDelay, other.MoveDelay)) return false;
      if (RoadIdx != other.RoadIdx) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveT, other.MoveT)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fishTraces_.GetHashCode();
      if (FishRoad != 0) hash ^= FishRoad.GetHashCode();
      if (FishArray != 0) hash ^= FishArray.GetHashCode();
      if (CreateInterval != 0) hash ^= CreateInterval.GetHashCode();
      if (IsCalled != false) hash ^= IsCalled.GetHashCode();
      if (AfterTideFirst != false) hash ^= AfterTideFirst.GetHashCode();
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) hash ^= CallType.GetHashCode();
      if (MoveDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveDelay);
      if (RoadIdx != 0) hash ^= RoadIdx.GetHashCode();
      if (MoveT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveT);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      fishTraces_.WriteTo(output, _repeated_fishTraces_codec);
      if (FishRoad != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishRoad);
      }
      if (FishArray != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishArray);
      }
      if (CreateInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CreateInterval);
      }
      if (IsCalled != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsCalled);
      }
      if (AfterTideFirst != false) {
        output.WriteRawTag(48);
        output.WriteBool(AfterTideFirst);
      }
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) {
        output.WriteRawTag(56);
        output.WriteEnum((int) CallType);
      }
      if (MoveDelay != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MoveDelay);
      }
      if (RoadIdx != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RoadIdx);
      }
      if (MoveT != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MoveT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      fishTraces_.WriteTo(ref output, _repeated_fishTraces_codec);
      if (FishRoad != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishRoad);
      }
      if (FishArray != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishArray);
      }
      if (CreateInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CreateInterval);
      }
      if (IsCalled != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsCalled);
      }
      if (AfterTideFirst != false) {
        output.WriteRawTag(48);
        output.WriteBool(AfterTideFirst);
      }
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) {
        output.WriteRawTag(56);
        output.WriteEnum((int) CallType);
      }
      if (MoveDelay != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MoveDelay);
      }
      if (RoadIdx != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RoadIdx);
      }
      if (MoveT != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MoveT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fishTraces_.CalculateSize(_repeated_fishTraces_codec);
      if (FishRoad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishRoad);
      }
      if (FishArray != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishArray);
      }
      if (CreateInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateInterval);
      }
      if (IsCalled != false) {
        size += 1 + 1;
      }
      if (AfterTideFirst != false) {
        size += 1 + 1;
      }
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CallType);
      }
      if (MoveDelay != 0F) {
        size += 1 + 4;
      }
      if (RoadIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadIdx);
      }
      if (MoveT != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFishTracesList other) {
      if (other == null) {
        return;
      }
      fishTraces_.Add(other.fishTraces_);
      if (other.FishRoad != 0) {
        FishRoad = other.FishRoad;
      }
      if (other.FishArray != 0) {
        FishArray = other.FishArray;
      }
      if (other.CreateInterval != 0) {
        CreateInterval = other.CreateInterval;
      }
      if (other.IsCalled != false) {
        IsCalled = other.IsCalled;
      }
      if (other.AfterTideFirst != false) {
        AfterTideFirst = other.AfterTideFirst;
      }
      if (other.CallType != global::F4BY.CallFishType.CallTypeNormal) {
        CallType = other.CallType;
      }
      if (other.MoveDelay != 0F) {
        MoveDelay = other.MoveDelay;
      }
      if (other.RoadIdx != 0) {
        RoadIdx = other.RoadIdx;
      }
      if (other.MoveT != 0F) {
        MoveT = other.MoveT;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fishTraces_.AddEntriesFrom(input, _repeated_fishTraces_codec);
            break;
          }
          case 16: {
            FishRoad = input.ReadInt32();
            break;
          }
          case 24: {
            FishArray = input.ReadInt32();
            break;
          }
          case 32: {
            CreateInterval = input.ReadInt32();
            break;
          }
          case 40: {
            IsCalled = input.ReadBool();
            break;
          }
          case 48: {
            AfterTideFirst = input.ReadBool();
            break;
          }
          case 56: {
            CallType = (global::F4BY.CallFishType) input.ReadEnum();
            break;
          }
          case 69: {
            MoveDelay = input.ReadFloat();
            break;
          }
          case 72: {
            RoadIdx = input.ReadInt32();
            break;
          }
          case 85: {
            MoveT = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            fishTraces_.AddEntriesFrom(ref input, _repeated_fishTraces_codec);
            break;
          }
          case 16: {
            FishRoad = input.ReadInt32();
            break;
          }
          case 24: {
            FishArray = input.ReadInt32();
            break;
          }
          case 32: {
            CreateInterval = input.ReadInt32();
            break;
          }
          case 40: {
            IsCalled = input.ReadBool();
            break;
          }
          case 48: {
            AfterTideFirst = input.ReadBool();
            break;
          }
          case 56: {
            CallType = (global::F4BY.CallFishType) input.ReadEnum();
            break;
          }
          case 69: {
            MoveDelay = input.ReadFloat();
            break;
          }
          case 72: {
            RoadIdx = input.ReadInt32();
            break;
          }
          case 85: {
            MoveT = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSyncFishReq : pb::IMessage<CSSyncFishReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSyncFishReq> _parser = new pb::MessageParser<CSSyncFishReq>(() => new CSSyncFishReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncFishReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncFishReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncFishReq(CSSyncFishReq other) : this() {
      chairId_ = other.chairId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncFishReq Clone() {
      return new CSSyncFishReq(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncFishReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncFishReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncFishReq other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncFishReq : pb::IMessage<SCSyncFishReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncFishReq> _parser = new pb::MessageParser<SCSyncFishReq>(() => new SCSyncFishReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncFishReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncFishReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncFishReq(SCSyncFishReq other) : this() {
      reqPlayerId_ = other.reqPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncFishReq Clone() {
      return new SCSyncFishReq(this);
    }

    /// <summary>Field number for the "req_player_id" field.</summary>
    public const int ReqPlayerIdFieldNumber = 1;
    private int reqPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReqPlayerId {
      get { return reqPlayerId_; }
      set {
        reqPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncFishReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncFishReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqPlayerId != other.ReqPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReqPlayerId != 0) hash ^= ReqPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ReqPlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ReqPlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReqPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReqPlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncFishReq other) {
      if (other == null) {
        return;
      }
      if (other.ReqPlayerId != 0) {
        ReqPlayerId = other.ReqPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReqPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ReqPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSyncFishRsp : pb::IMessage<CSSyncFishRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSyncFishRsp> _parser = new pb::MessageParser<CSSyncFishRsp>(() => new CSSyncFishRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncFishRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncFishRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncFishRsp(CSSyncFishRsp other) : this() {
      fishTraces_ = other.fishTraces_.Clone();
      fishRoad_ = other.fishRoad_;
      fishArray_ = other.fishArray_;
      moveDelay_ = other.moveDelay_;
      roadIdx_ = other.roadIdx_;
      moveT_ = other.moveT_;
      finish_ = other.finish_;
      reqPlayerId_ = other.reqPlayerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncFishRsp Clone() {
      return new CSSyncFishRsp(this);
    }

    /// <summary>Field number for the "fish_traces" field.</summary>
    public const int FishTracesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.FishTrace> _repeated_fishTraces_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.FishTrace.Parser);
    private readonly pbc::RepeatedField<global::F4BY.FishTrace> fishTraces_ = new pbc::RepeatedField<global::F4BY.FishTrace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.FishTrace> FishTraces {
      get { return fishTraces_; }
    }

    /// <summary>Field number for the "fish_road" field.</summary>
    public const int FishRoadFieldNumber = 2;
    private int fishRoad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishRoad {
      get { return fishRoad_; }
      set {
        fishRoad_ = value;
      }
    }

    /// <summary>Field number for the "fish_array" field.</summary>
    public const int FishArrayFieldNumber = 3;
    private int fishArray_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishArray {
      get { return fishArray_; }
      set {
        fishArray_ = value;
      }
    }

    /// <summary>Field number for the "move_delay" field.</summary>
    public const int MoveDelayFieldNumber = 4;
    private float moveDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveDelay {
      get { return moveDelay_; }
      set {
        moveDelay_ = value;
      }
    }

    /// <summary>Field number for the "road_idx" field.</summary>
    public const int RoadIdxFieldNumber = 5;
    private int roadIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadIdx {
      get { return roadIdx_; }
      set {
        roadIdx_ = value;
      }
    }

    /// <summary>Field number for the "move_t" field.</summary>
    public const int MoveTFieldNumber = 6;
    private float moveT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveT {
      get { return moveT_; }
      set {
        moveT_ = value;
      }
    }

    /// <summary>Field number for the "finish" field.</summary>
    public const int FinishFieldNumber = 7;
    private bool finish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Finish {
      get { return finish_; }
      set {
        finish_ = value;
      }
    }

    /// <summary>Field number for the "req_player_id" field.</summary>
    public const int ReqPlayerIdFieldNumber = 8;
    private int reqPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReqPlayerId {
      get { return reqPlayerId_; }
      set {
        reqPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncFishRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncFishRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fishTraces_.Equals(other.fishTraces_)) return false;
      if (FishRoad != other.FishRoad) return false;
      if (FishArray != other.FishArray) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveDelay, other.MoveDelay)) return false;
      if (RoadIdx != other.RoadIdx) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveT, other.MoveT)) return false;
      if (Finish != other.Finish) return false;
      if (ReqPlayerId != other.ReqPlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fishTraces_.GetHashCode();
      if (FishRoad != 0) hash ^= FishRoad.GetHashCode();
      if (FishArray != 0) hash ^= FishArray.GetHashCode();
      if (MoveDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveDelay);
      if (RoadIdx != 0) hash ^= RoadIdx.GetHashCode();
      if (MoveT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveT);
      if (Finish != false) hash ^= Finish.GetHashCode();
      if (ReqPlayerId != 0) hash ^= ReqPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      fishTraces_.WriteTo(output, _repeated_fishTraces_codec);
      if (FishRoad != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishRoad);
      }
      if (FishArray != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishArray);
      }
      if (MoveDelay != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MoveDelay);
      }
      if (RoadIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoadIdx);
      }
      if (MoveT != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MoveT);
      }
      if (Finish != false) {
        output.WriteRawTag(56);
        output.WriteBool(Finish);
      }
      if (ReqPlayerId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReqPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      fishTraces_.WriteTo(ref output, _repeated_fishTraces_codec);
      if (FishRoad != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishRoad);
      }
      if (FishArray != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishArray);
      }
      if (MoveDelay != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MoveDelay);
      }
      if (RoadIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoadIdx);
      }
      if (MoveT != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MoveT);
      }
      if (Finish != false) {
        output.WriteRawTag(56);
        output.WriteBool(Finish);
      }
      if (ReqPlayerId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReqPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fishTraces_.CalculateSize(_repeated_fishTraces_codec);
      if (FishRoad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishRoad);
      }
      if (FishArray != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishArray);
      }
      if (MoveDelay != 0F) {
        size += 1 + 4;
      }
      if (RoadIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadIdx);
      }
      if (MoveT != 0F) {
        size += 1 + 4;
      }
      if (Finish != false) {
        size += 1 + 1;
      }
      if (ReqPlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncFishRsp other) {
      if (other == null) {
        return;
      }
      fishTraces_.Add(other.fishTraces_);
      if (other.FishRoad != 0) {
        FishRoad = other.FishRoad;
      }
      if (other.FishArray != 0) {
        FishArray = other.FishArray;
      }
      if (other.MoveDelay != 0F) {
        MoveDelay = other.MoveDelay;
      }
      if (other.RoadIdx != 0) {
        RoadIdx = other.RoadIdx;
      }
      if (other.MoveT != 0F) {
        MoveT = other.MoveT;
      }
      if (other.Finish != false) {
        Finish = other.Finish;
      }
      if (other.ReqPlayerId != 0) {
        ReqPlayerId = other.ReqPlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fishTraces_.AddEntriesFrom(input, _repeated_fishTraces_codec);
            break;
          }
          case 16: {
            FishRoad = input.ReadInt32();
            break;
          }
          case 24: {
            FishArray = input.ReadInt32();
            break;
          }
          case 37: {
            MoveDelay = input.ReadFloat();
            break;
          }
          case 40: {
            RoadIdx = input.ReadInt32();
            break;
          }
          case 53: {
            MoveT = input.ReadFloat();
            break;
          }
          case 56: {
            Finish = input.ReadBool();
            break;
          }
          case 64: {
            ReqPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            fishTraces_.AddEntriesFrom(ref input, _repeated_fishTraces_codec);
            break;
          }
          case 16: {
            FishRoad = input.ReadInt32();
            break;
          }
          case 24: {
            FishArray = input.ReadInt32();
            break;
          }
          case 37: {
            MoveDelay = input.ReadFloat();
            break;
          }
          case 40: {
            RoadIdx = input.ReadInt32();
            break;
          }
          case 53: {
            MoveT = input.ReadFloat();
            break;
          }
          case 56: {
            Finish = input.ReadBool();
            break;
          }
          case 64: {
            ReqPlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncFishRsp : pb::IMessage<SCSyncFishRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncFishRsp> _parser = new pb::MessageParser<SCSyncFishRsp>(() => new SCSyncFishRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncFishRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncFishRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncFishRsp(SCSyncFishRsp other) : this() {
      fishTraces_ = other.fishTraces_.Clone();
      fishRoad_ = other.fishRoad_;
      fishArray_ = other.fishArray_;
      moveDelay_ = other.moveDelay_;
      roadIdx_ = other.roadIdx_;
      moveT_ = other.moveT_;
      createInterval_ = other.createInterval_;
      isCalled_ = other.isCalled_;
      callType_ = other.callType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncFishRsp Clone() {
      return new SCSyncFishRsp(this);
    }

    /// <summary>Field number for the "fish_traces" field.</summary>
    public const int FishTracesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.FishTrace> _repeated_fishTraces_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.FishTrace.Parser);
    private readonly pbc::RepeatedField<global::F4BY.FishTrace> fishTraces_ = new pbc::RepeatedField<global::F4BY.FishTrace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.FishTrace> FishTraces {
      get { return fishTraces_; }
    }

    /// <summary>Field number for the "fish_road" field.</summary>
    public const int FishRoadFieldNumber = 2;
    private int fishRoad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishRoad {
      get { return fishRoad_; }
      set {
        fishRoad_ = value;
      }
    }

    /// <summary>Field number for the "fish_array" field.</summary>
    public const int FishArrayFieldNumber = 3;
    private int fishArray_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishArray {
      get { return fishArray_; }
      set {
        fishArray_ = value;
      }
    }

    /// <summary>Field number for the "move_delay" field.</summary>
    public const int MoveDelayFieldNumber = 4;
    private float moveDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveDelay {
      get { return moveDelay_; }
      set {
        moveDelay_ = value;
      }
    }

    /// <summary>Field number for the "road_idx" field.</summary>
    public const int RoadIdxFieldNumber = 5;
    private int roadIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoadIdx {
      get { return roadIdx_; }
      set {
        roadIdx_ = value;
      }
    }

    /// <summary>Field number for the "move_t" field.</summary>
    public const int MoveTFieldNumber = 6;
    private float moveT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveT {
      get { return moveT_; }
      set {
        moveT_ = value;
      }
    }

    /// <summary>Field number for the "create_interval" field.</summary>
    public const int CreateIntervalFieldNumber = 7;
    private float createInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CreateInterval {
      get { return createInterval_; }
      set {
        createInterval_ = value;
      }
    }

    /// <summary>Field number for the "is_called" field.</summary>
    public const int IsCalledFieldNumber = 8;
    private bool isCalled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCalled {
      get { return isCalled_; }
      set {
        isCalled_ = value;
      }
    }

    /// <summary>Field number for the "call_type" field.</summary>
    public const int CallTypeFieldNumber = 9;
    private global::F4BY.CallFishType callType_ = global::F4BY.CallFishType.CallTypeNormal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.CallFishType CallType {
      get { return callType_; }
      set {
        callType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncFishRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncFishRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fishTraces_.Equals(other.fishTraces_)) return false;
      if (FishRoad != other.FishRoad) return false;
      if (FishArray != other.FishArray) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveDelay, other.MoveDelay)) return false;
      if (RoadIdx != other.RoadIdx) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveT, other.MoveT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CreateInterval, other.CreateInterval)) return false;
      if (IsCalled != other.IsCalled) return false;
      if (CallType != other.CallType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fishTraces_.GetHashCode();
      if (FishRoad != 0) hash ^= FishRoad.GetHashCode();
      if (FishArray != 0) hash ^= FishArray.GetHashCode();
      if (MoveDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveDelay);
      if (RoadIdx != 0) hash ^= RoadIdx.GetHashCode();
      if (MoveT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveT);
      if (CreateInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CreateInterval);
      if (IsCalled != false) hash ^= IsCalled.GetHashCode();
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) hash ^= CallType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      fishTraces_.WriteTo(output, _repeated_fishTraces_codec);
      if (FishRoad != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishRoad);
      }
      if (FishArray != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishArray);
      }
      if (MoveDelay != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MoveDelay);
      }
      if (RoadIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoadIdx);
      }
      if (MoveT != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MoveT);
      }
      if (CreateInterval != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CreateInterval);
      }
      if (IsCalled != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsCalled);
      }
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CallType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      fishTraces_.WriteTo(ref output, _repeated_fishTraces_codec);
      if (FishRoad != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishRoad);
      }
      if (FishArray != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishArray);
      }
      if (MoveDelay != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MoveDelay);
      }
      if (RoadIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoadIdx);
      }
      if (MoveT != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MoveT);
      }
      if (CreateInterval != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(CreateInterval);
      }
      if (IsCalled != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsCalled);
      }
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CallType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fishTraces_.CalculateSize(_repeated_fishTraces_codec);
      if (FishRoad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishRoad);
      }
      if (FishArray != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishArray);
      }
      if (MoveDelay != 0F) {
        size += 1 + 4;
      }
      if (RoadIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoadIdx);
      }
      if (MoveT != 0F) {
        size += 1 + 4;
      }
      if (CreateInterval != 0F) {
        size += 1 + 4;
      }
      if (IsCalled != false) {
        size += 1 + 1;
      }
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CallType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncFishRsp other) {
      if (other == null) {
        return;
      }
      fishTraces_.Add(other.fishTraces_);
      if (other.FishRoad != 0) {
        FishRoad = other.FishRoad;
      }
      if (other.FishArray != 0) {
        FishArray = other.FishArray;
      }
      if (other.MoveDelay != 0F) {
        MoveDelay = other.MoveDelay;
      }
      if (other.RoadIdx != 0) {
        RoadIdx = other.RoadIdx;
      }
      if (other.MoveT != 0F) {
        MoveT = other.MoveT;
      }
      if (other.CreateInterval != 0F) {
        CreateInterval = other.CreateInterval;
      }
      if (other.IsCalled != false) {
        IsCalled = other.IsCalled;
      }
      if (other.CallType != global::F4BY.CallFishType.CallTypeNormal) {
        CallType = other.CallType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fishTraces_.AddEntriesFrom(input, _repeated_fishTraces_codec);
            break;
          }
          case 16: {
            FishRoad = input.ReadInt32();
            break;
          }
          case 24: {
            FishArray = input.ReadInt32();
            break;
          }
          case 37: {
            MoveDelay = input.ReadFloat();
            break;
          }
          case 40: {
            RoadIdx = input.ReadInt32();
            break;
          }
          case 53: {
            MoveT = input.ReadFloat();
            break;
          }
          case 61: {
            CreateInterval = input.ReadFloat();
            break;
          }
          case 64: {
            IsCalled = input.ReadBool();
            break;
          }
          case 72: {
            CallType = (global::F4BY.CallFishType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            fishTraces_.AddEntriesFrom(ref input, _repeated_fishTraces_codec);
            break;
          }
          case 16: {
            FishRoad = input.ReadInt32();
            break;
          }
          case 24: {
            FishArray = input.ReadInt32();
            break;
          }
          case 37: {
            MoveDelay = input.ReadFloat();
            break;
          }
          case 40: {
            RoadIdx = input.ReadInt32();
            break;
          }
          case 53: {
            MoveT = input.ReadFloat();
            break;
          }
          case 61: {
            CreateInterval = input.ReadFloat();
            break;
          }
          case 64: {
            IsCalled = input.ReadBool();
            break;
          }
          case 72: {
            CallType = (global::F4BY.CallFishType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCChangeScene : pb::IMessage<SCChangeScene>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCChangeScene> _parser = new pb::MessageParser<SCChangeScene>(() => new SCChangeScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCChangeScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChangeScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChangeScene(SCChangeScene other) : this() {
      sceneIndex_ = other.sceneIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChangeScene Clone() {
      return new SCChangeScene(this);
    }

    /// <summary>Field number for the "scene_index" field.</summary>
    public const int SceneIndexFieldNumber = 1;
    private int sceneIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneIndex {
      get { return sceneIndex_; }
      set {
        sceneIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCChangeScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCChangeScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneIndex != other.SceneIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneIndex != 0) hash ^= SceneIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SceneIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SceneIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCChangeScene other) {
      if (other == null) {
        return;
      }
      if (other.SceneIndex != 0) {
        SceneIndex = other.SceneIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SceneIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSFishOutsideScreen : pb::IMessage<CSFishOutsideScreen>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSFishOutsideScreen> _parser = new pb::MessageParser<CSFishOutsideScreen>(() => new CSFishOutsideScreen());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFishOutsideScreen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFishOutsideScreen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFishOutsideScreen(CSFishOutsideScreen other) : this() {
      fishUid_ = other.fishUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFishOutsideScreen Clone() {
      return new CSFishOutsideScreen(this);
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 1;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSFishOutsideScreen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSFishOutsideScreen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishUid != other.FishUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSFishOutsideScreen other) {
      if (other == null) {
        return;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSLockFish : pb::IMessage<CSLockFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSLockFish> _parser = new pb::MessageParser<CSLockFish>(() => new CSLockFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLockFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLockFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLockFish(CSLockFish other) : this() {
      fishUid_ = other.fishUid_;
      isOpen_ = other.isOpen_;
      chairIdx_ = other.chairIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLockFish Clone() {
      return new CSLockFish(this);
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 1;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "is_open" field.</summary>
    public const int IsOpenFieldNumber = 2;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 3;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLockFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLockFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishUid != other.FishUid) return false;
      if (IsOpen != other.IsOpen) return false;
      if (ChairIdx != other.ChairIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLockFish other) {
      if (other == null) {
        return;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
          case 24: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
          case 24: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCLockFish : pb::IMessage<SCLockFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCLockFish> _parser = new pb::MessageParser<SCLockFish>(() => new SCLockFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLockFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLockFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLockFish(SCLockFish other) : this() {
      chairIdx_ = other.chairIdx_;
      fishUid_ = other.fishUid_;
      isOpen_ = other.isOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLockFish Clone() {
      return new SCLockFish(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 2;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "is_open" field.</summary>
    public const int IsOpenFieldNumber = 3;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLockFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLockFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (FishUid != other.FishUid) return false;
      if (IsOpen != other.IsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (IsOpen != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (IsOpen != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLockFish other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSCrazySkill : pb::IMessage<CSCrazySkill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSCrazySkill> _parser = new pb::MessageParser<CSCrazySkill>(() => new CSCrazySkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCrazySkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCrazySkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCrazySkill(CSCrazySkill other) : this() {
      isOpen_ = other.isOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCrazySkill Clone() {
      return new CSCrazySkill(this);
    }

    /// <summary>Field number for the "is_open" field.</summary>
    public const int IsOpenFieldNumber = 1;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSCrazySkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSCrazySkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpen != other.IsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSCrazySkill other) {
      if (other == null) {
        return;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCCrazySkill : pb::IMessage<SCCrazySkill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCCrazySkill> _parser = new pb::MessageParser<SCCrazySkill>(() => new SCCrazySkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCCrazySkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCrazySkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCrazySkill(SCCrazySkill other) : this() {
      chairIdx_ = other.chairIdx_;
      isOpen_ = other.isOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCrazySkill Clone() {
      return new SCCrazySkill(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "is_open" field.</summary>
    public const int IsOpenFieldNumber = 2;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCCrazySkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCCrazySkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (IsOpen != other.IsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCCrazySkill other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSTrebleSkill : pb::IMessage<CSTrebleSkill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSTrebleSkill> _parser = new pb::MessageParser<CSTrebleSkill>(() => new CSTrebleSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTrebleSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTrebleSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTrebleSkill(CSTrebleSkill other) : this() {
      isOpen_ = other.isOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTrebleSkill Clone() {
      return new CSTrebleSkill(this);
    }

    /// <summary>Field number for the "is_open" field.</summary>
    public const int IsOpenFieldNumber = 1;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSTrebleSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSTrebleSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpen != other.IsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSTrebleSkill other) {
      if (other == null) {
        return;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCTrebleSkill : pb::IMessage<SCTrebleSkill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTrebleSkill> _parser = new pb::MessageParser<SCTrebleSkill>(() => new SCTrebleSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTrebleSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTrebleSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTrebleSkill(SCTrebleSkill other) : this() {
      chairIdx_ = other.chairIdx_;
      isOpen_ = other.isOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTrebleSkill Clone() {
      return new SCTrebleSkill(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "is_open" field.</summary>
    public const int IsOpenFieldNumber = 2;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTrebleSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTrebleSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (IsOpen != other.IsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (IsOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTrebleSkill other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            IsOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserRunBackground : pb::IMessage<CSUserRunBackground>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserRunBackground> _parser = new pb::MessageParser<CSUserRunBackground>(() => new CSUserRunBackground());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserRunBackground> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserRunBackground() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserRunBackground(CSUserRunBackground other) : this() {
      background_ = other.background_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserRunBackground Clone() {
      return new CSUserRunBackground(this);
    }

    /// <summary>Field number for the "background" field.</summary>
    public const int BackgroundFieldNumber = 1;
    private bool background_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Background {
      get { return background_; }
      set {
        background_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserRunBackground);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserRunBackground other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Background != other.Background) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Background != false) hash ^= Background.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Background != false) {
        output.WriteRawTag(8);
        output.WriteBool(Background);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Background != false) {
        output.WriteRawTag(8);
        output.WriteBool(Background);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Background != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserRunBackground other) {
      if (other == null) {
        return;
      }
      if (other.Background != false) {
        Background = other.Background;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Background = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Background = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserRunBackground : pb::IMessage<SCUserRunBackground>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserRunBackground> _parser = new pb::MessageParser<SCUserRunBackground>(() => new SCUserRunBackground());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserRunBackground> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserRunBackground() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserRunBackground(SCUserRunBackground other) : this() {
      chairIdx_ = other.chairIdx_;
      background_ = other.background_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserRunBackground Clone() {
      return new SCUserRunBackground(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "background" field.</summary>
    public const int BackgroundFieldNumber = 2;
    private bool background_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Background {
      get { return background_; }
      set {
        background_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserRunBackground);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserRunBackground other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Background != other.Background) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Background != false) hash ^= Background.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Background != false) {
        output.WriteRawTag(16);
        output.WriteBool(Background);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Background != false) {
        output.WriteRawTag(16);
        output.WriteBool(Background);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Background != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserRunBackground other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Background != false) {
        Background = other.Background;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Background = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Background = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSHeartBeat : pb::IMessage<CSHeartBeat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSHeartBeat> _parser = new pb::MessageParser<CSHeartBeat>(() => new CSHeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHeartBeat(CSHeartBeat other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSHeartBeat Clone() {
      return new CSHeartBeat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSHeartBeat other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCHeartBeat : pb::IMessage<SCHeartBeat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCHeartBeat> _parser = new pb::MessageParser<SCHeartBeat>(() => new SCHeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHeartBeat(SCHeartBeat other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCHeartBeat Clone() {
      return new SCHeartBeat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCHeartBeat other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class GunSpecEffect : pb::IMessage<GunSpecEffect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GunSpecEffect> _parser = new pb::MessageParser<GunSpecEffect>(() => new GunSpecEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GunSpecEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunSpecEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunSpecEffect(GunSpecEffect other) : this() {
      ratioLimit_ = other.ratioLimit_;
      hitChangeRate_ = other.hitChangeRate_;
      moneyChangeRate_ = other.moneyChangeRate_;
      violenceRate_ = other.violenceRate_;
      speedRate_ = other.speedRate_;
      advanced_ = other.advanced_;
      doubleTag_ = other.doubleTag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunSpecEffect Clone() {
      return new GunSpecEffect(this);
    }

    /// <summary>Field number for the "ratioLimit" field.</summary>
    public const int RatioLimitFieldNumber = 1;
    private int ratioLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RatioLimit {
      get { return ratioLimit_; }
      set {
        ratioLimit_ = value;
      }
    }

    /// <summary>Field number for the "hitChangeRate" field.</summary>
    public const int HitChangeRateFieldNumber = 2;
    private float hitChangeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitChangeRate {
      get { return hitChangeRate_; }
      set {
        hitChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "moneyChangeRate" field.</summary>
    public const int MoneyChangeRateFieldNumber = 3;
    private float moneyChangeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoneyChangeRate {
      get { return moneyChangeRate_; }
      set {
        moneyChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "violenceRate" field.</summary>
    public const int ViolenceRateFieldNumber = 4;
    private float violenceRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ViolenceRate {
      get { return violenceRate_; }
      set {
        violenceRate_ = value;
      }
    }

    /// <summary>Field number for the "speedRate" field.</summary>
    public const int SpeedRateFieldNumber = 5;
    private float speedRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedRate {
      get { return speedRate_; }
      set {
        speedRate_ = value;
      }
    }

    /// <summary>Field number for the "advanced" field.</summary>
    public const int AdvancedFieldNumber = 6;
    private bool advanced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Advanced {
      get { return advanced_; }
      set {
        advanced_ = value;
      }
    }

    /// <summary>Field number for the "double_tag" field.</summary>
    public const int DoubleTagFieldNumber = 7;
    private bool doubleTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoubleTag {
      get { return doubleTag_; }
      set {
        doubleTag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GunSpecEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GunSpecEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RatioLimit != other.RatioLimit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitChangeRate, other.HitChangeRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoneyChangeRate, other.MoneyChangeRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ViolenceRate, other.ViolenceRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedRate, other.SpeedRate)) return false;
      if (Advanced != other.Advanced) return false;
      if (DoubleTag != other.DoubleTag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RatioLimit != 0) hash ^= RatioLimit.GetHashCode();
      if (HitChangeRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitChangeRate);
      if (MoneyChangeRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoneyChangeRate);
      if (ViolenceRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ViolenceRate);
      if (SpeedRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedRate);
      if (Advanced != false) hash ^= Advanced.GetHashCode();
      if (DoubleTag != false) hash ^= DoubleTag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RatioLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(HitChangeRate);
      }
      if (MoneyChangeRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MoneyChangeRate);
      }
      if (ViolenceRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ViolenceRate);
      }
      if (SpeedRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SpeedRate);
      }
      if (Advanced != false) {
        output.WriteRawTag(48);
        output.WriteBool(Advanced);
      }
      if (DoubleTag != false) {
        output.WriteRawTag(56);
        output.WriteBool(DoubleTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RatioLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(HitChangeRate);
      }
      if (MoneyChangeRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MoneyChangeRate);
      }
      if (ViolenceRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ViolenceRate);
      }
      if (SpeedRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SpeedRate);
      }
      if (Advanced != false) {
        output.WriteRawTag(48);
        output.WriteBool(Advanced);
      }
      if (DoubleTag != false) {
        output.WriteRawTag(56);
        output.WriteBool(DoubleTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RatioLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        size += 1 + 4;
      }
      if (MoneyChangeRate != 0F) {
        size += 1 + 4;
      }
      if (ViolenceRate != 0F) {
        size += 1 + 4;
      }
      if (SpeedRate != 0F) {
        size += 1 + 4;
      }
      if (Advanced != false) {
        size += 1 + 1;
      }
      if (DoubleTag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GunSpecEffect other) {
      if (other == null) {
        return;
      }
      if (other.RatioLimit != 0) {
        RatioLimit = other.RatioLimit;
      }
      if (other.HitChangeRate != 0F) {
        HitChangeRate = other.HitChangeRate;
      }
      if (other.MoneyChangeRate != 0F) {
        MoneyChangeRate = other.MoneyChangeRate;
      }
      if (other.ViolenceRate != 0F) {
        ViolenceRate = other.ViolenceRate;
      }
      if (other.SpeedRate != 0F) {
        SpeedRate = other.SpeedRate;
      }
      if (other.Advanced != false) {
        Advanced = other.Advanced;
      }
      if (other.DoubleTag != false) {
        DoubleTag = other.DoubleTag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RatioLimit = input.ReadInt32();
            break;
          }
          case 21: {
            HitChangeRate = input.ReadFloat();
            break;
          }
          case 29: {
            MoneyChangeRate = input.ReadFloat();
            break;
          }
          case 37: {
            ViolenceRate = input.ReadFloat();
            break;
          }
          case 45: {
            SpeedRate = input.ReadFloat();
            break;
          }
          case 48: {
            Advanced = input.ReadBool();
            break;
          }
          case 56: {
            DoubleTag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RatioLimit = input.ReadInt32();
            break;
          }
          case 21: {
            HitChangeRate = input.ReadFloat();
            break;
          }
          case 29: {
            MoneyChangeRate = input.ReadFloat();
            break;
          }
          case 37: {
            ViolenceRate = input.ReadFloat();
            break;
          }
          case 45: {
            SpeedRate = input.ReadFloat();
            break;
          }
          case 48: {
            Advanced = input.ReadBool();
            break;
          }
          case 56: {
            DoubleTag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WingsSpecEffect : pb::IMessage<WingsSpecEffect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WingsSpecEffect> _parser = new pb::MessageParser<WingsSpecEffect>(() => new WingsSpecEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WingsSpecEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsSpecEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsSpecEffect(WingsSpecEffect other) : this() {
      speedRate_ = other.speedRate_;
      ratioLimit_ = other.ratioLimit_;
      hitChangeRate_ = other.hitChangeRate_;
      moneyChangeRate_ = other.moneyChangeRate_;
      advanced_ = other.advanced_;
      doubleTag_ = other.doubleTag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsSpecEffect Clone() {
      return new WingsSpecEffect(this);
    }

    /// <summary>Field number for the "speedRate" field.</summary>
    public const int SpeedRateFieldNumber = 1;
    private float speedRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedRate {
      get { return speedRate_; }
      set {
        speedRate_ = value;
      }
    }

    /// <summary>Field number for the "ratioLimit" field.</summary>
    public const int RatioLimitFieldNumber = 2;
    private int ratioLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RatioLimit {
      get { return ratioLimit_; }
      set {
        ratioLimit_ = value;
      }
    }

    /// <summary>Field number for the "hitChangeRate" field.</summary>
    public const int HitChangeRateFieldNumber = 3;
    private float hitChangeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HitChangeRate {
      get { return hitChangeRate_; }
      set {
        hitChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "moneyChangeRate" field.</summary>
    public const int MoneyChangeRateFieldNumber = 4;
    private float moneyChangeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoneyChangeRate {
      get { return moneyChangeRate_; }
      set {
        moneyChangeRate_ = value;
      }
    }

    /// <summary>Field number for the "advanced" field.</summary>
    public const int AdvancedFieldNumber = 5;
    private bool advanced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Advanced {
      get { return advanced_; }
      set {
        advanced_ = value;
      }
    }

    /// <summary>Field number for the "double_tag" field.</summary>
    public const int DoubleTagFieldNumber = 6;
    private bool doubleTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoubleTag {
      get { return doubleTag_; }
      set {
        doubleTag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WingsSpecEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WingsSpecEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedRate, other.SpeedRate)) return false;
      if (RatioLimit != other.RatioLimit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HitChangeRate, other.HitChangeRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoneyChangeRate, other.MoneyChangeRate)) return false;
      if (Advanced != other.Advanced) return false;
      if (DoubleTag != other.DoubleTag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeedRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedRate);
      if (RatioLimit != 0) hash ^= RatioLimit.GetHashCode();
      if (HitChangeRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HitChangeRate);
      if (MoneyChangeRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoneyChangeRate);
      if (Advanced != false) hash ^= Advanced.GetHashCode();
      if (DoubleTag != false) hash ^= DoubleTag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpeedRate != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SpeedRate);
      }
      if (RatioLimit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HitChangeRate);
      }
      if (MoneyChangeRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MoneyChangeRate);
      }
      if (Advanced != false) {
        output.WriteRawTag(40);
        output.WriteBool(Advanced);
      }
      if (DoubleTag != false) {
        output.WriteRawTag(48);
        output.WriteBool(DoubleTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpeedRate != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SpeedRate);
      }
      if (RatioLimit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HitChangeRate);
      }
      if (MoneyChangeRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MoneyChangeRate);
      }
      if (Advanced != false) {
        output.WriteRawTag(40);
        output.WriteBool(Advanced);
      }
      if (DoubleTag != false) {
        output.WriteRawTag(48);
        output.WriteBool(DoubleTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeedRate != 0F) {
        size += 1 + 4;
      }
      if (RatioLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RatioLimit);
      }
      if (HitChangeRate != 0F) {
        size += 1 + 4;
      }
      if (MoneyChangeRate != 0F) {
        size += 1 + 4;
      }
      if (Advanced != false) {
        size += 1 + 1;
      }
      if (DoubleTag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WingsSpecEffect other) {
      if (other == null) {
        return;
      }
      if (other.SpeedRate != 0F) {
        SpeedRate = other.SpeedRate;
      }
      if (other.RatioLimit != 0) {
        RatioLimit = other.RatioLimit;
      }
      if (other.HitChangeRate != 0F) {
        HitChangeRate = other.HitChangeRate;
      }
      if (other.MoneyChangeRate != 0F) {
        MoneyChangeRate = other.MoneyChangeRate;
      }
      if (other.Advanced != false) {
        Advanced = other.Advanced;
      }
      if (other.DoubleTag != false) {
        DoubleTag = other.DoubleTag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SpeedRate = input.ReadFloat();
            break;
          }
          case 16: {
            RatioLimit = input.ReadInt32();
            break;
          }
          case 29: {
            HitChangeRate = input.ReadFloat();
            break;
          }
          case 37: {
            MoneyChangeRate = input.ReadFloat();
            break;
          }
          case 40: {
            Advanced = input.ReadBool();
            break;
          }
          case 48: {
            DoubleTag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            SpeedRate = input.ReadFloat();
            break;
          }
          case 16: {
            RatioLimit = input.ReadInt32();
            break;
          }
          case 29: {
            HitChangeRate = input.ReadFloat();
            break;
          }
          case 37: {
            MoneyChangeRate = input.ReadFloat();
            break;
          }
          case 40: {
            Advanced = input.ReadBool();
            break;
          }
          case 48: {
            DoubleTag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WingsInfo : pb::IMessage<WingsInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WingsInfo> _parser = new pb::MessageParser<WingsInfo>(() => new WingsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WingsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsInfo(WingsInfo other) : this() {
      wingsId_ = other.wingsId_;
      enable_ = other.enable_;
      wingsSpecEffect_ = other.wingsSpecEffect_ != null ? other.wingsSpecEffect_.Clone() : null;
      receiveType_ = other.receiveType_;
      activityId_ = other.activityId_;
      price_ = other.price_;
      newEnable_ = other.newEnable_;
      doubleTag_ = other.doubleTag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WingsInfo Clone() {
      return new WingsInfo(this);
    }

    /// <summary>Field number for the "wings_id" field.</summary>
    public const int WingsIdFieldNumber = 1;
    private int wingsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingsId {
      get { return wingsId_; }
      set {
        wingsId_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "wings_spec_effect" field.</summary>
    public const int WingsSpecEffectFieldNumber = 3;
    private global::F4BY.WingsSpecEffect wingsSpecEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.WingsSpecEffect WingsSpecEffect {
      get { return wingsSpecEffect_; }
      set {
        wingsSpecEffect_ = value;
      }
    }

    /// <summary>Field number for the "receive_type" field.</summary>
    public const int ReceiveTypeFieldNumber = 4;
    private int receiveType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReceiveType {
      get { return receiveType_; }
      set {
        receiveType_ = value;
      }
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 5;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 6;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "new_enable" field.</summary>
    public const int NewEnableFieldNumber = 7;
    private bool newEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NewEnable {
      get { return newEnable_; }
      set {
        newEnable_ = value;
      }
    }

    /// <summary>Field number for the "double_tag" field.</summary>
    public const int DoubleTagFieldNumber = 8;
    private bool doubleTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoubleTag {
      get { return doubleTag_; }
      set {
        doubleTag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WingsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WingsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WingsId != other.WingsId) return false;
      if (Enable != other.Enable) return false;
      if (!object.Equals(WingsSpecEffect, other.WingsSpecEffect)) return false;
      if (ReceiveType != other.ReceiveType) return false;
      if (ActivityId != other.ActivityId) return false;
      if (Price != other.Price) return false;
      if (NewEnable != other.NewEnable) return false;
      if (DoubleTag != other.DoubleTag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WingsId != 0) hash ^= WingsId.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (wingsSpecEffect_ != null) hash ^= WingsSpecEffect.GetHashCode();
      if (ReceiveType != 0) hash ^= ReceiveType.GetHashCode();
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (NewEnable != false) hash ^= NewEnable.GetHashCode();
      if (DoubleTag != false) hash ^= DoubleTag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (wingsSpecEffect_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WingsSpecEffect);
      }
      if (ReceiveType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ReceiveType);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ActivityId);
      }
      if (Price != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Price);
      }
      if (NewEnable != false) {
        output.WriteRawTag(56);
        output.WriteBool(NewEnable);
      }
      if (DoubleTag != false) {
        output.WriteRawTag(64);
        output.WriteBool(DoubleTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (wingsSpecEffect_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WingsSpecEffect);
      }
      if (ReceiveType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ReceiveType);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ActivityId);
      }
      if (Price != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Price);
      }
      if (NewEnable != false) {
        output.WriteRawTag(56);
        output.WriteBool(NewEnable);
      }
      if (DoubleTag != false) {
        output.WriteRawTag(64);
        output.WriteBool(DoubleTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WingsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WingsId);
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (wingsSpecEffect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WingsSpecEffect);
      }
      if (ReceiveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceiveType);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (NewEnable != false) {
        size += 1 + 1;
      }
      if (DoubleTag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WingsInfo other) {
      if (other == null) {
        return;
      }
      if (other.WingsId != 0) {
        WingsId = other.WingsId;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.wingsSpecEffect_ != null) {
        if (wingsSpecEffect_ == null) {
          WingsSpecEffect = new global::F4BY.WingsSpecEffect();
        }
        WingsSpecEffect.MergeFrom(other.WingsSpecEffect);
      }
      if (other.ReceiveType != 0) {
        ReceiveType = other.ReceiveType;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.NewEnable != false) {
        NewEnable = other.NewEnable;
      }
      if (other.DoubleTag != false) {
        DoubleTag = other.DoubleTag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 26: {
            if (wingsSpecEffect_ == null) {
              WingsSpecEffect = new global::F4BY.WingsSpecEffect();
            }
            input.ReadMessage(WingsSpecEffect);
            break;
          }
          case 32: {
            ReceiveType = input.ReadInt32();
            break;
          }
          case 40: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 48: {
            Price = input.ReadInt32();
            break;
          }
          case 56: {
            NewEnable = input.ReadBool();
            break;
          }
          case 64: {
            DoubleTag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 26: {
            if (wingsSpecEffect_ == null) {
              WingsSpecEffect = new global::F4BY.WingsSpecEffect();
            }
            input.ReadMessage(WingsSpecEffect);
            break;
          }
          case 32: {
            ReceiveType = input.ReadInt32();
            break;
          }
          case 40: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 48: {
            Price = input.ReadInt32();
            break;
          }
          case 56: {
            NewEnable = input.ReadBool();
            break;
          }
          case 64: {
            DoubleTag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GunInfo : pb::IMessage<GunInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GunInfo> _parser = new pb::MessageParser<GunInfo>(() => new GunInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GunInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunInfo(GunInfo other) : this() {
      gunLevel_ = other.gunLevel_;
      ratioMin_ = other.ratioMin_;
      ratioMax_ = other.ratioMax_;
      enable_ = other.enable_;
      newEnable_ = other.newEnable_;
      isVip_ = other.isVip_;
      vipLimit_ = other.vipLimit_;
      isMember_ = other.isMember_;
      memberSec_ = other.memberSec_;
      extraData_ = other.extraData_;
      gunSpecEffect_ = other.gunSpecEffect_ != null ? other.gunSpecEffect_.Clone() : null;
      price_ = other.price_;
      attackSpeed_ = other.attackSpeed_;
      rage_ = other.rage_;
      activityId_ = other.activityId_;
      ratioList_ = other.ratioList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GunInfo Clone() {
      return new GunInfo(this);
    }

    /// <summary>Field number for the "gun_level" field.</summary>
    public const int GunLevelFieldNumber = 1;
    private int gunLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunLevel {
      get { return gunLevel_; }
      set {
        gunLevel_ = value;
      }
    }

    /// <summary>Field number for the "ratio_min" field.</summary>
    public const int RatioMinFieldNumber = 2;
    private int ratioMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RatioMin {
      get { return ratioMin_; }
      set {
        ratioMin_ = value;
      }
    }

    /// <summary>Field number for the "ratio_max" field.</summary>
    public const int RatioMaxFieldNumber = 3;
    private int ratioMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RatioMax {
      get { return ratioMax_; }
      set {
        ratioMax_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 4;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "new_enable" field.</summary>
    public const int NewEnableFieldNumber = 5;
    private bool newEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NewEnable {
      get { return newEnable_; }
      set {
        newEnable_ = value;
      }
    }

    /// <summary>Field number for the "is_vip" field.</summary>
    public const int IsVipFieldNumber = 6;
    private bool isVip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVip {
      get { return isVip_; }
      set {
        isVip_ = value;
      }
    }

    /// <summary>Field number for the "vip_limit" field.</summary>
    public const int VipLimitFieldNumber = 7;
    private int vipLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLimit {
      get { return vipLimit_; }
      set {
        vipLimit_ = value;
      }
    }

    /// <summary>Field number for the "is_member" field.</summary>
    public const int IsMemberFieldNumber = 8;
    private bool isMember_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMember {
      get { return isMember_; }
      set {
        isMember_ = value;
      }
    }

    /// <summary>Field number for the "member_sec" field.</summary>
    public const int MemberSecFieldNumber = 9;
    private int memberSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberSec {
      get { return memberSec_; }
      set {
        memberSec_ = value;
      }
    }

    /// <summary>Field number for the "extra_data" field.</summary>
    public const int ExtraDataFieldNumber = 10;
    private int extraData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraData {
      get { return extraData_; }
      set {
        extraData_ = value;
      }
    }

    /// <summary>Field number for the "gunSpecEffect" field.</summary>
    public const int GunSpecEffectFieldNumber = 11;
    private global::F4BY.GunSpecEffect gunSpecEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.GunSpecEffect GunSpecEffect {
      get { return gunSpecEffect_; }
      set {
        gunSpecEffect_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 12;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "attack_speed" field.</summary>
    public const int AttackSpeedFieldNumber = 13;
    private float attackSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackSpeed {
      get { return attackSpeed_; }
      set {
        attackSpeed_ = value;
      }
    }

    /// <summary>Field number for the "rage" field.</summary>
    public const int RageFieldNumber = 14;
    private float rage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rage {
      get { return rage_; }
      set {
        rage_ = value;
      }
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 15;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "ratio_list" field.</summary>
    public const int RatioListFieldNumber = 16;
    private static readonly pb::FieldCodec<int> _repeated_ratioList_codec
        = pb::FieldCodec.ForInt32(130);
    private readonly pbc::RepeatedField<int> ratioList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RatioList {
      get { return ratioList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GunInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GunInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GunLevel != other.GunLevel) return false;
      if (RatioMin != other.RatioMin) return false;
      if (RatioMax != other.RatioMax) return false;
      if (Enable != other.Enable) return false;
      if (NewEnable != other.NewEnable) return false;
      if (IsVip != other.IsVip) return false;
      if (VipLimit != other.VipLimit) return false;
      if (IsMember != other.IsMember) return false;
      if (MemberSec != other.MemberSec) return false;
      if (ExtraData != other.ExtraData) return false;
      if (!object.Equals(GunSpecEffect, other.GunSpecEffect)) return false;
      if (Price != other.Price) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackSpeed, other.AttackSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rage, other.Rage)) return false;
      if (ActivityId != other.ActivityId) return false;
      if(!ratioList_.Equals(other.ratioList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GunLevel != 0) hash ^= GunLevel.GetHashCode();
      if (RatioMin != 0) hash ^= RatioMin.GetHashCode();
      if (RatioMax != 0) hash ^= RatioMax.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (NewEnable != false) hash ^= NewEnable.GetHashCode();
      if (IsVip != false) hash ^= IsVip.GetHashCode();
      if (VipLimit != 0) hash ^= VipLimit.GetHashCode();
      if (IsMember != false) hash ^= IsMember.GetHashCode();
      if (MemberSec != 0) hash ^= MemberSec.GetHashCode();
      if (ExtraData != 0) hash ^= ExtraData.GetHashCode();
      if (gunSpecEffect_ != null) hash ^= GunSpecEffect.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (AttackSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackSpeed);
      if (Rage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rage);
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      hash ^= ratioList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GunLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunLevel);
      }
      if (RatioMin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RatioMin);
      }
      if (RatioMax != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RatioMax);
      }
      if (Enable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Enable);
      }
      if (NewEnable != false) {
        output.WriteRawTag(40);
        output.WriteBool(NewEnable);
      }
      if (IsVip != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsVip);
      }
      if (VipLimit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(VipLimit);
      }
      if (IsMember != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsMember);
      }
      if (MemberSec != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MemberSec);
      }
      if (ExtraData != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ExtraData);
      }
      if (gunSpecEffect_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(GunSpecEffect);
      }
      if (Price != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Price);
      }
      if (AttackSpeed != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(AttackSpeed);
      }
      if (Rage != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Rage);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ActivityId);
      }
      ratioList_.WriteTo(output, _repeated_ratioList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GunLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunLevel);
      }
      if (RatioMin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RatioMin);
      }
      if (RatioMax != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RatioMax);
      }
      if (Enable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Enable);
      }
      if (NewEnable != false) {
        output.WriteRawTag(40);
        output.WriteBool(NewEnable);
      }
      if (IsVip != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsVip);
      }
      if (VipLimit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(VipLimit);
      }
      if (IsMember != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsMember);
      }
      if (MemberSec != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MemberSec);
      }
      if (ExtraData != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ExtraData);
      }
      if (gunSpecEffect_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(GunSpecEffect);
      }
      if (Price != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Price);
      }
      if (AttackSpeed != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(AttackSpeed);
      }
      if (Rage != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Rage);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ActivityId);
      }
      ratioList_.WriteTo(ref output, _repeated_ratioList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GunLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunLevel);
      }
      if (RatioMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RatioMin);
      }
      if (RatioMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RatioMax);
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (NewEnable != false) {
        size += 1 + 1;
      }
      if (IsVip != false) {
        size += 1 + 1;
      }
      if (VipLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLimit);
      }
      if (IsMember != false) {
        size += 1 + 1;
      }
      if (MemberSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberSec);
      }
      if (ExtraData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraData);
      }
      if (gunSpecEffect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GunSpecEffect);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (AttackSpeed != 0F) {
        size += 1 + 4;
      }
      if (Rage != 0F) {
        size += 1 + 4;
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      size += ratioList_.CalculateSize(_repeated_ratioList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GunInfo other) {
      if (other == null) {
        return;
      }
      if (other.GunLevel != 0) {
        GunLevel = other.GunLevel;
      }
      if (other.RatioMin != 0) {
        RatioMin = other.RatioMin;
      }
      if (other.RatioMax != 0) {
        RatioMax = other.RatioMax;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.NewEnable != false) {
        NewEnable = other.NewEnable;
      }
      if (other.IsVip != false) {
        IsVip = other.IsVip;
      }
      if (other.VipLimit != 0) {
        VipLimit = other.VipLimit;
      }
      if (other.IsMember != false) {
        IsMember = other.IsMember;
      }
      if (other.MemberSec != 0) {
        MemberSec = other.MemberSec;
      }
      if (other.ExtraData != 0) {
        ExtraData = other.ExtraData;
      }
      if (other.gunSpecEffect_ != null) {
        if (gunSpecEffect_ == null) {
          GunSpecEffect = new global::F4BY.GunSpecEffect();
        }
        GunSpecEffect.MergeFrom(other.GunSpecEffect);
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.AttackSpeed != 0F) {
        AttackSpeed = other.AttackSpeed;
      }
      if (other.Rage != 0F) {
        Rage = other.Rage;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      ratioList_.Add(other.ratioList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 16: {
            RatioMin = input.ReadInt32();
            break;
          }
          case 24: {
            RatioMax = input.ReadInt32();
            break;
          }
          case 32: {
            Enable = input.ReadBool();
            break;
          }
          case 40: {
            NewEnable = input.ReadBool();
            break;
          }
          case 48: {
            IsVip = input.ReadBool();
            break;
          }
          case 56: {
            VipLimit = input.ReadInt32();
            break;
          }
          case 64: {
            IsMember = input.ReadBool();
            break;
          }
          case 72: {
            MemberSec = input.ReadInt32();
            break;
          }
          case 80: {
            ExtraData = input.ReadInt32();
            break;
          }
          case 90: {
            if (gunSpecEffect_ == null) {
              GunSpecEffect = new global::F4BY.GunSpecEffect();
            }
            input.ReadMessage(GunSpecEffect);
            break;
          }
          case 96: {
            Price = input.ReadInt32();
            break;
          }
          case 109: {
            AttackSpeed = input.ReadFloat();
            break;
          }
          case 117: {
            Rage = input.ReadFloat();
            break;
          }
          case 120: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 130:
          case 128: {
            ratioList_.AddEntriesFrom(input, _repeated_ratioList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 16: {
            RatioMin = input.ReadInt32();
            break;
          }
          case 24: {
            RatioMax = input.ReadInt32();
            break;
          }
          case 32: {
            Enable = input.ReadBool();
            break;
          }
          case 40: {
            NewEnable = input.ReadBool();
            break;
          }
          case 48: {
            IsVip = input.ReadBool();
            break;
          }
          case 56: {
            VipLimit = input.ReadInt32();
            break;
          }
          case 64: {
            IsMember = input.ReadBool();
            break;
          }
          case 72: {
            MemberSec = input.ReadInt32();
            break;
          }
          case 80: {
            ExtraData = input.ReadInt32();
            break;
          }
          case 90: {
            if (gunSpecEffect_ == null) {
              GunSpecEffect = new global::F4BY.GunSpecEffect();
            }
            input.ReadMessage(GunSpecEffect);
            break;
          }
          case 96: {
            Price = input.ReadInt32();
            break;
          }
          case 109: {
            AttackSpeed = input.ReadFloat();
            break;
          }
          case 117: {
            Rage = input.ReadFloat();
            break;
          }
          case 120: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 130:
          case 128: {
            ratioList_.AddEntriesFrom(ref input, _repeated_ratioList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VipInfo : pb::IMessage<VipInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VipInfo> _parser = new pb::MessageParser<VipInfo>(() => new VipInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VipInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VipInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VipInfo(VipInfo other) : this() {
      oldVip_ = other.oldVip_;
      curVip_ = other.curVip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VipInfo Clone() {
      return new VipInfo(this);
    }

    /// <summary>Field number for the "old_vip" field.</summary>
    public const int OldVipFieldNumber = 1;
    private int oldVip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldVip {
      get { return oldVip_; }
      set {
        oldVip_ = value;
      }
    }

    /// <summary>Field number for the "cur_vip" field.</summary>
    public const int CurVipFieldNumber = 2;
    private int curVip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurVip {
      get { return curVip_; }
      set {
        curVip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VipInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VipInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OldVip != other.OldVip) return false;
      if (CurVip != other.CurVip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OldVip != 0) hash ^= OldVip.GetHashCode();
      if (CurVip != 0) hash ^= CurVip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OldVip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OldVip);
      }
      if (CurVip != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurVip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OldVip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OldVip);
      }
      if (CurVip != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurVip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldVip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldVip);
      }
      if (CurVip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurVip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VipInfo other) {
      if (other == null) {
        return;
      }
      if (other.OldVip != 0) {
        OldVip = other.OldVip;
      }
      if (other.CurVip != 0) {
        CurVip = other.CurVip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OldVip = input.ReadInt32();
            break;
          }
          case 16: {
            CurVip = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OldVip = input.ReadInt32();
            break;
          }
          case 16: {
            CurVip = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PropInfo : pb::IMessage<PropInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PropInfo> _parser = new pb::MessageParser<PropInfo>(() => new PropInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropInfo(PropInfo other) : this() {
      enable_ = other.enable_;
      prop_ = other.prop_ != null ? other.prop_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropInfo Clone() {
      return new PropInfo(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "prop" field.</summary>
    public const int PropFieldNumber = 2;
    private global::F4BY.Object prop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Object Prop {
      get { return prop_; }
      set {
        prop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      if (!object.Equals(Prop, other.Prop)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (prop_ != null) hash ^= Prop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (prop_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Prop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (prop_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Prop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (prop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prop);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropInfo other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.prop_ != null) {
        if (prop_ == null) {
          Prop = new global::F4BY.Object();
        }
        Prop.MergeFrom(other.Prop);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 18: {
            if (prop_ == null) {
              Prop = new global::F4BY.Object();
            }
            input.ReadMessage(Prop);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 18: {
            if (prop_ == null) {
              Prop = new global::F4BY.Object();
            }
            input.ReadMessage(Prop);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserInfoNotify : pb::IMessage<CSUserInfoNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserInfoNotify> _parser = new pb::MessageParser<CSUserInfoNotify>(() => new CSUserInfoNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserInfoNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserInfoNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserInfoNotify(CSUserInfoNotify other) : this() {
      broadcast_ = other.broadcast_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserInfoNotify Clone() {
      return new CSUserInfoNotify(this);
    }

    /// <summary>Field number for the "broadcast" field.</summary>
    public const int BroadcastFieldNumber = 1;
    private bool broadcast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Broadcast {
      get { return broadcast_; }
      set {
        broadcast_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserInfoNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserInfoNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Broadcast != other.Broadcast) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Broadcast != false) hash ^= Broadcast.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Broadcast != false) {
        output.WriteRawTag(8);
        output.WriteBool(Broadcast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Broadcast != false) {
        output.WriteRawTag(8);
        output.WriteBool(Broadcast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Broadcast != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserInfoNotify other) {
      if (other == null) {
        return;
      }
      if (other.Broadcast != false) {
        Broadcast = other.Broadcast;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Broadcast = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Broadcast = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserInfoNotify : pb::IMessage<SCUserInfoNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserInfoNotify> _parser = new pb::MessageParser<SCUserInfoNotify>(() => new SCUserInfoNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserInfoNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserInfoNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserInfoNotify(SCUserInfoNotify other) : this() {
      chairIdx_ = other.chairIdx_;
      gunInfo_ = other.gunInfo_.Clone();
      wingsInfo_ = other.wingsInfo_.Clone();
      vipInfo_ = other.vipInfo_ != null ? other.vipInfo_.Clone() : null;
      propInfo_ = other.propInfo_.Clone();
      lastGunLevel_ = other.lastGunLevel_;
      lastRatio_ = other.lastRatio_;
      lastWingsPropId_ = other.lastWingsPropId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserInfoNotify Clone() {
      return new SCUserInfoNotify(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "gun_info" field.</summary>
    public const int GunInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.GunInfo> _repeated_gunInfo_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.GunInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.GunInfo> gunInfo_ = new pbc::RepeatedField<global::F4BY.GunInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.GunInfo> GunInfo {
      get { return gunInfo_; }
    }

    /// <summary>Field number for the "wings_info" field.</summary>
    public const int WingsInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::F4BY.WingsInfo> _repeated_wingsInfo_codec
        = pb::FieldCodec.ForMessage(26, global::F4BY.WingsInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.WingsInfo> wingsInfo_ = new pbc::RepeatedField<global::F4BY.WingsInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.WingsInfo> WingsInfo {
      get { return wingsInfo_; }
    }

    /// <summary>Field number for the "vip_info" field.</summary>
    public const int VipInfoFieldNumber = 4;
    private global::F4BY.VipInfo vipInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.VipInfo VipInfo {
      get { return vipInfo_; }
      set {
        vipInfo_ = value;
      }
    }

    /// <summary>Field number for the "prop_info" field.</summary>
    public const int PropInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::F4BY.PropInfo> _repeated_propInfo_codec
        = pb::FieldCodec.ForMessage(42, global::F4BY.PropInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.PropInfo> propInfo_ = new pbc::RepeatedField<global::F4BY.PropInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.PropInfo> PropInfo {
      get { return propInfo_; }
    }

    /// <summary>Field number for the "last_gun_level" field.</summary>
    public const int LastGunLevelFieldNumber = 6;
    private int lastGunLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastGunLevel {
      get { return lastGunLevel_; }
      set {
        lastGunLevel_ = value;
      }
    }

    /// <summary>Field number for the "last_ratio" field.</summary>
    public const int LastRatioFieldNumber = 7;
    private int lastRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastRatio {
      get { return lastRatio_; }
      set {
        lastRatio_ = value;
      }
    }

    /// <summary>Field number for the "last_wings_propId" field.</summary>
    public const int LastWingsPropIdFieldNumber = 8;
    private int lastWingsPropId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastWingsPropId {
      get { return lastWingsPropId_; }
      set {
        lastWingsPropId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserInfoNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserInfoNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if(!gunInfo_.Equals(other.gunInfo_)) return false;
      if(!wingsInfo_.Equals(other.wingsInfo_)) return false;
      if (!object.Equals(VipInfo, other.VipInfo)) return false;
      if(!propInfo_.Equals(other.propInfo_)) return false;
      if (LastGunLevel != other.LastGunLevel) return false;
      if (LastRatio != other.LastRatio) return false;
      if (LastWingsPropId != other.LastWingsPropId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      hash ^= gunInfo_.GetHashCode();
      hash ^= wingsInfo_.GetHashCode();
      if (vipInfo_ != null) hash ^= VipInfo.GetHashCode();
      hash ^= propInfo_.GetHashCode();
      if (LastGunLevel != 0) hash ^= LastGunLevel.GetHashCode();
      if (LastRatio != 0) hash ^= LastRatio.GetHashCode();
      if (LastWingsPropId != 0) hash ^= LastWingsPropId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      gunInfo_.WriteTo(output, _repeated_gunInfo_codec);
      wingsInfo_.WriteTo(output, _repeated_wingsInfo_codec);
      if (vipInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(VipInfo);
      }
      propInfo_.WriteTo(output, _repeated_propInfo_codec);
      if (LastGunLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LastGunLevel);
      }
      if (LastRatio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LastRatio);
      }
      if (LastWingsPropId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LastWingsPropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      gunInfo_.WriteTo(ref output, _repeated_gunInfo_codec);
      wingsInfo_.WriteTo(ref output, _repeated_wingsInfo_codec);
      if (vipInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(VipInfo);
      }
      propInfo_.WriteTo(ref output, _repeated_propInfo_codec);
      if (LastGunLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LastGunLevel);
      }
      if (LastRatio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LastRatio);
      }
      if (LastWingsPropId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LastWingsPropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      size += gunInfo_.CalculateSize(_repeated_gunInfo_codec);
      size += wingsInfo_.CalculateSize(_repeated_wingsInfo_codec);
      if (vipInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VipInfo);
      }
      size += propInfo_.CalculateSize(_repeated_propInfo_codec);
      if (LastGunLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastGunLevel);
      }
      if (LastRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastRatio);
      }
      if (LastWingsPropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastWingsPropId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserInfoNotify other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      gunInfo_.Add(other.gunInfo_);
      wingsInfo_.Add(other.wingsInfo_);
      if (other.vipInfo_ != null) {
        if (vipInfo_ == null) {
          VipInfo = new global::F4BY.VipInfo();
        }
        VipInfo.MergeFrom(other.VipInfo);
      }
      propInfo_.Add(other.propInfo_);
      if (other.LastGunLevel != 0) {
        LastGunLevel = other.LastGunLevel;
      }
      if (other.LastRatio != 0) {
        LastRatio = other.LastRatio;
      }
      if (other.LastWingsPropId != 0) {
        LastWingsPropId = other.LastWingsPropId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 18: {
            gunInfo_.AddEntriesFrom(input, _repeated_gunInfo_codec);
            break;
          }
          case 26: {
            wingsInfo_.AddEntriesFrom(input, _repeated_wingsInfo_codec);
            break;
          }
          case 34: {
            if (vipInfo_ == null) {
              VipInfo = new global::F4BY.VipInfo();
            }
            input.ReadMessage(VipInfo);
            break;
          }
          case 42: {
            propInfo_.AddEntriesFrom(input, _repeated_propInfo_codec);
            break;
          }
          case 48: {
            LastGunLevel = input.ReadInt32();
            break;
          }
          case 56: {
            LastRatio = input.ReadInt32();
            break;
          }
          case 64: {
            LastWingsPropId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 18: {
            gunInfo_.AddEntriesFrom(ref input, _repeated_gunInfo_codec);
            break;
          }
          case 26: {
            wingsInfo_.AddEntriesFrom(ref input, _repeated_wingsInfo_codec);
            break;
          }
          case 34: {
            if (vipInfo_ == null) {
              VipInfo = new global::F4BY.VipInfo();
            }
            input.ReadMessage(VipInfo);
            break;
          }
          case 42: {
            propInfo_.AddEntriesFrom(ref input, _repeated_propInfo_codec);
            break;
          }
          case 48: {
            LastGunLevel = input.ReadInt32();
            break;
          }
          case 56: {
            LastRatio = input.ReadInt32();
            break;
          }
          case 64: {
            LastWingsPropId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGameInfoNotify : pb::IMessage<SCGameInfoNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGameInfoNotify> _parser = new pb::MessageParser<SCGameInfoNotify>(() => new SCGameInfoNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGameInfoNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameInfoNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameInfoNotify(SCGameInfoNotify other) : this() {
      userPool_ = other.userPool_;
      awardFish_ = other.awardFish_.Clone();
      userPoolLimit_ = other.userPoolLimit_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameInfoNotify Clone() {
      return new SCGameInfoNotify(this);
    }

    /// <summary>Field number for the "user_pool" field.</summary>
    public const int UserPoolFieldNumber = 1;
    private bool userPool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UserPool {
      get { return userPool_; }
      set {
        userPool_ = value;
      }
    }

    /// <summary>Field number for the "award_fish" field.</summary>
    public const int AwardFishFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_awardFish_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> awardFish_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AwardFish {
      get { return awardFish_; }
    }

    /// <summary>Field number for the "user_pool_limit" field.</summary>
    public const int UserPoolLimitFieldNumber = 3;
    private static readonly pb::FieldCodec<global::F4BY.Object3> _repeated_userPoolLimit_codec
        = pb::FieldCodec.ForMessage(26, global::F4BY.Object3.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Object3> userPoolLimit_ = new pbc::RepeatedField<global::F4BY.Object3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Object3> UserPoolLimit {
      get { return userPoolLimit_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGameInfoNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGameInfoNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserPool != other.UserPool) return false;
      if(!awardFish_.Equals(other.awardFish_)) return false;
      if(!userPoolLimit_.Equals(other.userPoolLimit_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserPool != false) hash ^= UserPool.GetHashCode();
      hash ^= awardFish_.GetHashCode();
      hash ^= userPoolLimit_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserPool != false) {
        output.WriteRawTag(8);
        output.WriteBool(UserPool);
      }
      awardFish_.WriteTo(output, _repeated_awardFish_codec);
      userPoolLimit_.WriteTo(output, _repeated_userPoolLimit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserPool != false) {
        output.WriteRawTag(8);
        output.WriteBool(UserPool);
      }
      awardFish_.WriteTo(ref output, _repeated_awardFish_codec);
      userPoolLimit_.WriteTo(ref output, _repeated_userPoolLimit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserPool != false) {
        size += 1 + 1;
      }
      size += awardFish_.CalculateSize(_repeated_awardFish_codec);
      size += userPoolLimit_.CalculateSize(_repeated_userPoolLimit_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGameInfoNotify other) {
      if (other == null) {
        return;
      }
      if (other.UserPool != false) {
        UserPool = other.UserPool;
      }
      awardFish_.Add(other.awardFish_);
      userPoolLimit_.Add(other.userPoolLimit_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserPool = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            awardFish_.AddEntriesFrom(input, _repeated_awardFish_codec);
            break;
          }
          case 26: {
            userPoolLimit_.AddEntriesFrom(input, _repeated_userPoolLimit_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserPool = input.ReadBool();
            break;
          }
          case 18:
          case 16: {
            awardFish_.AddEntriesFrom(ref input, _repeated_awardFish_codec);
            break;
          }
          case 26: {
            userPoolLimit_.AddEntriesFrom(ref input, _repeated_userPoolLimit_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCInfoRedDot : pb::IMessage<SCInfoRedDot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCInfoRedDot> _parser = new pb::MessageParser<SCInfoRedDot>(() => new SCInfoRedDot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCInfoRedDot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCInfoRedDot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCInfoRedDot(SCInfoRedDot other) : this() {
      sevenDay_ = other.sevenDay_;
      redDot_ = other.redDot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCInfoRedDot Clone() {
      return new SCInfoRedDot(this);
    }

    /// <summary>Field number for the "seven_day" field.</summary>
    public const int SevenDayFieldNumber = 1;
    private bool sevenDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SevenDay {
      get { return sevenDay_; }
      set {
        sevenDay_ = value;
      }
    }

    /// <summary>Field number for the "red_dot" field.</summary>
    public const int RedDotFieldNumber = 2;
    private bool redDot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RedDot {
      get { return redDot_; }
      set {
        redDot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCInfoRedDot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCInfoRedDot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SevenDay != other.SevenDay) return false;
      if (RedDot != other.RedDot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SevenDay != false) hash ^= SevenDay.GetHashCode();
      if (RedDot != false) hash ^= RedDot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SevenDay != false) {
        output.WriteRawTag(8);
        output.WriteBool(SevenDay);
      }
      if (RedDot != false) {
        output.WriteRawTag(16);
        output.WriteBool(RedDot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SevenDay != false) {
        output.WriteRawTag(8);
        output.WriteBool(SevenDay);
      }
      if (RedDot != false) {
        output.WriteRawTag(16);
        output.WriteBool(RedDot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SevenDay != false) {
        size += 1 + 1;
      }
      if (RedDot != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCInfoRedDot other) {
      if (other == null) {
        return;
      }
      if (other.SevenDay != false) {
        SevenDay = other.SevenDay;
      }
      if (other.RedDot != false) {
        RedDot = other.RedDot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SevenDay = input.ReadBool();
            break;
          }
          case 16: {
            RedDot = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SevenDay = input.ReadBool();
            break;
          }
          case 16: {
            RedDot = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JumpHighArena : pb::IMessage<JumpHighArena>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JumpHighArena> _parser = new pb::MessageParser<JumpHighArena>(() => new JumpHighArena());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JumpHighArena> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpHighArena() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpHighArena(JumpHighArena other) : this() {
      isOpen_ = other.isOpen_;
      vip_ = other.vip_;
      coin_ = other.coin_;
      gameTime_ = other.gameTime_;
      tips_ = other.tips_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JumpHighArena Clone() {
      return new JumpHighArena(this);
    }

    /// <summary>Field number for the "is_open" field.</summary>
    public const int IsOpenFieldNumber = 1;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 2;
    private int vip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 3;
    private int coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "game_time" field.</summary>
    public const int GameTimeFieldNumber = 4;
    private int gameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameTime {
      get { return gameTime_; }
      set {
        gameTime_ = value;
      }
    }

    /// <summary>Field number for the "tips" field.</summary>
    public const int TipsFieldNumber = 5;
    private string tips_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tips {
      get { return tips_; }
      set {
        tips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JumpHighArena);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JumpHighArena other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpen != other.IsOpen) return false;
      if (Vip != other.Vip) return false;
      if (Coin != other.Coin) return false;
      if (GameTime != other.GameTime) return false;
      if (Tips != other.Tips) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (Vip != 0) hash ^= Vip.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (GameTime != 0) hash ^= GameTime.GetHashCode();
      if (Tips.Length != 0) hash ^= Tips.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (Vip != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Vip);
      }
      if (Coin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Coin);
      }
      if (GameTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GameTime);
      }
      if (Tips.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsOpen != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpen);
      }
      if (Vip != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Vip);
      }
      if (Coin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Coin);
      }
      if (GameTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GameTime);
      }
      if (Tips.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Tips);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (Vip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vip);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (GameTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
      }
      if (Tips.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tips);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JumpHighArena other) {
      if (other == null) {
        return;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      if (other.Vip != 0) {
        Vip = other.Vip;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.GameTime != 0) {
        GameTime = other.GameTime;
      }
      if (other.Tips.Length != 0) {
        Tips = other.Tips;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
          case 16: {
            Vip = input.ReadInt32();
            break;
          }
          case 24: {
            Coin = input.ReadInt32();
            break;
          }
          case 32: {
            GameTime = input.ReadInt32();
            break;
          }
          case 42: {
            Tips = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsOpen = input.ReadBool();
            break;
          }
          case 16: {
            Vip = input.ReadInt32();
            break;
          }
          case 24: {
            Coin = input.ReadInt32();
            break;
          }
          case 32: {
            GameTime = input.ReadInt32();
            break;
          }
          case 42: {
            Tips = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCActivityInfo : pb::IMessage<SCActivityInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCActivityInfo> _parser = new pb::MessageParser<SCActivityInfo>(() => new SCActivityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCActivityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCActivityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCActivityInfo(SCActivityInfo other) : this() {
      jump_ = other.jump_ != null ? other.jump_.Clone() : null;
      limit_ = other.limit_;
      poolIsOpen_ = other.poolIsOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCActivityInfo Clone() {
      return new SCActivityInfo(this);
    }

    /// <summary>Field number for the "jump" field.</summary>
    public const int JumpFieldNumber = 1;
    private global::F4BY.JumpHighArena jump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.JumpHighArena Jump {
      get { return jump_; }
      set {
        jump_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "pool_is_open" field.</summary>
    public const int PoolIsOpenFieldNumber = 3;
    private bool poolIsOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PoolIsOpen {
      get { return poolIsOpen_; }
      set {
        poolIsOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCActivityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCActivityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Jump, other.Jump)) return false;
      if (Limit != other.Limit) return false;
      if (PoolIsOpen != other.PoolIsOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (jump_ != null) hash ^= Jump.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (PoolIsOpen != false) hash ^= PoolIsOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (jump_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Jump);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (PoolIsOpen != false) {
        output.WriteRawTag(24);
        output.WriteBool(PoolIsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (jump_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Jump);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (PoolIsOpen != false) {
        output.WriteRawTag(24);
        output.WriteBool(PoolIsOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (jump_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Jump);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (PoolIsOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCActivityInfo other) {
      if (other == null) {
        return;
      }
      if (other.jump_ != null) {
        if (jump_ == null) {
          Jump = new global::F4BY.JumpHighArena();
        }
        Jump.MergeFrom(other.Jump);
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.PoolIsOpen != false) {
        PoolIsOpen = other.PoolIsOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (jump_ == null) {
              Jump = new global::F4BY.JumpHighArena();
            }
            input.ReadMessage(Jump);
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
          case 24: {
            PoolIsOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (jump_ == null) {
              Jump = new global::F4BY.JumpHighArena();
            }
            input.ReadMessage(Jump);
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
          case 24: {
            PoolIsOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSChat : pb::IMessage<CSChat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSChat> _parser = new pb::MessageParser<CSChat>(() => new CSChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChat(CSChat other) : this() {
      msgType_ = other.msgType_;
      msgIdx_ = other.msgIdx_;
      chairIdx_ = other.chairIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChat Clone() {
      return new CSChat(this);
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 1;
    private int msgType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "msg_idx" field.</summary>
    public const int MsgIdxFieldNumber = 2;
    private int msgIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgIdx {
      get { return msgIdx_; }
      set {
        msgIdx_ = value;
      }
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 3;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgType != other.MsgType) return false;
      if (MsgIdx != other.MsgIdx) return false;
      if (ChairIdx != other.ChairIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (MsgIdx != 0) hash ^= MsgIdx.GetHashCode();
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MsgType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MsgType);
      }
      if (MsgIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MsgIdx);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MsgType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MsgType);
      }
      if (MsgIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MsgIdx);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgType);
      }
      if (MsgIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgIdx);
      }
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSChat other) {
      if (other == null) {
        return;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.MsgIdx != 0) {
        MsgIdx = other.MsgIdx;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MsgType = input.ReadInt32();
            break;
          }
          case 16: {
            MsgIdx = input.ReadInt32();
            break;
          }
          case 24: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MsgType = input.ReadInt32();
            break;
          }
          case 16: {
            MsgIdx = input.ReadInt32();
            break;
          }
          case 24: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCChat : pb::IMessage<SCChat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCChat> _parser = new pb::MessageParser<SCChat>(() => new SCChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChat(SCChat other) : this() {
      chairIdx_ = other.chairIdx_;
      msgType_ = other.msgType_;
      msgIdx_ = other.msgIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChat Clone() {
      return new SCChat(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 2;
    private int msgType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "msg_idx" field.</summary>
    public const int MsgIdxFieldNumber = 3;
    private int msgIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgIdx {
      get { return msgIdx_; }
      set {
        msgIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (MsgType != other.MsgType) return false;
      if (MsgIdx != other.MsgIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      if (MsgIdx != 0) hash ^= MsgIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (MsgType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MsgType);
      }
      if (MsgIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MsgIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (MsgType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MsgType);
      }
      if (MsgIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MsgIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgType);
      }
      if (MsgIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCChat other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      if (other.MsgIdx != 0) {
        MsgIdx = other.MsgIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            MsgType = input.ReadInt32();
            break;
          }
          case 24: {
            MsgIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            MsgType = input.ReadInt32();
            break;
          }
          case 24: {
            MsgIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGainAward : pb::IMessage<SCGainAward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGainAward> _parser = new pb::MessageParser<SCGainAward>(() => new SCGainAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGainAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGainAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGainAward(SCGainAward other) : this() {
      chairIdx_ = other.chairIdx_;
      score_ = other.score_;
      award_ = other.award_ != null ? other.award_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGainAward Clone() {
      return new SCGainAward(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 3;
    private global::F4BY.Object award_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Object Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGainAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGainAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Score != other.Score) return false;
      if (!object.Equals(Award, other.Award)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (award_ != null) hash ^= Award.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (award_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Award);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (award_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Award);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (award_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Award);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGainAward other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.award_ != null) {
        if (award_ == null) {
          Award = new global::F4BY.Object();
        }
        Award.MergeFrom(other.Award);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 26: {
            if (award_ == null) {
              Award = new global::F4BY.Object();
            }
            input.ReadMessage(Award);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 26: {
            if (award_ == null) {
              Award = new global::F4BY.Object();
            }
            input.ReadMessage(Award);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSAwardPool : pb::IMessage<CSAwardPool>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSAwardPool> _parser = new pb::MessageParser<CSAwardPool>(() => new CSAwardPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSAwardPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAwardPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAwardPool(CSAwardPool other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAwardPool Clone() {
      return new CSAwardPool(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSAwardPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSAwardPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSAwardPool other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCAwardPool : pb::IMessage<SCAwardPool>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCAwardPool> _parser = new pb::MessageParser<SCAwardPool>(() => new SCAwardPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCAwardPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAwardPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAwardPool(SCAwardPool other) : this() {
      pool_ = other.pool_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAwardPool Clone() {
      return new SCAwardPool(this);
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.Object3> _repeated_pool_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.Object3.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Object3> pool_ = new pbc::RepeatedField<global::F4BY.Object3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Object3> Pool {
      get { return pool_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCAwardPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCAwardPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pool_.Equals(other.pool_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pool_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pool_.WriteTo(output, _repeated_pool_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pool_.WriteTo(ref output, _repeated_pool_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pool_.CalculateSize(_repeated_pool_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCAwardPool other) {
      if (other == null) {
        return;
      }
      pool_.Add(other.pool_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pool_.AddEntriesFrom(input, _repeated_pool_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pool_.AddEntriesFrom(ref input, _repeated_pool_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSPropStatus : pb::IMessage<CSPropStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSPropStatus> _parser = new pb::MessageParser<CSPropStatus>(() => new CSPropStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPropStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPropStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPropStatus(CSPropStatus other) : this() {
      propId_ = other.propId_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPropStatus Clone() {
      return new CSPropStatus(this);
    }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSPropStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSPropStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropId != other.PropId) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSPropStatus other) {
      if (other == null) {
        return;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCPropStatus : pb::IMessage<SCPropStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPropStatus> _parser = new pb::MessageParser<SCPropStatus>(() => new SCPropStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPropStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPropStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPropStatus(SCPropStatus other) : this() {
      chairIdx_ = other.chairIdx_;
      propId_ = other.propId_;
      status_ = other.status_;
      btId_ = other.btId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPropStatus Clone() {
      return new SCPropStatus(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 2;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "bt_id" field.</summary>
    public const int BtIdFieldNumber = 4;
    private int btId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtId {
      get { return btId_; }
      set {
        btId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPropStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPropStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (PropId != other.PropId) return false;
      if (Status != other.Status) return false;
      if (BtId != other.BtId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (BtId != 0) hash ^= BtId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropId);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (BtId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BtId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropId);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (BtId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BtId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (BtId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPropStatus other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.BtId != 0) {
        BtId = other.BtId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            PropId = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 32: {
            BtId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            PropId = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 32: {
            BtId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GivenCardAward : pb::IMessage<GivenCardAward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GivenCardAward> _parser = new pb::MessageParser<GivenCardAward>(() => new GivenCardAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GivenCardAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GivenCardAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GivenCardAward(GivenCardAward other) : this() {
      cardIdx_ = other.cardIdx_;
      base_ = other.base_;
      multiple_ = other.multiple_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GivenCardAward Clone() {
      return new GivenCardAward(this);
    }

    /// <summary>Field number for the "card_idx" field.</summary>
    public const int CardIdxFieldNumber = 1;
    private int cardIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardIdx {
      get { return cardIdx_; }
      set {
        cardIdx_ = value;
      }
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 2;
    private int base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 3;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GivenCardAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GivenCardAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardIdx != other.CardIdx) return false;
      if (Base != other.Base) return false;
      if (Multiple != other.Multiple) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardIdx != 0) hash ^= CardIdx.GetHashCode();
      if (Base != 0) hash ^= Base.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CardIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardIdx);
      }
      if (Base != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Base);
      }
      if (Multiple != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CardIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardIdx);
      }
      if (Base != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Base);
      }
      if (Multiple != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardIdx);
      }
      if (Base != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Base);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GivenCardAward other) {
      if (other == null) {
        return;
      }
      if (other.CardIdx != 0) {
        CardIdx = other.CardIdx;
      }
      if (other.Base != 0) {
        Base = other.Base;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Base = input.ReadInt32();
            break;
          }
          case 24: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CardIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Base = input.ReadInt32();
            break;
          }
          case 24: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserAwardItem : pb::IMessage<UserAwardItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserAwardItem> _parser = new pb::MessageParser<UserAwardItem>(() => new UserAwardItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAwardItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAwardItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAwardItem(UserAwardItem other) : this() {
      index_ = other.index_;
      itemMax_ = other.itemMax_;
      name_ = other.name_;
      goods_ = other.goods_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAwardItem Clone() {
      return new UserAwardItem(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "item_max" field.</summary>
    public const int ItemMaxFieldNumber = 2;
    private int itemMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemMax {
      get { return itemMax_; }
      set {
        itemMax_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::F4BY.Object2> _repeated_goods_codec
        = pb::FieldCodec.ForMessage(34, global::F4BY.Object2.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Object2> goods_ = new pbc::RepeatedField<global::F4BY.Object2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Object2> Goods {
      get { return goods_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAwardItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAwardItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (ItemMax != other.ItemMax) return false;
      if (Name != other.Name) return false;
      if(!goods_.Equals(other.goods_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (ItemMax != 0) hash ^= ItemMax.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= goods_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (ItemMax != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemMax);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      goods_.WriteTo(output, _repeated_goods_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (ItemMax != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemMax);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      goods_.WriteTo(ref output, _repeated_goods_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (ItemMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemMax);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += goods_.CalculateSize(_repeated_goods_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAwardItem other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.ItemMax != 0) {
        ItemMax = other.ItemMax;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      goods_.Add(other.goods_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            ItemMax = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            goods_.AddEntriesFrom(input, _repeated_goods_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            ItemMax = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            goods_.AddEntriesFrom(ref input, _repeated_goods_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserPoolInfo : pb::IMessage<CSUserPoolInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserPoolInfo> _parser = new pb::MessageParser<CSUserPoolInfo>(() => new CSUserPoolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserPoolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolInfo(CSUserPoolInfo other) : this() {
      openPage_ = other.openPage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolInfo Clone() {
      return new CSUserPoolInfo(this);
    }

    /// <summary>Field number for the "open_page" field.</summary>
    public const int OpenPageFieldNumber = 1;
    private bool openPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpenPage {
      get { return openPage_; }
      set {
        openPage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserPoolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserPoolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpenPage != other.OpenPage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpenPage != false) hash ^= OpenPage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OpenPage != false) {
        output.WriteRawTag(8);
        output.WriteBool(OpenPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OpenPage != false) {
        output.WriteRawTag(8);
        output.WriteBool(OpenPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpenPage != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserPoolInfo other) {
      if (other == null) {
        return;
      }
      if (other.OpenPage != false) {
        OpenPage = other.OpenPage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OpenPage = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OpenPage = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserPoolInfo : pb::IMessage<SCUserPoolInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserPoolInfo> _parser = new pb::MessageParser<SCUserPoolInfo>(() => new SCUserPoolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserPoolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolInfo(SCUserPoolInfo other) : this() {
      chairIdx_ = other.chairIdx_;
      openPage_ = other.openPage_;
      status_ = other.status_;
      count_ = other.count_;
      poolMax_ = other.poolMax_;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolInfo Clone() {
      return new SCUserPoolInfo(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "open_page" field.</summary>
    public const int OpenPageFieldNumber = 2;
    private bool openPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpenPage {
      get { return openPage_; }
      set {
        openPage_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private bool status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "pool_max" field.</summary>
    public const int PoolMaxFieldNumber = 5;
    private int poolMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PoolMax {
      get { return poolMax_; }
      set {
        poolMax_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::F4BY.UserAwardItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(50, global::F4BY.UserAwardItem.Parser);
    private readonly pbc::RepeatedField<global::F4BY.UserAwardItem> items_ = new pbc::RepeatedField<global::F4BY.UserAwardItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.UserAwardItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserPoolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserPoolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (OpenPage != other.OpenPage) return false;
      if (Status != other.Status) return false;
      if (Count != other.Count) return false;
      if (PoolMax != other.PoolMax) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (OpenPage != false) hash ^= OpenPage.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (PoolMax != 0) hash ^= PoolMax.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (OpenPage != false) {
        output.WriteRawTag(16);
        output.WriteBool(OpenPage);
      }
      if (Status != false) {
        output.WriteRawTag(24);
        output.WriteBool(Status);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count);
      }
      if (PoolMax != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PoolMax);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (OpenPage != false) {
        output.WriteRawTag(16);
        output.WriteBool(OpenPage);
      }
      if (Status != false) {
        output.WriteRawTag(24);
        output.WriteBool(Status);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count);
      }
      if (PoolMax != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PoolMax);
      }
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (OpenPage != false) {
        size += 1 + 1;
      }
      if (Status != false) {
        size += 1 + 1;
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (PoolMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoolMax);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserPoolInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.OpenPage != false) {
        OpenPage = other.OpenPage;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.PoolMax != 0) {
        PoolMax = other.PoolMax;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            OpenPage = input.ReadBool();
            break;
          }
          case 24: {
            Status = input.ReadBool();
            break;
          }
          case 32: {
            Count = input.ReadInt32();
            break;
          }
          case 40: {
            PoolMax = input.ReadInt32();
            break;
          }
          case 50: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            OpenPage = input.ReadBool();
            break;
          }
          case 24: {
            Status = input.ReadBool();
            break;
          }
          case 32: {
            Count = input.ReadInt32();
            break;
          }
          case 40: {
            PoolMax = input.ReadInt32();
            break;
          }
          case 50: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserPoolStatus : pb::IMessage<CSUserPoolStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserPoolStatus> _parser = new pb::MessageParser<CSUserPoolStatus>(() => new CSUserPoolStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserPoolStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolStatus(CSUserPoolStatus other) : this() {
      open_ = other.open_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolStatus Clone() {
      return new CSUserPoolStatus(this);
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private bool open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserPoolStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserPoolStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Open != other.Open) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Open != false) hash ^= Open.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Open != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserPoolStatus other) {
      if (other == null) {
        return;
      }
      if (other.Open != false) {
        Open = other.Open;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserPoolStatus : pb::IMessage<SCUserPoolStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserPoolStatus> _parser = new pb::MessageParser<SCUserPoolStatus>(() => new SCUserPoolStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserPoolStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolStatus(SCUserPoolStatus other) : this() {
      open_ = other.open_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolStatus Clone() {
      return new SCUserPoolStatus(this);
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private bool open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserPoolStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserPoolStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Open != other.Open) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Open != false) hash ^= Open.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Open != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserPoolStatus other) {
      if (other == null) {
        return;
      }
      if (other.Open != false) {
        Open = other.Open;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserPoolPreDraw : pb::IMessage<CSUserPoolPreDraw>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserPoolPreDraw> _parser = new pb::MessageParser<CSUserPoolPreDraw>(() => new CSUserPoolPreDraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserPoolPreDraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolPreDraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolPreDraw(CSUserPoolPreDraw other) : this() {
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolPreDraw Clone() {
      return new CSUserPoolPreDraw(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserPoolPreDraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserPoolPreDraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserPoolPreDraw other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserPoolPreDraw : pb::IMessage<SCUserPoolPreDraw>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserPoolPreDraw> _parser = new pb::MessageParser<SCUserPoolPreDraw>(() => new SCUserPoolPreDraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserPoolPreDraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolPreDraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolPreDraw(SCUserPoolPreDraw other) : this() {
      code_ = other.code_;
      level_ = other.level_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolPreDraw Clone() {
      return new SCUserPoolPreDraw(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserPoolPreDraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserPoolPreDraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Level != other.Level) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserPoolPreDraw other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserPoolDraw : pb::IMessage<CSUserPoolDraw>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserPoolDraw> _parser = new pb::MessageParser<CSUserPoolDraw>(() => new CSUserPoolDraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserPoolDraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolDraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolDraw(CSUserPoolDraw other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolDraw Clone() {
      return new CSUserPoolDraw(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserPoolDraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserPoolDraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserPoolDraw other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserPoolDraw : pb::IMessage<SCUserPoolDraw>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserPoolDraw> _parser = new pb::MessageParser<SCUserPoolDraw>(() => new SCUserPoolDraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserPoolDraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolDraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolDraw(SCUserPoolDraw other) : this() {
      chairIdx_ = other.chairIdx_;
      goods_ = other.goods_.Clone();
      award_ = other.award_ != null ? other.award_.Clone() : null;
      awardCnt_ = other.awardCnt_ != null ? other.awardCnt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolDraw Clone() {
      return new SCUserPoolDraw(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.Object2> _repeated_goods_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.Object2.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Object2> goods_ = new pbc::RepeatedField<global::F4BY.Object2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Object2> Goods {
      get { return goods_; }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 3;
    private global::F4BY.Object2 award_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Object2 Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    /// <summary>Field number for the "award_cnt" field.</summary>
    public const int AwardCntFieldNumber = 4;
    private global::F4BY.Object awardCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Object AwardCnt {
      get { return awardCnt_; }
      set {
        awardCnt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserPoolDraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserPoolDraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if(!goods_.Equals(other.goods_)) return false;
      if (!object.Equals(Award, other.Award)) return false;
      if (!object.Equals(AwardCnt, other.AwardCnt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      hash ^= goods_.GetHashCode();
      if (award_ != null) hash ^= Award.GetHashCode();
      if (awardCnt_ != null) hash ^= AwardCnt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      goods_.WriteTo(output, _repeated_goods_codec);
      if (award_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Award);
      }
      if (awardCnt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AwardCnt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      goods_.WriteTo(ref output, _repeated_goods_codec);
      if (award_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Award);
      }
      if (awardCnt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AwardCnt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      size += goods_.CalculateSize(_repeated_goods_codec);
      if (award_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Award);
      }
      if (awardCnt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AwardCnt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserPoolDraw other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      goods_.Add(other.goods_);
      if (other.award_ != null) {
        if (award_ == null) {
          Award = new global::F4BY.Object2();
        }
        Award.MergeFrom(other.Award);
      }
      if (other.awardCnt_ != null) {
        if (awardCnt_ == null) {
          AwardCnt = new global::F4BY.Object();
        }
        AwardCnt.MergeFrom(other.AwardCnt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 18: {
            goods_.AddEntriesFrom(input, _repeated_goods_codec);
            break;
          }
          case 26: {
            if (award_ == null) {
              Award = new global::F4BY.Object2();
            }
            input.ReadMessage(Award);
            break;
          }
          case 34: {
            if (awardCnt_ == null) {
              AwardCnt = new global::F4BY.Object();
            }
            input.ReadMessage(AwardCnt);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 18: {
            goods_.AddEntriesFrom(ref input, _repeated_goods_codec);
            break;
          }
          case 26: {
            if (award_ == null) {
              Award = new global::F4BY.Object2();
            }
            input.ReadMessage(Award);
            break;
          }
          case 34: {
            if (awardCnt_ == null) {
              AwardCnt = new global::F4BY.Object();
            }
            input.ReadMessage(AwardCnt);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserPoolAdd : pb::IMessage<SCUserPoolAdd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserPoolAdd> _parser = new pb::MessageParser<SCUserPoolAdd>(() => new SCUserPoolAdd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserPoolAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolAdd(SCUserPoolAdd other) : this() {
      add_ = other.add_;
      count_ = other.count_;
      firstMax_ = other.firstMax_;
      poolMax_ = other.poolMax_;
      status_ = other.status_;
      levelName_ = other.levelName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolAdd Clone() {
      return new SCUserPoolAdd(this);
    }

    /// <summary>Field number for the "add" field.</summary>
    public const int AddFieldNumber = 1;
    private int add_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Add {
      get { return add_; }
      set {
        add_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "first_max" field.</summary>
    public const int FirstMaxFieldNumber = 3;
    private int firstMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstMax {
      get { return firstMax_; }
      set {
        firstMax_ = value;
      }
    }

    /// <summary>Field number for the "pool_max" field.</summary>
    public const int PoolMaxFieldNumber = 4;
    private int poolMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PoolMax {
      get { return poolMax_; }
      set {
        poolMax_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private bool status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "level_name" field.</summary>
    public const int LevelNameFieldNumber = 6;
    private string levelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelName {
      get { return levelName_; }
      set {
        levelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserPoolAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserPoolAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Add != other.Add) return false;
      if (Count != other.Count) return false;
      if (FirstMax != other.FirstMax) return false;
      if (PoolMax != other.PoolMax) return false;
      if (Status != other.Status) return false;
      if (LevelName != other.LevelName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Add != 0) hash ^= Add.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (FirstMax != 0) hash ^= FirstMax.GetHashCode();
      if (PoolMax != 0) hash ^= PoolMax.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      if (LevelName.Length != 0) hash ^= LevelName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Add != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Add);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (FirstMax != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FirstMax);
      }
      if (PoolMax != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PoolMax);
      }
      if (Status != false) {
        output.WriteRawTag(40);
        output.WriteBool(Status);
      }
      if (LevelName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LevelName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Add != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Add);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (FirstMax != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FirstMax);
      }
      if (PoolMax != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PoolMax);
      }
      if (Status != false) {
        output.WriteRawTag(40);
        output.WriteBool(Status);
      }
      if (LevelName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LevelName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Add != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Add);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (FirstMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstMax);
      }
      if (PoolMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoolMax);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      if (LevelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserPoolAdd other) {
      if (other == null) {
        return;
      }
      if (other.Add != 0) {
        Add = other.Add;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.FirstMax != 0) {
        FirstMax = other.FirstMax;
      }
      if (other.PoolMax != 0) {
        PoolMax = other.PoolMax;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      if (other.LevelName.Length != 0) {
        LevelName = other.LevelName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Add = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            FirstMax = input.ReadInt32();
            break;
          }
          case 32: {
            PoolMax = input.ReadInt32();
            break;
          }
          case 40: {
            Status = input.ReadBool();
            break;
          }
          case 50: {
            LevelName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Add = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            FirstMax = input.ReadInt32();
            break;
          }
          case 32: {
            PoolMax = input.ReadInt32();
            break;
          }
          case 40: {
            Status = input.ReadBool();
            break;
          }
          case 50: {
            LevelName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserPoolDoubleInfo : pb::IMessage<CSUserPoolDoubleInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserPoolDoubleInfo> _parser = new pb::MessageParser<CSUserPoolDoubleInfo>(() => new CSUserPoolDoubleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserPoolDoubleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolDoubleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolDoubleInfo(CSUserPoolDoubleInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolDoubleInfo Clone() {
      return new CSUserPoolDoubleInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserPoolDoubleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserPoolDoubleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserPoolDoubleInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserPoolDoubleInfo : pb::IMessage<SCUserPoolDoubleInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserPoolDoubleInfo> _parser = new pb::MessageParser<SCUserPoolDoubleInfo>(() => new SCUserPoolDoubleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserPoolDoubleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolDoubleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolDoubleInfo(SCUserPoolDoubleInfo other) : this() {
      cost_ = other.cost_;
      itemBefore_ = other.itemBefore_ != null ? other.itemBefore_.Clone() : null;
      itemDouble_ = other.itemDouble_ != null ? other.itemDouble_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolDoubleInfo Clone() {
      return new SCUserPoolDoubleInfo(this);
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 1;
    private int cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "item_before" field.</summary>
    public const int ItemBeforeFieldNumber = 2;
    private global::F4BY.Object2 itemBefore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Object2 ItemBefore {
      get { return itemBefore_; }
      set {
        itemBefore_ = value;
      }
    }

    /// <summary>Field number for the "item_double" field.</summary>
    public const int ItemDoubleFieldNumber = 3;
    private global::F4BY.Object2 itemDouble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Object2 ItemDouble {
      get { return itemDouble_; }
      set {
        itemDouble_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserPoolDoubleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserPoolDoubleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cost != other.Cost) return false;
      if (!object.Equals(ItemBefore, other.ItemBefore)) return false;
      if (!object.Equals(ItemDouble, other.ItemDouble)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (itemBefore_ != null) hash ^= ItemBefore.GetHashCode();
      if (itemDouble_ != null) hash ^= ItemDouble.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Cost != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cost);
      }
      if (itemBefore_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ItemBefore);
      }
      if (itemDouble_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ItemDouble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Cost != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cost);
      }
      if (itemBefore_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ItemBefore);
      }
      if (itemDouble_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ItemDouble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (itemBefore_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemBefore);
      }
      if (itemDouble_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemDouble);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserPoolDoubleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.itemBefore_ != null) {
        if (itemBefore_ == null) {
          ItemBefore = new global::F4BY.Object2();
        }
        ItemBefore.MergeFrom(other.ItemBefore);
      }
      if (other.itemDouble_ != null) {
        if (itemDouble_ == null) {
          ItemDouble = new global::F4BY.Object2();
        }
        ItemDouble.MergeFrom(other.ItemDouble);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cost = input.ReadInt32();
            break;
          }
          case 18: {
            if (itemBefore_ == null) {
              ItemBefore = new global::F4BY.Object2();
            }
            input.ReadMessage(ItemBefore);
            break;
          }
          case 26: {
            if (itemDouble_ == null) {
              ItemDouble = new global::F4BY.Object2();
            }
            input.ReadMessage(ItemDouble);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Cost = input.ReadInt32();
            break;
          }
          case 18: {
            if (itemBefore_ == null) {
              ItemBefore = new global::F4BY.Object2();
            }
            input.ReadMessage(ItemBefore);
            break;
          }
          case 26: {
            if (itemDouble_ == null) {
              ItemDouble = new global::F4BY.Object2();
            }
            input.ReadMessage(ItemDouble);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserPoolDouble : pb::IMessage<CSUserPoolDouble>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserPoolDouble> _parser = new pb::MessageParser<CSUserPoolDouble>(() => new CSUserPoolDouble());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserPoolDouble> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolDouble() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolDouble(CSUserPoolDouble other) : this() {
      isDouble_ = other.isDouble_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserPoolDouble Clone() {
      return new CSUserPoolDouble(this);
    }

    /// <summary>Field number for the "is_double" field.</summary>
    public const int IsDoubleFieldNumber = 1;
    private bool isDouble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDouble {
      get { return isDouble_; }
      set {
        isDouble_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserPoolDouble);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserPoolDouble other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsDouble != other.IsDouble) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsDouble != false) hash ^= IsDouble.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsDouble != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsDouble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsDouble != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsDouble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsDouble != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserPoolDouble other) {
      if (other == null) {
        return;
      }
      if (other.IsDouble != false) {
        IsDouble = other.IsDouble;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsDouble = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsDouble = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUserPoolDouble : pb::IMessage<SCUserPoolDouble>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUserPoolDouble> _parser = new pb::MessageParser<SCUserPoolDouble>(() => new SCUserPoolDouble());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUserPoolDouble> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolDouble() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolDouble(SCUserPoolDouble other) : this() {
      code_ = other.code_;
      result_ = other.result_;
      chairIdx_ = other.chairIdx_;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      extraItem_ = other.extraItem_ != null ? other.extraItem_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUserPoolDouble Clone() {
      return new SCUserPoolDouble(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 3;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 4;
    private global::F4BY.Object3 item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Object3 Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "extra_item" field.</summary>
    public const int ExtraItemFieldNumber = 5;
    private global::F4BY.Object3 extraItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Object3 ExtraItem {
      get { return extraItem_; }
      set {
        extraItem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUserPoolDouble);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUserPoolDouble other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Result != other.Result) return false;
      if (ChairIdx != other.ChairIdx) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(ExtraItem, other.ExtraItem)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (extraItem_ != null) hash ^= ExtraItem.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairIdx);
      }
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
      if (extraItem_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExtraItem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairIdx);
      }
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
      if (extraItem_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExtraItem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (extraItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExtraItem);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUserPoolDouble other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::F4BY.Object3();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.extraItem_ != null) {
        if (extraItem_ == null) {
          ExtraItem = new global::F4BY.Object3();
        }
        ExtraItem.MergeFrom(other.ExtraItem);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
          case 24: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 34: {
            if (item_ == null) {
              Item = new global::F4BY.Object3();
            }
            input.ReadMessage(Item);
            break;
          }
          case 42: {
            if (extraItem_ == null) {
              ExtraItem = new global::F4BY.Object3();
            }
            input.ReadMessage(ExtraItem);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
          case 24: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 34: {
            if (item_ == null) {
              Item = new global::F4BY.Object3();
            }
            input.ReadMessage(Item);
            break;
          }
          case 42: {
            if (extraItem_ == null) {
              ExtraItem = new global::F4BY.Object3();
            }
            input.ReadMessage(ExtraItem);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSLuckyPoolInfo : pb::IMessage<CSLuckyPoolInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSLuckyPoolInfo> _parser = new pb::MessageParser<CSLuckyPoolInfo>(() => new CSLuckyPoolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLuckyPoolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyPoolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyPoolInfo(CSLuckyPoolInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyPoolInfo Clone() {
      return new CSLuckyPoolInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLuckyPoolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLuckyPoolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLuckyPoolInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCLuckyPoolInfo : pb::IMessage<SCLuckyPoolInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCLuckyPoolInfo> _parser = new pb::MessageParser<SCLuckyPoolInfo>(() => new SCLuckyPoolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLuckyPoolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyPoolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyPoolInfo(SCLuckyPoolInfo other) : this() {
      count_ = other.count_;
      max_ = other.max_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyPoolInfo Clone() {
      return new SCLuckyPoolInfo(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private int max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLuckyPoolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLuckyPoolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (Max != other.Max) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (Max != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (Max != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLuckyPoolInfo other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 16: {
            Max = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 16: {
            Max = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSLuckyPoolDraw : pb::IMessage<CSLuckyPoolDraw>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSLuckyPoolDraw> _parser = new pb::MessageParser<CSLuckyPoolDraw>(() => new CSLuckyPoolDraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLuckyPoolDraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyPoolDraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyPoolDraw(CSLuckyPoolDraw other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyPoolDraw Clone() {
      return new CSLuckyPoolDraw(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLuckyPoolDraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLuckyPoolDraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLuckyPoolDraw other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCLuckyPoolDraw : pb::IMessage<SCLuckyPoolDraw>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCLuckyPoolDraw> _parser = new pb::MessageParser<SCLuckyPoolDraw>(() => new SCLuckyPoolDraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLuckyPoolDraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyPoolDraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyPoolDraw(SCLuckyPoolDraw other) : this() {
      item_ = other.item_ != null ? other.item_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyPoolDraw Clone() {
      return new SCLuckyPoolDraw(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::F4BY.Object3 item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Object3 Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLuckyPoolDraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLuckyPoolDraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Item, other.Item)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (item_ != null) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLuckyPoolDraw other) {
      if (other == null) {
        return;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::F4BY.Object3();
        }
        Item.MergeFrom(other.Item);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (item_ == null) {
              Item = new global::F4BY.Object3();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (item_ == null) {
              Item = new global::F4BY.Object3();
            }
            input.ReadMessage(Item);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSTorpedoPreShoot : pb::IMessage<CSTorpedoPreShoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSTorpedoPreShoot> _parser = new pb::MessageParser<CSTorpedoPreShoot>(() => new CSTorpedoPreShoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTorpedoPreShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoPreShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoPreShoot(CSTorpedoPreShoot other) : this() {
      propId_ = other.propId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoPreShoot Clone() {
      return new CSTorpedoPreShoot(this);
    }

    /// <summary>Field number for the "propId" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSTorpedoPreShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSTorpedoPreShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropId != other.PropId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSTorpedoPreShoot other) {
      if (other == null) {
        return;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCTorpedoPreShoot : pb::IMessage<SCTorpedoPreShoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTorpedoPreShoot> _parser = new pb::MessageParser<SCTorpedoPreShoot>(() => new SCTorpedoPreShoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTorpedoPreShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoPreShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoPreShoot(SCTorpedoPreShoot other) : this() {
      chairIdx_ = other.chairIdx_;
      propId_ = other.propId_;
      code_ = other.code_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoPreShoot Clone() {
      return new SCTorpedoPreShoot(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "propId" field.</summary>
    public const int PropIdFieldNumber = 2;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 4;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTorpedoPreShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTorpedoPreShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (PropId != other.PropId) return false;
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropId);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropId);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTorpedoPreShoot other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            PropId = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 34: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            PropId = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 34: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSTorpedoCancelShoot : pb::IMessage<CSTorpedoCancelShoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSTorpedoCancelShoot> _parser = new pb::MessageParser<CSTorpedoCancelShoot>(() => new CSTorpedoCancelShoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTorpedoCancelShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoCancelShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoCancelShoot(CSTorpedoCancelShoot other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoCancelShoot Clone() {
      return new CSTorpedoCancelShoot(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSTorpedoCancelShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSTorpedoCancelShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSTorpedoCancelShoot other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCTorpedoCancelShoot : pb::IMessage<SCTorpedoCancelShoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTorpedoCancelShoot> _parser = new pb::MessageParser<SCTorpedoCancelShoot>(() => new SCTorpedoCancelShoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTorpedoCancelShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoCancelShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoCancelShoot(SCTorpedoCancelShoot other) : this() {
      chairIdx_ = other.chairIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoCancelShoot Clone() {
      return new SCTorpedoCancelShoot(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTorpedoCancelShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTorpedoCancelShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTorpedoCancelShoot other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSTorpedoShoot : pb::IMessage<CSTorpedoShoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSTorpedoShoot> _parser = new pb::MessageParser<CSTorpedoShoot>(() => new CSTorpedoShoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTorpedoShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoShoot(CSTorpedoShoot other) : this() {
      fishUid_ = other.fishUid_;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoShoot Clone() {
      return new CSTorpedoShoot(this);
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 1;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSTorpedoShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSTorpedoShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishUid != other.FishUid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSTorpedoShoot other) {
      if (other == null) {
        return;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCTorpedoShoot : pb::IMessage<SCTorpedoShoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTorpedoShoot> _parser = new pb::MessageParser<SCTorpedoShoot>(() => new SCTorpedoShoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTorpedoShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoShoot(SCTorpedoShoot other) : this() {
      chairIdx_ = other.chairIdx_;
      fishUid_ = other.fishUid_;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoShoot Clone() {
      return new SCTorpedoShoot(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 2;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTorpedoShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTorpedoShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (FishUid != other.FishUid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTorpedoShoot other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSTorpedoHit : pb::IMessage<CSTorpedoHit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSTorpedoHit> _parser = new pb::MessageParser<CSTorpedoHit>(() => new CSTorpedoHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTorpedoHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoHit(CSTorpedoHit other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTorpedoHit Clone() {
      return new CSTorpedoHit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSTorpedoHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSTorpedoHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSTorpedoHit other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCTorpedoHit : pb::IMessage<SCTorpedoHit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTorpedoHit> _parser = new pb::MessageParser<SCTorpedoHit>(() => new SCTorpedoHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTorpedoHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoHit(SCTorpedoHit other) : this() {
      chairIdx_ = other.chairIdx_;
      earn_ = other.earn_;
      score_ = other.score_;
      propId_ = other.propId_;
      remain_ = other.remain_;
      fishUid_ = other.fishUid_;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTorpedoHit Clone() {
      return new SCTorpedoHit(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "earn" field.</summary>
    public const int EarnFieldNumber = 2;
    private int earn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Earn {
      get { return earn_; }
      set {
        earn_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "propId" field.</summary>
    public const int PropIdFieldNumber = 4;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "remain" field.</summary>
    public const int RemainFieldNumber = 5;
    private int remain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Remain {
      get { return remain_; }
      set {
        remain_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 6;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 7;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 8;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTorpedoHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTorpedoHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Earn != other.Earn) return false;
      if (Score != other.Score) return false;
      if (PropId != other.PropId) return false;
      if (Remain != other.Remain) return false;
      if (FishUid != other.FishUid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Earn != 0) hash ^= Earn.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (Remain != 0) hash ^= Remain.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Earn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Earn);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (PropId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PropId);
      }
      if (Remain != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Remain);
      }
      if (FishUid != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FishUid);
      }
      if (X != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Earn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Earn);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (PropId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PropId);
      }
      if (Remain != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Remain);
      }
      if (FishUid != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FishUid);
      }
      if (X != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Earn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Earn);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (Remain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Remain);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTorpedoHit other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Earn != 0) {
        Earn = other.Earn;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.Remain != 0) {
        Remain = other.Remain;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Earn = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            PropId = input.ReadInt32();
            break;
          }
          case 40: {
            Remain = input.ReadInt32();
            break;
          }
          case 48: {
            FishUid = input.ReadInt32();
            break;
          }
          case 61: {
            X = input.ReadFloat();
            break;
          }
          case 69: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Earn = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 32: {
            PropId = input.ReadInt32();
            break;
          }
          case 40: {
            Remain = input.ReadInt32();
            break;
          }
          case 48: {
            FishUid = input.ReadInt32();
            break;
          }
          case 61: {
            X = input.ReadFloat();
            break;
          }
          case 69: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSCallFish : pb::IMessage<CSCallFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSCallFish> _parser = new pb::MessageParser<CSCallFish>(() => new CSCallFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCallFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCallFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCallFish(CSCallFish other) : this() {
      callType_ = other.callType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSCallFish Clone() {
      return new CSCallFish(this);
    }

    /// <summary>Field number for the "call_type" field.</summary>
    public const int CallTypeFieldNumber = 1;
    private global::F4BY.CallFishType callType_ = global::F4BY.CallFishType.CallTypeNormal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.CallFishType CallType {
      get { return callType_; }
      set {
        callType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSCallFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSCallFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallType != other.CallType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) hash ^= CallType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CallType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CallType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallType != global::F4BY.CallFishType.CallTypeNormal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CallType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSCallFish other) {
      if (other == null) {
        return;
      }
      if (other.CallType != global::F4BY.CallFishType.CallTypeNormal) {
        CallType = other.CallType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CallType = (global::F4BY.CallFishType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CallType = (global::F4BY.CallFishType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCCallFish : pb::IMessage<SCCallFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCCallFish> _parser = new pb::MessageParser<SCCallFish>(() => new SCCallFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCCallFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCallFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCallFish(SCCallFish other) : this() {
      chairIdx_ = other.chairIdx_;
      propId_ = other.propId_;
      remain_ = other.remain_;
      code_ = other.code_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCallFish Clone() {
      return new SCCallFish(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "propId" field.</summary>
    public const int PropIdFieldNumber = 2;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "remain" field.</summary>
    public const int RemainFieldNumber = 3;
    private int remain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Remain {
      get { return remain_; }
      set {
        remain_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 5;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCCallFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCCallFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (PropId != other.PropId) return false;
      if (Remain != other.Remain) return false;
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (Remain != 0) hash ^= Remain.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropId);
      }
      if (Remain != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Remain);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropId);
      }
      if (Remain != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Remain);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (Remain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Remain);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCCallFish other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.Remain != 0) {
        Remain = other.Remain;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            PropId = input.ReadInt32();
            break;
          }
          case 24: {
            Remain = input.ReadInt32();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 42: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            PropId = input.ReadInt32();
            break;
          }
          case 24: {
            Remain = input.ReadInt32();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 42: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCComTask : pb::IMessage<SCComTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCComTask> _parser = new pb::MessageParser<SCComTask>(() => new SCComTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCComTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCComTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCComTask(SCComTask other) : this() {
      gunRatio_ = other.gunRatio_;
      gunLevel_ = other.gunLevel_;
      award_ = other.award_;
      ticket_ = other.ticket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCComTask Clone() {
      return new SCComTask(this);
    }

    /// <summary>Field number for the "gun_ratio" field.</summary>
    public const int GunRatioFieldNumber = 1;
    private int gunRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunRatio {
      get { return gunRatio_; }
      set {
        gunRatio_ = value;
      }
    }

    /// <summary>Field number for the "gun_level" field.</summary>
    public const int GunLevelFieldNumber = 2;
    private int gunLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunLevel {
      get { return gunLevel_; }
      set {
        gunLevel_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 3;
    private int award_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 4;
    private int ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCComTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCComTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GunRatio != other.GunRatio) return false;
      if (GunLevel != other.GunLevel) return false;
      if (Award != other.Award) return false;
      if (Ticket != other.Ticket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GunRatio != 0) hash ^= GunRatio.GetHashCode();
      if (GunLevel != 0) hash ^= GunLevel.GetHashCode();
      if (Award != 0) hash ^= Award.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (GunLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GunLevel);
      }
      if (Award != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Award);
      }
      if (Ticket != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (GunLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GunLevel);
      }
      if (Award != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Award);
      }
      if (Ticket != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GunRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunRatio);
      }
      if (GunLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunLevel);
      }
      if (Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Award);
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCComTask other) {
      if (other == null) {
        return;
      }
      if (other.GunRatio != 0) {
        GunRatio = other.GunRatio;
      }
      if (other.GunLevel != 0) {
        GunLevel = other.GunLevel;
      }
      if (other.Award != 0) {
        Award = other.Award;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 24: {
            Award = input.ReadInt32();
            break;
          }
          case 32: {
            Ticket = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 24: {
            Award = input.ReadInt32();
            break;
          }
          case 32: {
            Ticket = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCTaskInfo : pb::IMessage<SCTaskInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTaskInfo> _parser = new pb::MessageParser<SCTaskInfo>(() => new SCTaskInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTaskInfo(SCTaskInfo other) : this() {
      gunRatio_ = other.gunRatio_;
      gunLevel_ = other.gunLevel_;
      curNum_ = other.curNum_;
      totalNum_ = other.totalNum_;
      vipLevel_ = other.vipLevel_;
      isUnlock_ = other.isUnlock_;
      award_ = other.award_;
      isVipUnlock_ = other.isVipUnlock_;
      ticket_ = other.ticket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTaskInfo Clone() {
      return new SCTaskInfo(this);
    }

    /// <summary>Field number for the "gun_ratio" field.</summary>
    public const int GunRatioFieldNumber = 1;
    private int gunRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunRatio {
      get { return gunRatio_; }
      set {
        gunRatio_ = value;
      }
    }

    /// <summary>Field number for the "gun_level" field.</summary>
    public const int GunLevelFieldNumber = 2;
    private int gunLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunLevel {
      get { return gunLevel_; }
      set {
        gunLevel_ = value;
      }
    }

    /// <summary>Field number for the "cur_num" field.</summary>
    public const int CurNumFieldNumber = 3;
    private int curNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurNum {
      get { return curNum_; }
      set {
        curNum_ = value;
      }
    }

    /// <summary>Field number for the "total_num" field.</summary>
    public const int TotalNumFieldNumber = 4;
    private int totalNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 5;
    private int vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "is_unlock" field.</summary>
    public const int IsUnlockFieldNumber = 6;
    private bool isUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 7;
    private int award_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    /// <summary>Field number for the "is_vip_unlock" field.</summary>
    public const int IsVipUnlockFieldNumber = 8;
    private bool isVipUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVipUnlock {
      get { return isVipUnlock_; }
      set {
        isVipUnlock_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 9;
    private int ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GunRatio != other.GunRatio) return false;
      if (GunLevel != other.GunLevel) return false;
      if (CurNum != other.CurNum) return false;
      if (TotalNum != other.TotalNum) return false;
      if (VipLevel != other.VipLevel) return false;
      if (IsUnlock != other.IsUnlock) return false;
      if (Award != other.Award) return false;
      if (IsVipUnlock != other.IsVipUnlock) return false;
      if (Ticket != other.Ticket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GunRatio != 0) hash ^= GunRatio.GetHashCode();
      if (GunLevel != 0) hash ^= GunLevel.GetHashCode();
      if (CurNum != 0) hash ^= CurNum.GetHashCode();
      if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (IsUnlock != false) hash ^= IsUnlock.GetHashCode();
      if (Award != 0) hash ^= Award.GetHashCode();
      if (IsVipUnlock != false) hash ^= IsVipUnlock.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (GunLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GunLevel);
      }
      if (CurNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurNum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalNum);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(VipLevel);
      }
      if (IsUnlock != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsUnlock);
      }
      if (Award != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Award);
      }
      if (IsVipUnlock != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsVipUnlock);
      }
      if (Ticket != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GunRatio != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunRatio);
      }
      if (GunLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GunLevel);
      }
      if (CurNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurNum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalNum);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(VipLevel);
      }
      if (IsUnlock != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsUnlock);
      }
      if (Award != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Award);
      }
      if (IsVipUnlock != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsVipUnlock);
      }
      if (Ticket != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GunRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunRatio);
      }
      if (GunLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunLevel);
      }
      if (CurNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurNum);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
      }
      if (IsUnlock != false) {
        size += 1 + 1;
      }
      if (Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Award);
      }
      if (IsVipUnlock != false) {
        size += 1 + 1;
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTaskInfo other) {
      if (other == null) {
        return;
      }
      if (other.GunRatio != 0) {
        GunRatio = other.GunRatio;
      }
      if (other.GunLevel != 0) {
        GunLevel = other.GunLevel;
      }
      if (other.CurNum != 0) {
        CurNum = other.CurNum;
      }
      if (other.TotalNum != 0) {
        TotalNum = other.TotalNum;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      if (other.IsUnlock != false) {
        IsUnlock = other.IsUnlock;
      }
      if (other.Award != 0) {
        Award = other.Award;
      }
      if (other.IsVipUnlock != false) {
        IsVipUnlock = other.IsVipUnlock;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 24: {
            CurNum = input.ReadInt32();
            break;
          }
          case 32: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 40: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 48: {
            IsUnlock = input.ReadBool();
            break;
          }
          case 56: {
            Award = input.ReadInt32();
            break;
          }
          case 64: {
            IsVipUnlock = input.ReadBool();
            break;
          }
          case 72: {
            Ticket = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 16: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 24: {
            CurNum = input.ReadInt32();
            break;
          }
          case 32: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 40: {
            VipLevel = input.ReadInt32();
            break;
          }
          case 48: {
            IsUnlock = input.ReadBool();
            break;
          }
          case 56: {
            Award = input.ReadInt32();
            break;
          }
          case 64: {
            IsVipUnlock = input.ReadBool();
            break;
          }
          case 72: {
            Ticket = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSaveSkillTime : pb::IMessage<CSSaveSkillTime>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSaveSkillTime> _parser = new pb::MessageParser<CSSaveSkillTime>(() => new CSSaveSkillTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSaveSkillTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSaveSkillTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSaveSkillTime(CSSaveSkillTime other) : this() {
      auto_ = other.auto_;
      lock_ = other.lock_;
      angry_ = other.angry_;
      treble_ = other.treble_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSaveSkillTime Clone() {
      return new CSSaveSkillTime(this);
    }

    /// <summary>Field number for the "auto" field.</summary>
    public const int AutoFieldNumber = 1;
    private int auto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Auto {
      get { return auto_; }
      set {
        auto_ = value;
      }
    }

    /// <summary>Field number for the "lock" field.</summary>
    public const int LockFieldNumber = 2;
    private int lock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lock {
      get { return lock_; }
      set {
        lock_ = value;
      }
    }

    /// <summary>Field number for the "angry" field.</summary>
    public const int AngryFieldNumber = 3;
    private int angry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angry {
      get { return angry_; }
      set {
        angry_ = value;
      }
    }

    /// <summary>Field number for the "treble" field.</summary>
    public const int TrebleFieldNumber = 4;
    private int treble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Treble {
      get { return treble_; }
      set {
        treble_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSaveSkillTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSaveSkillTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Auto != other.Auto) return false;
      if (Lock != other.Lock) return false;
      if (Angry != other.Angry) return false;
      if (Treble != other.Treble) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Auto != 0) hash ^= Auto.GetHashCode();
      if (Lock != 0) hash ^= Lock.GetHashCode();
      if (Angry != 0) hash ^= Angry.GetHashCode();
      if (Treble != 0) hash ^= Treble.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Auto != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Auto);
      }
      if (Lock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lock);
      }
      if (Angry != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Angry);
      }
      if (Treble != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Treble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Auto != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Auto);
      }
      if (Lock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lock);
      }
      if (Angry != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Angry);
      }
      if (Treble != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Treble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Auto != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Auto);
      }
      if (Lock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lock);
      }
      if (Angry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angry);
      }
      if (Treble != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Treble);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSaveSkillTime other) {
      if (other == null) {
        return;
      }
      if (other.Auto != 0) {
        Auto = other.Auto;
      }
      if (other.Lock != 0) {
        Lock = other.Lock;
      }
      if (other.Angry != 0) {
        Angry = other.Angry;
      }
      if (other.Treble != 0) {
        Treble = other.Treble;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Auto = input.ReadInt32();
            break;
          }
          case 16: {
            Lock = input.ReadInt32();
            break;
          }
          case 24: {
            Angry = input.ReadInt32();
            break;
          }
          case 32: {
            Treble = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Auto = input.ReadInt32();
            break;
          }
          case 16: {
            Lock = input.ReadInt32();
            break;
          }
          case 24: {
            Angry = input.ReadInt32();
            break;
          }
          case 32: {
            Treble = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SevenDayTask : pb::IMessage<SevenDayTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SevenDayTask> _parser = new pb::MessageParser<SevenDayTask>(() => new SevenDayTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SevenDayTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenDayTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenDayTask(SevenDayTask other) : this() {
      index_ = other.index_;
      fishId_ = other.fishId_;
      totalNum_ = other.totalNum_;
      curNum_ = other.curNum_;
      status_ = other.status_;
      award_ = other.award_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenDayTask Clone() {
      return new SevenDayTask(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "fish_id" field.</summary>
    public const int FishIdFieldNumber = 2;
    private int fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    /// <summary>Field number for the "total_num" field.</summary>
    public const int TotalNumFieldNumber = 3;
    private int totalNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "cur_num" field.</summary>
    public const int CurNumFieldNumber = 4;
    private int curNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurNum {
      get { return curNum_; }
      set {
        curNum_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 6;
    private int award_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SevenDayTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SevenDayTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (FishId != other.FishId) return false;
      if (TotalNum != other.TotalNum) return false;
      if (CurNum != other.CurNum) return false;
      if (Status != other.Status) return false;
      if (Award != other.Award) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (FishId != 0) hash ^= FishId.GetHashCode();
      if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
      if (CurNum != 0) hash ^= CurNum.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Award != 0) hash ^= Award.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (FishId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishId);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalNum);
      }
      if (CurNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurNum);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Status);
      }
      if (Award != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Award);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (FishId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishId);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalNum);
      }
      if (CurNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurNum);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Status);
      }
      if (Award != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Award);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (FishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (CurNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurNum);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Award);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SevenDayTask other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.FishId != 0) {
        FishId = other.FishId;
      }
      if (other.TotalNum != 0) {
        TotalNum = other.TotalNum;
      }
      if (other.CurNum != 0) {
        CurNum = other.CurNum;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Award != 0) {
        Award = other.Award;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            FishId = input.ReadInt32();
            break;
          }
          case 24: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 32: {
            CurNum = input.ReadInt32();
            break;
          }
          case 40: {
            Status = input.ReadInt32();
            break;
          }
          case 48: {
            Award = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            FishId = input.ReadInt32();
            break;
          }
          case 24: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 32: {
            CurNum = input.ReadInt32();
            break;
          }
          case 40: {
            Status = input.ReadInt32();
            break;
          }
          case 48: {
            Award = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SevenDayDetail : pb::IMessage<SevenDayDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SevenDayDetail> _parser = new pb::MessageParser<SevenDayDetail>(() => new SevenDayDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SevenDayDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenDayDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenDayDetail(SevenDayDetail other) : this() {
      day_ = other.day_;
      boxStatus_ = other.boxStatus_;
      task_ = other.task_ != null ? other.task_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SevenDayDetail Clone() {
      return new SevenDayDetail(this);
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "box_status" field.</summary>
    public const int BoxStatusFieldNumber = 2;
    private int boxStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxStatus {
      get { return boxStatus_; }
      set {
        boxStatus_ = value;
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 3;
    private global::F4BY.SevenDayTask task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.SevenDayTask Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SevenDayDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SevenDayDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Day != other.Day) return false;
      if (BoxStatus != other.BoxStatus) return false;
      if (!object.Equals(Task, other.Task)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Day != 0) hash ^= Day.GetHashCode();
      if (BoxStatus != 0) hash ^= BoxStatus.GetHashCode();
      if (task_ != null) hash ^= Task.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
      if (BoxStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoxStatus);
      }
      if (task_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Task);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
      if (BoxStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoxStatus);
      }
      if (task_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Task);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (BoxStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxStatus);
      }
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SevenDayDetail other) {
      if (other == null) {
        return;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.BoxStatus != 0) {
        BoxStatus = other.BoxStatus;
      }
      if (other.task_ != null) {
        if (task_ == null) {
          Task = new global::F4BY.SevenDayTask();
        }
        Task.MergeFrom(other.Task);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
          case 16: {
            BoxStatus = input.ReadInt32();
            break;
          }
          case 26: {
            if (task_ == null) {
              Task = new global::F4BY.SevenDayTask();
            }
            input.ReadMessage(Task);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
          case 16: {
            BoxStatus = input.ReadInt32();
            break;
          }
          case 26: {
            if (task_ == null) {
              Task = new global::F4BY.SevenDayTask();
            }
            input.ReadMessage(Task);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSevenDayInfo : pb::IMessage<CSSevenDayInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSevenDayInfo> _parser = new pb::MessageParser<CSSevenDayInfo>(() => new CSSevenDayInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSevenDayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSevenDayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSevenDayInfo(CSSevenDayInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSevenDayInfo Clone() {
      return new CSSevenDayInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSevenDayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSevenDayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSevenDayInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCSevenDayInfo : pb::IMessage<SCSevenDayInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSevenDayInfo> _parser = new pb::MessageParser<SCSevenDayInfo>(() => new SCSevenDayInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSevenDayInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSevenDayInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSevenDayInfo(SCSevenDayInfo other) : this() {
      startDate_ = other.startDate_;
      endDate_ = other.endDate_;
      curDay_ = other.curDay_;
      getRemain_ = other.getRemain_;
      remainScore_ = other.remainScore_;
      ticket_ = other.ticket_;
      detail_ = other.detail_ != null ? other.detail_.Clone() : null;
      gunEnable_ = other.gunEnable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSevenDayInfo Clone() {
      return new SCSevenDayInfo(this);
    }

    /// <summary>Field number for the "start_date" field.</summary>
    public const int StartDateFieldNumber = 1;
    private string startDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartDate {
      get { return startDate_; }
      set {
        startDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_date" field.</summary>
    public const int EndDateFieldNumber = 2;
    private string endDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EndDate {
      get { return endDate_; }
      set {
        endDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cur_day" field.</summary>
    public const int CurDayFieldNumber = 3;
    private int curDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurDay {
      get { return curDay_; }
      set {
        curDay_ = value;
      }
    }

    /// <summary>Field number for the "get_remain" field.</summary>
    public const int GetRemainFieldNumber = 4;
    private int getRemain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetRemain {
      get { return getRemain_; }
      set {
        getRemain_ = value;
      }
    }

    /// <summary>Field number for the "remain_score" field.</summary>
    public const int RemainScoreFieldNumber = 5;
    private int remainScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainScore {
      get { return remainScore_; }
      set {
        remainScore_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 6;
    private int ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 7;
    private global::F4BY.SevenDayDetail detail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.SevenDayDetail Detail {
      get { return detail_; }
      set {
        detail_ = value;
      }
    }

    /// <summary>Field number for the "gun_enable" field.</summary>
    public const int GunEnableFieldNumber = 8;
    private int gunEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunEnable {
      get { return gunEnable_; }
      set {
        gunEnable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSevenDayInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSevenDayInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartDate != other.StartDate) return false;
      if (EndDate != other.EndDate) return false;
      if (CurDay != other.CurDay) return false;
      if (GetRemain != other.GetRemain) return false;
      if (RemainScore != other.RemainScore) return false;
      if (Ticket != other.Ticket) return false;
      if (!object.Equals(Detail, other.Detail)) return false;
      if (GunEnable != other.GunEnable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartDate.Length != 0) hash ^= StartDate.GetHashCode();
      if (EndDate.Length != 0) hash ^= EndDate.GetHashCode();
      if (CurDay != 0) hash ^= CurDay.GetHashCode();
      if (GetRemain != 0) hash ^= GetRemain.GetHashCode();
      if (RemainScore != 0) hash ^= RemainScore.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      if (detail_ != null) hash ^= Detail.GetHashCode();
      if (GunEnable != 0) hash ^= GunEnable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartDate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StartDate);
      }
      if (EndDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EndDate);
      }
      if (CurDay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurDay);
      }
      if (GetRemain != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GetRemain);
      }
      if (RemainScore != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RemainScore);
      }
      if (Ticket != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Ticket);
      }
      if (detail_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Detail);
      }
      if (GunEnable != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GunEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartDate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StartDate);
      }
      if (EndDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EndDate);
      }
      if (CurDay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurDay);
      }
      if (GetRemain != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GetRemain);
      }
      if (RemainScore != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RemainScore);
      }
      if (Ticket != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Ticket);
      }
      if (detail_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Detail);
      }
      if (GunEnable != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GunEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartDate);
      }
      if (EndDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndDate);
      }
      if (CurDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurDay);
      }
      if (GetRemain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetRemain);
      }
      if (RemainScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainScore);
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (detail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detail);
      }
      if (GunEnable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunEnable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSevenDayInfo other) {
      if (other == null) {
        return;
      }
      if (other.StartDate.Length != 0) {
        StartDate = other.StartDate;
      }
      if (other.EndDate.Length != 0) {
        EndDate = other.EndDate;
      }
      if (other.CurDay != 0) {
        CurDay = other.CurDay;
      }
      if (other.GetRemain != 0) {
        GetRemain = other.GetRemain;
      }
      if (other.RemainScore != 0) {
        RemainScore = other.RemainScore;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      if (other.detail_ != null) {
        if (detail_ == null) {
          Detail = new global::F4BY.SevenDayDetail();
        }
        Detail.MergeFrom(other.Detail);
      }
      if (other.GunEnable != 0) {
        GunEnable = other.GunEnable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StartDate = input.ReadString();
            break;
          }
          case 18: {
            EndDate = input.ReadString();
            break;
          }
          case 24: {
            CurDay = input.ReadInt32();
            break;
          }
          case 32: {
            GetRemain = input.ReadInt32();
            break;
          }
          case 40: {
            RemainScore = input.ReadInt32();
            break;
          }
          case 48: {
            Ticket = input.ReadInt32();
            break;
          }
          case 58: {
            if (detail_ == null) {
              Detail = new global::F4BY.SevenDayDetail();
            }
            input.ReadMessage(Detail);
            break;
          }
          case 64: {
            GunEnable = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StartDate = input.ReadString();
            break;
          }
          case 18: {
            EndDate = input.ReadString();
            break;
          }
          case 24: {
            CurDay = input.ReadInt32();
            break;
          }
          case 32: {
            GetRemain = input.ReadInt32();
            break;
          }
          case 40: {
            RemainScore = input.ReadInt32();
            break;
          }
          case 48: {
            Ticket = input.ReadInt32();
            break;
          }
          case 58: {
            if (detail_ == null) {
              Detail = new global::F4BY.SevenDayDetail();
            }
            input.ReadMessage(Detail);
            break;
          }
          case 64: {
            GunEnable = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSevenDayAward : pb::IMessage<CSSevenDayAward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSevenDayAward> _parser = new pb::MessageParser<CSSevenDayAward>(() => new CSSevenDayAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSevenDayAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSevenDayAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSevenDayAward(CSSevenDayAward other) : this() {
      day_ = other.day_;
      index_ = other.index_;
      getAwardType_ = other.getAwardType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSevenDayAward Clone() {
      return new CSSevenDayAward(this);
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "get_award_type" field.</summary>
    public const int GetAwardTypeFieldNumber = 3;
    private int getAwardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetAwardType {
      get { return getAwardType_; }
      set {
        getAwardType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSevenDayAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSevenDayAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Day != other.Day) return false;
      if (Index != other.Index) return false;
      if (GetAwardType != other.GetAwardType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (GetAwardType != 0) hash ^= GetAwardType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (GetAwardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GetAwardType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (GetAwardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GetAwardType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (GetAwardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetAwardType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSevenDayAward other) {
      if (other == null) {
        return;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.GetAwardType != 0) {
        GetAwardType = other.GetAwardType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            GetAwardType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            GetAwardType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSevenDayAward : pb::IMessage<SCSevenDayAward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSevenDayAward> _parser = new pb::MessageParser<SCSevenDayAward>(() => new SCSevenDayAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSevenDayAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSevenDayAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSevenDayAward(SCSevenDayAward other) : this() {
      score_ = other.score_;
      ticket_ = other.ticket_;
      task_ = other.task_ != null ? other.task_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSevenDayAward Clone() {
      return new SCSevenDayAward(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 2;
    private int ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 3;
    private global::F4BY.SevenDayDetail task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.SevenDayDetail Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSevenDayAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSevenDayAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (Ticket != other.Ticket) return false;
      if (!object.Equals(Task, other.Task)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      if (task_ != null) hash ^= Task.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (Ticket != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ticket);
      }
      if (task_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Task);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (Ticket != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ticket);
      }
      if (task_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Task);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSevenDayAward other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      if (other.task_ != null) {
        if (task_ == null) {
          Task = new global::F4BY.SevenDayDetail();
        }
        Task.MergeFrom(other.Task);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            Ticket = input.ReadInt32();
            break;
          }
          case 26: {
            if (task_ == null) {
              Task = new global::F4BY.SevenDayDetail();
            }
            input.ReadMessage(Task);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            Ticket = input.ReadInt32();
            break;
          }
          case 26: {
            if (task_ == null) {
              Task = new global::F4BY.SevenDayDetail();
            }
            input.ReadMessage(Task);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCVipChargeAward : pb::IMessage<SCVipChargeAward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCVipChargeAward> _parser = new pb::MessageParser<SCVipChargeAward>(() => new SCVipChargeAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCVipChargeAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVipChargeAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVipChargeAward(SCVipChargeAward other) : this() {
      score_ = other.score_;
      ticket_ = other.ticket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVipChargeAward Clone() {
      return new SCVipChargeAward(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 2;
    private int ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCVipChargeAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCVipChargeAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (Ticket != other.Ticket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (Ticket != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (Ticket != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCVipChargeAward other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            Ticket = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            Ticket = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSClickStatistic : pb::IMessage<CSClickStatistic>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSClickStatistic> _parser = new pb::MessageParser<CSClickStatistic>(() => new CSClickStatistic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSClickStatistic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSClickStatistic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSClickStatistic(CSClickStatistic other) : this() {
      num_ = other.num_;
      notRepeat_ = other.notRepeat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSClickStatistic Clone() {
      return new CSClickStatistic(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private string num_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Num {
      get { return num_; }
      set {
        num_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "not_repeat" field.</summary>
    public const int NotRepeatFieldNumber = 2;
    private bool notRepeat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NotRepeat {
      get { return notRepeat_; }
      set {
        notRepeat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSClickStatistic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSClickStatistic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      if (NotRepeat != other.NotRepeat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num.Length != 0) hash ^= Num.GetHashCode();
      if (NotRepeat != false) hash ^= NotRepeat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Num.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Num);
      }
      if (NotRepeat != false) {
        output.WriteRawTag(16);
        output.WriteBool(NotRepeat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Num.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Num);
      }
      if (NotRepeat != false) {
        output.WriteRawTag(16);
        output.WriteBool(NotRepeat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Num);
      }
      if (NotRepeat != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSClickStatistic other) {
      if (other == null) {
        return;
      }
      if (other.Num.Length != 0) {
        Num = other.Num;
      }
      if (other.NotRepeat != false) {
        NotRepeat = other.NotRepeat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Num = input.ReadString();
            break;
          }
          case 16: {
            NotRepeat = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Num = input.ReadString();
            break;
          }
          case 16: {
            NotRepeat = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSNewClickStatistic : pb::IMessage<CSNewClickStatistic>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSNewClickStatistic> _parser = new pb::MessageParser<CSNewClickStatistic>(() => new CSNewClickStatistic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSNewClickStatistic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSNewClickStatistic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSNewClickStatistic(CSNewClickStatistic other) : this() {
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSNewClickStatistic Clone() {
      return new CSNewClickStatistic(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private string num_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Num {
      get { return num_; }
      set {
        num_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSNewClickStatistic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSNewClickStatistic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num.Length != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Num.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Num.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSNewClickStatistic other) {
      if (other == null) {
        return;
      }
      if (other.Num.Length != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Num = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Num = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserLog : pb::IMessage<CSUserLog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserLog> _parser = new pb::MessageParser<CSUserLog>(() => new CSUserLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserLog(CSUserLog other) : this() {
      type_ = other.type_;
      score_ = other.score_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserLog Clone() {
      return new CSUserLog(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private string score_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Score {
      get { return score_; }
      set {
        score_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Score != other.Score) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Score.Length != 0) hash ^= Score.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Score.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Score);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Score.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Score);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Score.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Score);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserLog other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Score.Length != 0) {
        Score = other.Score;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Score = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Score = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUserEvent : pb::IMessage<CSUserEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUserEvent> _parser = new pb::MessageParser<CSUserEvent>(() => new CSUserEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUserEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserEvent(CSUserEvent other) : this() {
      id_ = other.id_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUserEvent Clone() {
      return new CSUserEvent(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUserEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUserEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUserEvent other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetAwardPoolRecord : pb::IMessage<CSGetAwardPoolRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetAwardPoolRecord> _parser = new pb::MessageParser<CSGetAwardPoolRecord>(() => new CSGetAwardPoolRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetAwardPoolRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetAwardPoolRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetAwardPoolRecord(CSGetAwardPoolRecord other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetAwardPoolRecord Clone() {
      return new CSGetAwardPoolRecord(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetAwardPoolRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetAwardPoolRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetAwardPoolRecord other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class AwardPoolRecord : pb::IMessage<AwardPoolRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardPoolRecord> _parser = new pb::MessageParser<AwardPoolRecord>(() => new AwardPoolRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AwardPoolRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardPoolRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardPoolRecord(AwardPoolRecord other) : this() {
      time_ = other.time_;
      name_ = other.name_;
      poolId_ = other.poolId_;
      award_ = other.award_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardPoolRecord Clone() {
      return new AwardPoolRecord(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "poolId" field.</summary>
    public const int PoolIdFieldNumber = 3;
    private int poolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PoolId {
      get { return poolId_; }
      set {
        poolId_ = value;
      }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 4;
    private int award_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 5;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AwardPoolRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AwardPoolRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Name != other.Name) return false;
      if (PoolId != other.PoolId) return false;
      if (Award != other.Award) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PoolId != 0) hash ^= PoolId.GetHashCode();
      if (Award != 0) hash ^= Award.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Time.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Time);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PoolId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PoolId);
      }
      if (Award != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Award);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Time.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Time);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (PoolId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PoolId);
      }
      if (Award != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Award);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PoolId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoolId);
      }
      if (Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Award);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AwardPoolRecord other) {
      if (other == null) {
        return;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PoolId != 0) {
        PoolId = other.PoolId;
      }
      if (other.Award != 0) {
        Award = other.Award;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Time = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            PoolId = input.ReadInt32();
            break;
          }
          case 32: {
            Award = input.ReadInt32();
            break;
          }
          case 40: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Time = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            PoolId = input.ReadInt32();
            break;
          }
          case 32: {
            Award = input.ReadInt32();
            break;
          }
          case 40: {
            PlayerId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetAwardPoolRecord : pb::IMessage<SCGetAwardPoolRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetAwardPoolRecord> _parser = new pb::MessageParser<SCGetAwardPoolRecord>(() => new SCGetAwardPoolRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetAwardPoolRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetAwardPoolRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetAwardPoolRecord(SCGetAwardPoolRecord other) : this() {
      records_ = other.records_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetAwardPoolRecord Clone() {
      return new SCGetAwardPoolRecord(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.AwardPoolRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.AwardPoolRecord.Parser);
    private readonly pbc::RepeatedField<global::F4BY.AwardPoolRecord> records_ = new pbc::RepeatedField<global::F4BY.AwardPoolRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.AwardPoolRecord> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetAwardPoolRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetAwardPoolRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      records_.WriteTo(output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      records_.WriteTo(ref output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetAwardPoolRecord other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            records_.AddEntriesFrom(ref input, _repeated_records_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCPropDropNotify : pb::IMessage<SCPropDropNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPropDropNotify> _parser = new pb::MessageParser<SCPropDropNotify>(() => new SCPropDropNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPropDropNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPropDropNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPropDropNotify(SCPropDropNotify other) : this() {
      chairIdx_ = other.chairIdx_;
      fishUid_ = other.fishUid_;
      dropProps_ = other.dropProps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPropDropNotify Clone() {
      return new SCPropDropNotify(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 2;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "drop_props" field.</summary>
    public const int DropPropsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::F4BY.Object> _repeated_dropProps_codec
        = pb::FieldCodec.ForMessage(26, global::F4BY.Object.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Object> dropProps_ = new pbc::RepeatedField<global::F4BY.Object>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Object> DropProps {
      get { return dropProps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPropDropNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPropDropNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (FishUid != other.FishUid) return false;
      if(!dropProps_.Equals(other.dropProps_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      hash ^= dropProps_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      dropProps_.WriteTo(output, _repeated_dropProps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      dropProps_.WriteTo(ref output, _repeated_dropProps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      size += dropProps_.CalculateSize(_repeated_dropProps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPropDropNotify other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      dropProps_.Add(other.dropProps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 26: {
            dropProps_.AddEntriesFrom(input, _repeated_dropProps_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 26: {
            dropProps_.AddEntriesFrom(ref input, _repeated_dropProps_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSUseProp : pb::IMessage<CSUseProp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSUseProp> _parser = new pb::MessageParser<CSUseProp>(() => new CSUseProp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUseProp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseProp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseProp(CSUseProp other) : this() {
      propId_ = other.propId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSUseProp Clone() {
      return new CSUseProp(this);
    }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSUseProp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSUseProp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropId != other.PropId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSUseProp other) {
      if (other == null) {
        return;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUseProp : pb::IMessage<SCUseProp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUseProp> _parser = new pb::MessageParser<SCUseProp>(() => new SCUseProp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUseProp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseProp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseProp(SCUseProp other) : this() {
      chairIdx_ = other.chairIdx_;
      propId_ = other.propId_;
      remain_ = other.remain_;
      code_ = other.code_;
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUseProp Clone() {
      return new SCUseProp(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 2;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "remain" field.</summary>
    public const int RemainFieldNumber = 3;
    private int remain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Remain {
      get { return remain_; }
      set {
        remain_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 5;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUseProp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUseProp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (PropId != other.PropId) return false;
      if (Remain != other.Remain) return false;
      if (Code != other.Code) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (Remain != 0) hash ^= Remain.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropId);
      }
      if (Remain != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Remain);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (PropId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropId);
      }
      if (Remain != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Remain);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (Remain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Remain);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUseProp other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.Remain != 0) {
        Remain = other.Remain;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            PropId = input.ReadInt32();
            break;
          }
          case 24: {
            Remain = input.ReadInt32();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 42: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            PropId = input.ReadInt32();
            break;
          }
          case 24: {
            Remain = input.ReadInt32();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 42: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCFrozenTime : pb::IMessage<SCFrozenTime>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCFrozenTime> _parser = new pb::MessageParser<SCFrozenTime>(() => new SCFrozenTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFrozenTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFrozenTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFrozenTime(SCFrozenTime other) : this() {
      chairIdx_ = other.chairIdx_;
      isFrozen_ = other.isFrozen_;
      frozenCd_ = other.frozenCd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFrozenTime Clone() {
      return new SCFrozenTime(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "is_frozen" field.</summary>
    public const int IsFrozenFieldNumber = 2;
    private bool isFrozen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFrozen {
      get { return isFrozen_; }
      set {
        isFrozen_ = value;
      }
    }

    /// <summary>Field number for the "frozen_cd" field.</summary>
    public const int FrozenCdFieldNumber = 3;
    private float frozenCd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FrozenCd {
      get { return frozenCd_; }
      set {
        frozenCd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFrozenTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFrozenTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (IsFrozen != other.IsFrozen) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrozenCd, other.FrozenCd)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (IsFrozen != false) hash ^= IsFrozen.GetHashCode();
      if (FrozenCd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrozenCd);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (IsFrozen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsFrozen);
      }
      if (FrozenCd != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FrozenCd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (IsFrozen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsFrozen);
      }
      if (FrozenCd != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FrozenCd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (IsFrozen != false) {
        size += 1 + 1;
      }
      if (FrozenCd != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFrozenTime other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.IsFrozen != false) {
        IsFrozen = other.IsFrozen;
      }
      if (other.FrozenCd != 0F) {
        FrozenCd = other.FrozenCd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            IsFrozen = input.ReadBool();
            break;
          }
          case 29: {
            FrozenCd = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            IsFrozen = input.ReadBool();
            break;
          }
          case 29: {
            FrozenCd = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCTreasureFishInfo : pb::IMessage<SCTreasureFishInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTreasureFishInfo> _parser = new pb::MessageParser<SCTreasureFishInfo>(() => new SCTreasureFishInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTreasureFishInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureFishInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureFishInfo(SCTreasureFishInfo other) : this() {
      fishUid_ = other.fishUid_;
      curStage_ = other.curStage_;
      accumMoney_ = other.accumMoney_;
      fishValue_ = other.fishValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureFishInfo Clone() {
      return new SCTreasureFishInfo(this);
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 1;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "cur_stage" field.</summary>
    public const int CurStageFieldNumber = 2;
    private int curStage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurStage {
      get { return curStage_; }
      set {
        curStage_ = value;
      }
    }

    /// <summary>Field number for the "accum_money" field.</summary>
    public const int AccumMoneyFieldNumber = 3;
    private int accumMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccumMoney {
      get { return accumMoney_; }
      set {
        accumMoney_ = value;
      }
    }

    /// <summary>Field number for the "fish_value" field.</summary>
    public const int FishValueFieldNumber = 4;
    private int fishValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishValue {
      get { return fishValue_; }
      set {
        fishValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTreasureFishInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTreasureFishInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishUid != other.FishUid) return false;
      if (CurStage != other.CurStage) return false;
      if (AccumMoney != other.AccumMoney) return false;
      if (FishValue != other.FishValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (CurStage != 0) hash ^= CurStage.GetHashCode();
      if (AccumMoney != 0) hash ^= AccumMoney.GetHashCode();
      if (FishValue != 0) hash ^= FishValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (CurStage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurStage);
      }
      if (AccumMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AccumMoney);
      }
      if (FishValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FishValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FishUid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishUid);
      }
      if (CurStage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurStage);
      }
      if (AccumMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AccumMoney);
      }
      if (FishValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FishValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (CurStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurStage);
      }
      if (AccumMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccumMoney);
      }
      if (FishValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTreasureFishInfo other) {
      if (other == null) {
        return;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.CurStage != 0) {
        CurStage = other.CurStage;
      }
      if (other.AccumMoney != 0) {
        AccumMoney = other.AccumMoney;
      }
      if (other.FishValue != 0) {
        FishValue = other.FishValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
          case 16: {
            CurStage = input.ReadInt32();
            break;
          }
          case 24: {
            AccumMoney = input.ReadInt32();
            break;
          }
          case 32: {
            FishValue = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FishUid = input.ReadInt32();
            break;
          }
          case 16: {
            CurStage = input.ReadInt32();
            break;
          }
          case 24: {
            AccumMoney = input.ReadInt32();
            break;
          }
          case 32: {
            FishValue = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCTreasureFishCatched : pb::IMessage<SCTreasureFishCatched>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTreasureFishCatched> _parser = new pb::MessageParser<SCTreasureFishCatched>(() => new SCTreasureFishCatched());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTreasureFishCatched> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureFishCatched() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureFishCatched(SCTreasureFishCatched other) : this() {
      chairIdx_ = other.chairIdx_;
      ratio_ = other.ratio_;
      fishUid_ = other.fishUid_;
      fishValue_ = other.fishValue_;
      accumMoney_ = other.accumMoney_;
      multiple_ = other.multiple_;
      death_ = other.death_;
      earn_ = other.earn_;
      userScore_ = other.userScore_;
      displayMultiple_ = other.displayMultiple_;
      curStage_ = other.curStage_;
      magicCubeMulti_ = other.magicCubeMulti_;
      multiList_ = other.multiList_.Clone();
      originUid_ = other.originUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureFishCatched Clone() {
      return new SCTreasureFishCatched(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 2;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 3;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "fish_value" field.</summary>
    public const int FishValueFieldNumber = 4;
    private int fishValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishValue {
      get { return fishValue_; }
      set {
        fishValue_ = value;
      }
    }

    /// <summary>Field number for the "accum_money" field.</summary>
    public const int AccumMoneyFieldNumber = 5;
    private int accumMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccumMoney {
      get { return accumMoney_; }
      set {
        accumMoney_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 6;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "death" field.</summary>
    public const int DeathFieldNumber = 7;
    private bool death_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Death {
      get { return death_; }
      set {
        death_ = value;
      }
    }

    /// <summary>Field number for the "earn" field.</summary>
    public const int EarnFieldNumber = 8;
    private int earn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Earn {
      get { return earn_; }
      set {
        earn_ = value;
      }
    }

    /// <summary>Field number for the "user_score" field.</summary>
    public const int UserScoreFieldNumber = 9;
    private long userScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserScore {
      get { return userScore_; }
      set {
        userScore_ = value;
      }
    }

    /// <summary>Field number for the "display_multiple" field.</summary>
    public const int DisplayMultipleFieldNumber = 10;
    private bool displayMultiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisplayMultiple {
      get { return displayMultiple_; }
      set {
        displayMultiple_ = value;
      }
    }

    /// <summary>Field number for the "cur_stage" field.</summary>
    public const int CurStageFieldNumber = 11;
    private int curStage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurStage {
      get { return curStage_; }
      set {
        curStage_ = value;
      }
    }

    /// <summary>Field number for the "magic_cube_multi" field.</summary>
    public const int MagicCubeMultiFieldNumber = 12;
    private int magicCubeMulti_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicCubeMulti {
      get { return magicCubeMulti_; }
      set {
        magicCubeMulti_ = value;
      }
    }

    /// <summary>Field number for the "multi_list" field.</summary>
    public const int MultiListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::F4BY.MultiInfo> _repeated_multiList_codec
        = pb::FieldCodec.ForMessage(106, global::F4BY.MultiInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.MultiInfo> multiList_ = new pbc::RepeatedField<global::F4BY.MultiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.MultiInfo> MultiList {
      get { return multiList_; }
    }

    /// <summary>Field number for the "origin_uid" field.</summary>
    public const int OriginUidFieldNumber = 14;
    private int originUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginUid {
      get { return originUid_; }
      set {
        originUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTreasureFishCatched);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTreasureFishCatched other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Ratio != other.Ratio) return false;
      if (FishUid != other.FishUid) return false;
      if (FishValue != other.FishValue) return false;
      if (AccumMoney != other.AccumMoney) return false;
      if (Multiple != other.Multiple) return false;
      if (Death != other.Death) return false;
      if (Earn != other.Earn) return false;
      if (UserScore != other.UserScore) return false;
      if (DisplayMultiple != other.DisplayMultiple) return false;
      if (CurStage != other.CurStage) return false;
      if (MagicCubeMulti != other.MagicCubeMulti) return false;
      if(!multiList_.Equals(other.multiList_)) return false;
      if (OriginUid != other.OriginUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (FishValue != 0) hash ^= FishValue.GetHashCode();
      if (AccumMoney != 0) hash ^= AccumMoney.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (Death != false) hash ^= Death.GetHashCode();
      if (Earn != 0) hash ^= Earn.GetHashCode();
      if (UserScore != 0L) hash ^= UserScore.GetHashCode();
      if (DisplayMultiple != false) hash ^= DisplayMultiple.GetHashCode();
      if (CurStage != 0) hash ^= CurStage.GetHashCode();
      if (MagicCubeMulti != 0) hash ^= MagicCubeMulti.GetHashCode();
      hash ^= multiList_.GetHashCode();
      if (OriginUid != 0) hash ^= OriginUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (FishUid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishUid);
      }
      if (FishValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FishValue);
      }
      if (AccumMoney != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AccumMoney);
      }
      if (Multiple != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Multiple);
      }
      if (Death != false) {
        output.WriteRawTag(56);
        output.WriteBool(Death);
      }
      if (Earn != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Earn);
      }
      if (UserScore != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(UserScore);
      }
      if (DisplayMultiple != false) {
        output.WriteRawTag(80);
        output.WriteBool(DisplayMultiple);
      }
      if (CurStage != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CurStage);
      }
      if (MagicCubeMulti != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MagicCubeMulti);
      }
      multiList_.WriteTo(output, _repeated_multiList_codec);
      if (OriginUid != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(OriginUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (FishUid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishUid);
      }
      if (FishValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FishValue);
      }
      if (AccumMoney != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AccumMoney);
      }
      if (Multiple != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Multiple);
      }
      if (Death != false) {
        output.WriteRawTag(56);
        output.WriteBool(Death);
      }
      if (Earn != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Earn);
      }
      if (UserScore != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(UserScore);
      }
      if (DisplayMultiple != false) {
        output.WriteRawTag(80);
        output.WriteBool(DisplayMultiple);
      }
      if (CurStage != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CurStage);
      }
      if (MagicCubeMulti != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MagicCubeMulti);
      }
      multiList_.WriteTo(ref output, _repeated_multiList_codec);
      if (OriginUid != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(OriginUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (FishValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishValue);
      }
      if (AccumMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccumMoney);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (Death != false) {
        size += 1 + 1;
      }
      if (Earn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Earn);
      }
      if (UserScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserScore);
      }
      if (DisplayMultiple != false) {
        size += 1 + 1;
      }
      if (CurStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurStage);
      }
      if (MagicCubeMulti != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicCubeMulti);
      }
      size += multiList_.CalculateSize(_repeated_multiList_codec);
      if (OriginUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTreasureFishCatched other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.FishValue != 0) {
        FishValue = other.FishValue;
      }
      if (other.AccumMoney != 0) {
        AccumMoney = other.AccumMoney;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      if (other.Death != false) {
        Death = other.Death;
      }
      if (other.Earn != 0) {
        Earn = other.Earn;
      }
      if (other.UserScore != 0L) {
        UserScore = other.UserScore;
      }
      if (other.DisplayMultiple != false) {
        DisplayMultiple = other.DisplayMultiple;
      }
      if (other.CurStage != 0) {
        CurStage = other.CurStage;
      }
      if (other.MagicCubeMulti != 0) {
        MagicCubeMulti = other.MagicCubeMulti;
      }
      multiList_.Add(other.multiList_);
      if (other.OriginUid != 0) {
        OriginUid = other.OriginUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            FishUid = input.ReadInt32();
            break;
          }
          case 32: {
            FishValue = input.ReadInt32();
            break;
          }
          case 40: {
            AccumMoney = input.ReadInt32();
            break;
          }
          case 48: {
            Multiple = input.ReadInt32();
            break;
          }
          case 56: {
            Death = input.ReadBool();
            break;
          }
          case 64: {
            Earn = input.ReadInt32();
            break;
          }
          case 72: {
            UserScore = input.ReadInt64();
            break;
          }
          case 80: {
            DisplayMultiple = input.ReadBool();
            break;
          }
          case 88: {
            CurStage = input.ReadInt32();
            break;
          }
          case 96: {
            MagicCubeMulti = input.ReadInt32();
            break;
          }
          case 106: {
            multiList_.AddEntriesFrom(input, _repeated_multiList_codec);
            break;
          }
          case 112: {
            OriginUid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            FishUid = input.ReadInt32();
            break;
          }
          case 32: {
            FishValue = input.ReadInt32();
            break;
          }
          case 40: {
            AccumMoney = input.ReadInt32();
            break;
          }
          case 48: {
            Multiple = input.ReadInt32();
            break;
          }
          case 56: {
            Death = input.ReadBool();
            break;
          }
          case 64: {
            Earn = input.ReadInt32();
            break;
          }
          case 72: {
            UserScore = input.ReadInt64();
            break;
          }
          case 80: {
            DisplayMultiple = input.ReadBool();
            break;
          }
          case 88: {
            CurStage = input.ReadInt32();
            break;
          }
          case 96: {
            MagicCubeMulti = input.ReadInt32();
            break;
          }
          case 106: {
            multiList_.AddEntriesFrom(ref input, _repeated_multiList_codec);
            break;
          }
          case 112: {
            OriginUid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MatchPackAddition : pb::IMessage<MatchPackAddition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchPackAddition> _parser = new pb::MessageParser<MatchPackAddition>(() => new MatchPackAddition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPackAddition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPackAddition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPackAddition(MatchPackAddition other) : this() {
      id_ = other.id_;
      isBuy_ = other.isBuy_;
      scoreAddition_ = other.scoreAddition_;
      reawardAddition_ = other.reawardAddition_;
      card_ = other.card_;
      sec_ = other.sec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPackAddition Clone() {
      return new MatchPackAddition(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_buy" field.</summary>
    public const int IsBuyFieldNumber = 2;
    private bool isBuy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBuy {
      get { return isBuy_; }
      set {
        isBuy_ = value;
      }
    }

    /// <summary>Field number for the "score_addition" field.</summary>
    public const int ScoreAdditionFieldNumber = 3;
    private float scoreAddition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScoreAddition {
      get { return scoreAddition_; }
      set {
        scoreAddition_ = value;
      }
    }

    /// <summary>Field number for the "reaward_addition" field.</summary>
    public const int ReawardAdditionFieldNumber = 4;
    private float reawardAddition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReawardAddition {
      get { return reawardAddition_; }
      set {
        reawardAddition_ = value;
      }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 5;
    private int card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "sec" field.</summary>
    public const int SecFieldNumber = 6;
    private int sec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sec {
      get { return sec_; }
      set {
        sec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPackAddition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPackAddition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsBuy != other.IsBuy) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScoreAddition, other.ScoreAddition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReawardAddition, other.ReawardAddition)) return false;
      if (Card != other.Card) return false;
      if (Sec != other.Sec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (IsBuy != false) hash ^= IsBuy.GetHashCode();
      if (ScoreAddition != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScoreAddition);
      if (ReawardAddition != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReawardAddition);
      if (Card != 0) hash ^= Card.GetHashCode();
      if (Sec != 0) hash ^= Sec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (IsBuy != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsBuy);
      }
      if (ScoreAddition != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ScoreAddition);
      }
      if (ReawardAddition != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ReawardAddition);
      }
      if (Card != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Card);
      }
      if (Sec != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (IsBuy != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsBuy);
      }
      if (ScoreAddition != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ScoreAddition);
      }
      if (ReawardAddition != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ReawardAddition);
      }
      if (Card != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Card);
      }
      if (Sec != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (IsBuy != false) {
        size += 1 + 1;
      }
      if (ScoreAddition != 0F) {
        size += 1 + 4;
      }
      if (ReawardAddition != 0F) {
        size += 1 + 4;
      }
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      if (Sec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPackAddition other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.IsBuy != false) {
        IsBuy = other.IsBuy;
      }
      if (other.ScoreAddition != 0F) {
        ScoreAddition = other.ScoreAddition;
      }
      if (other.ReawardAddition != 0F) {
        ReawardAddition = other.ReawardAddition;
      }
      if (other.Card != 0) {
        Card = other.Card;
      }
      if (other.Sec != 0) {
        Sec = other.Sec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            IsBuy = input.ReadBool();
            break;
          }
          case 29: {
            ScoreAddition = input.ReadFloat();
            break;
          }
          case 37: {
            ReawardAddition = input.ReadFloat();
            break;
          }
          case 40: {
            Card = input.ReadInt32();
            break;
          }
          case 48: {
            Sec = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            IsBuy = input.ReadBool();
            break;
          }
          case 29: {
            ScoreAddition = input.ReadFloat();
            break;
          }
          case 37: {
            ReawardAddition = input.ReadFloat();
            break;
          }
          case 40: {
            Card = input.ReadInt32();
            break;
          }
          case 48: {
            Sec = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSMatchPackAddition : pb::IMessage<CSMatchPackAddition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSMatchPackAddition> _parser = new pb::MessageParser<CSMatchPackAddition>(() => new CSMatchPackAddition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSMatchPackAddition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchPackAddition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchPackAddition(CSMatchPackAddition other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchPackAddition Clone() {
      return new CSMatchPackAddition(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSMatchPackAddition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSMatchPackAddition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSMatchPackAddition other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCMatchPackAddition : pb::IMessage<SCMatchPackAddition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCMatchPackAddition> _parser = new pb::MessageParser<SCMatchPackAddition>(() => new SCMatchPackAddition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMatchPackAddition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchPackAddition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchPackAddition(SCMatchPackAddition other) : this() {
      addition_ = other.addition_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchPackAddition Clone() {
      return new SCMatchPackAddition(this);
    }

    /// <summary>Field number for the "addition" field.</summary>
    public const int AdditionFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.MatchPackAddition> _repeated_addition_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.MatchPackAddition.Parser);
    private readonly pbc::RepeatedField<global::F4BY.MatchPackAddition> addition_ = new pbc::RepeatedField<global::F4BY.MatchPackAddition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.MatchPackAddition> Addition {
      get { return addition_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMatchPackAddition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMatchPackAddition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addition_.Equals(other.addition_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addition_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      addition_.WriteTo(output, _repeated_addition_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      addition_.WriteTo(ref output, _repeated_addition_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addition_.CalculateSize(_repeated_addition_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMatchPackAddition other) {
      if (other == null) {
        return;
      }
      addition_.Add(other.addition_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addition_.AddEntriesFrom(input, _repeated_addition_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            addition_.AddEntriesFrom(ref input, _repeated_addition_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCMatchPackInvail : pb::IMessage<SCMatchPackInvail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCMatchPackInvail> _parser = new pb::MessageParser<SCMatchPackInvail>(() => new SCMatchPackInvail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMatchPackInvail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchPackInvail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchPackInvail(SCMatchPackInvail other) : this() {
      packId_ = other.packId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMatchPackInvail Clone() {
      return new SCMatchPackInvail(this);
    }

    /// <summary>Field number for the "packId" field.</summary>
    public const int PackIdFieldNumber = 1;
    private string packId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackId {
      get { return packId_; }
      set {
        packId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMatchPackInvail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMatchPackInvail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackId != other.PackId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackId.Length != 0) hash ^= PackId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PackId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PackId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PackId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PackId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMatchPackInvail other) {
      if (other == null) {
        return;
      }
      if (other.PackId.Length != 0) {
        PackId = other.PackId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PackId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PackId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSMatchPackBuying : pb::IMessage<CSMatchPackBuying>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSMatchPackBuying> _parser = new pb::MessageParser<CSMatchPackBuying>(() => new CSMatchPackBuying());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSMatchPackBuying> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchPackBuying() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchPackBuying(CSMatchPackBuying other) : this() {
      packId_ = other.packId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSMatchPackBuying Clone() {
      return new CSMatchPackBuying(this);
    }

    /// <summary>Field number for the "packId" field.</summary>
    public const int PackIdFieldNumber = 1;
    private string packId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PackId {
      get { return packId_; }
      set {
        packId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSMatchPackBuying);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSMatchPackBuying other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackId != other.PackId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackId.Length != 0) hash ^= PackId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PackId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PackId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PackId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PackId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSMatchPackBuying other) {
      if (other == null) {
        return;
      }
      if (other.PackId.Length != 0) {
        PackId = other.PackId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PackId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PackId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AwardDetail : pb::IMessage<AwardDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardDetail> _parser = new pb::MessageParser<AwardDetail>(() => new AwardDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AwardDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardDetail(AwardDetail other) : this() {
      playerId_ = other.playerId_;
      nums_ = other.nums_;
      period_ = other.period_;
      vip_ = other.vip_;
      nick_ = other.nick_;
      photo_ = other.photo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardDetail Clone() {
      return new AwardDetail(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "nums" field.</summary>
    public const int NumsFieldNumber = 2;
    private int nums_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nums {
      get { return nums_; }
      set {
        nums_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 3;
    private int period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 4;
    private int vip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 5;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "photo" field.</summary>
    public const int PhotoFieldNumber = 6;
    private string photo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Photo {
      get { return photo_; }
      set {
        photo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AwardDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AwardDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Nums != other.Nums) return false;
      if (Period != other.Period) return false;
      if (Vip != other.Vip) return false;
      if (Nick != other.Nick) return false;
      if (Photo != other.Photo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (Nums != 0) hash ^= Nums.GetHashCode();
      if (Period != 0) hash ^= Period.GetHashCode();
      if (Vip != 0) hash ^= Vip.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Photo.Length != 0) hash ^= Photo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Nums != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Nums);
      }
      if (Period != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Period);
      }
      if (Vip != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Vip);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Nick);
      }
      if (Photo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Photo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerId);
      }
      if (Nums != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Nums);
      }
      if (Period != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Period);
      }
      if (Vip != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Vip);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Nick);
      }
      if (Photo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Photo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (Nums != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nums);
      }
      if (Period != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Period);
      }
      if (Vip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vip);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Photo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Photo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AwardDetail other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Nums != 0) {
        Nums = other.Nums;
      }
      if (other.Period != 0) {
        Period = other.Period;
      }
      if (other.Vip != 0) {
        Vip = other.Vip;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Photo.Length != 0) {
        Photo = other.Photo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Nums = input.ReadInt32();
            break;
          }
          case 24: {
            Period = input.ReadInt32();
            break;
          }
          case 32: {
            Vip = input.ReadInt32();
            break;
          }
          case 42: {
            Nick = input.ReadString();
            break;
          }
          case 50: {
            Photo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 16: {
            Nums = input.ReadInt32();
            break;
          }
          case 24: {
            Period = input.ReadInt32();
            break;
          }
          case 32: {
            Vip = input.ReadInt32();
            break;
          }
          case 42: {
            Nick = input.ReadString();
            break;
          }
          case 50: {
            Photo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LuckyAwardNotify : pb::IMessage<LuckyAwardNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LuckyAwardNotify> _parser = new pb::MessageParser<LuckyAwardNotify>(() => new LuckyAwardNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LuckyAwardNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyAwardNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyAwardNotify(LuckyAwardNotify other) : this() {
      awardType_ = other.awardType_;
      detail_ = other.detail_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyAwardNotify Clone() {
      return new LuckyAwardNotify(this);
    }

    /// <summary>Field number for the "awardType" field.</summary>
    public const int AwardTypeFieldNumber = 1;
    private int awardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AwardType {
      get { return awardType_; }
      set {
        awardType_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.AwardDetail> _repeated_detail_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.AwardDetail.Parser);
    private readonly pbc::RepeatedField<global::F4BY.AwardDetail> detail_ = new pbc::RepeatedField<global::F4BY.AwardDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.AwardDetail> Detail {
      get { return detail_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LuckyAwardNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LuckyAwardNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AwardType != other.AwardType) return false;
      if(!detail_.Equals(other.detail_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AwardType != 0) hash ^= AwardType.GetHashCode();
      hash ^= detail_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AwardType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AwardType);
      }
      detail_.WriteTo(output, _repeated_detail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AwardType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AwardType);
      }
      detail_.WriteTo(ref output, _repeated_detail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AwardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardType);
      }
      size += detail_.CalculateSize(_repeated_detail_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LuckyAwardNotify other) {
      if (other == null) {
        return;
      }
      if (other.AwardType != 0) {
        AwardType = other.AwardType;
      }
      detail_.Add(other.detail_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AwardType = input.ReadInt32();
            break;
          }
          case 18: {
            detail_.AddEntriesFrom(input, _repeated_detail_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AwardType = input.ReadInt32();
            break;
          }
          case 18: {
            detail_.AddEntriesFrom(ref input, _repeated_detail_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGameItemSwitch : pb::IMessage<CSGameItemSwitch>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGameItemSwitch> _parser = new pb::MessageParser<CSGameItemSwitch>(() => new CSGameItemSwitch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGameItemSwitch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGameItemSwitch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGameItemSwitch(CSGameItemSwitch other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGameItemSwitch Clone() {
      return new CSGameItemSwitch(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGameItemSwitch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGameItemSwitch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGameItemSwitch other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCGameItemSwitch : pb::IMessage<SCGameItemSwitch>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGameItemSwitch> _parser = new pb::MessageParser<SCGameItemSwitch>(() => new SCGameItemSwitch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGameItemSwitch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameItemSwitch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameItemSwitch(SCGameItemSwitch other) : this() {
      luckyTask_ = other.luckyTask_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGameItemSwitch Clone() {
      return new SCGameItemSwitch(this);
    }

    /// <summary>Field number for the "lucky_task" field.</summary>
    public const int LuckyTaskFieldNumber = 1;
    private bool luckyTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LuckyTask {
      get { return luckyTask_; }
      set {
        luckyTask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGameItemSwitch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGameItemSwitch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LuckyTask != other.LuckyTask) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LuckyTask != false) hash ^= LuckyTask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LuckyTask != false) {
        output.WriteRawTag(8);
        output.WriteBool(LuckyTask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LuckyTask != false) {
        output.WriteRawTag(8);
        output.WriteBool(LuckyTask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LuckyTask != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGameItemSwitch other) {
      if (other == null) {
        return;
      }
      if (other.LuckyTask != false) {
        LuckyTask = other.LuckyTask;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LuckyTask = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LuckyTask = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AwardProp : pb::IMessage<AwardProp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardProp> _parser = new pb::MessageParser<AwardProp>(() => new AwardProp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AwardProp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardProp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardProp(AwardProp other) : this() {
      propId_ = other.propId_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardProp Clone() {
      return new AwardProp(this);
    }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AwardProp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AwardProp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropId != other.PropId) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AwardProp other) {
      if (other == null) {
        return;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LuckyTaskInfo : pb::IMessage<LuckyTaskInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LuckyTaskInfo> _parser = new pb::MessageParser<LuckyTaskInfo>(() => new LuckyTaskInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LuckyTaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyTaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyTaskInfo(LuckyTaskInfo other) : this() {
      id_ = other.id_;
      status_ = other.status_;
      score_ = other.score_;
      text_ = other.text_;
      amount_ = other.amount_;
      target_ = other.target_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyTaskInfo Clone() {
      return new LuckyTaskInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 6;
    private int target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LuckyTaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LuckyTaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      if (Score != other.Score) return false;
      if (Text != other.Text) return false;
      if (Amount != other.Amount) return false;
      if (Target != other.Target) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
      if (Amount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Amount);
      }
      if (Target != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
      if (Amount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Amount);
      }
      if (Target != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LuckyTaskInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
          case 40: {
            Amount = input.ReadInt32();
            break;
          }
          case 48: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
          case 40: {
            Amount = input.ReadInt32();
            break;
          }
          case 48: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSLuckyDrawInfo : pb::IMessage<CSLuckyDrawInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSLuckyDrawInfo> _parser = new pb::MessageParser<CSLuckyDrawInfo>(() => new CSLuckyDrawInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLuckyDrawInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyDrawInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyDrawInfo(CSLuckyDrawInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyDrawInfo Clone() {
      return new CSLuckyDrawInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLuckyDrawInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLuckyDrawInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLuckyDrawInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCLuckyDrawInfo : pb::IMessage<SCLuckyDrawInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCLuckyDrawInfo> _parser = new pb::MessageParser<SCLuckyDrawInfo>(() => new SCLuckyDrawInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLuckyDrawInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyDrawInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyDrawInfo(SCLuckyDrawInfo other) : this() {
      hourRemainSec_ = other.hourRemainSec_;
      dayRemainSec_ = other.dayRemainSec_;
      hourReward_ = other.hourReward_.Clone();
      dayReward_ = other.dayReward_.Clone();
      dayLuckyNums_ = other.dayLuckyNums_.Clone();
      score_ = other.score_;
      hourTotal_ = other.hourTotal_;
      dayTotal_ = other.dayTotal_;
      hourAwardNum_ = other.hourAwardNum_;
      dayAwardNum_ = other.dayAwardNum_;
      nextStartTick_ = other.nextStartTick_;
      taskInfo_ = other.taskInfo_.Clone();
      exchangeScore_ = other.exchangeScore_;
      nextRemainSec_ = other.nextRemainSec_;
      hourLuckyNums_ = other.hourLuckyNums_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyDrawInfo Clone() {
      return new SCLuckyDrawInfo(this);
    }

    /// <summary>Field number for the "hour_remain_sec" field.</summary>
    public const int HourRemainSecFieldNumber = 1;
    private int hourRemainSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HourRemainSec {
      get { return hourRemainSec_; }
      set {
        hourRemainSec_ = value;
      }
    }

    /// <summary>Field number for the "day_remain_sec" field.</summary>
    public const int DayRemainSecFieldNumber = 2;
    private int dayRemainSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayRemainSec {
      get { return dayRemainSec_; }
      set {
        dayRemainSec_ = value;
      }
    }

    /// <summary>Field number for the "hour_reward" field.</summary>
    public const int HourRewardFieldNumber = 3;
    private static readonly pb::FieldCodec<global::F4BY.AwardProp> _repeated_hourReward_codec
        = pb::FieldCodec.ForMessage(26, global::F4BY.AwardProp.Parser);
    private readonly pbc::RepeatedField<global::F4BY.AwardProp> hourReward_ = new pbc::RepeatedField<global::F4BY.AwardProp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.AwardProp> HourReward {
      get { return hourReward_; }
    }

    /// <summary>Field number for the "day_reward" field.</summary>
    public const int DayRewardFieldNumber = 4;
    private static readonly pb::FieldCodec<global::F4BY.AwardProp> _repeated_dayReward_codec
        = pb::FieldCodec.ForMessage(34, global::F4BY.AwardProp.Parser);
    private readonly pbc::RepeatedField<global::F4BY.AwardProp> dayReward_ = new pbc::RepeatedField<global::F4BY.AwardProp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.AwardProp> DayReward {
      get { return dayReward_; }
    }

    /// <summary>Field number for the "day_lucky_nums" field.</summary>
    public const int DayLuckyNumsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_dayLuckyNums_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> dayLuckyNums_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DayLuckyNums {
      get { return dayLuckyNums_; }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 6;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "hour_total" field.</summary>
    public const int HourTotalFieldNumber = 7;
    private int hourTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HourTotal {
      get { return hourTotal_; }
      set {
        hourTotal_ = value;
      }
    }

    /// <summary>Field number for the "day_total" field.</summary>
    public const int DayTotalFieldNumber = 8;
    private int dayTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayTotal {
      get { return dayTotal_; }
      set {
        dayTotal_ = value;
      }
    }

    /// <summary>Field number for the "hour_award_num" field.</summary>
    public const int HourAwardNumFieldNumber = 9;
    private int hourAwardNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HourAwardNum {
      get { return hourAwardNum_; }
      set {
        hourAwardNum_ = value;
      }
    }

    /// <summary>Field number for the "day_award_num" field.</summary>
    public const int DayAwardNumFieldNumber = 10;
    private int dayAwardNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayAwardNum {
      get { return dayAwardNum_; }
      set {
        dayAwardNum_ = value;
      }
    }

    /// <summary>Field number for the "next_start_tick" field.</summary>
    public const int NextStartTickFieldNumber = 11;
    private int nextStartTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextStartTick {
      get { return nextStartTick_; }
      set {
        nextStartTick_ = value;
      }
    }

    /// <summary>Field number for the "task_info" field.</summary>
    public const int TaskInfoFieldNumber = 12;
    private static readonly pb::FieldCodec<global::F4BY.LuckyTaskInfo> _repeated_taskInfo_codec
        = pb::FieldCodec.ForMessage(98, global::F4BY.LuckyTaskInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.LuckyTaskInfo> taskInfo_ = new pbc::RepeatedField<global::F4BY.LuckyTaskInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.LuckyTaskInfo> TaskInfo {
      get { return taskInfo_; }
    }

    /// <summary>Field number for the "exchange_score" field.</summary>
    public const int ExchangeScoreFieldNumber = 13;
    private int exchangeScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExchangeScore {
      get { return exchangeScore_; }
      set {
        exchangeScore_ = value;
      }
    }

    /// <summary>Field number for the "next_remain_sec" field.</summary>
    public const int NextRemainSecFieldNumber = 14;
    private int nextRemainSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextRemainSec {
      get { return nextRemainSec_; }
      set {
        nextRemainSec_ = value;
      }
    }

    /// <summary>Field number for the "hour_lucky_nums" field.</summary>
    public const int HourLuckyNumsFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_hourLuckyNums_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> hourLuckyNums_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HourLuckyNums {
      get { return hourLuckyNums_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLuckyDrawInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLuckyDrawInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HourRemainSec != other.HourRemainSec) return false;
      if (DayRemainSec != other.DayRemainSec) return false;
      if(!hourReward_.Equals(other.hourReward_)) return false;
      if(!dayReward_.Equals(other.dayReward_)) return false;
      if(!dayLuckyNums_.Equals(other.dayLuckyNums_)) return false;
      if (Score != other.Score) return false;
      if (HourTotal != other.HourTotal) return false;
      if (DayTotal != other.DayTotal) return false;
      if (HourAwardNum != other.HourAwardNum) return false;
      if (DayAwardNum != other.DayAwardNum) return false;
      if (NextStartTick != other.NextStartTick) return false;
      if(!taskInfo_.Equals(other.taskInfo_)) return false;
      if (ExchangeScore != other.ExchangeScore) return false;
      if (NextRemainSec != other.NextRemainSec) return false;
      if(!hourLuckyNums_.Equals(other.hourLuckyNums_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HourRemainSec != 0) hash ^= HourRemainSec.GetHashCode();
      if (DayRemainSec != 0) hash ^= DayRemainSec.GetHashCode();
      hash ^= hourReward_.GetHashCode();
      hash ^= dayReward_.GetHashCode();
      hash ^= dayLuckyNums_.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (HourTotal != 0) hash ^= HourTotal.GetHashCode();
      if (DayTotal != 0) hash ^= DayTotal.GetHashCode();
      if (HourAwardNum != 0) hash ^= HourAwardNum.GetHashCode();
      if (DayAwardNum != 0) hash ^= DayAwardNum.GetHashCode();
      if (NextStartTick != 0) hash ^= NextStartTick.GetHashCode();
      hash ^= taskInfo_.GetHashCode();
      if (ExchangeScore != 0) hash ^= ExchangeScore.GetHashCode();
      if (NextRemainSec != 0) hash ^= NextRemainSec.GetHashCode();
      hash ^= hourLuckyNums_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HourRemainSec != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HourRemainSec);
      }
      if (DayRemainSec != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DayRemainSec);
      }
      hourReward_.WriteTo(output, _repeated_hourReward_codec);
      dayReward_.WriteTo(output, _repeated_dayReward_codec);
      dayLuckyNums_.WriteTo(output, _repeated_dayLuckyNums_codec);
      if (Score != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Score);
      }
      if (HourTotal != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HourTotal);
      }
      if (DayTotal != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DayTotal);
      }
      if (HourAwardNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HourAwardNum);
      }
      if (DayAwardNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DayAwardNum);
      }
      if (NextStartTick != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(NextStartTick);
      }
      taskInfo_.WriteTo(output, _repeated_taskInfo_codec);
      if (ExchangeScore != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ExchangeScore);
      }
      if (NextRemainSec != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(NextRemainSec);
      }
      hourLuckyNums_.WriteTo(output, _repeated_hourLuckyNums_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HourRemainSec != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HourRemainSec);
      }
      if (DayRemainSec != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DayRemainSec);
      }
      hourReward_.WriteTo(ref output, _repeated_hourReward_codec);
      dayReward_.WriteTo(ref output, _repeated_dayReward_codec);
      dayLuckyNums_.WriteTo(ref output, _repeated_dayLuckyNums_codec);
      if (Score != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Score);
      }
      if (HourTotal != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HourTotal);
      }
      if (DayTotal != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DayTotal);
      }
      if (HourAwardNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(HourAwardNum);
      }
      if (DayAwardNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DayAwardNum);
      }
      if (NextStartTick != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(NextStartTick);
      }
      taskInfo_.WriteTo(ref output, _repeated_taskInfo_codec);
      if (ExchangeScore != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ExchangeScore);
      }
      if (NextRemainSec != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(NextRemainSec);
      }
      hourLuckyNums_.WriteTo(ref output, _repeated_hourLuckyNums_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HourRemainSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HourRemainSec);
      }
      if (DayRemainSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayRemainSec);
      }
      size += hourReward_.CalculateSize(_repeated_hourReward_codec);
      size += dayReward_.CalculateSize(_repeated_dayReward_codec);
      size += dayLuckyNums_.CalculateSize(_repeated_dayLuckyNums_codec);
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (HourTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HourTotal);
      }
      if (DayTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayTotal);
      }
      if (HourAwardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HourAwardNum);
      }
      if (DayAwardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayAwardNum);
      }
      if (NextStartTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextStartTick);
      }
      size += taskInfo_.CalculateSize(_repeated_taskInfo_codec);
      if (ExchangeScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExchangeScore);
      }
      if (NextRemainSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextRemainSec);
      }
      size += hourLuckyNums_.CalculateSize(_repeated_hourLuckyNums_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLuckyDrawInfo other) {
      if (other == null) {
        return;
      }
      if (other.HourRemainSec != 0) {
        HourRemainSec = other.HourRemainSec;
      }
      if (other.DayRemainSec != 0) {
        DayRemainSec = other.DayRemainSec;
      }
      hourReward_.Add(other.hourReward_);
      dayReward_.Add(other.dayReward_);
      dayLuckyNums_.Add(other.dayLuckyNums_);
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.HourTotal != 0) {
        HourTotal = other.HourTotal;
      }
      if (other.DayTotal != 0) {
        DayTotal = other.DayTotal;
      }
      if (other.HourAwardNum != 0) {
        HourAwardNum = other.HourAwardNum;
      }
      if (other.DayAwardNum != 0) {
        DayAwardNum = other.DayAwardNum;
      }
      if (other.NextStartTick != 0) {
        NextStartTick = other.NextStartTick;
      }
      taskInfo_.Add(other.taskInfo_);
      if (other.ExchangeScore != 0) {
        ExchangeScore = other.ExchangeScore;
      }
      if (other.NextRemainSec != 0) {
        NextRemainSec = other.NextRemainSec;
      }
      hourLuckyNums_.Add(other.hourLuckyNums_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HourRemainSec = input.ReadInt32();
            break;
          }
          case 16: {
            DayRemainSec = input.ReadInt32();
            break;
          }
          case 26: {
            hourReward_.AddEntriesFrom(input, _repeated_hourReward_codec);
            break;
          }
          case 34: {
            dayReward_.AddEntriesFrom(input, _repeated_dayReward_codec);
            break;
          }
          case 42:
          case 40: {
            dayLuckyNums_.AddEntriesFrom(input, _repeated_dayLuckyNums_codec);
            break;
          }
          case 48: {
            Score = input.ReadInt32();
            break;
          }
          case 56: {
            HourTotal = input.ReadInt32();
            break;
          }
          case 64: {
            DayTotal = input.ReadInt32();
            break;
          }
          case 72: {
            HourAwardNum = input.ReadInt32();
            break;
          }
          case 80: {
            DayAwardNum = input.ReadInt32();
            break;
          }
          case 88: {
            NextStartTick = input.ReadInt32();
            break;
          }
          case 98: {
            taskInfo_.AddEntriesFrom(input, _repeated_taskInfo_codec);
            break;
          }
          case 104: {
            ExchangeScore = input.ReadInt32();
            break;
          }
          case 112: {
            NextRemainSec = input.ReadInt32();
            break;
          }
          case 122:
          case 120: {
            hourLuckyNums_.AddEntriesFrom(input, _repeated_hourLuckyNums_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            HourRemainSec = input.ReadInt32();
            break;
          }
          case 16: {
            DayRemainSec = input.ReadInt32();
            break;
          }
          case 26: {
            hourReward_.AddEntriesFrom(ref input, _repeated_hourReward_codec);
            break;
          }
          case 34: {
            dayReward_.AddEntriesFrom(ref input, _repeated_dayReward_codec);
            break;
          }
          case 42:
          case 40: {
            dayLuckyNums_.AddEntriesFrom(ref input, _repeated_dayLuckyNums_codec);
            break;
          }
          case 48: {
            Score = input.ReadInt32();
            break;
          }
          case 56: {
            HourTotal = input.ReadInt32();
            break;
          }
          case 64: {
            DayTotal = input.ReadInt32();
            break;
          }
          case 72: {
            HourAwardNum = input.ReadInt32();
            break;
          }
          case 80: {
            DayAwardNum = input.ReadInt32();
            break;
          }
          case 88: {
            NextStartTick = input.ReadInt32();
            break;
          }
          case 98: {
            taskInfo_.AddEntriesFrom(ref input, _repeated_taskInfo_codec);
            break;
          }
          case 104: {
            ExchangeScore = input.ReadInt32();
            break;
          }
          case 112: {
            NextRemainSec = input.ReadInt32();
            break;
          }
          case 122:
          case 120: {
            hourLuckyNums_.AddEntriesFrom(ref input, _repeated_hourLuckyNums_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetLuckyTaskAward : pb::IMessage<CSGetLuckyTaskAward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetLuckyTaskAward> _parser = new pb::MessageParser<CSGetLuckyTaskAward>(() => new CSGetLuckyTaskAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetLuckyTaskAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetLuckyTaskAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetLuckyTaskAward(CSGetLuckyTaskAward other) : this() {
      taskId_ = other.taskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetLuckyTaskAward Clone() {
      return new CSGetLuckyTaskAward(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetLuckyTaskAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetLuckyTaskAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetLuckyTaskAward other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetLuckyTaskAward : pb::IMessage<SCGetLuckyTaskAward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetLuckyTaskAward> _parser = new pb::MessageParser<SCGetLuckyTaskAward>(() => new SCGetLuckyTaskAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetLuckyTaskAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetLuckyTaskAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetLuckyTaskAward(SCGetLuckyTaskAward other) : this() {
      task_ = other.task_ != null ? other.task_.Clone() : null;
      score_ = other.score_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetLuckyTaskAward Clone() {
      return new SCGetLuckyTaskAward(this);
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 1;
    private global::F4BY.LuckyTaskInfo task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.LuckyTaskInfo Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetLuckyTaskAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetLuckyTaskAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Task, other.Task)) return false;
      if (Score != other.Score) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (task_ != null) hash ^= Task.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (task_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Task);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (task_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Task);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetLuckyTaskAward other) {
      if (other == null) {
        return;
      }
      if (other.task_ != null) {
        if (task_ == null) {
          Task = new global::F4BY.LuckyTaskInfo();
        }
        Task.MergeFrom(other.Task);
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (task_ == null) {
              Task = new global::F4BY.LuckyTaskInfo();
            }
            input.ReadMessage(Task);
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (task_ == null) {
              Task = new global::F4BY.LuckyTaskInfo();
            }
            input.ReadMessage(Task);
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSGetLuckyNum : pb::IMessage<CSGetLuckyNum>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSGetLuckyNum> _parser = new pb::MessageParser<CSGetLuckyNum>(() => new CSGetLuckyNum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetLuckyNum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetLuckyNum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetLuckyNum(CSGetLuckyNum other) : this() {
      times_ = other.times_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGetLuckyNum Clone() {
      return new CSGetLuckyNum(this);
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 1;
    private int times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGetLuckyNum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGetLuckyNum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Times != other.Times) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Times != 0) hash ^= Times.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Times != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Times);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Times != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Times);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGetLuckyNum other) {
      if (other == null) {
        return;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetLuckyNum : pb::IMessage<SCGetLuckyNum>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetLuckyNum> _parser = new pb::MessageParser<SCGetLuckyNum>(() => new SCGetLuckyNum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetLuckyNum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetLuckyNum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetLuckyNum(SCGetLuckyNum other) : this() {
      score_ = other.score_;
      errorCode_ = other.errorCode_;
      luckyNums_ = other.luckyNums_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetLuckyNum Clone() {
      return new SCGetLuckyNum(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 2;
    private int errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "lucky_nums" field.</summary>
    public const int LuckyNumsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_luckyNums_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> luckyNums_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LuckyNums {
      get { return luckyNums_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetLuckyNum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetLuckyNum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if(!luckyNums_.Equals(other.luckyNums_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0) hash ^= Score.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      hash ^= luckyNums_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrorCode);
      }
      luckyNums_.WriteTo(output, _repeated_luckyNums_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ErrorCode);
      }
      luckyNums_.WriteTo(ref output, _repeated_luckyNums_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      size += luckyNums_.CalculateSize(_repeated_luckyNums_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetLuckyNum other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      luckyNums_.Add(other.luckyNums_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            luckyNums_.AddEntriesFrom(input, _repeated_luckyNums_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            luckyNums_.AddEntriesFrom(ref input, _repeated_luckyNums_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSLuckyRedDot : pb::IMessage<CSLuckyRedDot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSLuckyRedDot> _parser = new pb::MessageParser<CSLuckyRedDot>(() => new CSLuckyRedDot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLuckyRedDot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyRedDot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyRedDot(CSLuckyRedDot other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyRedDot Clone() {
      return new CSLuckyRedDot(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLuckyRedDot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLuckyRedDot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLuckyRedDot other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCLuckyRedDot : pb::IMessage<SCLuckyRedDot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCLuckyRedDot> _parser = new pb::MessageParser<SCLuckyRedDot>(() => new SCLuckyRedDot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLuckyRedDot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyRedDot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyRedDot(SCLuckyRedDot other) : this() {
      show_ = other.show_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyRedDot Clone() {
      return new SCLuckyRedDot(this);
    }

    /// <summary>Field number for the "show" field.</summary>
    public const int ShowFieldNumber = 1;
    private bool show_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Show {
      get { return show_; }
      set {
        show_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLuckyRedDot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLuckyRedDot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Show != other.Show) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Show != false) hash ^= Show.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Show != false) {
        output.WriteRawTag(8);
        output.WriteBool(Show);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Show != false) {
        output.WriteRawTag(8);
        output.WriteBool(Show);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Show != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLuckyRedDot other) {
      if (other == null) {
        return;
      }
      if (other.Show != false) {
        Show = other.Show;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Show = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Show = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LuckyRecord : pb::IMessage<LuckyRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LuckyRecord> _parser = new pb::MessageParser<LuckyRecord>(() => new LuckyRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LuckyRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyRecord(LuckyRecord other) : this() {
      vip_ = other.vip_;
      times_ = other.times_;
      luckyNum_ = other.luckyNum_;
      tick_ = other.tick_;
      nickName_ = other.nickName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LuckyRecord Clone() {
      return new LuckyRecord(this);
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 1;
    private int vip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "lucky_num" field.</summary>
    public const int LuckyNumFieldNumber = 3;
    private int luckyNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyNum {
      get { return luckyNum_; }
      set {
        luckyNum_ = value;
      }
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 4;
    private int tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "nick_name" field.</summary>
    public const int NickNameFieldNumber = 5;
    private string nickName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LuckyRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LuckyRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Vip != other.Vip) return false;
      if (Times != other.Times) return false;
      if (LuckyNum != other.LuckyNum) return false;
      if (Tick != other.Tick) return false;
      if (NickName != other.NickName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Vip != 0) hash ^= Vip.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      if (LuckyNum != 0) hash ^= LuckyNum.GetHashCode();
      if (Tick != 0) hash ^= Tick.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Vip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Vip);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
      if (LuckyNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LuckyNum);
      }
      if (Tick != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Tick);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NickName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Vip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Vip);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
      if (LuckyNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LuckyNum);
      }
      if (Tick != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Tick);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NickName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vip);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      if (LuckyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LuckyNum);
      }
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LuckyRecord other) {
      if (other == null) {
        return;
      }
      if (other.Vip != 0) {
        Vip = other.Vip;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      if (other.LuckyNum != 0) {
        LuckyNum = other.LuckyNum;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Vip = input.ReadInt32();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
          case 24: {
            LuckyNum = input.ReadInt32();
            break;
          }
          case 32: {
            Tick = input.ReadInt32();
            break;
          }
          case 42: {
            NickName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Vip = input.ReadInt32();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
          case 24: {
            LuckyNum = input.ReadInt32();
            break;
          }
          case 32: {
            Tick = input.ReadInt32();
            break;
          }
          case 42: {
            NickName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OwnRecord : pb::IMessage<OwnRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OwnRecord> _parser = new pb::MessageParser<OwnRecord>(() => new OwnRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OwnRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnRecord(OwnRecord other) : this() {
      reward_ = other.reward_.Clone();
      status_ = other.status_;
      tick_ = other.tick_;
      luckyNum_ = other.luckyNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwnRecord Clone() {
      return new OwnRecord(this);
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.AwardProp> _repeated_reward_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.AwardProp.Parser);
    private readonly pbc::RepeatedField<global::F4BY.AwardProp> reward_ = new pbc::RepeatedField<global::F4BY.AwardProp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.AwardProp> Reward {
      get { return reward_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 3;
    private int tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "lucky_num" field.</summary>
    public const int LuckyNumFieldNumber = 4;
    private int luckyNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LuckyNum {
      get { return luckyNum_; }
      set {
        luckyNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OwnRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OwnRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reward_.Equals(other.reward_)) return false;
      if (Status != other.Status) return false;
      if (Tick != other.Tick) return false;
      if (LuckyNum != other.LuckyNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reward_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Tick != 0) hash ^= Tick.GetHashCode();
      if (LuckyNum != 0) hash ^= LuckyNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      reward_.WriteTo(output, _repeated_reward_codec);
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Tick != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tick);
      }
      if (LuckyNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LuckyNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      reward_.WriteTo(ref output, _repeated_reward_codec);
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (Tick != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tick);
      }
      if (LuckyNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LuckyNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reward_.CalculateSize(_repeated_reward_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Tick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tick);
      }
      if (LuckyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LuckyNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OwnRecord other) {
      if (other == null) {
        return;
      }
      reward_.Add(other.reward_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Tick != 0) {
        Tick = other.Tick;
      }
      if (other.LuckyNum != 0) {
        LuckyNum = other.LuckyNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            reward_.AddEntriesFrom(input, _repeated_reward_codec);
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 24: {
            Tick = input.ReadInt32();
            break;
          }
          case 32: {
            LuckyNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            reward_.AddEntriesFrom(ref input, _repeated_reward_codec);
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 24: {
            Tick = input.ReadInt32();
            break;
          }
          case 32: {
            LuckyNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSLuckyRecord : pb::IMessage<CSLuckyRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSLuckyRecord> _parser = new pb::MessageParser<CSLuckyRecord>(() => new CSLuckyRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLuckyRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyRecord(CSLuckyRecord other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLuckyRecord Clone() {
      return new CSLuckyRecord(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLuckyRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLuckyRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLuckyRecord other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCLuckyRecord : pb::IMessage<SCLuckyRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCLuckyRecord> _parser = new pb::MessageParser<SCLuckyRecord>(() => new SCLuckyRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLuckyRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyRecord(SCLuckyRecord other) : this() {
      type_ = other.type_;
      record_ = other.record_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLuckyRecord Clone() {
      return new SCLuckyRecord(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.LuckyRecord> _repeated_record_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.LuckyRecord.Parser);
    private readonly pbc::RepeatedField<global::F4BY.LuckyRecord> record_ = new pbc::RepeatedField<global::F4BY.LuckyRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.LuckyRecord> Record {
      get { return record_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLuckyRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLuckyRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!record_.Equals(other.record_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= record_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      record_.WriteTo(output, _repeated_record_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      record_.WriteTo(ref output, _repeated_record_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += record_.CalculateSize(_repeated_record_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLuckyRecord other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      record_.Add(other.record_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            record_.AddEntriesFrom(input, _repeated_record_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            record_.AddEntriesFrom(ref input, _repeated_record_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCOwnRecord : pb::IMessage<SCOwnRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCOwnRecord> _parser = new pb::MessageParser<SCOwnRecord>(() => new SCOwnRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOwnRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[146]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOwnRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOwnRecord(SCOwnRecord other) : this() {
      record_ = other.record_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOwnRecord Clone() {
      return new SCOwnRecord(this);
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.OwnRecord> _repeated_record_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.OwnRecord.Parser);
    private readonly pbc::RepeatedField<global::F4BY.OwnRecord> record_ = new pbc::RepeatedField<global::F4BY.OwnRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.OwnRecord> Record {
      get { return record_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOwnRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOwnRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!record_.Equals(other.record_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= record_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      record_.WriteTo(output, _repeated_record_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      record_.WriteTo(ref output, _repeated_record_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += record_.CalculateSize(_repeated_record_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOwnRecord other) {
      if (other == null) {
        return;
      }
      record_.Add(other.record_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            record_.AddEntriesFrom(input, _repeated_record_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            record_.AddEntriesFrom(ref input, _repeated_record_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSBombInfo : pb::IMessage<CSBombInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSBombInfo> _parser = new pb::MessageParser<CSBombInfo>(() => new CSBombInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBombInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[147]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBombInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBombInfo(CSBombInfo other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      chairIdx_ = other.chairIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBombInfo Clone() {
      return new CSBombInfo(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 3;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBombInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBombInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (ChairIdx != other.ChairIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (ChairIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBombInfo other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 24: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 24: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncBomb : pb::IMessage<SCSyncBomb>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncBomb> _parser = new pb::MessageParser<SCSyncBomb>(() => new SCSyncBomb());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncBomb> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[148]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncBomb() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncBomb(SCSyncBomb other) : this() {
      chairIdx_ = other.chairIdx_;
      bombId_ = other.bombId_;
      curStatus_ = other.curStatus_;
      x_ = other.x_;
      y_ = other.y_;
      nextX_ = other.nextX_;
      nextY_ = other.nextY_;
      score_ = other.score_;
      isFinish_ = other.isFinish_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncBomb Clone() {
      return new SCSyncBomb(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "bombId" field.</summary>
    public const int BombIdFieldNumber = 2;
    private int bombId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BombId {
      get { return bombId_; }
      set {
        bombId_ = value;
      }
    }

    /// <summary>Field number for the "curStatus" field.</summary>
    public const int CurStatusFieldNumber = 3;
    private int curStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurStatus {
      get { return curStatus_; }
      set {
        curStatus_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "nextX" field.</summary>
    public const int NextXFieldNumber = 6;
    private float nextX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NextX {
      get { return nextX_; }
      set {
        nextX_ = value;
      }
    }

    /// <summary>Field number for the "nextY" field.</summary>
    public const int NextYFieldNumber = 7;
    private float nextY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NextY {
      get { return nextY_; }
      set {
        nextY_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 8;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "isFinish" field.</summary>
    public const int IsFinishFieldNumber = 9;
    private bool isFinish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinish {
      get { return isFinish_; }
      set {
        isFinish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncBomb);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncBomb other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (BombId != other.BombId) return false;
      if (CurStatus != other.CurStatus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NextX, other.NextX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NextY, other.NextY)) return false;
      if (Score != other.Score) return false;
      if (IsFinish != other.IsFinish) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (BombId != 0) hash ^= BombId.GetHashCode();
      if (CurStatus != 0) hash ^= CurStatus.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (NextX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NextX);
      if (NextY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NextY);
      if (Score != 0) hash ^= Score.GetHashCode();
      if (IsFinish != false) hash ^= IsFinish.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (BombId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BombId);
      }
      if (CurStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurStatus);
      }
      if (X != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Y);
      }
      if (NextX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(NextX);
      }
      if (NextY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(NextY);
      }
      if (Score != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Score);
      }
      if (IsFinish != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsFinish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (BombId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BombId);
      }
      if (CurStatus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurStatus);
      }
      if (X != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Y);
      }
      if (NextX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(NextX);
      }
      if (NextY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(NextY);
      }
      if (Score != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Score);
      }
      if (IsFinish != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsFinish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (BombId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombId);
      }
      if (CurStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurStatus);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (NextX != 0F) {
        size += 1 + 4;
      }
      if (NextY != 0F) {
        size += 1 + 4;
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (IsFinish != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncBomb other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.BombId != 0) {
        BombId = other.BombId;
      }
      if (other.CurStatus != 0) {
        CurStatus = other.CurStatus;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.NextX != 0F) {
        NextX = other.NextX;
      }
      if (other.NextY != 0F) {
        NextY = other.NextY;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.IsFinish != false) {
        IsFinish = other.IsFinish;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            BombId = input.ReadInt32();
            break;
          }
          case 24: {
            CurStatus = input.ReadInt32();
            break;
          }
          case 37: {
            X = input.ReadFloat();
            break;
          }
          case 45: {
            Y = input.ReadFloat();
            break;
          }
          case 53: {
            NextX = input.ReadFloat();
            break;
          }
          case 61: {
            NextY = input.ReadFloat();
            break;
          }
          case 64: {
            Score = input.ReadInt32();
            break;
          }
          case 72: {
            IsFinish = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            BombId = input.ReadInt32();
            break;
          }
          case 24: {
            CurStatus = input.ReadInt32();
            break;
          }
          case 37: {
            X = input.ReadFloat();
            break;
          }
          case 45: {
            Y = input.ReadFloat();
            break;
          }
          case 53: {
            NextX = input.ReadFloat();
            break;
          }
          case 61: {
            NextY = input.ReadFloat();
            break;
          }
          case 64: {
            Score = input.ReadInt32();
            break;
          }
          case 72: {
            IsFinish = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncBombFinish : pb::IMessage<SCSyncBombFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncBombFinish> _parser = new pb::MessageParser<SCSyncBombFinish>(() => new SCSyncBombFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncBombFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[149]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncBombFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncBombFinish(SCSyncBombFinish other) : this() {
      chairIdx_ = other.chairIdx_;
      bombId_ = other.bombId_;
      returnMoney_ = other.returnMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncBombFinish Clone() {
      return new SCSyncBombFinish(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "bombId" field.</summary>
    public const int BombIdFieldNumber = 2;
    private int bombId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BombId {
      get { return bombId_; }
      set {
        bombId_ = value;
      }
    }

    /// <summary>Field number for the "returnMoney" field.</summary>
    public const int ReturnMoneyFieldNumber = 3;
    private int returnMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReturnMoney {
      get { return returnMoney_; }
      set {
        returnMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncBombFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncBombFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (BombId != other.BombId) return false;
      if (ReturnMoney != other.ReturnMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (BombId != 0) hash ^= BombId.GetHashCode();
      if (ReturnMoney != 0) hash ^= ReturnMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (BombId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BombId);
      }
      if (ReturnMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReturnMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (BombId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BombId);
      }
      if (ReturnMoney != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReturnMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (BombId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombId);
      }
      if (ReturnMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReturnMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncBombFinish other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.BombId != 0) {
        BombId = other.BombId;
      }
      if (other.ReturnMoney != 0) {
        ReturnMoney = other.ReturnMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            BombId = input.ReadInt32();
            break;
          }
          case 24: {
            ReturnMoney = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            BombId = input.ReadInt32();
            break;
          }
          case 24: {
            ReturnMoney = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSBombHitFishInfo : pb::IMessage<CSBombHitFishInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSBombHitFishInfo> _parser = new pb::MessageParser<CSBombHitFishInfo>(() => new CSBombHitFishInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBombHitFishInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[150]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBombHitFishInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBombHitFishInfo(CSBombHitFishInfo other) : this() {
      bombId_ = other.bombId_;
      fishId_ = other.fishId_.Clone();
      chairIdx_ = other.chairIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBombHitFishInfo Clone() {
      return new CSBombHitFishInfo(this);
    }

    /// <summary>Field number for the "bombId" field.</summary>
    public const int BombIdFieldNumber = 1;
    private int bombId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BombId {
      get { return bombId_; }
      set {
        bombId_ = value;
      }
    }

    /// <summary>Field number for the "fishId" field.</summary>
    public const int FishIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_fishId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> fishId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FishId {
      get { return fishId_; }
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 3;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBombHitFishInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBombHitFishInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BombId != other.BombId) return false;
      if(!fishId_.Equals(other.fishId_)) return false;
      if (ChairIdx != other.ChairIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BombId != 0) hash ^= BombId.GetHashCode();
      hash ^= fishId_.GetHashCode();
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BombId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BombId);
      }
      fishId_.WriteTo(output, _repeated_fishId_codec);
      if (ChairIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BombId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BombId);
      }
      fishId_.WriteTo(ref output, _repeated_fishId_codec);
      if (ChairIdx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BombId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombId);
      }
      size += fishId_.CalculateSize(_repeated_fishId_codec);
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBombHitFishInfo other) {
      if (other == null) {
        return;
      }
      if (other.BombId != 0) {
        BombId = other.BombId;
      }
      fishId_.Add(other.fishId_);
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BombId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            fishId_.AddEntriesFrom(input, _repeated_fishId_codec);
            break;
          }
          case 24: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BombId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            fishId_.AddEntriesFrom(ref input, _repeated_fishId_codec);
            break;
          }
          case 24: {
            ChairIdx = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCGetMagicCube : pb::IMessage<SCGetMagicCube>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCGetMagicCube> _parser = new pb::MessageParser<SCGetMagicCube>(() => new SCGetMagicCube());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGetMagicCube> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[151]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetMagicCube() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetMagicCube(SCGetMagicCube other) : this() {
      chairIdx_ = other.chairIdx_;
      bulletType_ = other.bulletType_;
      createWeapon_ = other.createWeapon_;
      isSyncInfo_ = other.isSyncInfo_;
      isFinish_ = other.isFinish_;
      gunRatio_ = other.gunRatio_;
      magicCubeMulti_ = other.magicCubeMulti_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGetMagicCube Clone() {
      return new SCGetMagicCube(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 2;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "createWeapon" field.</summary>
    public const int CreateWeaponFieldNumber = 3;
    private bool createWeapon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CreateWeapon {
      get { return createWeapon_; }
      set {
        createWeapon_ = value;
      }
    }

    /// <summary>Field number for the "isSyncInfo" field.</summary>
    public const int IsSyncInfoFieldNumber = 4;
    private bool isSyncInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSyncInfo {
      get { return isSyncInfo_; }
      set {
        isSyncInfo_ = value;
      }
    }

    /// <summary>Field number for the "isFinish" field.</summary>
    public const int IsFinishFieldNumber = 5;
    private bool isFinish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinish {
      get { return isFinish_; }
      set {
        isFinish_ = value;
      }
    }

    /// <summary>Field number for the "gunRatio" field.</summary>
    public const int GunRatioFieldNumber = 6;
    private int gunRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunRatio {
      get { return gunRatio_; }
      set {
        gunRatio_ = value;
      }
    }

    /// <summary>Field number for the "magic_cube_multi" field.</summary>
    public const int MagicCubeMultiFieldNumber = 7;
    private int magicCubeMulti_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicCubeMulti {
      get { return magicCubeMulti_; }
      set {
        magicCubeMulti_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGetMagicCube);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGetMagicCube other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (BulletType != other.BulletType) return false;
      if (CreateWeapon != other.CreateWeapon) return false;
      if (IsSyncInfo != other.IsSyncInfo) return false;
      if (IsFinish != other.IsFinish) return false;
      if (GunRatio != other.GunRatio) return false;
      if (MagicCubeMulti != other.MagicCubeMulti) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (CreateWeapon != false) hash ^= CreateWeapon.GetHashCode();
      if (IsSyncInfo != false) hash ^= IsSyncInfo.GetHashCode();
      if (IsFinish != false) hash ^= IsFinish.GetHashCode();
      if (GunRatio != 0) hash ^= GunRatio.GetHashCode();
      if (MagicCubeMulti != 0) hash ^= MagicCubeMulti.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (BulletType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletType);
      }
      if (CreateWeapon != false) {
        output.WriteRawTag(24);
        output.WriteBool(CreateWeapon);
      }
      if (IsSyncInfo != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSyncInfo);
      }
      if (IsFinish != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsFinish);
      }
      if (GunRatio != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GunRatio);
      }
      if (MagicCubeMulti != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MagicCubeMulti);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (BulletType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletType);
      }
      if (CreateWeapon != false) {
        output.WriteRawTag(24);
        output.WriteBool(CreateWeapon);
      }
      if (IsSyncInfo != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSyncInfo);
      }
      if (IsFinish != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsFinish);
      }
      if (GunRatio != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GunRatio);
      }
      if (MagicCubeMulti != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MagicCubeMulti);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (CreateWeapon != false) {
        size += 1 + 1;
      }
      if (IsSyncInfo != false) {
        size += 1 + 1;
      }
      if (IsFinish != false) {
        size += 1 + 1;
      }
      if (GunRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunRatio);
      }
      if (MagicCubeMulti != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicCubeMulti);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGetMagicCube other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.CreateWeapon != false) {
        CreateWeapon = other.CreateWeapon;
      }
      if (other.IsSyncInfo != false) {
        IsSyncInfo = other.IsSyncInfo;
      }
      if (other.IsFinish != false) {
        IsFinish = other.IsFinish;
      }
      if (other.GunRatio != 0) {
        GunRatio = other.GunRatio;
      }
      if (other.MagicCubeMulti != 0) {
        MagicCubeMulti = other.MagicCubeMulti;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            BulletType = input.ReadInt32();
            break;
          }
          case 24: {
            CreateWeapon = input.ReadBool();
            break;
          }
          case 32: {
            IsSyncInfo = input.ReadBool();
            break;
          }
          case 40: {
            IsFinish = input.ReadBool();
            break;
          }
          case 48: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 56: {
            MagicCubeMulti = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            BulletType = input.ReadInt32();
            break;
          }
          case 24: {
            CreateWeapon = input.ReadBool();
            break;
          }
          case 32: {
            IsSyncInfo = input.ReadBool();
            break;
          }
          case 40: {
            IsFinish = input.ReadBool();
            break;
          }
          case 48: {
            GunRatio = input.ReadInt32();
            break;
          }
          case 56: {
            MagicCubeMulti = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCMagicCubeBulletInfo : pb::IMessage<SCMagicCubeBulletInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCMagicCubeBulletInfo> _parser = new pb::MessageParser<SCMagicCubeBulletInfo>(() => new SCMagicCubeBulletInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCMagicCubeBulletInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[152]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMagicCubeBulletInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMagicCubeBulletInfo(SCMagicCubeBulletInfo other) : this() {
      chairIdx_ = other.chairIdx_;
      totalNum_ = other.totalNum_;
      curNum_ = other.curNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCMagicCubeBulletInfo Clone() {
      return new SCMagicCubeBulletInfo(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 2;
    private int totalNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "curNum" field.</summary>
    public const int CurNumFieldNumber = 3;
    private int curNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurNum {
      get { return curNum_; }
      set {
        curNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCMagicCubeBulletInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCMagicCubeBulletInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (TotalNum != other.TotalNum) return false;
      if (CurNum != other.CurNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
      if (CurNum != 0) hash ^= CurNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalNum);
      }
      if (CurNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalNum);
      }
      if (CurNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (CurNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCMagicCubeBulletInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.TotalNum != 0) {
        TotalNum = other.TotalNum;
      }
      if (other.CurNum != 0) {
        CurNum = other.CurNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 24: {
            CurNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 24: {
            CurNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSPreHit : pb::IMessage<CSPreHit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSPreHit> _parser = new pb::MessageParser<CSPreHit>(() => new CSPreHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPreHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[153]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPreHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPreHit(CSPreHit other) : this() {
      screenFish_ = other.screenFish_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPreHit Clone() {
      return new CSPreHit(this);
    }

    /// <summary>Field number for the "screen_fish" field.</summary>
    public const int ScreenFishFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_screenFish_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> screenFish_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ScreenFish {
      get { return screenFish_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSPreHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSPreHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!screenFish_.Equals(other.screenFish_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= screenFish_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      screenFish_.WriteTo(output, _repeated_screenFish_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      screenFish_.WriteTo(ref output, _repeated_screenFish_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += screenFish_.CalculateSize(_repeated_screenFish_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSPreHit other) {
      if (other == null) {
        return;
      }
      screenFish_.Add(other.screenFish_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            screenFish_.AddEntriesFrom(input, _repeated_screenFish_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            screenFish_.AddEntriesFrom(ref input, _repeated_screenFish_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCPreHit : pb::IMessage<SCPreHit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPreHit> _parser = new pb::MessageParser<SCPreHit>(() => new SCPreHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPreHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[154]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPreHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPreHit(SCPreHit other) : this() {
      err_ = other.err_;
      fishUid_ = other.fishUid_;
      chairId_ = other.chairId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPreHit Clone() {
      return new SCPreHit(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private int err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 2;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 3;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPreHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPreHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if (FishUid != other.FishUid) return false;
      if (ChairId != other.ChairId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (ChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Err);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (ChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Err);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPreHit other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            ChairId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Err = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            ChairId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSPreShoot : pb::IMessage<CSPreShoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSPreShoot> _parser = new pb::MessageParser<CSPreShoot>(() => new CSPreShoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPreShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[155]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPreShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPreShoot(CSPreShoot other) : this() {
      chairIdx_ = other.chairIdx_;
      angle_ = other.angle_;
      shootType_ = other.shootType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPreShoot Clone() {
      return new CSPreShoot(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 2;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "shoot_type" field.</summary>
    public const int ShootTypeFieldNumber = 3;
    private int shootType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShootType {
      get { return shootType_; }
      set {
        shootType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSPreShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSPreShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Angle != other.Angle) return false;
      if (ShootType != other.ShootType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (ShootType != 0) hash ^= ShootType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Angle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Angle);
      }
      if (ShootType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShootType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Angle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Angle);
      }
      if (ShootType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShootType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (ShootType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShootType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSPreShoot other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.ShootType != 0) {
        ShootType = other.ShootType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Angle = input.ReadInt32();
            break;
          }
          case 24: {
            ShootType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Angle = input.ReadInt32();
            break;
          }
          case 24: {
            ShootType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCPreShoot : pb::IMessage<SCPreShoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPreShoot> _parser = new pb::MessageParser<SCPreShoot>(() => new SCPreShoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPreShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[156]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPreShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPreShoot(SCPreShoot other) : this() {
      chairIdx_ = other.chairIdx_;
      angle_ = other.angle_;
      shootType_ = other.shootType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPreShoot Clone() {
      return new SCPreShoot(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 2;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "shoot_type" field.</summary>
    public const int ShootTypeFieldNumber = 3;
    private int shootType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShootType {
      get { return shootType_; }
      set {
        shootType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPreShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPreShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Angle != other.Angle) return false;
      if (ShootType != other.ShootType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (ShootType != 0) hash ^= ShootType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Angle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Angle);
      }
      if (ShootType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShootType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Angle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Angle);
      }
      if (ShootType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ShootType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (ShootType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShootType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPreShoot other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      if (other.ShootType != 0) {
        ShootType = other.ShootType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Angle = input.ReadInt32();
            break;
          }
          case 24: {
            ShootType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Angle = input.ReadInt32();
            break;
          }
          case 24: {
            ShootType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FrozenFish : pb::IMessage<FrozenFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FrozenFish> _parser = new pb::MessageParser<FrozenFish>(() => new FrozenFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrozenFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[157]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrozenFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrozenFish(FrozenFish other) : this() {
      fishId_ = other.fishId_;
      frozenTime_ = other.frozenTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrozenFish Clone() {
      return new FrozenFish(this);
    }

    /// <summary>Field number for the "fish_id" field.</summary>
    public const int FishIdFieldNumber = 1;
    private int fishId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishId {
      get { return fishId_; }
      set {
        fishId_ = value;
      }
    }

    /// <summary>Field number for the "frozen_time" field.</summary>
    public const int FrozenTimeFieldNumber = 2;
    private int frozenTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrozenTime {
      get { return frozenTime_; }
      set {
        frozenTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrozenFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrozenFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FishId != other.FishId) return false;
      if (FrozenTime != other.FrozenTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FishId != 0) hash ^= FishId.GetHashCode();
      if (FrozenTime != 0) hash ^= FrozenTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FishId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishId);
      }
      if (FrozenTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrozenTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FishId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FishId);
      }
      if (FrozenTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrozenTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FishId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
      }
      if (FrozenTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrozenTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrozenFish other) {
      if (other == null) {
        return;
      }
      if (other.FishId != 0) {
        FishId = other.FishId;
      }
      if (other.FrozenTime != 0) {
        FrozenTime = other.FrozenTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FishId = input.ReadInt32();
            break;
          }
          case 16: {
            FrozenTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FishId = input.ReadInt32();
            break;
          }
          case 16: {
            FrozenTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCFrozenFish : pb::IMessage<SCFrozenFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCFrozenFish> _parser = new pb::MessageParser<SCFrozenFish>(() => new SCFrozenFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFrozenFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[158]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFrozenFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFrozenFish(SCFrozenFish other) : this() {
      frozenFish_ = other.frozenFish_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFrozenFish Clone() {
      return new SCFrozenFish(this);
    }

    /// <summary>Field number for the "frozenFish" field.</summary>
    public const int FrozenFishFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.FrozenFish> _repeated_frozenFish_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.FrozenFish.Parser);
    private readonly pbc::RepeatedField<global::F4BY.FrozenFish> frozenFish_ = new pbc::RepeatedField<global::F4BY.FrozenFish>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.FrozenFish> FrozenFish {
      get { return frozenFish_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFrozenFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFrozenFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!frozenFish_.Equals(other.frozenFish_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= frozenFish_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      frozenFish_.WriteTo(output, _repeated_frozenFish_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      frozenFish_.WriteTo(ref output, _repeated_frozenFish_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += frozenFish_.CalculateSize(_repeated_frozenFish_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFrozenFish other) {
      if (other == null) {
        return;
      }
      frozenFish_.Add(other.frozenFish_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            frozenFish_.AddEntriesFrom(input, _repeated_frozenFish_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            frozenFish_.AddEntriesFrom(ref input, _repeated_frozenFish_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCValentineDayFish : pb::IMessage<SCValentineDayFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCValentineDayFish> _parser = new pb::MessageParser<SCValentineDayFish>(() => new SCValentineDayFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCValentineDayFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[159]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCValentineDayFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCValentineDayFish(SCValentineDayFish other) : this() {
      fishInfo_ = other.fishInfo_ != null ? other.fishInfo_.Clone() : null;
      btRatio_ = other.btRatio_;
      randMulti_ = other.randMulti_;
      ballMulti_ = other.ballMulti_;
      uidList_ = other.uidList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCValentineDayFish Clone() {
      return new SCValentineDayFish(this);
    }

    /// <summary>Field number for the "fish_info" field.</summary>
    public const int FishInfoFieldNumber = 1;
    private global::F4BY.SCHitFish fishInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.SCHitFish FishInfo {
      get { return fishInfo_; }
      set {
        fishInfo_ = value;
      }
    }

    /// <summary>Field number for the "bt_ratio" field.</summary>
    public const int BtRatioFieldNumber = 2;
    private int btRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtRatio {
      get { return btRatio_; }
      set {
        btRatio_ = value;
      }
    }

    /// <summary>Field number for the "rand_multi" field.</summary>
    public const int RandMultiFieldNumber = 3;
    private int randMulti_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandMulti {
      get { return randMulti_; }
      set {
        randMulti_ = value;
      }
    }

    /// <summary>Field number for the "ball_multi" field.</summary>
    public const int BallMultiFieldNumber = 4;
    private int ballMulti_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BallMulti {
      get { return ballMulti_; }
      set {
        ballMulti_ = value;
      }
    }

    /// <summary>Field number for the "uid_list" field.</summary>
    public const int UidListFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_uidList_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> uidList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UidList {
      get { return uidList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCValentineDayFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCValentineDayFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FishInfo, other.FishInfo)) return false;
      if (BtRatio != other.BtRatio) return false;
      if (RandMulti != other.RandMulti) return false;
      if (BallMulti != other.BallMulti) return false;
      if(!uidList_.Equals(other.uidList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fishInfo_ != null) hash ^= FishInfo.GetHashCode();
      if (BtRatio != 0) hash ^= BtRatio.GetHashCode();
      if (RandMulti != 0) hash ^= RandMulti.GetHashCode();
      if (BallMulti != 0) hash ^= BallMulti.GetHashCode();
      hash ^= uidList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (fishInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FishInfo);
      }
      if (BtRatio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BtRatio);
      }
      if (RandMulti != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RandMulti);
      }
      if (BallMulti != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BallMulti);
      }
      uidList_.WriteTo(output, _repeated_uidList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (fishInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FishInfo);
      }
      if (BtRatio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BtRatio);
      }
      if (RandMulti != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RandMulti);
      }
      if (BallMulti != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BallMulti);
      }
      uidList_.WriteTo(ref output, _repeated_uidList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fishInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FishInfo);
      }
      if (BtRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtRatio);
      }
      if (RandMulti != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandMulti);
      }
      if (BallMulti != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BallMulti);
      }
      size += uidList_.CalculateSize(_repeated_uidList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCValentineDayFish other) {
      if (other == null) {
        return;
      }
      if (other.fishInfo_ != null) {
        if (fishInfo_ == null) {
          FishInfo = new global::F4BY.SCHitFish();
        }
        FishInfo.MergeFrom(other.FishInfo);
      }
      if (other.BtRatio != 0) {
        BtRatio = other.BtRatio;
      }
      if (other.RandMulti != 0) {
        RandMulti = other.RandMulti;
      }
      if (other.BallMulti != 0) {
        BallMulti = other.BallMulti;
      }
      uidList_.Add(other.uidList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (fishInfo_ == null) {
              FishInfo = new global::F4BY.SCHitFish();
            }
            input.ReadMessage(FishInfo);
            break;
          }
          case 16: {
            BtRatio = input.ReadInt32();
            break;
          }
          case 24: {
            RandMulti = input.ReadInt32();
            break;
          }
          case 32: {
            BallMulti = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            uidList_.AddEntriesFrom(input, _repeated_uidList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (fishInfo_ == null) {
              FishInfo = new global::F4BY.SCHitFish();
            }
            input.ReadMessage(FishInfo);
            break;
          }
          case 16: {
            BtRatio = input.ReadInt32();
            break;
          }
          case 24: {
            RandMulti = input.ReadInt32();
            break;
          }
          case 32: {
            BallMulti = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            uidList_.AddEntriesFrom(ref input, _repeated_uidList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCKiRinFish : pb::IMessage<SCKiRinFish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCKiRinFish> _parser = new pb::MessageParser<SCKiRinFish>(() => new SCKiRinFish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCKiRinFish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[160]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCKiRinFish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCKiRinFish(SCKiRinFish other) : this() {
      fishInfo_ = other.fishInfo_ != null ? other.fishInfo_.Clone() : null;
      btRatio_ = other.btRatio_;
      multi_ = other.multi_;
      isSenior_ = other.isSenior_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCKiRinFish Clone() {
      return new SCKiRinFish(this);
    }

    /// <summary>Field number for the "fish_info" field.</summary>
    public const int FishInfoFieldNumber = 1;
    private global::F4BY.SCHitFish fishInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.SCHitFish FishInfo {
      get { return fishInfo_; }
      set {
        fishInfo_ = value;
      }
    }

    /// <summary>Field number for the "bt_ratio" field.</summary>
    public const int BtRatioFieldNumber = 2;
    private int btRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtRatio {
      get { return btRatio_; }
      set {
        btRatio_ = value;
      }
    }

    /// <summary>Field number for the "multi" field.</summary>
    public const int MultiFieldNumber = 3;
    private int multi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multi {
      get { return multi_; }
      set {
        multi_ = value;
      }
    }

    /// <summary>Field number for the "is_senior" field.</summary>
    public const int IsSeniorFieldNumber = 4;
    private bool isSenior_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSenior {
      get { return isSenior_; }
      set {
        isSenior_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCKiRinFish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCKiRinFish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FishInfo, other.FishInfo)) return false;
      if (BtRatio != other.BtRatio) return false;
      if (Multi != other.Multi) return false;
      if (IsSenior != other.IsSenior) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fishInfo_ != null) hash ^= FishInfo.GetHashCode();
      if (BtRatio != 0) hash ^= BtRatio.GetHashCode();
      if (Multi != 0) hash ^= Multi.GetHashCode();
      if (IsSenior != false) hash ^= IsSenior.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (fishInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FishInfo);
      }
      if (BtRatio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BtRatio);
      }
      if (Multi != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Multi);
      }
      if (IsSenior != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSenior);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (fishInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FishInfo);
      }
      if (BtRatio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BtRatio);
      }
      if (Multi != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Multi);
      }
      if (IsSenior != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSenior);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fishInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FishInfo);
      }
      if (BtRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtRatio);
      }
      if (Multi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multi);
      }
      if (IsSenior != false) {
        size += 1 + 1;
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCKiRinFish other) {
      if (other == null) {
        return;
      }
      if (other.fishInfo_ != null) {
        if (fishInfo_ == null) {
          FishInfo = new global::F4BY.SCHitFish();
        }
        FishInfo.MergeFrom(other.FishInfo);
      }
      if (other.BtRatio != 0) {
        BtRatio = other.BtRatio;
      }
      if (other.Multi != 0) {
        Multi = other.Multi;
      }
      if (other.IsSenior != false) {
        IsSenior = other.IsSenior;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (fishInfo_ == null) {
              FishInfo = new global::F4BY.SCHitFish();
            }
            input.ReadMessage(FishInfo);
            break;
          }
          case 16: {
            BtRatio = input.ReadInt32();
            break;
          }
          case 24: {
            Multi = input.ReadInt32();
            break;
          }
          case 32: {
            IsSenior = input.ReadBool();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (fishInfo_ == null) {
              FishInfo = new global::F4BY.SCHitFish();
            }
            input.ReadMessage(FishInfo);
            break;
          }
          case 16: {
            BtRatio = input.ReadInt32();
            break;
          }
          case 24: {
            Multi = input.ReadInt32();
            break;
          }
          case 32: {
            IsSenior = input.ReadBool();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCNvWaFishCapture : pb::IMessage<SCNvWaFishCapture>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCNvWaFishCapture> _parser = new pb::MessageParser<SCNvWaFishCapture>(() => new SCNvWaFishCapture());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCNvWaFishCapture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[161]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNvWaFishCapture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNvWaFishCapture(SCNvWaFishCapture other) : this() {
      chairIdx_ = other.chairIdx_;
      fishUid_ = other.fishUid_;
      ratio_ = other.ratio_;
      nvwaMultiple_ = other.nvwaMultiple_;
      btKind_ = other.btKind_;
      multiList_ = other.multiList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNvWaFishCapture Clone() {
      return new SCNvWaFishCapture(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 2;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 3;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "nvwa_multiple" field.</summary>
    public const int NvwaMultipleFieldNumber = 4;
    private int nvwaMultiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NvwaMultiple {
      get { return nvwaMultiple_; }
      set {
        nvwaMultiple_ = value;
      }
    }

    /// <summary>Field number for the "bt_kind" field.</summary>
    public const int BtKindFieldNumber = 5;
    private int btKind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtKind {
      get { return btKind_; }
      set {
        btKind_ = value;
      }
    }

    /// <summary>Field number for the "multi_list" field.</summary>
    public const int MultiListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::F4BY.MultiInfo> _repeated_multiList_codec
        = pb::FieldCodec.ForMessage(50, global::F4BY.MultiInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.MultiInfo> multiList_ = new pbc::RepeatedField<global::F4BY.MultiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.MultiInfo> MultiList {
      get { return multiList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCNvWaFishCapture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCNvWaFishCapture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (FishUid != other.FishUid) return false;
      if (Ratio != other.Ratio) return false;
      if (NvwaMultiple != other.NvwaMultiple) return false;
      if (BtKind != other.BtKind) return false;
      if(!multiList_.Equals(other.multiList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (NvwaMultiple != 0) hash ^= NvwaMultiple.GetHashCode();
      if (BtKind != 0) hash ^= BtKind.GetHashCode();
      hash ^= multiList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (NvwaMultiple != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NvwaMultiple);
      }
      if (BtKind != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BtKind);
      }
      multiList_.WriteTo(output, _repeated_multiList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (NvwaMultiple != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NvwaMultiple);
      }
      if (BtKind != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BtKind);
      }
      multiList_.WriteTo(ref output, _repeated_multiList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (NvwaMultiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NvwaMultiple);
      }
      if (BtKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtKind);
      }
      size += multiList_.CalculateSize(_repeated_multiList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCNvWaFishCapture other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.NvwaMultiple != 0) {
        NvwaMultiple = other.NvwaMultiple;
      }
      if (other.BtKind != 0) {
        BtKind = other.BtKind;
      }
      multiList_.Add(other.multiList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            NvwaMultiple = input.ReadInt32();
            break;
          }
          case 40: {
            BtKind = input.ReadInt32();
            break;
          }
          case 50: {
            multiList_.AddEntriesFrom(input, _repeated_multiList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            NvwaMultiple = input.ReadInt32();
            break;
          }
          case 40: {
            BtKind = input.ReadInt32();
            break;
          }
          case 50: {
            multiList_.AddEntriesFrom(ref input, _repeated_multiList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCBombGlobeFishInfo : pb::IMessage<SCBombGlobeFishInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCBombGlobeFishInfo> _parser = new pb::MessageParser<SCBombGlobeFishInfo>(() => new SCBombGlobeFishInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCBombGlobeFishInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[162]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBombGlobeFishInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBombGlobeFishInfo(SCBombGlobeFishInfo other) : this() {
      chairIdx_ = other.chairIdx_;
      ratio_ = other.ratio_;
      fishUid_ = other.fishUid_;
      stage_ = other.stage_;
      bombId_ = other.bombId_;
      totalEarn_ = other.totalEarn_;
      selfBombId_ = other.selfBombId_;
      originId_ = other.originId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBombGlobeFishInfo Clone() {
      return new SCBombGlobeFishInfo(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 2;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 3;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 4;
    private int stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "bombId" field.</summary>
    public const int BombIdFieldNumber = 5;
    private int bombId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BombId {
      get { return bombId_; }
      set {
        bombId_ = value;
      }
    }

    /// <summary>Field number for the "total_earn" field.</summary>
    public const int TotalEarnFieldNumber = 6;
    private int totalEarn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalEarn {
      get { return totalEarn_; }
      set {
        totalEarn_ = value;
      }
    }

    /// <summary>Field number for the "self_bombId" field.</summary>
    public const int SelfBombIdFieldNumber = 7;
    private int selfBombId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfBombId {
      get { return selfBombId_; }
      set {
        selfBombId_ = value;
      }
    }

    /// <summary>Field number for the "originId" field.</summary>
    public const int OriginIdFieldNumber = 8;
    private int originId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginId {
      get { return originId_; }
      set {
        originId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCBombGlobeFishInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCBombGlobeFishInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Ratio != other.Ratio) return false;
      if (FishUid != other.FishUid) return false;
      if (Stage != other.Stage) return false;
      if (BombId != other.BombId) return false;
      if (TotalEarn != other.TotalEarn) return false;
      if (SelfBombId != other.SelfBombId) return false;
      if (OriginId != other.OriginId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (BombId != 0) hash ^= BombId.GetHashCode();
      if (TotalEarn != 0) hash ^= TotalEarn.GetHashCode();
      if (SelfBombId != 0) hash ^= SelfBombId.GetHashCode();
      if (OriginId != 0) hash ^= OriginId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (FishUid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishUid);
      }
      if (Stage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stage);
      }
      if (BombId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BombId);
      }
      if (TotalEarn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalEarn);
      }
      if (SelfBombId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SelfBombId);
      }
      if (OriginId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OriginId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (FishUid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FishUid);
      }
      if (Stage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stage);
      }
      if (BombId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BombId);
      }
      if (TotalEarn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalEarn);
      }
      if (SelfBombId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SelfBombId);
      }
      if (OriginId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OriginId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (BombId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombId);
      }
      if (TotalEarn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalEarn);
      }
      if (SelfBombId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfBombId);
      }
      if (OriginId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCBombGlobeFishInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      if (other.BombId != 0) {
        BombId = other.BombId;
      }
      if (other.TotalEarn != 0) {
        TotalEarn = other.TotalEarn;
      }
      if (other.SelfBombId != 0) {
        SelfBombId = other.SelfBombId;
      }
      if (other.OriginId != 0) {
        OriginId = other.OriginId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            FishUid = input.ReadInt32();
            break;
          }
          case 32: {
            Stage = input.ReadInt32();
            break;
          }
          case 40: {
            BombId = input.ReadInt32();
            break;
          }
          case 48: {
            TotalEarn = input.ReadInt32();
            break;
          }
          case 56: {
            SelfBombId = input.ReadInt32();
            break;
          }
          case 64: {
            OriginId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            FishUid = input.ReadInt32();
            break;
          }
          case 32: {
            Stage = input.ReadInt32();
            break;
          }
          case 40: {
            BombId = input.ReadInt32();
            break;
          }
          case 48: {
            TotalEarn = input.ReadInt32();
            break;
          }
          case 56: {
            SelfBombId = input.ReadInt32();
            break;
          }
          case 64: {
            OriginId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSBombGlobeFishHit : pb::IMessage<CSBombGlobeFishHit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSBombGlobeFishHit> _parser = new pb::MessageParser<CSBombGlobeFishHit>(() => new CSBombGlobeFishHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBombGlobeFishHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[163]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBombGlobeFishHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBombGlobeFishHit(CSBombGlobeFishHit other) : this() {
      bombId_ = other.bombId_;
      btType_ = other.btType_;
      screenFishes_ = other.screenFishes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBombGlobeFishHit Clone() {
      return new CSBombGlobeFishHit(this);
    }

    /// <summary>Field number for the "bombId" field.</summary>
    public const int BombIdFieldNumber = 1;
    private int bombId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BombId {
      get { return bombId_; }
      set {
        bombId_ = value;
      }
    }

    /// <summary>Field number for the "bt_type" field.</summary>
    public const int BtTypeFieldNumber = 2;
    private int btType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtType {
      get { return btType_; }
      set {
        btType_ = value;
      }
    }

    /// <summary>Field number for the "screen_fishes" field.</summary>
    public const int ScreenFishesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_screenFishes_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> screenFishes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ScreenFishes {
      get { return screenFishes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBombGlobeFishHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBombGlobeFishHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BombId != other.BombId) return false;
      if (BtType != other.BtType) return false;
      if(!screenFishes_.Equals(other.screenFishes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BombId != 0) hash ^= BombId.GetHashCode();
      if (BtType != 0) hash ^= BtType.GetHashCode();
      hash ^= screenFishes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BombId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BombId);
      }
      if (BtType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BtType);
      }
      screenFishes_.WriteTo(output, _repeated_screenFishes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BombId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BombId);
      }
      if (BtType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BtType);
      }
      screenFishes_.WriteTo(ref output, _repeated_screenFishes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BombId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombId);
      }
      if (BtType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtType);
      }
      size += screenFishes_.CalculateSize(_repeated_screenFishes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBombGlobeFishHit other) {
      if (other == null) {
        return;
      }
      if (other.BombId != 0) {
        BombId = other.BombId;
      }
      if (other.BtType != 0) {
        BtType = other.BtType;
      }
      screenFishes_.Add(other.screenFishes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BombId = input.ReadInt32();
            break;
          }
          case 16: {
            BtType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            screenFishes_.AddEntriesFrom(input, _repeated_screenFishes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BombId = input.ReadInt32();
            break;
          }
          case 16: {
            BtType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            screenFishes_.AddEntriesFrom(ref input, _repeated_screenFishes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCAnniversaryShowSelect : pb::IMessage<SCAnniversaryShowSelect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCAnniversaryShowSelect> _parser = new pb::MessageParser<SCAnniversaryShowSelect>(() => new SCAnniversaryShowSelect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCAnniversaryShowSelect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[164]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAnniversaryShowSelect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAnniversaryShowSelect(SCAnniversaryShowSelect other) : this() {
      chairIdx_ = other.chairIdx_;
      showSelect_ = other.showSelect_;
      remainTime_ = other.remainTime_;
      stage_ = other.stage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAnniversaryShowSelect Clone() {
      return new SCAnniversaryShowSelect(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "show_select" field.</summary>
    public const int ShowSelectFieldNumber = 2;
    private bool showSelect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowSelect {
      get { return showSelect_; }
      set {
        showSelect_ = value;
      }
    }

    /// <summary>Field number for the "remain_time" field.</summary>
    public const int RemainTimeFieldNumber = 3;
    private int remainTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 4;
    private int stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCAnniversaryShowSelect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCAnniversaryShowSelect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (ShowSelect != other.ShowSelect) return false;
      if (RemainTime != other.RemainTime) return false;
      if (Stage != other.Stage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (ShowSelect != false) hash ^= ShowSelect.GetHashCode();
      if (RemainTime != 0) hash ^= RemainTime.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (ShowSelect != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShowSelect);
      }
      if (RemainTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainTime);
      }
      if (Stage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (ShowSelect != false) {
        output.WriteRawTag(16);
        output.WriteBool(ShowSelect);
      }
      if (RemainTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RemainTime);
      }
      if (Stage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (ShowSelect != false) {
        size += 1 + 1;
      }
      if (RemainTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTime);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCAnniversaryShowSelect other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.ShowSelect != false) {
        ShowSelect = other.ShowSelect;
      }
      if (other.RemainTime != 0) {
        RemainTime = other.RemainTime;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            ShowSelect = input.ReadBool();
            break;
          }
          case 24: {
            RemainTime = input.ReadInt32();
            break;
          }
          case 32: {
            Stage = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            ShowSelect = input.ReadBool();
            break;
          }
          case 24: {
            RemainTime = input.ReadInt32();
            break;
          }
          case 32: {
            Stage = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSAnniversarySelectReq : pb::IMessage<CSAnniversarySelectReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSAnniversarySelectReq> _parser = new pb::MessageParser<CSAnniversarySelectReq>(() => new CSAnniversarySelectReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSAnniversarySelectReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[165]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAnniversarySelectReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAnniversarySelectReq(CSAnniversarySelectReq other) : this() {
      stage_ = other.stage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAnniversarySelectReq Clone() {
      return new CSAnniversarySelectReq(this);
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private int stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSAnniversarySelectReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSAnniversarySelectReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stage != other.Stage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Stage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Stage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Stage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Stage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSAnniversarySelectReq other) {
      if (other == null) {
        return;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Stage = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Stage = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AnniversaryStage1Result : pb::IMessage<AnniversaryStage1Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AnniversaryStage1Result> _parser = new pb::MessageParser<AnniversaryStage1Result>(() => new AnniversaryStage1Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnniversaryStage1Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[166]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnniversaryStage1Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnniversaryStage1Result(AnniversaryStage1Result other) : this() {
      score_ = other.score_;
      fishUid_ = other.fishUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnniversaryStage1Result Clone() {
      return new AnniversaryStage1Result(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 2;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnniversaryStage1Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnniversaryStage1Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (FishUid != other.FishUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0) hash ^= Score.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnniversaryStage1Result other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AnniversaryStage2Result : pb::IMessage<AnniversaryStage2Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AnniversaryStage2Result> _parser = new pb::MessageParser<AnniversaryStage2Result>(() => new AnniversaryStage2Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnniversaryStage2Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[167]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnniversaryStage2Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnniversaryStage2Result(AnniversaryStage2Result other) : this() {
      scoreList_ = other.scoreList_.Clone();
      dropTimes_ = other.dropTimes_;
      multiple_ = other.multiple_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnniversaryStage2Result Clone() {
      return new AnniversaryStage2Result(this);
    }

    /// <summary>Field number for the "score_list" field.</summary>
    public const int ScoreListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_scoreList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> scoreList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ScoreList {
      get { return scoreList_; }
    }

    /// <summary>Field number for the "drop_times" field.</summary>
    public const int DropTimesFieldNumber = 2;
    private int dropTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropTimes {
      get { return dropTimes_; }
      set {
        dropTimes_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 3;
    private int multiple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnniversaryStage2Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnniversaryStage2Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!scoreList_.Equals(other.scoreList_)) return false;
      if (DropTimes != other.DropTimes) return false;
      if (Multiple != other.Multiple) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= scoreList_.GetHashCode();
      if (DropTimes != 0) hash ^= DropTimes.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      scoreList_.WriteTo(output, _repeated_scoreList_codec);
      if (DropTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DropTimes);
      }
      if (Multiple != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      scoreList_.WriteTo(ref output, _repeated_scoreList_codec);
      if (DropTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DropTimes);
      }
      if (Multiple != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += scoreList_.CalculateSize(_repeated_scoreList_codec);
      if (DropTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DropTimes);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnniversaryStage2Result other) {
      if (other == null) {
        return;
      }
      scoreList_.Add(other.scoreList_);
      if (other.DropTimes != 0) {
        DropTimes = other.DropTimes;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            scoreList_.AddEntriesFrom(input, _repeated_scoreList_codec);
            break;
          }
          case 16: {
            DropTimes = input.ReadInt32();
            break;
          }
          case 24: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            scoreList_.AddEntriesFrom(ref input, _repeated_scoreList_codec);
            break;
          }
          case 16: {
            DropTimes = input.ReadInt32();
            break;
          }
          case 24: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AnniversaryStage3Result : pb::IMessage<AnniversaryStage3Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AnniversaryStage3Result> _parser = new pb::MessageParser<AnniversaryStage3Result>(() => new AnniversaryStage3Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnniversaryStage3Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[168]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnniversaryStage3Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnniversaryStage3Result(AnniversaryStage3Result other) : this() {
      originId_ = other.originId_;
      selfId_ = other.selfId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnniversaryStage3Result Clone() {
      return new AnniversaryStage3Result(this);
    }

    /// <summary>Field number for the "origin_id" field.</summary>
    public const int OriginIdFieldNumber = 1;
    private int originId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginId {
      get { return originId_; }
      set {
        originId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 2;
    private int selfId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnniversaryStage3Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnniversaryStage3Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginId != other.OriginId) return false;
      if (SelfId != other.SelfId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginId != 0) hash ^= OriginId.GetHashCode();
      if (SelfId != 0) hash ^= SelfId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OriginId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OriginId);
      }
      if (SelfId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SelfId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OriginId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OriginId);
      }
      if (SelfId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SelfId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginId);
      }
      if (SelfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnniversaryStage3Result other) {
      if (other == null) {
        return;
      }
      if (other.OriginId != 0) {
        OriginId = other.OriginId;
      }
      if (other.SelfId != 0) {
        SelfId = other.SelfId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginId = input.ReadInt32();
            break;
          }
          case 16: {
            SelfId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OriginId = input.ReadInt32();
            break;
          }
          case 16: {
            SelfId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCAnniversarySelectResult : pb::IMessage<SCAnniversarySelectResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCAnniversarySelectResult> _parser = new pb::MessageParser<SCAnniversarySelectResult>(() => new SCAnniversarySelectResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCAnniversarySelectResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[169]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAnniversarySelectResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAnniversarySelectResult(SCAnniversarySelectResult other) : this() {
      chairIdx_ = other.chairIdx_;
      stage_ = other.stage_;
      btRatio_ = other.btRatio_;
      multiList_ = other.multiList_.Clone();
      totalEarn_ = other.totalEarn_;
      death_ = other.death_;
      result1_ = other.result1_ != null ? other.result1_.Clone() : null;
      result2_ = other.result2_ != null ? other.result2_.Clone() : null;
      result3_ = other.result3_ != null ? other.result3_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAnniversarySelectResult Clone() {
      return new SCAnniversarySelectResult(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 2;
    private int stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "bt_ratio" field.</summary>
    public const int BtRatioFieldNumber = 3;
    private int btRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtRatio {
      get { return btRatio_; }
      set {
        btRatio_ = value;
      }
    }

    /// <summary>Field number for the "multi_list" field.</summary>
    public const int MultiListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::F4BY.MultiInfo> _repeated_multiList_codec
        = pb::FieldCodec.ForMessage(34, global::F4BY.MultiInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.MultiInfo> multiList_ = new pbc::RepeatedField<global::F4BY.MultiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.MultiInfo> MultiList {
      get { return multiList_; }
    }

    /// <summary>Field number for the "total_earn" field.</summary>
    public const int TotalEarnFieldNumber = 5;
    private int totalEarn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalEarn {
      get { return totalEarn_; }
      set {
        totalEarn_ = value;
      }
    }

    /// <summary>Field number for the "death" field.</summary>
    public const int DeathFieldNumber = 6;
    private bool death_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Death {
      get { return death_; }
      set {
        death_ = value;
      }
    }

    /// <summary>Field number for the "result1" field.</summary>
    public const int Result1FieldNumber = 7;
    private global::F4BY.AnniversaryStage1Result result1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.AnniversaryStage1Result Result1 {
      get { return result1_; }
      set {
        result1_ = value;
      }
    }

    /// <summary>Field number for the "result2" field.</summary>
    public const int Result2FieldNumber = 8;
    private global::F4BY.AnniversaryStage2Result result2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.AnniversaryStage2Result Result2 {
      get { return result2_; }
      set {
        result2_ = value;
      }
    }

    /// <summary>Field number for the "result3" field.</summary>
    public const int Result3FieldNumber = 9;
    private global::F4BY.AnniversaryStage3Result result3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.AnniversaryStage3Result Result3 {
      get { return result3_; }
      set {
        result3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCAnniversarySelectResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCAnniversarySelectResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Stage != other.Stage) return false;
      if (BtRatio != other.BtRatio) return false;
      if(!multiList_.Equals(other.multiList_)) return false;
      if (TotalEarn != other.TotalEarn) return false;
      if (Death != other.Death) return false;
      if (!object.Equals(Result1, other.Result1)) return false;
      if (!object.Equals(Result2, other.Result2)) return false;
      if (!object.Equals(Result3, other.Result3)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (BtRatio != 0) hash ^= BtRatio.GetHashCode();
      hash ^= multiList_.GetHashCode();
      if (TotalEarn != 0) hash ^= TotalEarn.GetHashCode();
      if (Death != false) hash ^= Death.GetHashCode();
      if (result1_ != null) hash ^= Result1.GetHashCode();
      if (result2_ != null) hash ^= Result2.GetHashCode();
      if (result3_ != null) hash ^= Result3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Stage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stage);
      }
      if (BtRatio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BtRatio);
      }
      multiList_.WriteTo(output, _repeated_multiList_codec);
      if (TotalEarn != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalEarn);
      }
      if (Death != false) {
        output.WriteRawTag(48);
        output.WriteBool(Death);
      }
      if (result1_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Result1);
      }
      if (result2_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Result2);
      }
      if (result3_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Result3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Stage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Stage);
      }
      if (BtRatio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BtRatio);
      }
      multiList_.WriteTo(ref output, _repeated_multiList_codec);
      if (TotalEarn != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalEarn);
      }
      if (Death != false) {
        output.WriteRawTag(48);
        output.WriteBool(Death);
      }
      if (result1_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Result1);
      }
      if (result2_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Result2);
      }
      if (result3_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Result3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (BtRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtRatio);
      }
      size += multiList_.CalculateSize(_repeated_multiList_codec);
      if (TotalEarn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalEarn);
      }
      if (Death != false) {
        size += 1 + 1;
      }
      if (result1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result1);
      }
      if (result2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result2);
      }
      if (result3_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCAnniversarySelectResult other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      if (other.BtRatio != 0) {
        BtRatio = other.BtRatio;
      }
      multiList_.Add(other.multiList_);
      if (other.TotalEarn != 0) {
        TotalEarn = other.TotalEarn;
      }
      if (other.Death != false) {
        Death = other.Death;
      }
      if (other.result1_ != null) {
        if (result1_ == null) {
          Result1 = new global::F4BY.AnniversaryStage1Result();
        }
        Result1.MergeFrom(other.Result1);
      }
      if (other.result2_ != null) {
        if (result2_ == null) {
          Result2 = new global::F4BY.AnniversaryStage2Result();
        }
        Result2.MergeFrom(other.Result2);
      }
      if (other.result3_ != null) {
        if (result3_ == null) {
          Result3 = new global::F4BY.AnniversaryStage3Result();
        }
        Result3.MergeFrom(other.Result3);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Stage = input.ReadInt32();
            break;
          }
          case 24: {
            BtRatio = input.ReadInt32();
            break;
          }
          case 34: {
            multiList_.AddEntriesFrom(input, _repeated_multiList_codec);
            break;
          }
          case 40: {
            TotalEarn = input.ReadInt32();
            break;
          }
          case 48: {
            Death = input.ReadBool();
            break;
          }
          case 58: {
            if (result1_ == null) {
              Result1 = new global::F4BY.AnniversaryStage1Result();
            }
            input.ReadMessage(Result1);
            break;
          }
          case 66: {
            if (result2_ == null) {
              Result2 = new global::F4BY.AnniversaryStage2Result();
            }
            input.ReadMessage(Result2);
            break;
          }
          case 74: {
            if (result3_ == null) {
              Result3 = new global::F4BY.AnniversaryStage3Result();
            }
            input.ReadMessage(Result3);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Stage = input.ReadInt32();
            break;
          }
          case 24: {
            BtRatio = input.ReadInt32();
            break;
          }
          case 34: {
            multiList_.AddEntriesFrom(ref input, _repeated_multiList_codec);
            break;
          }
          case 40: {
            TotalEarn = input.ReadInt32();
            break;
          }
          case 48: {
            Death = input.ReadBool();
            break;
          }
          case 58: {
            if (result1_ == null) {
              Result1 = new global::F4BY.AnniversaryStage1Result();
            }
            input.ReadMessage(Result1);
            break;
          }
          case 66: {
            if (result2_ == null) {
              Result2 = new global::F4BY.AnniversaryStage2Result();
            }
            input.ReadMessage(Result2);
            break;
          }
          case 74: {
            if (result3_ == null) {
              Result3 = new global::F4BY.AnniversaryStage3Result();
            }
            input.ReadMessage(Result3);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSAnniversaryHit : pb::IMessage<CSAnniversaryHit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSAnniversaryHit> _parser = new pb::MessageParser<CSAnniversaryHit>(() => new CSAnniversaryHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSAnniversaryHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[170]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAnniversaryHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAnniversaryHit(CSAnniversaryHit other) : this() {
      bombId_ = other.bombId_;
      btType_ = other.btType_;
      screenFishes_ = other.screenFishes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAnniversaryHit Clone() {
      return new CSAnniversaryHit(this);
    }

    /// <summary>Field number for the "bombId" field.</summary>
    public const int BombIdFieldNumber = 1;
    private int bombId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BombId {
      get { return bombId_; }
      set {
        bombId_ = value;
      }
    }

    /// <summary>Field number for the "bt_type" field.</summary>
    public const int BtTypeFieldNumber = 2;
    private int btType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BtType {
      get { return btType_; }
      set {
        btType_ = value;
      }
    }

    /// <summary>Field number for the "screen_fishes" field.</summary>
    public const int ScreenFishesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_screenFishes_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> screenFishes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ScreenFishes {
      get { return screenFishes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSAnniversaryHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSAnniversaryHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BombId != other.BombId) return false;
      if (BtType != other.BtType) return false;
      if(!screenFishes_.Equals(other.screenFishes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BombId != 0) hash ^= BombId.GetHashCode();
      if (BtType != 0) hash ^= BtType.GetHashCode();
      hash ^= screenFishes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BombId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BombId);
      }
      if (BtType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BtType);
      }
      screenFishes_.WriteTo(output, _repeated_screenFishes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BombId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BombId);
      }
      if (BtType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BtType);
      }
      screenFishes_.WriteTo(ref output, _repeated_screenFishes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BombId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BombId);
      }
      if (BtType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BtType);
      }
      size += screenFishes_.CalculateSize(_repeated_screenFishes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSAnniversaryHit other) {
      if (other == null) {
        return;
      }
      if (other.BombId != 0) {
        BombId = other.BombId;
      }
      if (other.BtType != 0) {
        BtType = other.BtType;
      }
      screenFishes_.Add(other.screenFishes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BombId = input.ReadInt32();
            break;
          }
          case 16: {
            BtType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            screenFishes_.AddEntriesFrom(input, _repeated_screenFishes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BombId = input.ReadInt32();
            break;
          }
          case 16: {
            BtType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            screenFishes_.AddEntriesFrom(ref input, _repeated_screenFishes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncAnniversaryHitStage : pb::IMessage<SCSyncAnniversaryHitStage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncAnniversaryHitStage> _parser = new pb::MessageParser<SCSyncAnniversaryHitStage>(() => new SCSyncAnniversaryHitStage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncAnniversaryHitStage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[171]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncAnniversaryHitStage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncAnniversaryHitStage(SCSyncAnniversaryHitStage other) : this() {
      chairIdx_ = other.chairIdx_;
      originId_ = other.originId_;
      selfId_ = other.selfId_;
      stage_ = other.stage_;
      totalEarn_ = other.totalEarn_;
      invalidEarn_ = other.invalidEarn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncAnniversaryHitStage Clone() {
      return new SCSyncAnniversaryHitStage(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "origin_id" field.</summary>
    public const int OriginIdFieldNumber = 2;
    private int originId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OriginId {
      get { return originId_; }
      set {
        originId_ = value;
      }
    }

    /// <summary>Field number for the "self_id" field.</summary>
    public const int SelfIdFieldNumber = 3;
    private int selfId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfId {
      get { return selfId_; }
      set {
        selfId_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 4;
    private int stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "total_earn" field.</summary>
    public const int TotalEarnFieldNumber = 5;
    private int totalEarn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalEarn {
      get { return totalEarn_; }
      set {
        totalEarn_ = value;
      }
    }

    /// <summary>Field number for the "invalid_earn" field.</summary>
    public const int InvalidEarnFieldNumber = 6;
    private int invalidEarn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InvalidEarn {
      get { return invalidEarn_; }
      set {
        invalidEarn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncAnniversaryHitStage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncAnniversaryHitStage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (OriginId != other.OriginId) return false;
      if (SelfId != other.SelfId) return false;
      if (Stage != other.Stage) return false;
      if (TotalEarn != other.TotalEarn) return false;
      if (InvalidEarn != other.InvalidEarn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (OriginId != 0) hash ^= OriginId.GetHashCode();
      if (SelfId != 0) hash ^= SelfId.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (TotalEarn != 0) hash ^= TotalEarn.GetHashCode();
      if (InvalidEarn != 0) hash ^= InvalidEarn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (OriginId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginId);
      }
      if (SelfId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SelfId);
      }
      if (Stage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stage);
      }
      if (TotalEarn != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalEarn);
      }
      if (InvalidEarn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(InvalidEarn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (OriginId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OriginId);
      }
      if (SelfId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SelfId);
      }
      if (Stage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stage);
      }
      if (TotalEarn != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalEarn);
      }
      if (InvalidEarn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(InvalidEarn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (OriginId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginId);
      }
      if (SelfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfId);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (TotalEarn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalEarn);
      }
      if (InvalidEarn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InvalidEarn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncAnniversaryHitStage other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.OriginId != 0) {
        OriginId = other.OriginId;
      }
      if (other.SelfId != 0) {
        SelfId = other.SelfId;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      if (other.TotalEarn != 0) {
        TotalEarn = other.TotalEarn;
      }
      if (other.InvalidEarn != 0) {
        InvalidEarn = other.InvalidEarn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            OriginId = input.ReadInt32();
            break;
          }
          case 24: {
            SelfId = input.ReadInt32();
            break;
          }
          case 32: {
            Stage = input.ReadInt32();
            break;
          }
          case 40: {
            TotalEarn = input.ReadInt32();
            break;
          }
          case 48: {
            InvalidEarn = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            OriginId = input.ReadInt32();
            break;
          }
          case 24: {
            SelfId = input.ReadInt32();
            break;
          }
          case 32: {
            Stage = input.ReadInt32();
            break;
          }
          case 40: {
            TotalEarn = input.ReadInt32();
            break;
          }
          case 48: {
            InvalidEarn = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ScallopLottery : pb::IMessage<ScallopLottery>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScallopLottery> _parser = new pb::MessageParser<ScallopLottery>(() => new ScallopLottery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScallopLottery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[172]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScallopLottery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScallopLottery(ScallopLottery other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      status_ = other.status_;
      reward_ = other.reward_ != null ? other.reward_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScallopLottery Clone() {
      return new ScallopLottery(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 4;
    private global::F4BY.Obj reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Obj Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScallopLottery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScallopLottery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Reward, other.Reward)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (reward_ != null) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (reward_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (reward_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScallopLottery other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          Reward = new global::F4BY.Obj();
        }
        Reward.MergeFrom(other.Reward);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 34: {
            if (reward_ == null) {
              Reward = new global::F4BY.Obj();
            }
            input.ReadMessage(Reward);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 34: {
            if (reward_ == null) {
              Reward = new global::F4BY.Obj();
            }
            input.ReadMessage(Reward);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCCaptureScallop : pb::IMessage<SCCaptureScallop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCCaptureScallop> _parser = new pb::MessageParser<SCCaptureScallop>(() => new SCCaptureScallop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCCaptureScallop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[173]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCaptureScallop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCaptureScallop(SCCaptureScallop other) : this() {
      chairIdx_ = other.chairIdx_;
      fishUid_ = other.fishUid_;
      ratio_ = other.ratio_;
      time_ = other.time_;
      lotteryList_ = other.lotteryList_.Clone();
      rewardConfig_ = other.rewardConfig_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCCaptureScallop Clone() {
      return new SCCaptureScallop(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 2;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 3;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "lottery_list" field.</summary>
    public const int LotteryListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::F4BY.ScallopLottery> _repeated_lotteryList_codec
        = pb::FieldCodec.ForMessage(42, global::F4BY.ScallopLottery.Parser);
    private readonly pbc::RepeatedField<global::F4BY.ScallopLottery> lotteryList_ = new pbc::RepeatedField<global::F4BY.ScallopLottery>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.ScallopLottery> LotteryList {
      get { return lotteryList_; }
    }

    /// <summary>Field number for the "reward_config" field.</summary>
    public const int RewardConfigFieldNumber = 6;
    private static readonly pb::FieldCodec<global::F4BY.Obj> _repeated_rewardConfig_codec
        = pb::FieldCodec.ForMessage(50, global::F4BY.Obj.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Obj> rewardConfig_ = new pbc::RepeatedField<global::F4BY.Obj>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Obj> RewardConfig {
      get { return rewardConfig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCCaptureScallop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCCaptureScallop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (FishUid != other.FishUid) return false;
      if (Ratio != other.Ratio) return false;
      if (Time != other.Time) return false;
      if(!lotteryList_.Equals(other.lotteryList_)) return false;
      if(!rewardConfig_.Equals(other.rewardConfig_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      hash ^= lotteryList_.GetHashCode();
      hash ^= rewardConfig_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Time);
      }
      lotteryList_.WriteTo(output, _repeated_lotteryList_codec);
      rewardConfig_.WriteTo(output, _repeated_rewardConfig_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (Ratio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ratio);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Time);
      }
      lotteryList_.WriteTo(ref output, _repeated_lotteryList_codec);
      rewardConfig_.WriteTo(ref output, _repeated_rewardConfig_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      size += lotteryList_.CalculateSize(_repeated_lotteryList_codec);
      size += rewardConfig_.CalculateSize(_repeated_rewardConfig_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCCaptureScallop other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      lotteryList_.Add(other.lotteryList_);
      rewardConfig_.Add(other.rewardConfig_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            Time = input.ReadInt32();
            break;
          }
          case 42: {
            lotteryList_.AddEntriesFrom(input, _repeated_lotteryList_codec);
            break;
          }
          case 50: {
            rewardConfig_.AddEntriesFrom(input, _repeated_rewardConfig_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            Ratio = input.ReadInt32();
            break;
          }
          case 32: {
            Time = input.ReadInt32();
            break;
          }
          case 42: {
            lotteryList_.AddEntriesFrom(ref input, _repeated_lotteryList_codec);
            break;
          }
          case 50: {
            rewardConfig_.AddEntriesFrom(ref input, _repeated_rewardConfig_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSOpenScallop : pb::IMessage<CSOpenScallop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSOpenScallop> _parser = new pb::MessageParser<CSOpenScallop>(() => new CSOpenScallop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOpenScallop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[174]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenScallop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenScallop(CSOpenScallop other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOpenScallop Clone() {
      return new CSOpenScallop(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOpenScallop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOpenScallop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOpenScallop other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCOpenScallop : pb::IMessage<SCOpenScallop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCOpenScallop> _parser = new pb::MessageParser<SCOpenScallop>(() => new SCOpenScallop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOpenScallop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[175]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenScallop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenScallop(SCOpenScallop other) : this() {
      chairIdx_ = other.chairIdx_;
      scallop_ = other.scallop_ != null ? other.scallop_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenScallop Clone() {
      return new SCOpenScallop(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "scallop" field.</summary>
    public const int ScallopFieldNumber = 2;
    private global::F4BY.ScallopLottery scallop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.ScallopLottery Scallop {
      get { return scallop_; }
      set {
        scallop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOpenScallop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOpenScallop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (!object.Equals(Scallop, other.Scallop)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (scallop_ != null) hash ^= Scallop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (scallop_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scallop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (scallop_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scallop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (scallop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scallop);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOpenScallop other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.scallop_ != null) {
        if (scallop_ == null) {
          Scallop = new global::F4BY.ScallopLottery();
        }
        Scallop.MergeFrom(other.Scallop);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 18: {
            if (scallop_ == null) {
              Scallop = new global::F4BY.ScallopLottery();
            }
            input.ReadMessage(Scallop);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 18: {
            if (scallop_ == null) {
              Scallop = new global::F4BY.ScallopLottery();
            }
            input.ReadMessage(Scallop);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSettleScallopLottery : pb::IMessage<SCSettleScallopLottery>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSettleScallopLottery> _parser = new pb::MessageParser<SCSettleScallopLottery>(() => new SCSettleScallopLottery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSettleScallopLottery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[176]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSettleScallopLottery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSettleScallopLottery(SCSettleScallopLottery other) : this() {
      chairIdx_ = other.chairIdx_;
      earn_ = other.earn_;
      lotteryList_ = other.lotteryList_.Clone();
      multiList_ = other.multiList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSettleScallopLottery Clone() {
      return new SCSettleScallopLottery(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "earn" field.</summary>
    public const int EarnFieldNumber = 2;
    private int earn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Earn {
      get { return earn_; }
      set {
        earn_ = value;
      }
    }

    /// <summary>Field number for the "lottery_list" field.</summary>
    public const int LotteryListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::F4BY.ScallopLottery> _repeated_lotteryList_codec
        = pb::FieldCodec.ForMessage(26, global::F4BY.ScallopLottery.Parser);
    private readonly pbc::RepeatedField<global::F4BY.ScallopLottery> lotteryList_ = new pbc::RepeatedField<global::F4BY.ScallopLottery>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.ScallopLottery> LotteryList {
      get { return lotteryList_; }
    }

    /// <summary>Field number for the "multi_list" field.</summary>
    public const int MultiListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::F4BY.MultiInfo> _repeated_multiList_codec
        = pb::FieldCodec.ForMessage(34, global::F4BY.MultiInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.MultiInfo> multiList_ = new pbc::RepeatedField<global::F4BY.MultiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.MultiInfo> MultiList {
      get { return multiList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSettleScallopLottery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSettleScallopLottery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Earn != other.Earn) return false;
      if(!lotteryList_.Equals(other.lotteryList_)) return false;
      if(!multiList_.Equals(other.multiList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Earn != 0) hash ^= Earn.GetHashCode();
      hash ^= lotteryList_.GetHashCode();
      hash ^= multiList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Earn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Earn);
      }
      lotteryList_.WriteTo(output, _repeated_lotteryList_codec);
      multiList_.WriteTo(output, _repeated_multiList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Earn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Earn);
      }
      lotteryList_.WriteTo(ref output, _repeated_lotteryList_codec);
      multiList_.WriteTo(ref output, _repeated_multiList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Earn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Earn);
      }
      size += lotteryList_.CalculateSize(_repeated_lotteryList_codec);
      size += multiList_.CalculateSize(_repeated_multiList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSettleScallopLottery other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Earn != 0) {
        Earn = other.Earn;
      }
      lotteryList_.Add(other.lotteryList_);
      multiList_.Add(other.multiList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Earn = input.ReadInt32();
            break;
          }
          case 26: {
            lotteryList_.AddEntriesFrom(input, _repeated_lotteryList_codec);
            break;
          }
          case 34: {
            multiList_.AddEntriesFrom(input, _repeated_multiList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Earn = input.ReadInt32();
            break;
          }
          case 26: {
            lotteryList_.AddEntriesFrom(ref input, _repeated_lotteryList_codec);
            break;
          }
          case 34: {
            multiList_.AddEntriesFrom(ref input, _repeated_multiList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncScallopLottery : pb::IMessage<SCSyncScallopLottery>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncScallopLottery> _parser = new pb::MessageParser<SCSyncScallopLottery>(() => new SCSyncScallopLottery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncScallopLottery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[177]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncScallopLottery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncScallopLottery(SCSyncScallopLottery other) : this() {
      chairIdx_ = other.chairIdx_;
      ratio_ = other.ratio_;
      time_ = other.time_;
      lotteryList_ = other.lotteryList_.Clone();
      rewardConfig_ = other.rewardConfig_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncScallopLottery Clone() {
      return new SCSyncScallopLottery(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 2;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "lottery_list" field.</summary>
    public const int LotteryListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::F4BY.ScallopLottery> _repeated_lotteryList_codec
        = pb::FieldCodec.ForMessage(34, global::F4BY.ScallopLottery.Parser);
    private readonly pbc::RepeatedField<global::F4BY.ScallopLottery> lotteryList_ = new pbc::RepeatedField<global::F4BY.ScallopLottery>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.ScallopLottery> LotteryList {
      get { return lotteryList_; }
    }

    /// <summary>Field number for the "reward_config" field.</summary>
    public const int RewardConfigFieldNumber = 5;
    private static readonly pb::FieldCodec<global::F4BY.Obj> _repeated_rewardConfig_codec
        = pb::FieldCodec.ForMessage(42, global::F4BY.Obj.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Obj> rewardConfig_ = new pbc::RepeatedField<global::F4BY.Obj>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Obj> RewardConfig {
      get { return rewardConfig_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncScallopLottery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncScallopLottery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (Ratio != other.Ratio) return false;
      if (Time != other.Time) return false;
      if(!lotteryList_.Equals(other.lotteryList_)) return false;
      if(!rewardConfig_.Equals(other.rewardConfig_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      hash ^= lotteryList_.GetHashCode();
      hash ^= rewardConfig_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Time);
      }
      lotteryList_.WriteTo(output, _repeated_lotteryList_codec);
      rewardConfig_.WriteTo(output, _repeated_rewardConfig_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (Ratio != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ratio);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Time);
      }
      lotteryList_.WriteTo(ref output, _repeated_lotteryList_codec);
      rewardConfig_.WriteTo(ref output, _repeated_rewardConfig_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      size += lotteryList_.CalculateSize(_repeated_lotteryList_codec);
      size += rewardConfig_.CalculateSize(_repeated_rewardConfig_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncScallopLottery other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      lotteryList_.Add(other.lotteryList_);
      rewardConfig_.Add(other.rewardConfig_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            Time = input.ReadInt32();
            break;
          }
          case 34: {
            lotteryList_.AddEntriesFrom(input, _repeated_lotteryList_codec);
            break;
          }
          case 42: {
            rewardConfig_.AddEntriesFrom(input, _repeated_rewardConfig_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            Ratio = input.ReadInt32();
            break;
          }
          case 24: {
            Time = input.ReadInt32();
            break;
          }
          case 34: {
            lotteryList_.AddEntriesFrom(ref input, _repeated_lotteryList_codec);
            break;
          }
          case 42: {
            rewardConfig_.AddEntriesFrom(ref input, _repeated_rewardConfig_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OpenChestReward : pb::IMessage<OpenChestReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpenChestReward> _parser = new pb::MessageParser<OpenChestReward>(() => new OpenChestReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenChestReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[178]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChestReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChestReward(OpenChestReward other) : this() {
      id_ = other.id_;
      num_ = other.num_ != null ? other.num_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChestReward Clone() {
      return new OpenChestReward(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private global::F4BY.Decimal num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Decimal Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenChestReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenChestReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Num, other.Num)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (num_ != null) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (num_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (num_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (num_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenChestReward other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.num_ != null) {
        if (num_ == null) {
          Num = new global::F4BY.Decimal();
        }
        Num.MergeFrom(other.Num);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (num_ == null) {
              Num = new global::F4BY.Decimal();
            }
            input.ReadMessage(Num);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (num_ == null) {
              Num = new global::F4BY.Decimal();
            }
            input.ReadMessage(Num);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCUpdateChestStatus : pb::IMessage<SCUpdateChestStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCUpdateChestStatus> _parser = new pb::MessageParser<SCUpdateChestStatus>(() => new SCUpdateChestStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUpdateChestStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[179]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateChestStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateChestStatus(SCUpdateChestStatus other) : this() {
      isActive_ = other.isActive_;
      chestType_ = other.chestType_;
      totalProgress_ = other.totalProgress_;
      remainProgress_ = other.remainProgress_;
      guide_ = other.guide_;
      availableReward_ = other.availableReward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateChestStatus Clone() {
      return new SCUpdateChestStatus(this);
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 1;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "chest_type" field.</summary>
    public const int ChestTypeFieldNumber = 2;
    private global::F4BY.ChestType chestType_ = global::F4BY.ChestType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.ChestType ChestType {
      get { return chestType_; }
      set {
        chestType_ = value;
      }
    }

    /// <summary>Field number for the "total_progress" field.</summary>
    public const int TotalProgressFieldNumber = 3;
    private int totalProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalProgress {
      get { return totalProgress_; }
      set {
        totalProgress_ = value;
      }
    }

    /// <summary>Field number for the "remain_progress" field.</summary>
    public const int RemainProgressFieldNumber = 4;
    private int remainProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainProgress {
      get { return remainProgress_; }
      set {
        remainProgress_ = value;
      }
    }

    /// <summary>Field number for the "guide" field.</summary>
    public const int GuideFieldNumber = 5;
    private bool guide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Guide {
      get { return guide_; }
      set {
        guide_ = value;
      }
    }

    /// <summary>Field number for the "available_reward" field.</summary>
    public const int AvailableRewardFieldNumber = 6;
    private int availableReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvailableReward {
      get { return availableReward_; }
      set {
        availableReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUpdateChestStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUpdateChestStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsActive != other.IsActive) return false;
      if (ChestType != other.ChestType) return false;
      if (TotalProgress != other.TotalProgress) return false;
      if (RemainProgress != other.RemainProgress) return false;
      if (Guide != other.Guide) return false;
      if (AvailableReward != other.AvailableReward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (ChestType != global::F4BY.ChestType.None) hash ^= ChestType.GetHashCode();
      if (TotalProgress != 0) hash ^= TotalProgress.GetHashCode();
      if (RemainProgress != 0) hash ^= RemainProgress.GetHashCode();
      if (Guide != false) hash ^= Guide.GetHashCode();
      if (AvailableReward != 0) hash ^= AvailableReward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsActive != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsActive);
      }
      if (ChestType != global::F4BY.ChestType.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChestType);
      }
      if (TotalProgress != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalProgress);
      }
      if (RemainProgress != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RemainProgress);
      }
      if (Guide != false) {
        output.WriteRawTag(40);
        output.WriteBool(Guide);
      }
      if (AvailableReward != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AvailableReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsActive != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsActive);
      }
      if (ChestType != global::F4BY.ChestType.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChestType);
      }
      if (TotalProgress != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalProgress);
      }
      if (RemainProgress != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RemainProgress);
      }
      if (Guide != false) {
        output.WriteRawTag(40);
        output.WriteBool(Guide);
      }
      if (AvailableReward != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AvailableReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (ChestType != global::F4BY.ChestType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChestType);
      }
      if (TotalProgress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalProgress);
      }
      if (RemainProgress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainProgress);
      }
      if (Guide != false) {
        size += 1 + 1;
      }
      if (AvailableReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableReward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUpdateChestStatus other) {
      if (other == null) {
        return;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.ChestType != global::F4BY.ChestType.None) {
        ChestType = other.ChestType;
      }
      if (other.TotalProgress != 0) {
        TotalProgress = other.TotalProgress;
      }
      if (other.RemainProgress != 0) {
        RemainProgress = other.RemainProgress;
      }
      if (other.Guide != false) {
        Guide = other.Guide;
      }
      if (other.AvailableReward != 0) {
        AvailableReward = other.AvailableReward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsActive = input.ReadBool();
            break;
          }
          case 16: {
            ChestType = (global::F4BY.ChestType) input.ReadEnum();
            break;
          }
          case 24: {
            TotalProgress = input.ReadInt32();
            break;
          }
          case 32: {
            RemainProgress = input.ReadInt32();
            break;
          }
          case 40: {
            Guide = input.ReadBool();
            break;
          }
          case 48: {
            AvailableReward = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsActive = input.ReadBool();
            break;
          }
          case 16: {
            ChestType = (global::F4BY.ChestType) input.ReadEnum();
            break;
          }
          case 24: {
            TotalProgress = input.ReadInt32();
            break;
          }
          case 32: {
            RemainProgress = input.ReadInt32();
            break;
          }
          case 40: {
            Guide = input.ReadBool();
            break;
          }
          case 48: {
            AvailableReward = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSChestConfig : pb::IMessage<CSChestConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSChestConfig> _parser = new pb::MessageParser<CSChestConfig>(() => new CSChestConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChestConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[180]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestConfig(CSChestConfig other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestConfig Clone() {
      return new CSChestConfig(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSChestConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSChestConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSChestConfig other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ChestBrief : pb::IMessage<ChestBrief>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChestBrief> _parser = new pb::MessageParser<ChestBrief>(() => new ChestBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChestBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[181]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChestBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChestBrief(ChestBrief other) : this() {
      chestType_ = other.chestType_;
      reward_ = other.reward_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChestBrief Clone() {
      return new ChestBrief(this);
    }

    /// <summary>Field number for the "chest_type" field.</summary>
    public const int ChestTypeFieldNumber = 1;
    private global::F4BY.ChestType chestType_ = global::F4BY.ChestType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.ChestType ChestType {
      get { return chestType_; }
      set {
        chestType_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.OpenChestReward> _repeated_reward_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.OpenChestReward.Parser);
    private readonly pbc::RepeatedField<global::F4BY.OpenChestReward> reward_ = new pbc::RepeatedField<global::F4BY.OpenChestReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.OpenChestReward> Reward {
      get { return reward_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChestBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChestBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChestType != other.ChestType) return false;
      if(!reward_.Equals(other.reward_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChestType != global::F4BY.ChestType.None) hash ^= ChestType.GetHashCode();
      hash ^= reward_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChestType != global::F4BY.ChestType.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChestType);
      }
      reward_.WriteTo(output, _repeated_reward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChestType != global::F4BY.ChestType.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChestType);
      }
      reward_.WriteTo(ref output, _repeated_reward_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChestType != global::F4BY.ChestType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChestType);
      }
      size += reward_.CalculateSize(_repeated_reward_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChestBrief other) {
      if (other == null) {
        return;
      }
      if (other.ChestType != global::F4BY.ChestType.None) {
        ChestType = other.ChestType;
      }
      reward_.Add(other.reward_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChestType = (global::F4BY.ChestType) input.ReadEnum();
            break;
          }
          case 18: {
            reward_.AddEntriesFrom(input, _repeated_reward_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChestType = (global::F4BY.ChestType) input.ReadEnum();
            break;
          }
          case 18: {
            reward_.AddEntriesFrom(ref input, _repeated_reward_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCChestConfig : pb::IMessage<SCChestConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCChestConfig> _parser = new pb::MessageParser<SCChestConfig>(() => new SCChestConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCChestConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[182]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestConfig(SCChestConfig other) : this() {
      endTime_ = other.endTime_;
      chestBriefList_ = other.chestBriefList_.Clone();
      minRatio_ = other.minRatio_;
      autoOpen_ = other.autoOpen_;
      autoOption_ = other.autoOption_;
      isEnable_ = other.isEnable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestConfig Clone() {
      return new SCChestConfig(this);
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 1;
    private int endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "chest_brief_list" field.</summary>
    public const int ChestBriefListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.ChestBrief> _repeated_chestBriefList_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.ChestBrief.Parser);
    private readonly pbc::RepeatedField<global::F4BY.ChestBrief> chestBriefList_ = new pbc::RepeatedField<global::F4BY.ChestBrief>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.ChestBrief> ChestBriefList {
      get { return chestBriefList_; }
    }

    /// <summary>Field number for the "min_ratio" field.</summary>
    public const int MinRatioFieldNumber = 3;
    private int minRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinRatio {
      get { return minRatio_; }
      set {
        minRatio_ = value;
      }
    }

    /// <summary>Field number for the "auto_open" field.</summary>
    public const int AutoOpenFieldNumber = 4;
    private bool autoOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoOpen {
      get { return autoOpen_; }
      set {
        autoOpen_ = value;
      }
    }

    /// <summary>Field number for the "auto_option" field.</summary>
    public const int AutoOptionFieldNumber = 5;
    private global::F4BY.ChestAutoSelectOption autoOption_ = global::F4BY.ChestAutoSelectOption.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.ChestAutoSelectOption AutoOption {
      get { return autoOption_; }
      set {
        autoOption_ = value;
      }
    }

    /// <summary>Field number for the "is_enable" field.</summary>
    public const int IsEnableFieldNumber = 6;
    private bool isEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnable {
      get { return isEnable_; }
      set {
        isEnable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCChestConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCChestConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndTime != other.EndTime) return false;
      if(!chestBriefList_.Equals(other.chestBriefList_)) return false;
      if (MinRatio != other.MinRatio) return false;
      if (AutoOpen != other.AutoOpen) return false;
      if (AutoOption != other.AutoOption) return false;
      if (IsEnable != other.IsEnable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      hash ^= chestBriefList_.GetHashCode();
      if (MinRatio != 0) hash ^= MinRatio.GetHashCode();
      if (AutoOpen != false) hash ^= AutoOpen.GetHashCode();
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) hash ^= AutoOption.GetHashCode();
      if (IsEnable != false) hash ^= IsEnable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EndTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EndTime);
      }
      chestBriefList_.WriteTo(output, _repeated_chestBriefList_codec);
      if (MinRatio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinRatio);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(32);
        output.WriteBool(AutoOpen);
      }
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AutoOption);
      }
      if (IsEnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EndTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EndTime);
      }
      chestBriefList_.WriteTo(ref output, _repeated_chestBriefList_codec);
      if (MinRatio != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinRatio);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(32);
        output.WriteBool(AutoOpen);
      }
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AutoOption);
      }
      if (IsEnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      size += chestBriefList_.CalculateSize(_repeated_chestBriefList_codec);
      if (MinRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinRatio);
      }
      if (AutoOpen != false) {
        size += 1 + 1;
      }
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutoOption);
      }
      if (IsEnable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCChestConfig other) {
      if (other == null) {
        return;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      chestBriefList_.Add(other.chestBriefList_);
      if (other.MinRatio != 0) {
        MinRatio = other.MinRatio;
      }
      if (other.AutoOpen != false) {
        AutoOpen = other.AutoOpen;
      }
      if (other.AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        AutoOption = other.AutoOption;
      }
      if (other.IsEnable != false) {
        IsEnable = other.IsEnable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndTime = input.ReadInt32();
            break;
          }
          case 18: {
            chestBriefList_.AddEntriesFrom(input, _repeated_chestBriefList_codec);
            break;
          }
          case 24: {
            MinRatio = input.ReadInt32();
            break;
          }
          case 32: {
            AutoOpen = input.ReadBool();
            break;
          }
          case 40: {
            AutoOption = (global::F4BY.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 48: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            EndTime = input.ReadInt32();
            break;
          }
          case 18: {
            chestBriefList_.AddEntriesFrom(ref input, _repeated_chestBriefList_codec);
            break;
          }
          case 24: {
            MinRatio = input.ReadInt32();
            break;
          }
          case 32: {
            AutoOpen = input.ReadBool();
            break;
          }
          case 40: {
            AutoOption = (global::F4BY.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 48: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCOpenChest : pb::IMessage<SCOpenChest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCOpenChest> _parser = new pb::MessageParser<SCOpenChest>(() => new SCOpenChest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOpenChest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[183]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenChest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenChest(SCOpenChest other) : this() {
      rewardList_ = other.rewardList_.Clone();
      autoOption_ = other.autoOption_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOpenChest Clone() {
      return new SCOpenChest(this);
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.OpenChestReward> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.OpenChestReward.Parser);
    private readonly pbc::RepeatedField<global::F4BY.OpenChestReward> rewardList_ = new pbc::RepeatedField<global::F4BY.OpenChestReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.OpenChestReward> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "auto_option" field.</summary>
    public const int AutoOptionFieldNumber = 2;
    private global::F4BY.ChestAutoSelectOption autoOption_ = global::F4BY.ChestAutoSelectOption.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.ChestAutoSelectOption AutoOption {
      get { return autoOption_; }
      set {
        autoOption_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOpenChest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOpenChest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (AutoOption != other.AutoOption) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewardList_.GetHashCode();
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) hash ^= AutoOption.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AutoOption);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AutoOption);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutoOption);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOpenChest other) {
      if (other == null) {
        return;
      }
      rewardList_.Add(other.rewardList_);
      if (other.AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        AutoOption = other.AutoOption;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 16: {
            AutoOption = (global::F4BY.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
          case 16: {
            AutoOption = (global::F4BY.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSelectChestReward : pb::IMessage<CSSelectChestReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSelectChestReward> _parser = new pb::MessageParser<CSSelectChestReward>(() => new CSSelectChestReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSelectChestReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[184]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelectChestReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelectChestReward(CSSelectChestReward other) : this() {
      selectIndex_ = other.selectIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSelectChestReward Clone() {
      return new CSSelectChestReward(this);
    }

    /// <summary>Field number for the "select_index" field.</summary>
    public const int SelectIndexFieldNumber = 1;
    private int selectIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectIndex {
      get { return selectIndex_; }
      set {
        selectIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSelectChestReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSelectChestReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SelectIndex != other.SelectIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SelectIndex != 0) hash ^= SelectIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SelectIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SelectIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SelectIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SelectIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SelectIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSelectChestReward other) {
      if (other == null) {
        return;
      }
      if (other.SelectIndex != 0) {
        SelectIndex = other.SelectIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SelectIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SelectIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSelectChestReward : pb::IMessage<SCSelectChestReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSelectChestReward> _parser = new pb::MessageParser<SCSelectChestReward>(() => new SCSelectChestReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSelectChestReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[185]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSelectChestReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSelectChestReward(SCSelectChestReward other) : this() {
      reward_ = other.reward_ != null ? other.reward_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSelectChestReward Clone() {
      return new SCSelectChestReward(this);
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 1;
    private global::F4BY.OpenChestReward reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.OpenChestReward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSelectChestReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSelectChestReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Reward, other.Reward)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reward_ != null) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (reward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (reward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSelectChestReward other) {
      if (other == null) {
        return;
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          Reward = new global::F4BY.OpenChestReward();
        }
        Reward.MergeFrom(other.Reward);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (reward_ == null) {
              Reward = new global::F4BY.OpenChestReward();
            }
            input.ReadMessage(Reward);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (reward_ == null) {
              Reward = new global::F4BY.OpenChestReward();
            }
            input.ReadMessage(Reward);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSChestSetAutoSelect : pb::IMessage<CSChestSetAutoSelect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSChestSetAutoSelect> _parser = new pb::MessageParser<CSChestSetAutoSelect>(() => new CSChestSetAutoSelect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChestSetAutoSelect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[186]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetAutoSelect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetAutoSelect(CSChestSetAutoSelect other) : this() {
      autoOption_ = other.autoOption_;
      autoOpen_ = other.autoOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetAutoSelect Clone() {
      return new CSChestSetAutoSelect(this);
    }

    /// <summary>Field number for the "auto_option" field.</summary>
    public const int AutoOptionFieldNumber = 1;
    private global::F4BY.ChestAutoSelectOption autoOption_ = global::F4BY.ChestAutoSelectOption.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.ChestAutoSelectOption AutoOption {
      get { return autoOption_; }
      set {
        autoOption_ = value;
      }
    }

    /// <summary>Field number for the "auto_open" field.</summary>
    public const int AutoOpenFieldNumber = 2;
    private bool autoOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoOpen {
      get { return autoOpen_; }
      set {
        autoOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSChestSetAutoSelect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSChestSetAutoSelect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoOption != other.AutoOption) return false;
      if (AutoOpen != other.AutoOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) hash ^= AutoOption.GetHashCode();
      if (AutoOpen != false) hash ^= AutoOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AutoOption);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AutoOption);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutoOption);
      }
      if (AutoOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSChestSetAutoSelect other) {
      if (other == null) {
        return;
      }
      if (other.AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        AutoOption = other.AutoOption;
      }
      if (other.AutoOpen != false) {
        AutoOpen = other.AutoOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutoOption = (global::F4BY.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 16: {
            AutoOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutoOption = (global::F4BY.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 16: {
            AutoOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCChestSetAutoSelect : pb::IMessage<SCChestSetAutoSelect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCChestSetAutoSelect> _parser = new pb::MessageParser<SCChestSetAutoSelect>(() => new SCChestSetAutoSelect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCChestSetAutoSelect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[187]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetAutoSelect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetAutoSelect(SCChestSetAutoSelect other) : this() {
      autoOption_ = other.autoOption_;
      autoOpen_ = other.autoOpen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetAutoSelect Clone() {
      return new SCChestSetAutoSelect(this);
    }

    /// <summary>Field number for the "auto_option" field.</summary>
    public const int AutoOptionFieldNumber = 1;
    private global::F4BY.ChestAutoSelectOption autoOption_ = global::F4BY.ChestAutoSelectOption.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.ChestAutoSelectOption AutoOption {
      get { return autoOption_; }
      set {
        autoOption_ = value;
      }
    }

    /// <summary>Field number for the "auto_open" field.</summary>
    public const int AutoOpenFieldNumber = 2;
    private bool autoOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoOpen {
      get { return autoOpen_; }
      set {
        autoOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCChestSetAutoSelect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCChestSetAutoSelect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoOption != other.AutoOption) return false;
      if (AutoOpen != other.AutoOpen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) hash ^= AutoOption.GetHashCode();
      if (AutoOpen != false) hash ^= AutoOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AutoOption);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AutoOption);
      }
      if (AutoOpen != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AutoOption);
      }
      if (AutoOpen != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCChestSetAutoSelect other) {
      if (other == null) {
        return;
      }
      if (other.AutoOption != global::F4BY.ChestAutoSelectOption.None) {
        AutoOption = other.AutoOption;
      }
      if (other.AutoOpen != false) {
        AutoOpen = other.AutoOpen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutoOption = (global::F4BY.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 16: {
            AutoOpen = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AutoOption = (global::F4BY.ChestAutoSelectOption) input.ReadEnum();
            break;
          }
          case 16: {
            AutoOpen = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSChestSetEnable : pb::IMessage<CSChestSetEnable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSChestSetEnable> _parser = new pb::MessageParser<CSChestSetEnable>(() => new CSChestSetEnable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChestSetEnable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[188]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetEnable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetEnable(CSChestSetEnable other) : this() {
      isEnable_ = other.isEnable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChestSetEnable Clone() {
      return new CSChestSetEnable(this);
    }

    /// <summary>Field number for the "is_enable" field.</summary>
    public const int IsEnableFieldNumber = 1;
    private bool isEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnable {
      get { return isEnable_; }
      set {
        isEnable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSChestSetEnable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSChestSetEnable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsEnable != other.IsEnable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsEnable != false) hash ^= IsEnable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsEnable != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsEnable != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsEnable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSChestSetEnable other) {
      if (other == null) {
        return;
      }
      if (other.IsEnable != false) {
        IsEnable = other.IsEnable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCChestSetEnable : pb::IMessage<SCChestSetEnable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCChestSetEnable> _parser = new pb::MessageParser<SCChestSetEnable>(() => new SCChestSetEnable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCChestSetEnable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[189]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetEnable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetEnable(SCChestSetEnable other) : this() {
      isEnable_ = other.isEnable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChestSetEnable Clone() {
      return new SCChestSetEnable(this);
    }

    /// <summary>Field number for the "is_enable" field.</summary>
    public const int IsEnableFieldNumber = 1;
    private bool isEnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnable {
      get { return isEnable_; }
      set {
        isEnable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCChestSetEnable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCChestSetEnable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsEnable != other.IsEnable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsEnable != false) hash ^= IsEnable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsEnable != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsEnable != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsEnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsEnable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCChestSetEnable other) {
      if (other == null) {
        return;
      }
      if (other.IsEnable != false) {
        IsEnable = other.IsEnable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsEnable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSpecEffect : pb::IMessage<SCSpecEffect>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSpecEffect> _parser = new pb::MessageParser<SCSpecEffect>(() => new SCSpecEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSpecEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[190]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSpecEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSpecEffect(SCSpecEffect other) : this() {
      costMoney_ = other.costMoney_;
      earnMoney_ = other.earnMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSpecEffect Clone() {
      return new SCSpecEffect(this);
    }

    /// <summary>Field number for the "costMoney" field.</summary>
    public const int CostMoneyFieldNumber = 1;
    private int costMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostMoney {
      get { return costMoney_; }
      set {
        costMoney_ = value;
      }
    }

    /// <summary>Field number for the "earnMoney" field.</summary>
    public const int EarnMoneyFieldNumber = 2;
    private int earnMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EarnMoney {
      get { return earnMoney_; }
      set {
        earnMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSpecEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSpecEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CostMoney != other.CostMoney) return false;
      if (EarnMoney != other.EarnMoney) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CostMoney != 0) hash ^= CostMoney.GetHashCode();
      if (EarnMoney != 0) hash ^= EarnMoney.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CostMoney != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CostMoney);
      }
      if (EarnMoney != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EarnMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CostMoney != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CostMoney);
      }
      if (EarnMoney != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EarnMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CostMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostMoney);
      }
      if (EarnMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EarnMoney);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSpecEffect other) {
      if (other == null) {
        return;
      }
      if (other.CostMoney != 0) {
        CostMoney = other.CostMoney;
      }
      if (other.EarnMoney != 0) {
        EarnMoney = other.EarnMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CostMoney = input.ReadInt32();
            break;
          }
          case 16: {
            EarnMoney = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CostMoney = input.ReadInt32();
            break;
          }
          case 16: {
            EarnMoney = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCTortoiseExplode : pb::IMessage<SCTortoiseExplode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTortoiseExplode> _parser = new pb::MessageParser<SCTortoiseExplode>(() => new SCTortoiseExplode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTortoiseExplode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[191]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTortoiseExplode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTortoiseExplode(SCTortoiseExplode other) : this() {
      chairIdx_ = other.chairIdx_;
      fishUid_ = other.fishUid_;
      bulletId_ = other.bulletId_;
      ratio_ = other.ratio_;
      maxEffect_ = other.maxEffect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTortoiseExplode Clone() {
      return new SCTortoiseExplode(this);
    }

    /// <summary>Field number for the "chair_idx" field.</summary>
    public const int ChairIdxFieldNumber = 1;
    private int chairIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairIdx {
      get { return chairIdx_; }
      set {
        chairIdx_ = value;
      }
    }

    /// <summary>Field number for the "fish_uid" field.</summary>
    public const int FishUidFieldNumber = 2;
    private int fishUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FishUid {
      get { return fishUid_; }
      set {
        fishUid_ = value;
      }
    }

    /// <summary>Field number for the "bullet_id" field.</summary>
    public const int BulletIdFieldNumber = 3;
    private int bulletId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletId {
      get { return bulletId_; }
      set {
        bulletId_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 4;
    private int ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "max_effect" field.</summary>
    public const int MaxEffectFieldNumber = 5;
    private int maxEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxEffect {
      get { return maxEffect_; }
      set {
        maxEffect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTortoiseExplode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTortoiseExplode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairIdx != other.ChairIdx) return false;
      if (FishUid != other.FishUid) return false;
      if (BulletId != other.BulletId) return false;
      if (Ratio != other.Ratio) return false;
      if (MaxEffect != other.MaxEffect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairIdx != 0) hash ^= ChairIdx.GetHashCode();
      if (FishUid != 0) hash ^= FishUid.GetHashCode();
      if (BulletId != 0) hash ^= BulletId.GetHashCode();
      if (Ratio != 0) hash ^= Ratio.GetHashCode();
      if (MaxEffect != 0) hash ^= MaxEffect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (BulletId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletId);
      }
      if (Ratio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ratio);
      }
      if (MaxEffect != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxEffect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairIdx);
      }
      if (FishUid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FishUid);
      }
      if (BulletId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BulletId);
      }
      if (Ratio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ratio);
      }
      if (MaxEffect != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxEffect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairIdx);
      }
      if (FishUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishUid);
      }
      if (BulletId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletId);
      }
      if (Ratio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ratio);
      }
      if (MaxEffect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxEffect);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTortoiseExplode other) {
      if (other == null) {
        return;
      }
      if (other.ChairIdx != 0) {
        ChairIdx = other.ChairIdx;
      }
      if (other.FishUid != 0) {
        FishUid = other.FishUid;
      }
      if (other.BulletId != 0) {
        BulletId = other.BulletId;
      }
      if (other.Ratio != 0) {
        Ratio = other.Ratio;
      }
      if (other.MaxEffect != 0) {
        MaxEffect = other.MaxEffect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            BulletId = input.ReadInt32();
            break;
          }
          case 32: {
            Ratio = input.ReadInt32();
            break;
          }
          case 40: {
            MaxEffect = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairIdx = input.ReadInt32();
            break;
          }
          case 16: {
            FishUid = input.ReadInt32();
            break;
          }
          case 24: {
            BulletId = input.ReadInt32();
            break;
          }
          case 32: {
            Ratio = input.ReadInt32();
            break;
          }
          case 40: {
            MaxEffect = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RewardInfo : pb::IMessage<RewardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RewardInfo> _parser = new pb::MessageParser<RewardInfo>(() => new RewardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[192]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardInfo(RewardInfo other) : this() {
      propId_ = other.propId_;
      propNum_ = other.propNum_;
      quality_ = other.quality_;
      specShow_ = other.specShow_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardInfo Clone() {
      return new RewardInfo(this);
    }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "prop_num" field.</summary>
    public const int PropNumFieldNumber = 2;
    private int propNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropNum {
      get { return propNum_; }
      set {
        propNum_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 3;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "spec_show" field.</summary>
    public const int SpecShowFieldNumber = 4;
    private bool specShow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpecShow {
      get { return specShow_; }
      set {
        specShow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RewardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RewardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropId != other.PropId) return false;
      if (PropNum != other.PropNum) return false;
      if (Quality != other.Quality) return false;
      if (SpecShow != other.SpecShow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropId != 0) hash ^= PropId.GetHashCode();
      if (PropNum != 0) hash ^= PropNum.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (SpecShow != false) hash ^= SpecShow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (PropNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropNum);
      }
      if (Quality != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Quality);
      }
      if (SpecShow != false) {
        output.WriteRawTag(32);
        output.WriteBool(SpecShow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (PropNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PropNum);
      }
      if (Quality != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Quality);
      }
      if (SpecShow != false) {
        output.WriteRawTag(32);
        output.WriteBool(SpecShow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (PropNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropNum);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (SpecShow != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RewardInfo other) {
      if (other == null) {
        return;
      }
      if (other.PropId != 0) {
        PropId = other.PropId;
      }
      if (other.PropNum != 0) {
        PropNum = other.PropNum;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.SpecShow != false) {
        SpecShow = other.SpecShow;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            PropNum = input.ReadInt32();
            break;
          }
          case 24: {
            Quality = input.ReadInt32();
            break;
          }
          case 32: {
            SpecShow = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            PropNum = input.ReadInt32();
            break;
          }
          case 24: {
            Quality = input.ReadInt32();
            break;
          }
          case 32: {
            SpecShow = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MissionInfo : pb::IMessage<MissionInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MissionInfo> _parser = new pb::MessageParser<MissionInfo>(() => new MissionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[193]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionInfo(MissionInfo other) : this() {
      drawTimes_ = other.drawTimes_;
      rewardList_ = other.rewardList_.Clone();
      complete_ = other.complete_;
      receive_ = other.receive_;
      missionId_ = other.missionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionInfo Clone() {
      return new MissionInfo(this);
    }

    /// <summary>Field number for the "draw_times" field.</summary>
    public const int DrawTimesFieldNumber = 1;
    private int drawTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawTimes {
      get { return drawTimes_; }
      set {
        drawTimes_ = value;
      }
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.RewardInfo> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.RewardInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.RewardInfo> rewardList_ = new pbc::RepeatedField<global::F4BY.RewardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.RewardInfo> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 3;
    private bool complete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    /// <summary>Field number for the "receive" field.</summary>
    public const int ReceiveFieldNumber = 4;
    private bool receive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Receive {
      get { return receive_; }
      set {
        receive_ = value;
      }
    }

    /// <summary>Field number for the "mission_id" field.</summary>
    public const int MissionIdFieldNumber = 5;
    private int missionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DrawTimes != other.DrawTimes) return false;
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (Complete != other.Complete) return false;
      if (Receive != other.Receive) return false;
      if (MissionId != other.MissionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DrawTimes != 0) hash ^= DrawTimes.GetHashCode();
      hash ^= rewardList_.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      if (Receive != false) hash ^= Receive.GetHashCode();
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DrawTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DrawTimes);
      }
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (Complete != false) {
        output.WriteRawTag(24);
        output.WriteBool(Complete);
      }
      if (Receive != false) {
        output.WriteRawTag(32);
        output.WriteBool(Receive);
      }
      if (MissionId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MissionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DrawTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DrawTimes);
      }
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (Complete != false) {
        output.WriteRawTag(24);
        output.WriteBool(Complete);
      }
      if (Receive != false) {
        output.WriteRawTag(32);
        output.WriteBool(Receive);
      }
      if (MissionId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MissionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawTimes);
      }
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (Complete != false) {
        size += 1 + 1;
      }
      if (Receive != false) {
        size += 1 + 1;
      }
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionInfo other) {
      if (other == null) {
        return;
      }
      if (other.DrawTimes != 0) {
        DrawTimes = other.DrawTimes;
      }
      rewardList_.Add(other.rewardList_);
      if (other.Complete != false) {
        Complete = other.Complete;
      }
      if (other.Receive != false) {
        Receive = other.Receive;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DrawTimes = input.ReadInt32();
            break;
          }
          case 18: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 24: {
            Complete = input.ReadBool();
            break;
          }
          case 32: {
            Receive = input.ReadBool();
            break;
          }
          case 40: {
            MissionId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DrawTimes = input.ReadInt32();
            break;
          }
          case 18: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
          case 24: {
            Complete = input.ReadBool();
            break;
          }
          case 32: {
            Receive = input.ReadBool();
            break;
          }
          case 40: {
            MissionId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BigRewardInfo : pb::IMessage<BigRewardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BigRewardInfo> _parser = new pb::MessageParser<BigRewardInfo>(() => new BigRewardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigRewardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[194]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigRewardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigRewardInfo(BigRewardInfo other) : this() {
      bigRewardTimes_ = other.bigRewardTimes_;
      drawRewardList_ = other.drawRewardList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigRewardInfo Clone() {
      return new BigRewardInfo(this);
    }

    /// <summary>Field number for the "big_reward_times" field.</summary>
    public const int BigRewardTimesFieldNumber = 1;
    private int bigRewardTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BigRewardTimes {
      get { return bigRewardTimes_; }
      set {
        bigRewardTimes_ = value;
      }
    }

    /// <summary>Field number for the "draw_rewardList" field.</summary>
    public const int DrawRewardListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.RewardInfo> _repeated_drawRewardList_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.RewardInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.RewardInfo> drawRewardList_ = new pbc::RepeatedField<global::F4BY.RewardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.RewardInfo> DrawRewardList {
      get { return drawRewardList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigRewardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigRewardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BigRewardTimes != other.BigRewardTimes) return false;
      if(!drawRewardList_.Equals(other.drawRewardList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BigRewardTimes != 0) hash ^= BigRewardTimes.GetHashCode();
      hash ^= drawRewardList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BigRewardTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BigRewardTimes);
      }
      drawRewardList_.WriteTo(output, _repeated_drawRewardList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BigRewardTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BigRewardTimes);
      }
      drawRewardList_.WriteTo(ref output, _repeated_drawRewardList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BigRewardTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BigRewardTimes);
      }
      size += drawRewardList_.CalculateSize(_repeated_drawRewardList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigRewardInfo other) {
      if (other == null) {
        return;
      }
      if (other.BigRewardTimes != 0) {
        BigRewardTimes = other.BigRewardTimes;
      }
      drawRewardList_.Add(other.drawRewardList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BigRewardTimes = input.ReadInt32();
            break;
          }
          case 18: {
            drawRewardList_.AddEntriesFrom(input, _repeated_drawRewardList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BigRewardTimes = input.ReadInt32();
            break;
          }
          case 18: {
            drawRewardList_.AddEntriesFrom(ref input, _repeated_drawRewardList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TreasureHuntConfig : pb::IMessage<TreasureHuntConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TreasureHuntConfig> _parser = new pb::MessageParser<TreasureHuntConfig>(() => new TreasureHuntConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreasureHuntConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[195]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreasureHuntConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreasureHuntConfig(TreasureHuntConfig other) : this() {
      term_ = other.term_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      enable_ = other.enable_;
      bigRewardInfo_ = other.bigRewardInfo_ != null ? other.bigRewardInfo_.Clone() : null;
      rewardList_ = other.rewardList_.Clone();
      minDraw_ = other.minDraw_;
      maxDraw_ = other.maxDraw_;
      topic_ = other.topic_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreasureHuntConfig Clone() {
      return new TreasureHuntConfig(this);
    }

    /// <summary>Field number for the "term" field.</summary>
    public const int TermFieldNumber = 1;
    private int term_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Term {
      get { return term_; }
      set {
        term_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 2;
    private int startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private int endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 4;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "big_reward_info" field.</summary>
    public const int BigRewardInfoFieldNumber = 5;
    private global::F4BY.BigRewardInfo bigRewardInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.BigRewardInfo BigRewardInfo {
      get { return bigRewardInfo_; }
      set {
        bigRewardInfo_ = value;
      }
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::F4BY.RewardInfo> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(50, global::F4BY.RewardInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.RewardInfo> rewardList_ = new pbc::RepeatedField<global::F4BY.RewardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.RewardInfo> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "min_draw" field.</summary>
    public const int MinDrawFieldNumber = 7;
    private int minDraw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinDraw {
      get { return minDraw_; }
      set {
        minDraw_ = value;
      }
    }

    /// <summary>Field number for the "max_draw" field.</summary>
    public const int MaxDrawFieldNumber = 8;
    private int maxDraw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDraw {
      get { return maxDraw_; }
      set {
        maxDraw_ = value;
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 9;
    private int topic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TreasureHuntConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TreasureHuntConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Term != other.Term) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Enable != other.Enable) return false;
      if (!object.Equals(BigRewardInfo, other.BigRewardInfo)) return false;
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (MinDraw != other.MinDraw) return false;
      if (MaxDraw != other.MaxDraw) return false;
      if (Topic != other.Topic) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Term != 0) hash ^= Term.GetHashCode();
      if (StartTime != 0) hash ^= StartTime.GetHashCode();
      if (EndTime != 0) hash ^= EndTime.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (bigRewardInfo_ != null) hash ^= BigRewardInfo.GetHashCode();
      hash ^= rewardList_.GetHashCode();
      if (MinDraw != 0) hash ^= MinDraw.GetHashCode();
      if (MaxDraw != 0) hash ^= MaxDraw.GetHashCode();
      if (Topic != 0) hash ^= Topic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Term != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Term);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndTime);
      }
      if (Enable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Enable);
      }
      if (bigRewardInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BigRewardInfo);
      }
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (MinDraw != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MinDraw);
      }
      if (MaxDraw != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaxDraw);
      }
      if (Topic != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Topic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Term != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Term);
      }
      if (StartTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartTime);
      }
      if (EndTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndTime);
      }
      if (Enable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Enable);
      }
      if (bigRewardInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BigRewardInfo);
      }
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (MinDraw != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MinDraw);
      }
      if (MaxDraw != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaxDraw);
      }
      if (Topic != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Topic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Term != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Term);
      }
      if (StartTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTime);
      }
      if (EndTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndTime);
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (bigRewardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BigRewardInfo);
      }
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (MinDraw != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinDraw);
      }
      if (MaxDraw != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDraw);
      }
      if (Topic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Topic);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TreasureHuntConfig other) {
      if (other == null) {
        return;
      }
      if (other.Term != 0) {
        Term = other.Term;
      }
      if (other.StartTime != 0) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0) {
        EndTime = other.EndTime;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.bigRewardInfo_ != null) {
        if (bigRewardInfo_ == null) {
          BigRewardInfo = new global::F4BY.BigRewardInfo();
        }
        BigRewardInfo.MergeFrom(other.BigRewardInfo);
      }
      rewardList_.Add(other.rewardList_);
      if (other.MinDraw != 0) {
        MinDraw = other.MinDraw;
      }
      if (other.MaxDraw != 0) {
        MaxDraw = other.MaxDraw;
      }
      if (other.Topic != 0) {
        Topic = other.Topic;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Term = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadInt32();
            break;
          }
          case 32: {
            Enable = input.ReadBool();
            break;
          }
          case 42: {
            if (bigRewardInfo_ == null) {
              BigRewardInfo = new global::F4BY.BigRewardInfo();
            }
            input.ReadMessage(BigRewardInfo);
            break;
          }
          case 50: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 56: {
            MinDraw = input.ReadInt32();
            break;
          }
          case 64: {
            MaxDraw = input.ReadInt32();
            break;
          }
          case 72: {
            Topic = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Term = input.ReadInt32();
            break;
          }
          case 16: {
            StartTime = input.ReadInt32();
            break;
          }
          case 24: {
            EndTime = input.ReadInt32();
            break;
          }
          case 32: {
            Enable = input.ReadBool();
            break;
          }
          case 42: {
            if (bigRewardInfo_ == null) {
              BigRewardInfo = new global::F4BY.BigRewardInfo();
            }
            input.ReadMessage(BigRewardInfo);
            break;
          }
          case 50: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
          case 56: {
            MinDraw = input.ReadInt32();
            break;
          }
          case 64: {
            MaxDraw = input.ReadInt32();
            break;
          }
          case 72: {
            Topic = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSyncConfigs : pb::IMessage<CSSyncConfigs>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSyncConfigs> _parser = new pb::MessageParser<CSSyncConfigs>(() => new CSSyncConfigs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSyncConfigs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[196]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncConfigs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncConfigs(CSSyncConfigs other) : this() {
      configType_ = other.configType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSyncConfigs Clone() {
      return new CSSyncConfigs(this);
    }

    /// <summary>Field number for the "config_type" field.</summary>
    public const int ConfigTypeFieldNumber = 1;
    private int configType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigType {
      get { return configType_; }
      set {
        configType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSyncConfigs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSyncConfigs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigType != other.ConfigType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfigType != 0) hash ^= ConfigType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ConfigType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ConfigType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConfigType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfigType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSyncConfigs other) {
      if (other == null) {
        return;
      }
      if (other.ConfigType != 0) {
        ConfigType = other.ConfigType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConfigType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ConfigType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCSyncConfigs : pb::IMessage<SCSyncConfigs>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCSyncConfigs> _parser = new pb::MessageParser<SCSyncConfigs>(() => new SCSyncConfigs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSyncConfigs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[197]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncConfigs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncConfigs(SCSyncConfigs other) : this() {
      treasureConfig_ = other.treasureConfig_ != null ? other.treasureConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSyncConfigs Clone() {
      return new SCSyncConfigs(this);
    }

    /// <summary>Field number for the "treasure_config" field.</summary>
    public const int TreasureConfigFieldNumber = 1;
    private global::F4BY.TreasureHuntConfig treasureConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.TreasureHuntConfig TreasureConfig {
      get { return treasureConfig_; }
      set {
        treasureConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSyncConfigs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSyncConfigs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TreasureConfig, other.TreasureConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (treasureConfig_ != null) hash ^= TreasureConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (treasureConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TreasureConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (treasureConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TreasureConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (treasureConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TreasureConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSyncConfigs other) {
      if (other == null) {
        return;
      }
      if (other.treasureConfig_ != null) {
        if (treasureConfig_ == null) {
          TreasureConfig = new global::F4BY.TreasureHuntConfig();
        }
        TreasureConfig.MergeFrom(other.TreasureConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (treasureConfig_ == null) {
              TreasureConfig = new global::F4BY.TreasureHuntConfig();
            }
            input.ReadMessage(TreasureConfig);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (treasureConfig_ == null) {
              TreasureConfig = new global::F4BY.TreasureHuntConfig();
            }
            input.ReadMessage(TreasureConfig);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSDrawReward : pb::IMessage<CSDrawReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSDrawReward> _parser = new pb::MessageParser<CSDrawReward>(() => new CSDrawReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDrawReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[198]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrawReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrawReward(CSDrawReward other) : this() {
      num_ = other.num_;
      drawType_ = other.drawType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrawReward Clone() {
      return new CSDrawReward(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "draw_type" field.</summary>
    public const int DrawTypeFieldNumber = 2;
    private int drawType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawType {
      get { return drawType_; }
      set {
        drawType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSDrawReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSDrawReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      if (DrawType != other.DrawType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      if (DrawType != 0) hash ^= DrawType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (DrawType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DrawType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (DrawType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DrawType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (DrawType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSDrawReward other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.DrawType != 0) {
        DrawType = other.DrawType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 16: {
            DrawType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 16: {
            DrawType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCDrawReward : pb::IMessage<SCDrawReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCDrawReward> _parser = new pb::MessageParser<SCDrawReward>(() => new SCDrawReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCDrawReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[199]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrawReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrawReward(SCDrawReward other) : this() {
      rewardList_ = other.rewardList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrawReward Clone() {
      return new SCDrawReward(this);
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.RewardInfo> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.RewardInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.RewardInfo> rewardList_ = new pbc::RepeatedField<global::F4BY.RewardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.RewardInfo> RewardList {
      get { return rewardList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCDrawReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCDrawReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewardList_.Equals(other.rewardList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewardList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCDrawReward other) {
      if (other == null) {
        return;
      }
      rewardList_.Add(other.rewardList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSTreasureHuntMission : pb::IMessage<CSTreasureHuntMission>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSTreasureHuntMission> _parser = new pb::MessageParser<CSTreasureHuntMission>(() => new CSTreasureHuntMission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTreasureHuntMission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[200]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTreasureHuntMission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTreasureHuntMission(CSTreasureHuntMission other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTreasureHuntMission Clone() {
      return new CSTreasureHuntMission(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSTreasureHuntMission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSTreasureHuntMission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSTreasureHuntMission other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCTreasureHuntMission : pb::IMessage<SCTreasureHuntMission>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTreasureHuntMission> _parser = new pb::MessageParser<SCTreasureHuntMission>(() => new SCTreasureHuntMission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTreasureHuntMission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[201]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureHuntMission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureHuntMission(SCTreasureHuntMission other) : this() {
      missionList_ = other.missionList_.Clone();
      drawTimes_ = other.drawTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureHuntMission Clone() {
      return new SCTreasureHuntMission(this);
    }

    /// <summary>Field number for the "mission_list" field.</summary>
    public const int MissionListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.MissionInfo> _repeated_missionList_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.MissionInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.MissionInfo> missionList_ = new pbc::RepeatedField<global::F4BY.MissionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.MissionInfo> MissionList {
      get { return missionList_; }
    }

    /// <summary>Field number for the "draw_times" field.</summary>
    public const int DrawTimesFieldNumber = 2;
    private int drawTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawTimes {
      get { return drawTimes_; }
      set {
        drawTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTreasureHuntMission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTreasureHuntMission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!missionList_.Equals(other.missionList_)) return false;
      if (DrawTimes != other.DrawTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= missionList_.GetHashCode();
      if (DrawTimes != 0) hash ^= DrawTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      missionList_.WriteTo(output, _repeated_missionList_codec);
      if (DrawTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DrawTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      missionList_.WriteTo(ref output, _repeated_missionList_codec);
      if (DrawTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DrawTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += missionList_.CalculateSize(_repeated_missionList_codec);
      if (DrawTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTreasureHuntMission other) {
      if (other == null) {
        return;
      }
      missionList_.Add(other.missionList_);
      if (other.DrawTimes != 0) {
        DrawTimes = other.DrawTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            missionList_.AddEntriesFrom(input, _repeated_missionList_codec);
            break;
          }
          case 16: {
            DrawTimes = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            missionList_.AddEntriesFrom(ref input, _repeated_missionList_codec);
            break;
          }
          case 16: {
            DrawTimes = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSReceiveMissionReward : pb::IMessage<CSReceiveMissionReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSReceiveMissionReward> _parser = new pb::MessageParser<CSReceiveMissionReward>(() => new CSReceiveMissionReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSReceiveMissionReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[202]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReceiveMissionReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReceiveMissionReward(CSReceiveMissionReward other) : this() {
      missionId_ = other.missionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSReceiveMissionReward Clone() {
      return new CSReceiveMissionReward(this);
    }

    /// <summary>Field number for the "mission_id" field.</summary>
    public const int MissionIdFieldNumber = 1;
    private int missionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSReceiveMissionReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSReceiveMissionReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissionId != other.MissionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MissionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MissionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MissionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MissionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSReceiveMissionReward other) {
      if (other == null) {
        return;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MissionId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MissionId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCReceiveMissionReward : pb::IMessage<SCReceiveMissionReward>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCReceiveMissionReward> _parser = new pb::MessageParser<SCReceiveMissionReward>(() => new SCReceiveMissionReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCReceiveMissionReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[203]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReceiveMissionReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReceiveMissionReward(SCReceiveMissionReward other) : this() {
      rewardList_ = other.rewardList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCReceiveMissionReward Clone() {
      return new SCReceiveMissionReward(this);
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.RewardInfo> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.RewardInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.RewardInfo> rewardList_ = new pbc::RepeatedField<global::F4BY.RewardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.RewardInfo> RewardList {
      get { return rewardList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCReceiveMissionReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCReceiveMissionReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewardList_.Equals(other.rewardList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewardList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCReceiveMissionReward other) {
      if (other == null) {
        return;
      }
      rewardList_.Add(other.rewardList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSDrawTimes : pb::IMessage<CSDrawTimes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSDrawTimes> _parser = new pb::MessageParser<CSDrawTimes>(() => new CSDrawTimes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDrawTimes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[204]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrawTimes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrawTimes(CSDrawTimes other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDrawTimes Clone() {
      return new CSDrawTimes(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSDrawTimes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSDrawTimes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSDrawTimes other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCDrawTimes : pb::IMessage<SCDrawTimes>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCDrawTimes> _parser = new pb::MessageParser<SCDrawTimes>(() => new SCDrawTimes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCDrawTimes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[205]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrawTimes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrawTimes(SCDrawTimes other) : this() {
      totalDrawTimes_ = other.totalDrawTimes_;
      bigRewardProcess_ = other.bigRewardProcess_;
      freeDrawTimes_ = other.freeDrawTimes_;
      drawTickersNum_ = other.drawTickersNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDrawTimes Clone() {
      return new SCDrawTimes(this);
    }

    /// <summary>Field number for the "total_draw_times" field.</summary>
    public const int TotalDrawTimesFieldNumber = 1;
    private int totalDrawTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalDrawTimes {
      get { return totalDrawTimes_; }
      set {
        totalDrawTimes_ = value;
      }
    }

    /// <summary>Field number for the "big_reward_process" field.</summary>
    public const int BigRewardProcessFieldNumber = 2;
    private int bigRewardProcess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BigRewardProcess {
      get { return bigRewardProcess_; }
      set {
        bigRewardProcess_ = value;
      }
    }

    /// <summary>Field number for the "free_draw_times" field.</summary>
    public const int FreeDrawTimesFieldNumber = 3;
    private int freeDrawTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeDrawTimes {
      get { return freeDrawTimes_; }
      set {
        freeDrawTimes_ = value;
      }
    }

    /// <summary>Field number for the "draw_tickers_num" field.</summary>
    public const int DrawTickersNumFieldNumber = 4;
    private int drawTickersNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawTickersNum {
      get { return drawTickersNum_; }
      set {
        drawTickersNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCDrawTimes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCDrawTimes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalDrawTimes != other.TotalDrawTimes) return false;
      if (BigRewardProcess != other.BigRewardProcess) return false;
      if (FreeDrawTimes != other.FreeDrawTimes) return false;
      if (DrawTickersNum != other.DrawTickersNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalDrawTimes != 0) hash ^= TotalDrawTimes.GetHashCode();
      if (BigRewardProcess != 0) hash ^= BigRewardProcess.GetHashCode();
      if (FreeDrawTimes != 0) hash ^= FreeDrawTimes.GetHashCode();
      if (DrawTickersNum != 0) hash ^= DrawTickersNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalDrawTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalDrawTimes);
      }
      if (BigRewardProcess != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BigRewardProcess);
      }
      if (FreeDrawTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FreeDrawTimes);
      }
      if (DrawTickersNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DrawTickersNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalDrawTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalDrawTimes);
      }
      if (BigRewardProcess != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BigRewardProcess);
      }
      if (FreeDrawTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FreeDrawTimes);
      }
      if (DrawTickersNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DrawTickersNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalDrawTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalDrawTimes);
      }
      if (BigRewardProcess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BigRewardProcess);
      }
      if (FreeDrawTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeDrawTimes);
      }
      if (DrawTickersNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawTickersNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCDrawTimes other) {
      if (other == null) {
        return;
      }
      if (other.TotalDrawTimes != 0) {
        TotalDrawTimes = other.TotalDrawTimes;
      }
      if (other.BigRewardProcess != 0) {
        BigRewardProcess = other.BigRewardProcess;
      }
      if (other.FreeDrawTimes != 0) {
        FreeDrawTimes = other.FreeDrawTimes;
      }
      if (other.DrawTickersNum != 0) {
        DrawTickersNum = other.DrawTickersNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalDrawTimes = input.ReadInt32();
            break;
          }
          case 16: {
            BigRewardProcess = input.ReadInt32();
            break;
          }
          case 24: {
            FreeDrawTimes = input.ReadInt32();
            break;
          }
          case 32: {
            DrawTickersNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalDrawTimes = input.ReadInt32();
            break;
          }
          case 16: {
            BigRewardProcess = input.ReadInt32();
            break;
          }
          case 24: {
            FreeDrawTimes = input.ReadInt32();
            break;
          }
          case 32: {
            DrawTickersNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSVerifyActivity : pb::IMessage<CSVerifyActivity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSVerifyActivity> _parser = new pb::MessageParser<CSVerifyActivity>(() => new CSVerifyActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVerifyActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[206]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVerifyActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVerifyActivity(CSVerifyActivity other) : this() {
      activityId_ = other.activityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVerifyActivity Clone() {
      return new CSVerifyActivity(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVerifyActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVerifyActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVerifyActivity other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCVerifyActivity : pb::IMessage<SCVerifyActivity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCVerifyActivity> _parser = new pb::MessageParser<SCVerifyActivity>(() => new SCVerifyActivity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCVerifyActivity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[207]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVerifyActivity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVerifyActivity(SCVerifyActivity other) : this() {
      open_ = other.open_;
      activityId_ = other.activityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVerifyActivity Clone() {
      return new SCVerifyActivity(this);
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private bool open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCVerifyActivity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCVerifyActivity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Open != other.Open) return false;
      if (ActivityId != other.ActivityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Open != false) hash ^= Open.GetHashCode();
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActivityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Open != false) {
        output.WriteRawTag(8);
        output.WriteBool(Open);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActivityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Open != false) {
        size += 1 + 1;
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCVerifyActivity other) {
      if (other == null) {
        return;
      }
      if (other.Open != false) {
        Open = other.Open;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
          case 16: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Open = input.ReadBool();
            break;
          }
          case 16: {
            ActivityId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Package : pb::IMessage<Package>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Package> _parser = new pb::MessageParser<Package>(() => new Package());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Package> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[208]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package(Package other) : this() {
      packageId_ = other.packageId_;
      limit_ = other.limit_;
      consumePrice_ = other.consumePrice_;
      limitType_ = other.limitType_;
      consumeProps_ = other.consumeProps_;
      purchaseTimes_ = other.purchaseTimes_;
      rewardList_ = other.rewardList_.Clone();
      lock_ = other.lock_;
      vipLimit_ = other.vipLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Package Clone() {
      return new Package(this);
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 1;
    private int packageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageId {
      get { return packageId_; }
      set {
        packageId_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "consume_price" field.</summary>
    public const int ConsumePriceFieldNumber = 3;
    private int consumePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConsumePrice {
      get { return consumePrice_; }
      set {
        consumePrice_ = value;
      }
    }

    /// <summary>Field number for the "limit_type" field.</summary>
    public const int LimitTypeFieldNumber = 4;
    private int limitType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LimitType {
      get { return limitType_; }
      set {
        limitType_ = value;
      }
    }

    /// <summary>Field number for the "consume_props" field.</summary>
    public const int ConsumePropsFieldNumber = 5;
    private int consumeProps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConsumeProps {
      get { return consumeProps_; }
      set {
        consumeProps_ = value;
      }
    }

    /// <summary>Field number for the "purchase_times" field.</summary>
    public const int PurchaseTimesFieldNumber = 6;
    private int purchaseTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PurchaseTimes {
      get { return purchaseTimes_; }
      set {
        purchaseTimes_ = value;
      }
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::F4BY.RewardInfo> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(58, global::F4BY.RewardInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.RewardInfo> rewardList_ = new pbc::RepeatedField<global::F4BY.RewardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.RewardInfo> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "lock" field.</summary>
    public const int LockFieldNumber = 8;
    private bool lock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Lock {
      get { return lock_; }
      set {
        lock_ = value;
      }
    }

    /// <summary>Field number for the "vip_limit" field.</summary>
    public const int VipLimitFieldNumber = 9;
    private int vipLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLimit {
      get { return vipLimit_; }
      set {
        vipLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Package);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Package other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageId != other.PackageId) return false;
      if (Limit != other.Limit) return false;
      if (ConsumePrice != other.ConsumePrice) return false;
      if (LimitType != other.LimitType) return false;
      if (ConsumeProps != other.ConsumeProps) return false;
      if (PurchaseTimes != other.PurchaseTimes) return false;
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (Lock != other.Lock) return false;
      if (VipLimit != other.VipLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageId != 0) hash ^= PackageId.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (ConsumePrice != 0) hash ^= ConsumePrice.GetHashCode();
      if (LimitType != 0) hash ^= LimitType.GetHashCode();
      if (ConsumeProps != 0) hash ^= ConsumeProps.GetHashCode();
      if (PurchaseTimes != 0) hash ^= PurchaseTimes.GetHashCode();
      hash ^= rewardList_.GetHashCode();
      if (Lock != false) hash ^= Lock.GetHashCode();
      if (VipLimit != 0) hash ^= VipLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PackageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageId);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (ConsumePrice != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ConsumePrice);
      }
      if (LimitType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LimitType);
      }
      if (ConsumeProps != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ConsumeProps);
      }
      if (PurchaseTimes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PurchaseTimes);
      }
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (Lock != false) {
        output.WriteRawTag(64);
        output.WriteBool(Lock);
      }
      if (VipLimit != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(VipLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PackageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageId);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (ConsumePrice != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ConsumePrice);
      }
      if (LimitType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LimitType);
      }
      if (ConsumeProps != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ConsumeProps);
      }
      if (PurchaseTimes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PurchaseTimes);
      }
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (Lock != false) {
        output.WriteRawTag(64);
        output.WriteBool(Lock);
      }
      if (VipLimit != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(VipLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageId);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (ConsumePrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsumePrice);
      }
      if (LimitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitType);
      }
      if (ConsumeProps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsumeProps);
      }
      if (PurchaseTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PurchaseTimes);
      }
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (Lock != false) {
        size += 1 + 1;
      }
      if (VipLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Package other) {
      if (other == null) {
        return;
      }
      if (other.PackageId != 0) {
        PackageId = other.PackageId;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.ConsumePrice != 0) {
        ConsumePrice = other.ConsumePrice;
      }
      if (other.LimitType != 0) {
        LimitType = other.LimitType;
      }
      if (other.ConsumeProps != 0) {
        ConsumeProps = other.ConsumeProps;
      }
      if (other.PurchaseTimes != 0) {
        PurchaseTimes = other.PurchaseTimes;
      }
      rewardList_.Add(other.rewardList_);
      if (other.Lock != false) {
        Lock = other.Lock;
      }
      if (other.VipLimit != 0) {
        VipLimit = other.VipLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PackageId = input.ReadInt32();
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
          case 24: {
            ConsumePrice = input.ReadInt32();
            break;
          }
          case 32: {
            LimitType = input.ReadInt32();
            break;
          }
          case 40: {
            ConsumeProps = input.ReadInt32();
            break;
          }
          case 48: {
            PurchaseTimes = input.ReadInt32();
            break;
          }
          case 58: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 64: {
            Lock = input.ReadBool();
            break;
          }
          case 72: {
            VipLimit = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PackageId = input.ReadInt32();
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
          case 24: {
            ConsumePrice = input.ReadInt32();
            break;
          }
          case 32: {
            LimitType = input.ReadInt32();
            break;
          }
          case 40: {
            ConsumeProps = input.ReadInt32();
            break;
          }
          case 48: {
            PurchaseTimes = input.ReadInt32();
            break;
          }
          case 58: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
          case 64: {
            Lock = input.ReadBool();
            break;
          }
          case 72: {
            VipLimit = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSTreasureHuntPackage : pb::IMessage<CSTreasureHuntPackage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSTreasureHuntPackage> _parser = new pb::MessageParser<CSTreasureHuntPackage>(() => new CSTreasureHuntPackage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTreasureHuntPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[209]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTreasureHuntPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTreasureHuntPackage(CSTreasureHuntPackage other) : this() {
      packageType_ = other.packageType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSTreasureHuntPackage Clone() {
      return new CSTreasureHuntPackage(this);
    }

    /// <summary>Field number for the "package_type" field.</summary>
    public const int PackageTypeFieldNumber = 1;
    private int packageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageType {
      get { return packageType_; }
      set {
        packageType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSTreasureHuntPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSTreasureHuntPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageType != other.PackageType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageType != 0) hash ^= PackageType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PackageType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PackageType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSTreasureHuntPackage other) {
      if (other == null) {
        return;
      }
      if (other.PackageType != 0) {
        PackageType = other.PackageType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PackageType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PackageType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCTreasureHuntPackage : pb::IMessage<SCTreasureHuntPackage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCTreasureHuntPackage> _parser = new pb::MessageParser<SCTreasureHuntPackage>(() => new SCTreasureHuntPackage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCTreasureHuntPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[210]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureHuntPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureHuntPackage(SCTreasureHuntPackage other) : this() {
      packageList_ = other.packageList_.Clone();
      packageType_ = other.packageType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCTreasureHuntPackage Clone() {
      return new SCTreasureHuntPackage(this);
    }

    /// <summary>Field number for the "package_list" field.</summary>
    public const int PackageListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.Package> _repeated_packageList_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.Package.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Package> packageList_ = new pbc::RepeatedField<global::F4BY.Package>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Package> PackageList {
      get { return packageList_; }
    }

    /// <summary>Field number for the "package_type" field.</summary>
    public const int PackageTypeFieldNumber = 2;
    private int packageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageType {
      get { return packageType_; }
      set {
        packageType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCTreasureHuntPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCTreasureHuntPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!packageList_.Equals(other.packageList_)) return false;
      if (PackageType != other.PackageType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= packageList_.GetHashCode();
      if (PackageType != 0) hash ^= PackageType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      packageList_.WriteTo(output, _repeated_packageList_codec);
      if (PackageType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PackageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      packageList_.WriteTo(ref output, _repeated_packageList_codec);
      if (PackageType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PackageType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += packageList_.CalculateSize(_repeated_packageList_codec);
      if (PackageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCTreasureHuntPackage other) {
      if (other == null) {
        return;
      }
      packageList_.Add(other.packageList_);
      if (other.PackageType != 0) {
        PackageType = other.PackageType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            packageList_.AddEntriesFrom(input, _repeated_packageList_codec);
            break;
          }
          case 16: {
            PackageType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            packageList_.AddEntriesFrom(ref input, _repeated_packageList_codec);
            break;
          }
          case 16: {
            PackageType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ExchangeShopInfo : pb::IMessage<ExchangeShopInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExchangeShopInfo> _parser = new pb::MessageParser<ExchangeShopInfo>(() => new ExchangeShopInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeShopInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[211]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeShopInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeShopInfo(ExchangeShopInfo other) : this() {
      level_ = other.level_;
      packageList_ = other.packageList_.Clone();
      unlock_ = other.unlock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeShopInfo Clone() {
      return new ExchangeShopInfo(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "package_list" field.</summary>
    public const int PackageListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.Package> _repeated_packageList_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.Package.Parser);
    private readonly pbc::RepeatedField<global::F4BY.Package> packageList_ = new pbc::RepeatedField<global::F4BY.Package>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.Package> PackageList {
      get { return packageList_; }
    }

    /// <summary>Field number for the "unlock" field.</summary>
    public const int UnlockFieldNumber = 3;
    private bool unlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unlock {
      get { return unlock_; }
      set {
        unlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeShopInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeShopInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if(!packageList_.Equals(other.packageList_)) return false;
      if (Unlock != other.Unlock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= packageList_.GetHashCode();
      if (Unlock != false) hash ^= Unlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      packageList_.WriteTo(output, _repeated_packageList_codec);
      if (Unlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(Unlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      packageList_.WriteTo(ref output, _repeated_packageList_codec);
      if (Unlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(Unlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += packageList_.CalculateSize(_repeated_packageList_codec);
      if (Unlock != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeShopInfo other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      packageList_.Add(other.packageList_);
      if (other.Unlock != false) {
        Unlock = other.Unlock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 18: {
            packageList_.AddEntriesFrom(input, _repeated_packageList_codec);
            break;
          }
          case 24: {
            Unlock = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 18: {
            packageList_.AddEntriesFrom(ref input, _repeated_packageList_codec);
            break;
          }
          case 24: {
            Unlock = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSExchangeShop : pb::IMessage<CSExchangeShop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSExchangeShop> _parser = new pb::MessageParser<CSExchangeShop>(() => new CSExchangeShop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExchangeShop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[212]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExchangeShop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExchangeShop(CSExchangeShop other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSExchangeShop Clone() {
      return new CSExchangeShop(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSExchangeShop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSExchangeShop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSExchangeShop other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCExchangeShop : pb::IMessage<SCExchangeShop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCExchangeShop> _parser = new pb::MessageParser<SCExchangeShop>(() => new SCExchangeShop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCExchangeShop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[213]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExchangeShop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExchangeShop(SCExchangeShop other) : this() {
      exchangeShopList_ = other.exchangeShopList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCExchangeShop Clone() {
      return new SCExchangeShop(this);
    }

    /// <summary>Field number for the "exchangeShopList" field.</summary>
    public const int ExchangeShopListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::F4BY.ExchangeShopInfo> _repeated_exchangeShopList_codec
        = pb::FieldCodec.ForMessage(10, global::F4BY.ExchangeShopInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.ExchangeShopInfo> exchangeShopList_ = new pbc::RepeatedField<global::F4BY.ExchangeShopInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.ExchangeShopInfo> ExchangeShopList {
      get { return exchangeShopList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCExchangeShop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCExchangeShop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!exchangeShopList_.Equals(other.exchangeShopList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= exchangeShopList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      exchangeShopList_.WriteTo(output, _repeated_exchangeShopList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      exchangeShopList_.WriteTo(ref output, _repeated_exchangeShopList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += exchangeShopList_.CalculateSize(_repeated_exchangeShopList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCExchangeShop other) {
      if (other == null) {
        return;
      }
      exchangeShopList_.Add(other.exchangeShopList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            exchangeShopList_.AddEntriesFrom(input, _repeated_exchangeShopList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            exchangeShopList_.AddEntriesFrom(ref input, _repeated_exchangeShopList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSPurchasePackage : pb::IMessage<CSPurchasePackage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSPurchasePackage> _parser = new pb::MessageParser<CSPurchasePackage>(() => new CSPurchasePackage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPurchasePackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[214]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPurchasePackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPurchasePackage(CSPurchasePackage other) : this() {
      packageId_ = other.packageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSPurchasePackage Clone() {
      return new CSPurchasePackage(this);
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 1;
    private int packageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageId {
      get { return packageId_; }
      set {
        packageId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSPurchasePackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSPurchasePackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackageId != other.PackageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackageId != 0) hash ^= PackageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PackageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PackageId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PackageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSPurchasePackage other) {
      if (other == null) {
        return;
      }
      if (other.PackageId != 0) {
        PackageId = other.PackageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PackageId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PackageId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCPurchasePackage : pb::IMessage<SCPurchasePackage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCPurchasePackage> _parser = new pb::MessageParser<SCPurchasePackage>(() => new SCPurchasePackage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCPurchasePackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[215]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPurchasePackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPurchasePackage(SCPurchasePackage other) : this() {
      package_ = other.package_ != null ? other.package_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCPurchasePackage Clone() {
      return new SCPurchasePackage(this);
    }

    /// <summary>Field number for the "package" field.</summary>
    public const int PackageFieldNumber = 1;
    private global::F4BY.Package package_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::F4BY.Package Package {
      get { return package_; }
      set {
        package_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCPurchasePackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCPurchasePackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Package, other.Package)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (package_ != null) hash ^= Package.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (package_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Package);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (package_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Package);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (package_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCPurchasePackage other) {
      if (other == null) {
        return;
      }
      if (other.package_ != null) {
        if (package_ == null) {
          Package = new global::F4BY.Package();
        }
        Package.MergeFrom(other.Package);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (package_ == null) {
              Package = new global::F4BY.Package();
            }
            input.ReadMessage(Package);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (package_ == null) {
              Package = new global::F4BY.Package();
            }
            input.ReadMessage(Package);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSVerifyTermChange : pb::IMessage<CSVerifyTermChange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSVerifyTermChange> _parser = new pb::MessageParser<CSVerifyTermChange>(() => new CSVerifyTermChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVerifyTermChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[216]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVerifyTermChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVerifyTermChange(CSVerifyTermChange other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSVerifyTermChange Clone() {
      return new CSVerifyTermChange(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSVerifyTermChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSVerifyTermChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSVerifyTermChange other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class SCVerifyTermChange : pb::IMessage<SCVerifyTermChange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCVerifyTermChange> _parser = new pb::MessageParser<SCVerifyTermChange>(() => new SCVerifyTermChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCVerifyTermChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[217]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVerifyTermChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVerifyTermChange(SCVerifyTermChange other) : this() {
      change_ = other.change_;
      rewardList_ = other.rewardList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCVerifyTermChange Clone() {
      return new SCVerifyTermChange(this);
    }

    /// <summary>Field number for the "change" field.</summary>
    public const int ChangeFieldNumber = 1;
    private bool change_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Change {
      get { return change_; }
      set {
        change_ = value;
      }
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::F4BY.RewardInfo> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(18, global::F4BY.RewardInfo.Parser);
    private readonly pbc::RepeatedField<global::F4BY.RewardInfo> rewardList_ = new pbc::RepeatedField<global::F4BY.RewardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::F4BY.RewardInfo> RewardList {
      get { return rewardList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCVerifyTermChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCVerifyTermChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Change != other.Change) return false;
      if(!rewardList_.Equals(other.rewardList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Change != false) hash ^= Change.GetHashCode();
      hash ^= rewardList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Change != false) {
        output.WriteRawTag(8);
        output.WriteBool(Change);
      }
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Change != false) {
        output.WriteRawTag(8);
        output.WriteBool(Change);
      }
      rewardList_.WriteTo(ref output, _repeated_rewardList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Change != false) {
        size += 1 + 1;
      }
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCVerifyTermChange other) {
      if (other == null) {
        return;
      }
      if (other.Change != false) {
        Change = other.Change;
      }
      rewardList_.Add(other.rewardList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Change = input.ReadBool();
            break;
          }
          case 18: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Change = input.ReadBool();
            break;
          }
          case 18: {
            rewardList_.AddEntriesFrom(ref input, _repeated_rewardList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCWaterDropInfo : pb::IMessage<SCWaterDropInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCWaterDropInfo> _parser = new pb::MessageParser<SCWaterDropInfo>(() => new SCWaterDropInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCWaterDropInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[218]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWaterDropInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWaterDropInfo(SCWaterDropInfo other) : this() {
      enable_ = other.enable_;
      dropCount_ = other.dropCount_;
      fragmentCount_ = other.fragmentCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCWaterDropInfo Clone() {
      return new SCWaterDropInfo(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "drop_count" field.</summary>
    public const int DropCountFieldNumber = 2;
    private int dropCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropCount {
      get { return dropCount_; }
      set {
        dropCount_ = value;
      }
    }

    /// <summary>Field number for the "fragment_count" field.</summary>
    public const int FragmentCountFieldNumber = 3;
    private int fragmentCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FragmentCount {
      get { return fragmentCount_; }
      set {
        fragmentCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCWaterDropInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCWaterDropInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      if (DropCount != other.DropCount) return false;
      if (FragmentCount != other.FragmentCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (DropCount != 0) hash ^= DropCount.GetHashCode();
      if (FragmentCount != 0) hash ^= FragmentCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (DropCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DropCount);
      }
      if (FragmentCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FragmentCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (DropCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DropCount);
      }
      if (FragmentCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FragmentCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (DropCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DropCount);
      }
      if (FragmentCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FragmentCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCWaterDropInfo other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.DropCount != 0) {
        DropCount = other.DropCount;
      }
      if (other.FragmentCount != 0) {
        FragmentCount = other.FragmentCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 16: {
            DropCount = input.ReadInt32();
            break;
          }
          case 24: {
            FragmentCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 16: {
            DropCount = input.ReadInt32();
            break;
          }
          case 24: {
            FragmentCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSBuyGun : pb::IMessage<CSBuyGun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSBuyGun> _parser = new pb::MessageParser<CSBuyGun>(() => new CSBuyGun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBuyGun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[219]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyGun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyGun(CSBuyGun other) : this() {
      gunLevel_ = other.gunLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyGun Clone() {
      return new CSBuyGun(this);
    }

    /// <summary>Field number for the "gun_level" field.</summary>
    public const int GunLevelFieldNumber = 1;
    private int gunLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunLevel {
      get { return gunLevel_; }
      set {
        gunLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBuyGun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBuyGun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GunLevel != other.GunLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GunLevel != 0) hash ^= GunLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GunLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GunLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GunLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBuyGun other) {
      if (other == null) {
        return;
      }
      if (other.GunLevel != 0) {
        GunLevel = other.GunLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GunLevel = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GunLevel = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCBuyGun : pb::IMessage<SCBuyGun>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCBuyGun> _parser = new pb::MessageParser<SCBuyGun>(() => new SCBuyGun());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCBuyGun> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[220]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyGun() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyGun(SCBuyGun other) : this() {
      gunLevel_ = other.gunLevel_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyGun Clone() {
      return new SCBuyGun(this);
    }

    /// <summary>Field number for the "gun_level" field.</summary>
    public const int GunLevelFieldNumber = 1;
    private int gunLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GunLevel {
      get { return gunLevel_; }
      set {
        gunLevel_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCBuyGun);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCBuyGun other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GunLevel != other.GunLevel) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GunLevel != 0) hash ^= GunLevel.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GunLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunLevel);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GunLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GunLevel);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GunLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GunLevel);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCBuyGun other) {
      if (other == null) {
        return;
      }
      if (other.GunLevel != 0) {
        GunLevel = other.GunLevel;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GunLevel = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSBuyWings : pb::IMessage<CSBuyWings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSBuyWings> _parser = new pb::MessageParser<CSBuyWings>(() => new CSBuyWings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBuyWings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[221]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyWings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyWings(CSBuyWings other) : this() {
      wingsId_ = other.wingsId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSBuyWings Clone() {
      return new CSBuyWings(this);
    }

    /// <summary>Field number for the "wings_id" field.</summary>
    public const int WingsIdFieldNumber = 1;
    private int wingsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingsId {
      get { return wingsId_; }
      set {
        wingsId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSBuyWings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSBuyWings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WingsId != other.WingsId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WingsId != 0) hash ^= WingsId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WingsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WingsId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSBuyWings other) {
      if (other == null) {
        return;
      }
      if (other.WingsId != 0) {
        WingsId = other.WingsId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCBuyWings : pb::IMessage<SCBuyWings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCBuyWings> _parser = new pb::MessageParser<SCBuyWings>(() => new SCBuyWings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCBuyWings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[222]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyWings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyWings(SCBuyWings other) : this() {
      wingsId_ = other.wingsId_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCBuyWings Clone() {
      return new SCBuyWings(this);
    }

    /// <summary>Field number for the "wings_id" field.</summary>
    public const int WingsIdFieldNumber = 1;
    private int wingsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WingsId {
      get { return wingsId_; }
      set {
        wingsId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCBuyWings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCBuyWings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WingsId != other.WingsId) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WingsId != 0) hash ^= WingsId.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WingsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WingsId);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WingsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WingsId);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCBuyWings other) {
      if (other == null) {
        return;
      }
      if (other.WingsId != 0) {
        WingsId = other.WingsId;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WingsId = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SCNotifyActStatus : pb::IMessage<SCNotifyActStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SCNotifyActStatus> _parser = new pb::MessageParser<SCNotifyActStatus>(() => new SCNotifyActStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCNotifyActStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[223]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNotifyActStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNotifyActStatus(SCNotifyActStatus other) : this() {
      actType_ = other.actType_;
      actStatus_ = other.actStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCNotifyActStatus Clone() {
      return new SCNotifyActStatus(this);
    }

    /// <summary>Field number for the "act_type" field.</summary>
    public const int ActTypeFieldNumber = 1;
    private int actType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "act_status" field.</summary>
    public const int ActStatusFieldNumber = 2;
    private int actStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActStatus {
      get { return actStatus_; }
      set {
        actStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCNotifyActStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCNotifyActStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActType != other.ActType) return false;
      if (ActStatus != other.ActStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (ActStatus != 0) hash ^= ActStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ActType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActType);
      }
      if (ActStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ActType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActType);
      }
      if (ActStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActType);
      }
      if (ActStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCNotifyActStatus other) {
      if (other == null) {
        return;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.ActStatus != 0) {
        ActStatus = other.ActStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActType = input.ReadInt32();
            break;
          }
          case 16: {
            ActStatus = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ActType = input.ReadInt32();
            break;
          }
          case 16: {
            ActStatus = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSSetDoubleShoot : pb::IMessage<CSSetDoubleShoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSSetDoubleShoot> _parser = new pb::MessageParser<CSSetDoubleShoot>(() => new CSSetDoubleShoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSetDoubleShoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[224]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetDoubleShoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetDoubleShoot(CSSetDoubleShoot other) : this() {
      extraMul_ = other.extraMul_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetDoubleShoot Clone() {
      return new CSSetDoubleShoot(this);
    }

    /// <summary>Field number for the "extra_mul" field.</summary>
    public const int ExtraMulFieldNumber = 1;
    private int extraMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraMul {
      get { return extraMul_; }
      set {
        extraMul_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSetDoubleShoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSetDoubleShoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExtraMul != other.ExtraMul) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExtraMul != 0) hash ^= ExtraMul.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ExtraMul != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ExtraMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ExtraMul != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ExtraMul);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExtraMul != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraMul);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSetDoubleShoot other) {
      if (other == null) {
        return;
      }
      if (other.ExtraMul != 0) {
        ExtraMul = other.ExtraMul;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ExtraMul = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ExtraMul = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSFreePoolInfo : pb::IMessage<CSFreePoolInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSFreePoolInfo> _parser = new pb::MessageParser<CSFreePoolInfo>(() => new CSFreePoolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFreePoolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[225]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFreePoolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFreePoolInfo(CSFreePoolInfo other) : this() {
      prepareLottery_ = other.prepareLottery_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFreePoolInfo Clone() {
      return new CSFreePoolInfo(this);
    }

    /// <summary>Field number for the "prepareLottery" field.</summary>
    public const int PrepareLotteryFieldNumber = 1;
    private bool prepareLottery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrepareLottery {
      get { return prepareLottery_; }
      set {
        prepareLottery_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSFreePoolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSFreePoolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrepareLottery != other.PrepareLottery) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrepareLottery != false) hash ^= PrepareLottery.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PrepareLottery != false) {
        output.WriteRawTag(8);
        output.WriteBool(PrepareLottery);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PrepareLottery != false) {
        output.WriteRawTag(8);
        output.WriteBool(PrepareLottery);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrepareLottery != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSFreePoolInfo other) {
      if (other == null) {
        return;
      }
      if (other.PrepareLottery != false) {
        PrepareLottery = other.PrepareLottery;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PrepareLottery = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PrepareLottery = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSFreePoolLottery : pb::IMessage<CSFreePoolLottery>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSFreePoolLottery> _parser = new pb::MessageParser<CSFreePoolLottery>(() => new CSFreePoolLottery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFreePoolLottery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[226]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFreePoolLottery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFreePoolLottery(CSFreePoolLottery other) : this() {
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFreePoolLottery Clone() {
      return new CSFreePoolLottery(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSFreePoolLottery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSFreePoolLottery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSFreePoolLottery other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CSFreePoolOpen : pb::IMessage<CSFreePoolOpen>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CSFreePoolOpen> _parser = new pb::MessageParser<CSFreePoolOpen>(() => new CSFreePoolOpen());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFreePoolOpen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::F4BY.F4BYReflection.Descriptor.MessageTypes[227]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFreePoolOpen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFreePoolOpen(CSFreePoolOpen other) : this() {
      openFreePool_ = other.openFreePool_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFreePoolOpen Clone() {
      return new CSFreePoolOpen(this);
    }

    /// <summary>Field number for the "openFreePool" field.</summary>
    public const int OpenFreePoolFieldNumber = 1;
    private bool openFreePool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpenFreePool {
      get { return openFreePool_; }
      set {
        openFreePool_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSFreePoolOpen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSFreePoolOpen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpenFreePool != other.OpenFreePool) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpenFreePool != false) hash ^= OpenFreePool.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OpenFreePool != false) {
        output.WriteRawTag(8);
        output.WriteBool(OpenFreePool);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OpenFreePool != false) {
        output.WriteRawTag(8);
        output.WriteBool(OpenFreePool);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpenFreePool != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSFreePoolOpen other) {
      if (other == null) {
        return;
      }
      if (other.OpenFreePool != false) {
        OpenFreePool = other.OpenFreePool;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OpenFreePool = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OpenFreePool = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
