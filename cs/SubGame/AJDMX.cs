// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/AJDMX.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AJDMX {

  /// <summary>Holder for reflection information generated from Proto/SubGame/AJDMX.proto</summary>
  public static partial class AJDMXReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/AJDMX.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AJDMXReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlQcm90by9TdWJHYW1lL0FKRE1YLnByb3RvEgVBSkRNWCK2AQoMU0NfU2Nl",
            "bmVJbmZvEhIKCmZyZWVfY291bnQYASABKAUSEgoKY3VycmVuX2JldBgCIAEo",
            "BRILCgNiZXQYBCADKAUSFQoNaXNfc21hbGxfZ2FtZRgFIAEoCBINCgVpbmRl",
            "eBgGIAEoBRIYChBtYXhfY2hhbmNlX2NvdW50GAcgASgFEhcKD21heF9jaGFu",
            "Y2VfdHlwZRgIIAMoBRIYChBtYXhfY2hhbmNlX2luZGV4GAkgAygFImkKE0NN",
            "RF8zRF9TQ19TbWFsbEdhbWUSEAoIcmVzX2NvZGUYASABKAgSDQoFcG9pbnQY",
            "AiABKAUSDAoEdHlwZRgDIAEoBRIRCglmcmVlX3RpbWUYBCABKAUSEAoId2lu",
            "X2dvbGQYBSABKAUiGAoESWNvbhIQCghoaXRfaWNvbhgBIAMoBSKHAQoQQ01E",
            "XzNEX1NDX1Jlc3VsdBIMCgRpY29uGAEgAygFEh0KCGhpdF9pY29uGAIgAygL",
            "MgsuQUpETVguSWNvbhIQCgh3aW5fZ29sZBgDIAEoBRISCgpmcmVlX2NvdW50",
            "GAQgASgFEhEKCWhpdF9ib3VucxgFIAEoBRINCgVpbmRleBgGIAEoBSJMChND",
            "TURfM0RfU0NfTWF4Q2hhbmNlEhAKCHJlc19jb2RlGAEgASgIEhEKCWZyZWVf",
            "dGltZRgCIAEoBRIQCgh3aW5fZ29sZBgDIAEoBSqyAQoRRU1zZ0lEQUpETVhT",
            "ZXJ2ZXISFQoRU1VCX1NDX0dBTUVfU1RBUlQQABIVChFTVUJfU0NfU01BTExf",
            "R0FNRRABEhMKD1NVQl9TQ19CRVRfRkFJTBACEhUKEVNVQl9TQ19NQVhfQ0hB",
            "TkNFEAMSFQoRU1VCX0NTX0dBTUVfU1RBUlQQBBIVChFTVUJfQ1NfU01BTExf",
            "R0FNRRAFEhUKEVNVQl9DU19NQVhfQ0hBTkNFEAZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AJDMX.EMsgIDAJDMXServer), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AJDMX.SC_SceneInfo), global::AJDMX.SC_SceneInfo.Parser, new[]{ "FreeCount", "CurrenBet", "Bet", "IsSmallGame", "Index", "MaxChanceCount", "MaxChanceType", "MaxChanceIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AJDMX.CMD_3D_SC_SmallGame), global::AJDMX.CMD_3D_SC_SmallGame.Parser, new[]{ "ResCode", "Point", "Type", "FreeTime", "WinGold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AJDMX.Icon), global::AJDMX.Icon.Parser, new[]{ "HitIcon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AJDMX.CMD_3D_SC_Result), global::AJDMX.CMD_3D_SC_Result.Parser, new[]{ "Icon", "HitIcon", "WinGold", "FreeCount", "HitBouns", "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AJDMX.CMD_3D_SC_MaxChance), global::AJDMX.CMD_3D_SC_MaxChance.Parser, new[]{ "ResCode", "FreeTime", "WinGold" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///服务器消息
  /// </summary>
  public enum EMsgIDAJDMXServer {
    /// <summary>
    /// 启动游戏(CMD_3D_SC_Result)
    /// </summary>
    [pbr::OriginalName("SUB_SC_GAME_START")] SubScGameStart = 0,
    /// <summary>
    /// 小游戏返回(CMD_3D_SC_SmallGame)
    /// </summary>
    [pbr::OriginalName("SUB_SC_SMALL_GAME")] SubScSmallGame = 1,
    /// <summary>
    /// 游戏结束(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_SC_BET_FAIL")] SubScBetFail = 2,
    /// <summary>
    /// 最大游戏机会(CMD_3D_SC_MaxChance)
    /// </summary>
    [pbr::OriginalName("SUB_SC_MAX_CHANCE")] SubScMaxChance = 3,
    /// <summary>
    /// 开始游戏(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_CS_GAME_START")] SubCsGameStart = 4,
    /// <summary>
    /// 小游戏(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("SUB_CS_SMALL_GAME")] SubCsSmallGame = 5,
    /// <summary>
    /// 开始下注(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_CS_MAX_CHANCE")] SubCsMaxChance = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AJDMX.AJDMXReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      freeCount_ = other.freeCount_;
      currenBet_ = other.currenBet_;
      bet_ = other.bet_.Clone();
      isSmallGame_ = other.isSmallGame_;
      index_ = other.index_;
      maxChanceCount_ = other.maxChanceCount_;
      maxChanceType_ = other.maxChanceType_.Clone();
      maxChanceIndex_ = other.maxChanceIndex_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 1;
    private int freeCount_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "curren_bet" field.</summary>
    public const int CurrenBetFieldNumber = 2;
    private int currenBet_;
    /// <summary>
    /// 当前下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrenBet {
      get { return currenBet_; }
      set {
        currenBet_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_bet_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> bet_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 下注配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bet {
      get { return bet_; }
    }

    /// <summary>Field number for the "is_small_game" field.</summary>
    public const int IsSmallGameFieldNumber = 5;
    private bool isSmallGame_;
    /// <summary>
    /// 是否小游戏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSmallGame {
      get { return isSmallGame_; }
      set {
        isSmallGame_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 6;
    private int index_;
    /// <summary>
    /// 小游戏下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "max_chance_count" field.</summary>
    public const int MaxChanceCountFieldNumber = 7;
    private int maxChanceCount_;
    /// <summary>
    /// 最大游戏机会次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxChanceCount {
      get { return maxChanceCount_; }
      set {
        maxChanceCount_ = value;
      }
    }

    /// <summary>Field number for the "max_chance_type" field.</summary>
    public const int MaxChanceTypeFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_maxChanceType_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> maxChanceType_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 最大机会类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MaxChanceType {
      get { return maxChanceType_; }
    }

    /// <summary>Field number for the "max_chance_index" field.</summary>
    public const int MaxChanceIndexFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_maxChanceIndex_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> maxChanceIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 最大机会索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MaxChanceIndex {
      get { return maxChanceIndex_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FreeCount != other.FreeCount) return false;
      if (CurrenBet != other.CurrenBet) return false;
      if(!bet_.Equals(other.bet_)) return false;
      if (IsSmallGame != other.IsSmallGame) return false;
      if (Index != other.Index) return false;
      if (MaxChanceCount != other.MaxChanceCount) return false;
      if(!maxChanceType_.Equals(other.maxChanceType_)) return false;
      if(!maxChanceIndex_.Equals(other.maxChanceIndex_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (CurrenBet != 0) hash ^= CurrenBet.GetHashCode();
      hash ^= bet_.GetHashCode();
      if (IsSmallGame != false) hash ^= IsSmallGame.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (MaxChanceCount != 0) hash ^= MaxChanceCount.GetHashCode();
      hash ^= maxChanceType_.GetHashCode();
      hash ^= maxChanceIndex_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeCount);
      }
      if (CurrenBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrenBet);
      }
      bet_.WriteTo(output, _repeated_bet_codec);
      if (IsSmallGame != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSmallGame);
      }
      if (Index != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Index);
      }
      if (MaxChanceCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxChanceCount);
      }
      maxChanceType_.WriteTo(output, _repeated_maxChanceType_codec);
      maxChanceIndex_.WriteTo(output, _repeated_maxChanceIndex_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeCount);
      }
      if (CurrenBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrenBet);
      }
      bet_.WriteTo(ref output, _repeated_bet_codec);
      if (IsSmallGame != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSmallGame);
      }
      if (Index != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Index);
      }
      if (MaxChanceCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxChanceCount);
      }
      maxChanceType_.WriteTo(ref output, _repeated_maxChanceType_codec);
      maxChanceIndex_.WriteTo(ref output, _repeated_maxChanceIndex_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (CurrenBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrenBet);
      }
      size += bet_.CalculateSize(_repeated_bet_codec);
      if (IsSmallGame != false) {
        size += 1 + 1;
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (MaxChanceCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxChanceCount);
      }
      size += maxChanceType_.CalculateSize(_repeated_maxChanceType_codec);
      size += maxChanceIndex_.CalculateSize(_repeated_maxChanceIndex_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.CurrenBet != 0) {
        CurrenBet = other.CurrenBet;
      }
      bet_.Add(other.bet_);
      if (other.IsSmallGame != false) {
        IsSmallGame = other.IsSmallGame;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.MaxChanceCount != 0) {
        MaxChanceCount = other.MaxChanceCount;
      }
      maxChanceType_.Add(other.maxChanceType_);
      maxChanceIndex_.Add(other.maxChanceIndex_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            CurrenBet = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
          case 40: {
            IsSmallGame = input.ReadBool();
            break;
          }
          case 48: {
            Index = input.ReadInt32();
            break;
          }
          case 56: {
            MaxChanceCount = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            maxChanceType_.AddEntriesFrom(input, _repeated_maxChanceType_codec);
            break;
          }
          case 74:
          case 72: {
            maxChanceIndex_.AddEntriesFrom(input, _repeated_maxChanceIndex_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            CurrenBet = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
          case 40: {
            IsSmallGame = input.ReadBool();
            break;
          }
          case 48: {
            Index = input.ReadInt32();
            break;
          }
          case 56: {
            MaxChanceCount = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            maxChanceType_.AddEntriesFrom(ref input, _repeated_maxChanceType_codec);
            break;
          }
          case 74:
          case 72: {
            maxChanceIndex_.AddEntriesFrom(ref input, _repeated_maxChanceIndex_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 小游戏返回
  /// </summary>
  public sealed partial class CMD_3D_SC_SmallGame : pb::IMessage<CMD_3D_SC_SmallGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_SmallGame> _parser = new pb::MessageParser<CMD_3D_SC_SmallGame>(() => new CMD_3D_SC_SmallGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_SmallGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AJDMX.AJDMXReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_SmallGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_SmallGame(CMD_3D_SC_SmallGame other) : this() {
      resCode_ = other.resCode_;
      point_ = other.point_;
      type_ = other.type_;
      freeTime_ = other.freeTime_;
      winGold_ = other.winGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_SmallGame Clone() {
      return new CMD_3D_SC_SmallGame(this);
    }

    /// <summary>Field number for the "res_code" field.</summary>
    public const int ResCodeFieldNumber = 1;
    private bool resCode_;
    /// <summary>
    /// 0:失败 1：成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResCode {
      get { return resCode_; }
      set {
        resCode_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private int point_;
    /// <summary>
    /// 点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    /// 0:正常 1：最大机会 2：再来一次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "free_time" field.</summary>
    public const int FreeTimeFieldNumber = 4;
    private int freeTime_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTime {
      get { return freeTime_; }
      set {
        freeTime_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 5;
    private int winGold_;
    /// <summary>
    /// 小游戏得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_SmallGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_SmallGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResCode != other.ResCode) return false;
      if (Point != other.Point) return false;
      if (Type != other.Type) return false;
      if (FreeTime != other.FreeTime) return false;
      if (WinGold != other.WinGold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResCode != false) hash ^= ResCode.GetHashCode();
      if (Point != 0) hash ^= Point.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (FreeTime != 0) hash ^= FreeTime.GetHashCode();
      if (WinGold != 0) hash ^= WinGold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ResCode != false) {
        output.WriteRawTag(8);
        output.WriteBool(ResCode);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (FreeTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeTime);
      }
      if (WinGold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WinGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ResCode != false) {
        output.WriteRawTag(8);
        output.WriteBool(ResCode);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Point);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (FreeTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeTime);
      }
      if (WinGold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WinGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResCode != false) {
        size += 1 + 1;
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (FreeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTime);
      }
      if (WinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinGold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_SmallGame other) {
      if (other == null) {
        return;
      }
      if (other.ResCode != false) {
        ResCode = other.ResCode;
      }
      if (other.Point != 0) {
        Point = other.Point;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.FreeTime != 0) {
        FreeTime = other.FreeTime;
      }
      if (other.WinGold != 0) {
        WinGold = other.WinGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResCode = input.ReadBool();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            FreeTime = input.ReadInt32();
            break;
          }
          case 40: {
            WinGold = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ResCode = input.ReadBool();
            break;
          }
          case 16: {
            Point = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            FreeTime = input.ReadInt32();
            break;
          }
          case 40: {
            WinGold = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 击中的图标
  /// </summary>
  public sealed partial class Icon : pb::IMessage<Icon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Icon> _parser = new pb::MessageParser<Icon>(() => new Icon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Icon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AJDMX.AJDMXReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icon(Icon other) : this() {
      hitIcon_ = other.hitIcon_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icon Clone() {
      return new Icon(this);
    }

    /// <summary>Field number for the "hit_icon" field.</summary>
    public const int HitIconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_hitIcon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> hitIcon_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HitIcon {
      get { return hitIcon_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Icon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Icon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hitIcon_.Equals(other.hitIcon_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hitIcon_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      hitIcon_.WriteTo(output, _repeated_hitIcon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      hitIcon_.WriteTo(ref output, _repeated_hitIcon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hitIcon_.CalculateSize(_repeated_hitIcon_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Icon other) {
      if (other == null) {
        return;
      }
      hitIcon_.Add(other.hitIcon_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            hitIcon_.AddEntriesFrom(input, _repeated_hitIcon_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            hitIcon_.AddEntriesFrom(ref input, _repeated_hitIcon_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 游戏结果返回
  /// </summary>
  public sealed partial class CMD_3D_SC_Result : pb::IMessage<CMD_3D_SC_Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_Result> _parser = new pb::MessageParser<CMD_3D_SC_Result>(() => new CMD_3D_SC_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AJDMX.AJDMXReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result(CMD_3D_SC_Result other) : this() {
      icon_ = other.icon_.Clone();
      hitIcon_ = other.hitIcon_.Clone();
      winGold_ = other.winGold_;
      freeCount_ = other.freeCount_;
      hitBouns_ = other.hitBouns_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result Clone() {
      return new CMD_3D_SC_Result(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "hit_icon" field.</summary>
    public const int HitIconFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AJDMX.Icon> _repeated_hitIcon_codec
        = pb::FieldCodec.ForMessage(18, global::AJDMX.Icon.Parser);
    private readonly pbc::RepeatedField<global::AJDMX.Icon> hitIcon_ = new pbc::RepeatedField<global::AJDMX.Icon>();
    /// <summary>
    /// 击中的图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AJDMX.Icon> HitIcon {
      get { return hitIcon_; }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 3;
    private int winGold_;
    /// <summary>
    /// 赢得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 4;
    private int freeCount_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "hit_bouns" field.</summary>
    public const int HitBounsFieldNumber = 5;
    private int hitBouns_;
    /// <summary>
    /// 中小游戏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitBouns {
      get { return hitBouns_; }
      set {
        hitBouns_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 6;
    private int index_;
    /// <summary>
    /// 小游戏当前下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icon_.Equals(other.icon_)) return false;
      if(!hitIcon_.Equals(other.hitIcon_)) return false;
      if (WinGold != other.WinGold) return false;
      if (FreeCount != other.FreeCount) return false;
      if (HitBouns != other.HitBouns) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icon_.GetHashCode();
      hash ^= hitIcon_.GetHashCode();
      if (WinGold != 0) hash ^= WinGold.GetHashCode();
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (HitBouns != 0) hash ^= HitBouns.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      icon_.WriteTo(output, _repeated_icon_codec);
      hitIcon_.WriteTo(output, _repeated_hitIcon_codec);
      if (WinGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinGold);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeCount);
      }
      if (HitBouns != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitBouns);
      }
      if (Index != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      icon_.WriteTo(ref output, _repeated_icon_codec);
      hitIcon_.WriteTo(ref output, _repeated_hitIcon_codec);
      if (WinGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinGold);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeCount);
      }
      if (HitBouns != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HitBouns);
      }
      if (Index != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += hitIcon_.CalculateSize(_repeated_hitIcon_codec);
      if (WinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinGold);
      }
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (HitBouns != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitBouns);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_Result other) {
      if (other == null) {
        return;
      }
      icon_.Add(other.icon_);
      hitIcon_.Add(other.hitIcon_);
      if (other.WinGold != 0) {
        WinGold = other.WinGold;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.HitBouns != 0) {
        HitBouns = other.HitBouns;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 18: {
            hitIcon_.AddEntriesFrom(input, _repeated_hitIcon_codec);
            break;
          }
          case 24: {
            WinGold = input.ReadInt32();
            break;
          }
          case 32: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 40: {
            HitBouns = input.ReadInt32();
            break;
          }
          case 48: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 18: {
            hitIcon_.AddEntriesFrom(ref input, _repeated_hitIcon_codec);
            break;
          }
          case 24: {
            WinGold = input.ReadInt32();
            break;
          }
          case 32: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 40: {
            HitBouns = input.ReadInt32();
            break;
          }
          case 48: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 最大游戏机会
  /// </summary>
  public sealed partial class CMD_3D_SC_MaxChance : pb::IMessage<CMD_3D_SC_MaxChance>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_MaxChance> _parser = new pb::MessageParser<CMD_3D_SC_MaxChance>(() => new CMD_3D_SC_MaxChance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_MaxChance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AJDMX.AJDMXReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_MaxChance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_MaxChance(CMD_3D_SC_MaxChance other) : this() {
      resCode_ = other.resCode_;
      freeTime_ = other.freeTime_;
      winGold_ = other.winGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_MaxChance Clone() {
      return new CMD_3D_SC_MaxChance(this);
    }

    /// <summary>Field number for the "res_code" field.</summary>
    public const int ResCodeFieldNumber = 1;
    private bool resCode_;
    /// <summary>
    /// 0:失败 1：成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResCode {
      get { return resCode_; }
      set {
        resCode_ = value;
      }
    }

    /// <summary>Field number for the "free_time" field.</summary>
    public const int FreeTimeFieldNumber = 2;
    private int freeTime_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTime {
      get { return freeTime_; }
      set {
        freeTime_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 3;
    private int winGold_;
    /// <summary>
    /// 小游戏得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_MaxChance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_MaxChance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResCode != other.ResCode) return false;
      if (FreeTime != other.FreeTime) return false;
      if (WinGold != other.WinGold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResCode != false) hash ^= ResCode.GetHashCode();
      if (FreeTime != 0) hash ^= FreeTime.GetHashCode();
      if (WinGold != 0) hash ^= WinGold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ResCode != false) {
        output.WriteRawTag(8);
        output.WriteBool(ResCode);
      }
      if (FreeTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeTime);
      }
      if (WinGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ResCode != false) {
        output.WriteRawTag(8);
        output.WriteBool(ResCode);
      }
      if (FreeTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeTime);
      }
      if (WinGold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WinGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResCode != false) {
        size += 1 + 1;
      }
      if (FreeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTime);
      }
      if (WinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinGold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_MaxChance other) {
      if (other == null) {
        return;
      }
      if (other.ResCode != false) {
        ResCode = other.ResCode;
      }
      if (other.FreeTime != 0) {
        FreeTime = other.FreeTime;
      }
      if (other.WinGold != 0) {
        WinGold = other.WinGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResCode = input.ReadBool();
            break;
          }
          case 16: {
            FreeTime = input.ReadInt32();
            break;
          }
          case 24: {
            WinGold = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ResCode = input.ReadBool();
            break;
          }
          case 16: {
            FreeTime = input.ReadInt32();
            break;
          }
          case 24: {
            WinGold = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
