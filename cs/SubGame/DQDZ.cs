// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/DQDZ.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DQDZ {

  /// <summary>Holder for reflection information generated from Proto/SubGame/DQDZ.proto</summary>
  public static partial class DQDZReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/DQDZ.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DQDZReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9TdWJHYW1lL0RRRFoucHJvdG8SBERRRFoiSAoTQ01EXzNEX0NT",
            "X1N0YXJ0R2FtZRIPCgd2ZXJzaW9uGAEgASgFEhMKC3ZlcmlmeV9jb2RlGAIg",
            "ASgFEgsKA2JldBgDIAEoBSI/ChdDTURfM0RfQ1NfU3RhcnRCYWxsR2FtZRIP",
            "Cgd2ZXJzaW9uGAEgASgFEhMKC3ZlcmlmeV9jb2RlGAIgASgFIj8KF0NNRF8z",
            "RF9DU19SZXF1ZXN0Q2FpSmluEg8KB3ZlcnNpb24YASABKAUSEwoLdmVyaWZ5",
            "X2NvZGUYAiABKAUiuwEKDFNDX1NjZW5lSW5mbxIPCgd1c2VyX2lkGAEgASgF",
            "EhAKCG5ldF9jb2RlGAIgASgFEhAKCGNoYWlyX2lkGAMgASgFEhAKCHRhYmxl",
            "X2lkGAQgASgFEhIKCnVzZXJfc3RhdGUYBSABKAUSEgoKZnJlZV9jb3VudBgG",
            "IAEoBRIQCghtdWx0aXBsZRgHIAEoBRILCgNiZXQYCCABKAUSDAoEZ29sZBgJ",
            "IAEoAxIPCgdjYWlfamluGAogASgDIhwKDXRhZ0dhbWVDb25maWcSCwoDYmV0",
            "GAEgAygFIpkBChBDTURfM0RfU0NfUmVzdWx0Eg8KB3VzZXJfaWQYASABKAUS",
            "CwoDYmV0GAIgASgFEhAKCHdpbl9nb2xkGAMgASgDEhAKCGNvbV9nb2xkGAQg",
            "ASgDEhAKCGN1cl9nb2xkGAUgASgDEg8KB2NhaV9qaW4YBiABKAMSEgoKZnJl",
            "ZV9jb3VudBgHIAEoBRIMCgRpY29uGAggAygFIngKEUNNRF9TdGFydEJhbGxH",
            "YW1lEg8KB3VzZXJfaWQYASABKAUSCwoDcmV0GAIgASgFEhAKCGFkZF9nb2xk",
            "GAMgASgDEhAKCGN1cl9nb2xkGAQgASgDEg8KB2NhaV9qaW4YBSABKAMSEAoI",
            "bXVsdGlwbGUYBiABKAUqqgIKEEVNc2dJRERRRFpTZXJ2ZXISFQoRU1VCX0NT",
            "X0dBTUVfU1RBUlQQABIaChZTVUJfQ1NfU1RBUlRfQkFMTF9HQU1FEAESGgoW",
            "U1VCX0NTX1JFUVVFU1RfQ0FJX0pJThACEhUKEVNVQl9TQ19HQU1FX1NUQVJU",
            "EAMSFAoQU1VCX1NDX0dBTUVfT1ZFUhAEEhwKGFNVQl9TQ19VUERBVEVfUFJJ",
            "WkVfUE9PTBAFEhYKElNVQl9TQ19HQU1FX0NPTkZJRxAGEhQKEFNVQl9TQ19H",
            "QU1FX0RBVEEQBxIVChFTVUJfU0NfU1RBUlRfR0FNRRAIEhoKFlNVQl9TQ19T",
            "VEFSVF9CQUxMX0dBTUUQCRIbChdTVUJfU0NfUkVTUE9OU0VfQ0FJX0pJThAK",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DQDZ.EMsgIDDQDZServer), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DQDZ.CMD_3D_CS_StartGame), global::DQDZ.CMD_3D_CS_StartGame.Parser, new[]{ "Version", "VerifyCode", "Bet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DQDZ.CMD_3D_CS_StartBallGame), global::DQDZ.CMD_3D_CS_StartBallGame.Parser, new[]{ "Version", "VerifyCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DQDZ.CMD_3D_CS_RequestCaiJin), global::DQDZ.CMD_3D_CS_RequestCaiJin.Parser, new[]{ "Version", "VerifyCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DQDZ.SC_SceneInfo), global::DQDZ.SC_SceneInfo.Parser, new[]{ "UserId", "NetCode", "ChairId", "TableId", "UserState", "FreeCount", "Multiple", "Bet", "Gold", "CaiJin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DQDZ.tagGameConfig), global::DQDZ.tagGameConfig.Parser, new[]{ "Bet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DQDZ.CMD_3D_SC_Result), global::DQDZ.CMD_3D_SC_Result.Parser, new[]{ "UserId", "Bet", "WinGold", "ComGold", "CurGold", "CaiJin", "FreeCount", "Icon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DQDZ.CMD_StartBallGame), global::DQDZ.CMD_StartBallGame.Parser, new[]{ "UserId", "Ret", "AddGold", "CurGold", "CaiJin", "Multiple" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///服务器消息
  /// </summary>
  public enum EMsgIDDQDZServer {
    /// <summary>
    ///开始游戏(CMD_3D_CS_StartGame)
    /// </summary>
    [pbr::OriginalName("SUB_CS_GAME_START")] SubCsGameStart = 0,
    /// <summary>
    ///(CMD_3D_CS_StartBallGame)
    /// </summary>
    [pbr::OriginalName("SUB_CS_START_BALL_GAME")] SubCsStartBallGame = 1,
    /// <summary>
    ///(CMD_3D_CS_RequestCaiJin)
    /// </summary>
    [pbr::OriginalName("SUB_CS_REQUEST_CAI_JIN")] SubCsRequestCaiJin = 2,
    /// <summary>
    ///启动游戏 （没用）
    /// </summary>
    [pbr::OriginalName("SUB_SC_GAME_START")] SubScGameStart = 3,
    /// <summary>
    ///游戏结束
    /// </summary>
    [pbr::OriginalName("SUB_SC_GAME_OVER")] SubScGameOver = 4,
    /// <summary>
    ///奖池分数(MsgCommonN64)
    /// </summary>
    [pbr::OriginalName("SUB_SC_UPDATE_PRIZE_POOL")] SubScUpdatePrizePool = 5,
    /// <summary>
    ///tagGameConfig
    /// </summary>
    [pbr::OriginalName("SUB_SC_GAME_CONFIG")] SubScGameConfig = 6,
    /// <summary>
    ///SC_SceneInfo
    /// </summary>
    [pbr::OriginalName("SUB_SC_GAME_DATA")] SubScGameData = 7,
    /// <summary>
    ///CMD_3D_SC_Result
    /// </summary>
    [pbr::OriginalName("SUB_SC_START_GAME")] SubScStartGame = 8,
    /// <summary>
    ///CMD_StartBallGame
    /// </summary>
    [pbr::OriginalName("SUB_SC_START_BALL_GAME")] SubScStartBallGame = 9,
    /// <summary>
    ///CMD_3D_CS_RequestCaiJin
    /// </summary>
    [pbr::OriginalName("SUB_SC_RESPONSE_CAI_JIN")] SubScResponseCaiJin = 10,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 开始游戏
  /// </summary>
  public sealed partial class CMD_3D_CS_StartGame : pb::IMessage<CMD_3D_CS_StartGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_CS_StartGame> _parser = new pb::MessageParser<CMD_3D_CS_StartGame>(() => new CMD_3D_CS_StartGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_CS_StartGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DQDZ.DQDZReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_StartGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_StartGame(CMD_3D_CS_StartGame other) : this() {
      version_ = other.version_;
      verifyCode_ = other.verifyCode_;
      bet_ = other.bet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_StartGame Clone() {
      return new CMD_3D_CS_StartGame(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    /// <summary>
    /// 版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "verify_code" field.</summary>
    public const int VerifyCodeFieldNumber = 2;
    private int verifyCode_;
    /// <summary>
    /// 验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 3;
    private int bet_;
    /// <summary>
    /// 押注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_CS_StartGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_CS_StartGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (VerifyCode != other.VerifyCode) return false;
      if (Bet != other.Bet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (VerifyCode != 0) hash ^= VerifyCode.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (VerifyCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VerifyCode);
      }
      if (Bet != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (VerifyCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VerifyCode);
      }
      if (Bet != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Bet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (VerifyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerifyCode);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_CS_StartGame other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.VerifyCode != 0) {
        VerifyCode = other.VerifyCode;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            VerifyCode = input.ReadInt32();
            break;
          }
          case 24: {
            Bet = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            VerifyCode = input.ReadInt32();
            break;
          }
          case 24: {
            Bet = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 小游戏
  /// </summary>
  public sealed partial class CMD_3D_CS_StartBallGame : pb::IMessage<CMD_3D_CS_StartBallGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_CS_StartBallGame> _parser = new pb::MessageParser<CMD_3D_CS_StartBallGame>(() => new CMD_3D_CS_StartBallGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_CS_StartBallGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DQDZ.DQDZReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_StartBallGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_StartBallGame(CMD_3D_CS_StartBallGame other) : this() {
      version_ = other.version_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_StartBallGame Clone() {
      return new CMD_3D_CS_StartBallGame(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    /// <summary>
    /// 版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "verify_code" field.</summary>
    public const int VerifyCodeFieldNumber = 2;
    private int verifyCode_;
    /// <summary>
    /// 验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_CS_StartBallGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_CS_StartBallGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (VerifyCode != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (VerifyCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (VerifyCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (VerifyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_CS_StartBallGame other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.VerifyCode != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            VerifyCode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            VerifyCode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 请求彩金
  /// </summary>
  public sealed partial class CMD_3D_CS_RequestCaiJin : pb::IMessage<CMD_3D_CS_RequestCaiJin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_CS_RequestCaiJin> _parser = new pb::MessageParser<CMD_3D_CS_RequestCaiJin>(() => new CMD_3D_CS_RequestCaiJin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_CS_RequestCaiJin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DQDZ.DQDZReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_RequestCaiJin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_RequestCaiJin(CMD_3D_CS_RequestCaiJin other) : this() {
      version_ = other.version_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_CS_RequestCaiJin Clone() {
      return new CMD_3D_CS_RequestCaiJin(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    /// <summary>
    /// 版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "verify_code" field.</summary>
    public const int VerifyCodeFieldNumber = 2;
    private int verifyCode_;
    /// <summary>
    /// 验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_CS_RequestCaiJin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_CS_RequestCaiJin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (VerifyCode != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (VerifyCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (VerifyCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (VerifyCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_CS_RequestCaiJin other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.VerifyCode != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            VerifyCode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            VerifyCode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DQDZ.DQDZReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      userId_ = other.userId_;
      netCode_ = other.netCode_;
      chairId_ = other.chairId_;
      tableId_ = other.tableId_;
      userState_ = other.userState_;
      freeCount_ = other.freeCount_;
      multiple_ = other.multiple_;
      bet_ = other.bet_;
      gold_ = other.gold_;
      caiJin_ = other.caiJin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "net_code" field.</summary>
    public const int NetCodeFieldNumber = 2;
    private int netCode_;
    /// <summary>
    /// 验证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetCode {
      get { return netCode_; }
      set {
        netCode_ = value;
      }
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 3;
    private int chairId_;
    /// <summary>
    /// 椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 4;
    private int tableId_;
    /// <summary>
    /// 0 没用上
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "user_state" field.</summary>
    public const int UserStateFieldNumber = 5;
    private int userState_;
    /// <summary>
    /// 玩家状态  0 普通模式， 1 点球模式 , 2 免费模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserState {
      get { return userState_; }
      set {
        userState_ = value;
      }
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 6;
    private int freeCount_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 7;
    private int multiple_;
    /// <summary>
    /// 当前倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 8;
    private int bet_;
    /// <summary>
    /// 下注值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 9;
    private long gold_;
    /// <summary>
    /// 金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "cai_jin" field.</summary>
    public const int CaiJinFieldNumber = 10;
    private long caiJin_;
    /// <summary>
    /// 彩金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CaiJin {
      get { return caiJin_; }
      set {
        caiJin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (NetCode != other.NetCode) return false;
      if (ChairId != other.ChairId) return false;
      if (TableId != other.TableId) return false;
      if (UserState != other.UserState) return false;
      if (FreeCount != other.FreeCount) return false;
      if (Multiple != other.Multiple) return false;
      if (Bet != other.Bet) return false;
      if (Gold != other.Gold) return false;
      if (CaiJin != other.CaiJin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (NetCode != 0) hash ^= NetCode.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (TableId != 0) hash ^= TableId.GetHashCode();
      if (UserState != 0) hash ^= UserState.GetHashCode();
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (CaiJin != 0L) hash ^= CaiJin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (NetCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NetCode);
      }
      if (ChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairId);
      }
      if (TableId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TableId);
      }
      if (UserState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UserState);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeCount);
      }
      if (Multiple != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Multiple);
      }
      if (Bet != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Bet);
      }
      if (Gold != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Gold);
      }
      if (CaiJin != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(CaiJin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (NetCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NetCode);
      }
      if (ChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairId);
      }
      if (TableId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TableId);
      }
      if (UserState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(UserState);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeCount);
      }
      if (Multiple != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Multiple);
      }
      if (Bet != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Bet);
      }
      if (Gold != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Gold);
      }
      if (CaiJin != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(CaiJin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (NetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetCode);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
      }
      if (UserState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserState);
      }
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (CaiJin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CaiJin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.NetCode != 0) {
        NetCode = other.NetCode;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.TableId != 0) {
        TableId = other.TableId;
      }
      if (other.UserState != 0) {
        UserState = other.UserState;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.CaiJin != 0L) {
        CaiJin = other.CaiJin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            NetCode = input.ReadInt32();
            break;
          }
          case 24: {
            ChairId = input.ReadInt32();
            break;
          }
          case 32: {
            TableId = input.ReadInt32();
            break;
          }
          case 40: {
            UserState = input.ReadInt32();
            break;
          }
          case 48: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 56: {
            Multiple = input.ReadInt32();
            break;
          }
          case 64: {
            Bet = input.ReadInt32();
            break;
          }
          case 72: {
            Gold = input.ReadInt64();
            break;
          }
          case 80: {
            CaiJin = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            NetCode = input.ReadInt32();
            break;
          }
          case 24: {
            ChairId = input.ReadInt32();
            break;
          }
          case 32: {
            TableId = input.ReadInt32();
            break;
          }
          case 40: {
            UserState = input.ReadInt32();
            break;
          }
          case 48: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 56: {
            Multiple = input.ReadInt32();
            break;
          }
          case 64: {
            Bet = input.ReadInt32();
            break;
          }
          case 72: {
            Gold = input.ReadInt64();
            break;
          }
          case 80: {
            CaiJin = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class tagGameConfig : pb::IMessage<tagGameConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<tagGameConfig> _parser = new pb::MessageParser<tagGameConfig>(() => new tagGameConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tagGameConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DQDZ.DQDZReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tagGameConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tagGameConfig(tagGameConfig other) : this() {
      bet_ = other.bet_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tagGameConfig Clone() {
      return new tagGameConfig(this);
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_bet_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> bet_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 下注信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bet {
      get { return bet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tagGameConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tagGameConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bet_.Equals(other.bet_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bet_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      bet_.WriteTo(output, _repeated_bet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      bet_.WriteTo(ref output, _repeated_bet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bet_.CalculateSize(_repeated_bet_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tagGameConfig other) {
      if (other == null) {
        return;
      }
      bet_.Add(other.bet_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 游戏结果返回
  /// </summary>
  public sealed partial class CMD_3D_SC_Result : pb::IMessage<CMD_3D_SC_Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_Result> _parser = new pb::MessageParser<CMD_3D_SC_Result>(() => new CMD_3D_SC_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DQDZ.DQDZReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result(CMD_3D_SC_Result other) : this() {
      userId_ = other.userId_;
      bet_ = other.bet_;
      winGold_ = other.winGold_;
      comGold_ = other.comGold_;
      curGold_ = other.curGold_;
      caiJin_ = other.caiJin_;
      freeCount_ = other.freeCount_;
      icon_ = other.icon_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result Clone() {
      return new CMD_3D_SC_Result(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 2;
    private int bet_;
    /// <summary>
    /// 玩家下注		押注值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 3;
    private long winGold_;
    /// <summary>
    /// 赢得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "com_gold" field.</summary>
    public const int ComGoldFieldNumber = 4;
    private long comGold_;
    /// <summary>
    /// 下注的金币	押注值*40
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ComGold {
      get { return comGold_; }
      set {
        comGold_ = value;
      }
    }

    /// <summary>Field number for the "cur_gold" field.</summary>
    public const int CurGoldFieldNumber = 5;
    private long curGold_;
    /// <summary>
    /// 自己的金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurGold {
      get { return curGold_; }
      set {
        curGold_ = value;
      }
    }

    /// <summary>Field number for the "cai_jin" field.</summary>
    public const int CaiJinFieldNumber = 6;
    private long caiJin_;
    /// <summary>
    ///	caijin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CaiJin {
      get { return caiJin_; }
      set {
        caiJin_ = value;
      }
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 7;
    private int freeCount_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 图标结果集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Bet != other.Bet) return false;
      if (WinGold != other.WinGold) return false;
      if (ComGold != other.ComGold) return false;
      if (CurGold != other.CurGold) return false;
      if (CaiJin != other.CaiJin) return false;
      if (FreeCount != other.FreeCount) return false;
      if(!icon_.Equals(other.icon_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (Bet != 0) hash ^= Bet.GetHashCode();
      if (WinGold != 0L) hash ^= WinGold.GetHashCode();
      if (ComGold != 0L) hash ^= ComGold.GetHashCode();
      if (CurGold != 0L) hash ^= CurGold.GetHashCode();
      if (CaiJin != 0L) hash ^= CaiJin.GetHashCode();
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      hash ^= icon_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (Bet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bet);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WinGold);
      }
      if (ComGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ComGold);
      }
      if (CurGold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CurGold);
      }
      if (CaiJin != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CaiJin);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeCount);
      }
      icon_.WriteTo(output, _repeated_icon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (Bet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bet);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WinGold);
      }
      if (ComGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ComGold);
      }
      if (CurGold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CurGold);
      }
      if (CaiJin != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CaiJin);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeCount);
      }
      icon_.WriteTo(ref output, _repeated_icon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      if (WinGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinGold);
      }
      if (ComGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ComGold);
      }
      if (CurGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurGold);
      }
      if (CaiJin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CaiJin);
      }
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      size += icon_.CalculateSize(_repeated_icon_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_Result other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
      if (other.WinGold != 0L) {
        WinGold = other.WinGold;
      }
      if (other.ComGold != 0L) {
        ComGold = other.ComGold;
      }
      if (other.CurGold != 0L) {
        CurGold = other.CurGold;
      }
      if (other.CaiJin != 0L) {
        CaiJin = other.CaiJin;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      icon_.Add(other.icon_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            Bet = input.ReadInt32();
            break;
          }
          case 24: {
            WinGold = input.ReadInt64();
            break;
          }
          case 32: {
            ComGold = input.ReadInt64();
            break;
          }
          case 40: {
            CurGold = input.ReadInt64();
            break;
          }
          case 48: {
            CaiJin = input.ReadInt64();
            break;
          }
          case 56: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            Bet = input.ReadInt32();
            break;
          }
          case 24: {
            WinGold = input.ReadInt64();
            break;
          }
          case 32: {
            ComGold = input.ReadInt64();
            break;
          }
          case 40: {
            CurGold = input.ReadInt64();
            break;
          }
          case 48: {
            CaiJin = input.ReadInt64();
            break;
          }
          case 56: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMD_StartBallGame : pb::IMessage<CMD_StartBallGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_StartBallGame> _parser = new pb::MessageParser<CMD_StartBallGame>(() => new CMD_StartBallGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_StartBallGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DQDZ.DQDZReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_StartBallGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_StartBallGame(CMD_StartBallGame other) : this() {
      userId_ = other.userId_;
      ret_ = other.ret_;
      addGold_ = other.addGold_;
      curGold_ = other.curGold_;
      caiJin_ = other.caiJin_;
      multiple_ = other.multiple_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_StartBallGame Clone() {
      return new CMD_StartBallGame(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 2;
    private int ret_;
    /// <summary>
    /// 免费奖励的类型 0 没有， 1金币奖励	2 金币翻倍 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "add_gold" field.</summary>
    public const int AddGoldFieldNumber = 3;
    private long addGold_;
    /// <summary>
    /// 获得的金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AddGold {
      get { return addGold_; }
      set {
        addGold_ = value;
      }
    }

    /// <summary>Field number for the "cur_gold" field.</summary>
    public const int CurGoldFieldNumber = 4;
    private long curGold_;
    /// <summary>
    /// 下注金币				押注值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurGold {
      get { return curGold_; }
      set {
        curGold_ = value;
      }
    }

    /// <summary>Field number for the "cai_jin" field.</summary>
    public const int CaiJinFieldNumber = 5;
    private long caiJin_;
    /// <summary>
    /// 彩金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CaiJin {
      get { return caiJin_; }
      set {
        caiJin_ = value;
      }
    }

    /// <summary>Field number for the "multiple" field.</summary>
    public const int MultipleFieldNumber = 6;
    private int multiple_;
    /// <summary>
    /// 倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Multiple {
      get { return multiple_; }
      set {
        multiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_StartBallGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_StartBallGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Ret != other.Ret) return false;
      if (AddGold != other.AddGold) return false;
      if (CurGold != other.CurGold) return false;
      if (CaiJin != other.CaiJin) return false;
      if (Multiple != other.Multiple) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (AddGold != 0L) hash ^= AddGold.GetHashCode();
      if (CurGold != 0L) hash ^= CurGold.GetHashCode();
      if (CaiJin != 0L) hash ^= CaiJin.GetHashCode();
      if (Multiple != 0) hash ^= Multiple.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (Ret != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ret);
      }
      if (AddGold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AddGold);
      }
      if (CurGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurGold);
      }
      if (CaiJin != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CaiJin);
      }
      if (Multiple != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (Ret != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ret);
      }
      if (AddGold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AddGold);
      }
      if (CurGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurGold);
      }
      if (CaiJin != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CaiJin);
      }
      if (Multiple != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Multiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (AddGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AddGold);
      }
      if (CurGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurGold);
      }
      if (CaiJin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CaiJin);
      }
      if (Multiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_StartBallGame other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.AddGold != 0L) {
        AddGold = other.AddGold;
      }
      if (other.CurGold != 0L) {
        CurGold = other.CurGold;
      }
      if (other.CaiJin != 0L) {
        CaiJin = other.CaiJin;
      }
      if (other.Multiple != 0) {
        Multiple = other.Multiple;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            Ret = input.ReadInt32();
            break;
          }
          case 24: {
            AddGold = input.ReadInt64();
            break;
          }
          case 32: {
            CurGold = input.ReadInt64();
            break;
          }
          case 40: {
            CaiJin = input.ReadInt64();
            break;
          }
          case 48: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            Ret = input.ReadInt32();
            break;
          }
          case 24: {
            AddGold = input.ReadInt64();
            break;
          }
          case 32: {
            CurGold = input.ReadInt64();
            break;
          }
          case 40: {
            CaiJin = input.ReadInt64();
            break;
          }
          case 48: {
            Multiple = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
