// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/MJHL.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MJHL {

  /// <summary>Holder for reflection information generated from Proto/SubGame/MJHL.proto</summary>
  public static partial class MJHLReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/MJHL.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MJHLReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9TdWJHYW1lL01KSEwucHJvdG8SBE1KSEwiSwoFUm91bmQSDAoE",
            "aWNvbhgBIAMoBRIPCgdoaXRfaWR4GAIgAygFEhYKDmdvbGRfaWNvbl9pbmZv",
            "GAMgAygFEgsKA29kZBgEIAEoBSJDCgxTQ19TY2VuZUluZm8SEgoKZnJlZV9j",
            "b3VudBgBIAEoBRISCgpjdXJyZW5fYmV0GAIgASgFEgsKA2JldBgDIAMoBSJz",
            "ChBDTURfM0RfU0NfUmVzdWx0EiIKDXRhZ19pY29uX2luZm8YASADKAsyCy5N",
            "SkhMLlJvdW5kEhUKDXRhYmxlX2FsbF9vZGQYAiABKAUSEgoKZnJlZV90aW1l",
            "cxgDIAEoBRIQCgh3aW5fZ29sZBgEIAEoBSpPCgpFTXNnSURNSkhMEhUKEVNV",
            "Ql9DU19HQU1FX1NUQVJUEAASEwoPU1VCX1NDX0JFVF9GQUlMEAESFQoRU1VC",
            "X1NDX1NUQVJUX0dBTUUQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MJHL.EMsgIDMJHL), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MJHL.Round), global::MJHL.Round.Parser, new[]{ "Icon", "HitIdx", "GoldIconInfo", "Odd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MJHL.SC_SceneInfo), global::MJHL.SC_SceneInfo.Parser, new[]{ "FreeCount", "CurrenBet", "Bet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MJHL.CMD_3D_SC_Result), global::MJHL.CMD_3D_SC_Result.Parser, new[]{ "TagIconInfo", "TableAllOdd", "FreeTimes", "WinGold" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///服务器消息
  /// </summary>
  public enum EMsgIDMJHL {
    /// <summary>
    ///开始游戏(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_CS_GAME_START")] SubCsGameStart = 0,
    /// <summary>
    ///游戏结束(MsgCommonN32)// 0：金币不足 1：下注失败
    /// </summary>
    [pbr::OriginalName("SUB_SC_BET_FAIL")] SubScBetFail = 1,
    /// <summary>
    ///场景消息(SC_SceneInfo)
    /// </summary>
    [pbr::OriginalName("SUB_SC_START_GAME")] SubScStartGame = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Round : pb::IMessage<Round>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Round> _parser = new pb::MessageParser<Round>(() => new Round());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Round> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MJHL.MJHLReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round(Round other) : this() {
      icon_ = other.icon_.Clone();
      hitIdx_ = other.hitIdx_.Clone();
      goldIconInfo_ = other.goldIconInfo_.Clone();
      odd_ = other.odd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round Clone() {
      return new Round(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "hit_idx" field.</summary>
    public const int HitIdxFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_hitIdx_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> hitIdx_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 命中图标下标 命中 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HitIdx {
      get { return hitIdx_; }
    }

    /// <summary>Field number for the "gold_icon_info" field.</summary>
    public const int GoldIconInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_goldIconInfo_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> goldIconInfo_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 金色图标下标 金色 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GoldIconInfo {
      get { return goldIconInfo_; }
    }

    /// <summary>Field number for the "odd" field.</summary>
    public const int OddFieldNumber = 4;
    private int odd_;
    /// <summary>
    /// 单次倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Odd {
      get { return odd_; }
      set {
        odd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Round);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Round other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icon_.Equals(other.icon_)) return false;
      if(!hitIdx_.Equals(other.hitIdx_)) return false;
      if(!goldIconInfo_.Equals(other.goldIconInfo_)) return false;
      if (Odd != other.Odd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icon_.GetHashCode();
      hash ^= hitIdx_.GetHashCode();
      hash ^= goldIconInfo_.GetHashCode();
      if (Odd != 0) hash ^= Odd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      icon_.WriteTo(output, _repeated_icon_codec);
      hitIdx_.WriteTo(output, _repeated_hitIdx_codec);
      goldIconInfo_.WriteTo(output, _repeated_goldIconInfo_codec);
      if (Odd != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Odd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      icon_.WriteTo(ref output, _repeated_icon_codec);
      hitIdx_.WriteTo(ref output, _repeated_hitIdx_codec);
      goldIconInfo_.WriteTo(ref output, _repeated_goldIconInfo_codec);
      if (Odd != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Odd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += hitIdx_.CalculateSize(_repeated_hitIdx_codec);
      size += goldIconInfo_.CalculateSize(_repeated_goldIconInfo_codec);
      if (Odd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Odd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Round other) {
      if (other == null) {
        return;
      }
      icon_.Add(other.icon_);
      hitIdx_.Add(other.hitIdx_);
      goldIconInfo_.Add(other.goldIconInfo_);
      if (other.Odd != 0) {
        Odd = other.Odd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 18:
          case 16: {
            hitIdx_.AddEntriesFrom(input, _repeated_hitIdx_codec);
            break;
          }
          case 26:
          case 24: {
            goldIconInfo_.AddEntriesFrom(input, _repeated_goldIconInfo_codec);
            break;
          }
          case 32: {
            Odd = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 18:
          case 16: {
            hitIdx_.AddEntriesFrom(ref input, _repeated_hitIdx_codec);
            break;
          }
          case 26:
          case 24: {
            goldIconInfo_.AddEntriesFrom(ref input, _repeated_goldIconInfo_codec);
            break;
          }
          case 32: {
            Odd = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MJHL.MJHLReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      freeCount_ = other.freeCount_;
      currenBet_ = other.currenBet_;
      bet_ = other.bet_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 1;
    private int freeCount_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "curren_bet" field.</summary>
    public const int CurrenBetFieldNumber = 2;
    private int currenBet_;
    /// <summary>
    /// 当前下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrenBet {
      get { return currenBet_; }
      set {
        currenBet_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_bet_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> bet_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bet {
      get { return bet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FreeCount != other.FreeCount) return false;
      if (CurrenBet != other.CurrenBet) return false;
      if(!bet_.Equals(other.bet_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (CurrenBet != 0) hash ^= CurrenBet.GetHashCode();
      hash ^= bet_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeCount);
      }
      if (CurrenBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrenBet);
      }
      bet_.WriteTo(output, _repeated_bet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeCount);
      }
      if (CurrenBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrenBet);
      }
      bet_.WriteTo(ref output, _repeated_bet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (CurrenBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrenBet);
      }
      size += bet_.CalculateSize(_repeated_bet_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.CurrenBet != 0) {
        CurrenBet = other.CurrenBet;
      }
      bet_.Add(other.bet_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            CurrenBet = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            CurrenBet = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 游戏结果返回
  /// </summary>
  public sealed partial class CMD_3D_SC_Result : pb::IMessage<CMD_3D_SC_Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_Result> _parser = new pb::MessageParser<CMD_3D_SC_Result>(() => new CMD_3D_SC_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MJHL.MJHLReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result(CMD_3D_SC_Result other) : this() {
      tagIconInfo_ = other.tagIconInfo_.Clone();
      tableAllOdd_ = other.tableAllOdd_;
      freeTimes_ = other.freeTimes_;
      winGold_ = other.winGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result Clone() {
      return new CMD_3D_SC_Result(this);
    }

    /// <summary>Field number for the "tag_icon_info" field.</summary>
    public const int TagIconInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MJHL.Round> _repeated_tagIconInfo_codec
        = pb::FieldCodec.ForMessage(10, global::MJHL.Round.Parser);
    private readonly pbc::RepeatedField<global::MJHL.Round> tagIconInfo_ = new pbc::RepeatedField<global::MJHL.Round>();
    /// <summary>
    ///每一轮的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MJHL.Round> TagIconInfo {
      get { return tagIconInfo_; }
    }

    /// <summary>Field number for the "table_all_odd" field.</summary>
    public const int TableAllOddFieldNumber = 2;
    private int tableAllOdd_;
    /// <summary>
    /// 总倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableAllOdd {
      get { return tableAllOdd_; }
      set {
        tableAllOdd_ = value;
      }
    }

    /// <summary>Field number for the "free_times" field.</summary>
    public const int FreeTimesFieldNumber = 3;
    private int freeTimes_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTimes {
      get { return freeTimes_; }
      set {
        freeTimes_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 4;
    private int winGold_;
    /// <summary>
    /// 赢得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tagIconInfo_.Equals(other.tagIconInfo_)) return false;
      if (TableAllOdd != other.TableAllOdd) return false;
      if (FreeTimes != other.FreeTimes) return false;
      if (WinGold != other.WinGold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tagIconInfo_.GetHashCode();
      if (TableAllOdd != 0) hash ^= TableAllOdd.GetHashCode();
      if (FreeTimes != 0) hash ^= FreeTimes.GetHashCode();
      if (WinGold != 0) hash ^= WinGold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tagIconInfo_.WriteTo(output, _repeated_tagIconInfo_codec);
      if (TableAllOdd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableAllOdd);
      }
      if (FreeTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FreeTimes);
      }
      if (WinGold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WinGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tagIconInfo_.WriteTo(ref output, _repeated_tagIconInfo_codec);
      if (TableAllOdd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableAllOdd);
      }
      if (FreeTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FreeTimes);
      }
      if (WinGold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WinGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tagIconInfo_.CalculateSize(_repeated_tagIconInfo_codec);
      if (TableAllOdd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableAllOdd);
      }
      if (FreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTimes);
      }
      if (WinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinGold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_Result other) {
      if (other == null) {
        return;
      }
      tagIconInfo_.Add(other.tagIconInfo_);
      if (other.TableAllOdd != 0) {
        TableAllOdd = other.TableAllOdd;
      }
      if (other.FreeTimes != 0) {
        FreeTimes = other.FreeTimes;
      }
      if (other.WinGold != 0) {
        WinGold = other.WinGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tagIconInfo_.AddEntriesFrom(input, _repeated_tagIconInfo_codec);
            break;
          }
          case 16: {
            TableAllOdd = input.ReadInt32();
            break;
          }
          case 24: {
            FreeTimes = input.ReadInt32();
            break;
          }
          case 32: {
            WinGold = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tagIconInfo_.AddEntriesFrom(ref input, _repeated_tagIconInfo_codec);
            break;
          }
          case 16: {
            TableAllOdd = input.ReadInt32();
            break;
          }
          case 24: {
            FreeTimes = input.ReadInt32();
            break;
          }
          case 32: {
            WinGold = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
