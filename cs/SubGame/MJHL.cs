// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/MJHL.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MJHL {

  /// <summary>Holder for reflection information generated from Proto/SubGame/MJHL.proto</summary>
  public static partial class MJHLReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/MJHL.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MJHLReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9TdWJHYW1lL01KSEwucHJvdG8SBE1KSEwiSgoFUm91bmQSDAoE",
            "aWNvbhgBIAMoBRIOCgZIaXRJZHgYAiADKAUSFgoOR29sZF9JY29uX0luZm8Y",
            "AyADKAUSCwoDb2RkGAQgASgFIlcKDFNDX1NjZW5lSW5mbxISCgpuRnJlZUNv",
            "dW50GAEgASgFEhIKCm5DdXJyZW5CZXQYAiABKAUSEQoJbkJldENvdW50GAMg",
            "ASgFEgwKBG5CZXQYBCADKAUiIgoOQ01EX1NDX0JldEZhaWwSEAoIblJlc0Nv",
            "ZGUYASABKAUibwoQQ01EXzNEX1NDX1Jlc3VsdBIgCgt0YWdJY29uSW5mbxgB",
            "IAMoCzILLk1KSEwuUm91bmQSEwoLdGFibGVBbGxPZGQYAiABKAUSEgoKbkZy",
            "ZWVUaW1lcxgDIAEoBRIQCghuV2luR29sZBgEIAEoBSpPCgpFTXNnSURNSkhM",
            "EhUKEVNVQl9DU19HQU1FX1NUQVJUEAASEwoPU1VCX1NDX0JFVF9GQUlMEAES",
            "FQoRU1VCX1NDX1NUQVJUX0dBTUUQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MJHL.EMsgIDMJHL), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MJHL.Round), global::MJHL.Round.Parser, new[]{ "Icon", "HitIdx", "GoldIconInfo", "Odd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MJHL.SC_SceneInfo), global::MJHL.SC_SceneInfo.Parser, new[]{ "NFreeCount", "NCurrenBet", "NBetCount", "NBet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MJHL.CMD_SC_BetFail), global::MJHL.CMD_SC_BetFail.Parser, new[]{ "NResCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MJHL.CMD_3D_SC_Result), global::MJHL.CMD_3D_SC_Result.Parser, new[]{ "TagIconInfo", "TableAllOdd", "NFreeTimes", "NWinGold" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///服务器消息
  /// </summary>
  public enum EMsgIDMJHL {
    /// <summary>
    ///开始游戏(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_CS_GAME_START")] SubCsGameStart = 0,
    /// <summary>
    ///游戏结束
    /// </summary>
    [pbr::OriginalName("SUB_SC_BET_FAIL")] SubScBetFail = 1,
    /// <summary>
    ///场景消息(SC_SceneInfo)
    /// </summary>
    [pbr::OriginalName("SUB_SC_START_GAME")] SubScStartGame = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Round : pb::IMessage<Round>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Round> _parser = new pb::MessageParser<Round>(() => new Round());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Round> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MJHL.MJHLReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round(Round other) : this() {
      icon_ = other.icon_.Clone();
      hitIdx_ = other.hitIdx_.Clone();
      goldIconInfo_ = other.goldIconInfo_.Clone();
      odd_ = other.odd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round Clone() {
      return new Round(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "HitIdx" field.</summary>
    public const int HitIdxFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_hitIdx_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> hitIdx_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 命中图标下标 命中 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HitIdx {
      get { return hitIdx_; }
    }

    /// <summary>Field number for the "Gold_Icon_Info" field.</summary>
    public const int GoldIconInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_goldIconInfo_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> goldIconInfo_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 金色图标下标 金色 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GoldIconInfo {
      get { return goldIconInfo_; }
    }

    /// <summary>Field number for the "odd" field.</summary>
    public const int OddFieldNumber = 4;
    private int odd_;
    /// <summary>
    /// 单次倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Odd {
      get { return odd_; }
      set {
        odd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Round);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Round other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icon_.Equals(other.icon_)) return false;
      if(!hitIdx_.Equals(other.hitIdx_)) return false;
      if(!goldIconInfo_.Equals(other.goldIconInfo_)) return false;
      if (Odd != other.Odd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icon_.GetHashCode();
      hash ^= hitIdx_.GetHashCode();
      hash ^= goldIconInfo_.GetHashCode();
      if (Odd != 0) hash ^= Odd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      icon_.WriteTo(output, _repeated_icon_codec);
      hitIdx_.WriteTo(output, _repeated_hitIdx_codec);
      goldIconInfo_.WriteTo(output, _repeated_goldIconInfo_codec);
      if (Odd != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Odd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      icon_.WriteTo(ref output, _repeated_icon_codec);
      hitIdx_.WriteTo(ref output, _repeated_hitIdx_codec);
      goldIconInfo_.WriteTo(ref output, _repeated_goldIconInfo_codec);
      if (Odd != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Odd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += hitIdx_.CalculateSize(_repeated_hitIdx_codec);
      size += goldIconInfo_.CalculateSize(_repeated_goldIconInfo_codec);
      if (Odd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Odd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Round other) {
      if (other == null) {
        return;
      }
      icon_.Add(other.icon_);
      hitIdx_.Add(other.hitIdx_);
      goldIconInfo_.Add(other.goldIconInfo_);
      if (other.Odd != 0) {
        Odd = other.Odd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 18:
          case 16: {
            hitIdx_.AddEntriesFrom(input, _repeated_hitIdx_codec);
            break;
          }
          case 26:
          case 24: {
            goldIconInfo_.AddEntriesFrom(input, _repeated_goldIconInfo_codec);
            break;
          }
          case 32: {
            Odd = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 18:
          case 16: {
            hitIdx_.AddEntriesFrom(ref input, _repeated_hitIdx_codec);
            break;
          }
          case 26:
          case 24: {
            goldIconInfo_.AddEntriesFrom(ref input, _repeated_goldIconInfo_codec);
            break;
          }
          case 32: {
            Odd = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MJHL.MJHLReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      nFreeCount_ = other.nFreeCount_;
      nCurrenBet_ = other.nCurrenBet_;
      nBetCount_ = other.nBetCount_;
      nBet_ = other.nBet_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "nFreeCount" field.</summary>
    public const int NFreeCountFieldNumber = 1;
    private int nFreeCount_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NFreeCount {
      get { return nFreeCount_; }
      set {
        nFreeCount_ = value;
      }
    }

    /// <summary>Field number for the "nCurrenBet" field.</summary>
    public const int NCurrenBetFieldNumber = 2;
    private int nCurrenBet_;
    /// <summary>
    /// 当前下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NCurrenBet {
      get { return nCurrenBet_; }
      set {
        nCurrenBet_ = value;
      }
    }

    /// <summary>Field number for the "nBetCount" field.</summary>
    public const int NBetCountFieldNumber = 3;
    private int nBetCount_;
    /// <summary>
    /// 下注列表个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NBetCount {
      get { return nBetCount_; }
      set {
        nBetCount_ = value;
      }
    }

    /// <summary>Field number for the "nBet" field.</summary>
    public const int NBetFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_nBet_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> nBet_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NBet {
      get { return nBet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NFreeCount != other.NFreeCount) return false;
      if (NCurrenBet != other.NCurrenBet) return false;
      if (NBetCount != other.NBetCount) return false;
      if(!nBet_.Equals(other.nBet_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NFreeCount != 0) hash ^= NFreeCount.GetHashCode();
      if (NCurrenBet != 0) hash ^= NCurrenBet.GetHashCode();
      if (NBetCount != 0) hash ^= NBetCount.GetHashCode();
      hash ^= nBet_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NFreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NFreeCount);
      }
      if (NCurrenBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NCurrenBet);
      }
      if (NBetCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NBetCount);
      }
      nBet_.WriteTo(output, _repeated_nBet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NFreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NFreeCount);
      }
      if (NCurrenBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NCurrenBet);
      }
      if (NBetCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NBetCount);
      }
      nBet_.WriteTo(ref output, _repeated_nBet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NFreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NFreeCount);
      }
      if (NCurrenBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NCurrenBet);
      }
      if (NBetCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NBetCount);
      }
      size += nBet_.CalculateSize(_repeated_nBet_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.NFreeCount != 0) {
        NFreeCount = other.NFreeCount;
      }
      if (other.NCurrenBet != 0) {
        NCurrenBet = other.NCurrenBet;
      }
      if (other.NBetCount != 0) {
        NBetCount = other.NBetCount;
      }
      nBet_.Add(other.nBet_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NFreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            NCurrenBet = input.ReadInt32();
            break;
          }
          case 24: {
            NBetCount = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            nBet_.AddEntriesFrom(input, _repeated_nBet_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NFreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            NCurrenBet = input.ReadInt32();
            break;
          }
          case 24: {
            NBetCount = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            nBet_.AddEntriesFrom(ref input, _repeated_nBet_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMD_SC_BetFail : pb::IMessage<CMD_SC_BetFail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_SC_BetFail> _parser = new pb::MessageParser<CMD_SC_BetFail>(() => new CMD_SC_BetFail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_SC_BetFail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MJHL.MJHLReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_BetFail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_BetFail(CMD_SC_BetFail other) : this() {
      nResCode_ = other.nResCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_BetFail Clone() {
      return new CMD_SC_BetFail(this);
    }

    /// <summary>Field number for the "nResCode" field.</summary>
    public const int NResCodeFieldNumber = 1;
    private int nResCode_;
    /// <summary>
    /// 0：金币不足 1：下注失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NResCode {
      get { return nResCode_; }
      set {
        nResCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_SC_BetFail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_SC_BetFail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NResCode != other.NResCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NResCode != 0) hash ^= NResCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NResCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NResCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NResCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NResCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NResCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NResCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_SC_BetFail other) {
      if (other == null) {
        return;
      }
      if (other.NResCode != 0) {
        NResCode = other.NResCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NResCode = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NResCode = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 游戏结果返回
  /// </summary>
  public sealed partial class CMD_3D_SC_Result : pb::IMessage<CMD_3D_SC_Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_Result> _parser = new pb::MessageParser<CMD_3D_SC_Result>(() => new CMD_3D_SC_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MJHL.MJHLReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result(CMD_3D_SC_Result other) : this() {
      tagIconInfo_ = other.tagIconInfo_.Clone();
      tableAllOdd_ = other.tableAllOdd_;
      nFreeTimes_ = other.nFreeTimes_;
      nWinGold_ = other.nWinGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result Clone() {
      return new CMD_3D_SC_Result(this);
    }

    /// <summary>Field number for the "tagIconInfo" field.</summary>
    public const int TagIconInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MJHL.Round> _repeated_tagIconInfo_codec
        = pb::FieldCodec.ForMessage(10, global::MJHL.Round.Parser);
    private readonly pbc::RepeatedField<global::MJHL.Round> tagIconInfo_ = new pbc::RepeatedField<global::MJHL.Round>();
    /// <summary>
    ///每一轮的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MJHL.Round> TagIconInfo {
      get { return tagIconInfo_; }
    }

    /// <summary>Field number for the "tableAllOdd" field.</summary>
    public const int TableAllOddFieldNumber = 2;
    private int tableAllOdd_;
    /// <summary>
    /// 总倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableAllOdd {
      get { return tableAllOdd_; }
      set {
        tableAllOdd_ = value;
      }
    }

    /// <summary>Field number for the "nFreeTimes" field.</summary>
    public const int NFreeTimesFieldNumber = 3;
    private int nFreeTimes_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NFreeTimes {
      get { return nFreeTimes_; }
      set {
        nFreeTimes_ = value;
      }
    }

    /// <summary>Field number for the "nWinGold" field.</summary>
    public const int NWinGoldFieldNumber = 4;
    private int nWinGold_;
    /// <summary>
    /// 赢得金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NWinGold {
      get { return nWinGold_; }
      set {
        nWinGold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tagIconInfo_.Equals(other.tagIconInfo_)) return false;
      if (TableAllOdd != other.TableAllOdd) return false;
      if (NFreeTimes != other.NFreeTimes) return false;
      if (NWinGold != other.NWinGold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tagIconInfo_.GetHashCode();
      if (TableAllOdd != 0) hash ^= TableAllOdd.GetHashCode();
      if (NFreeTimes != 0) hash ^= NFreeTimes.GetHashCode();
      if (NWinGold != 0) hash ^= NWinGold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tagIconInfo_.WriteTo(output, _repeated_tagIconInfo_codec);
      if (TableAllOdd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableAllOdd);
      }
      if (NFreeTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NFreeTimes);
      }
      if (NWinGold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NWinGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tagIconInfo_.WriteTo(ref output, _repeated_tagIconInfo_codec);
      if (TableAllOdd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableAllOdd);
      }
      if (NFreeTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NFreeTimes);
      }
      if (NWinGold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NWinGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tagIconInfo_.CalculateSize(_repeated_tagIconInfo_codec);
      if (TableAllOdd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableAllOdd);
      }
      if (NFreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NFreeTimes);
      }
      if (NWinGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NWinGold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_Result other) {
      if (other == null) {
        return;
      }
      tagIconInfo_.Add(other.tagIconInfo_);
      if (other.TableAllOdd != 0) {
        TableAllOdd = other.TableAllOdd;
      }
      if (other.NFreeTimes != 0) {
        NFreeTimes = other.NFreeTimes;
      }
      if (other.NWinGold != 0) {
        NWinGold = other.NWinGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tagIconInfo_.AddEntriesFrom(input, _repeated_tagIconInfo_codec);
            break;
          }
          case 16: {
            TableAllOdd = input.ReadInt32();
            break;
          }
          case 24: {
            NFreeTimes = input.ReadInt32();
            break;
          }
          case 32: {
            NWinGold = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tagIconInfo_.AddEntriesFrom(ref input, _repeated_tagIconInfo_codec);
            break;
          }
          case 16: {
            TableAllOdd = input.ReadInt32();
            break;
          }
          case 24: {
            NFreeTimes = input.ReadInt32();
            break;
          }
          case 32: {
            NWinGold = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
