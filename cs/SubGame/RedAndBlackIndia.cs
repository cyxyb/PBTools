// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/RedAndBlack_India.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RedAndBlack {

  /// <summary>Holder for reflection information generated from Proto/SubGame/RedAndBlack_India.proto</summary>
  public static partial class RedAndBlackIndiaReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/RedAndBlack_India.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RedAndBlackIndiaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVQcm90by9TdWJHYW1lL1JlZEFuZEJsYWNrX0luZGlhLnByb3RvEgtSZWRB",
            "bmRCbGFjayIuCglNc2dSZWNvcmQSDgoGcmVzdWx0GAEgASgFEhEKCWNhcmRf",
            "dHlwZRgCIAEoBSK2AQoMTXNnU2NlbmVJbmZvEgsKA2JldBgBIAMoBRImCgZy",
            "ZWNvcmQYAiADKAsyFi5SZWRBbmRCbGFjay5Nc2dSZWNvcmQSEQoJYmV0X2xp",
            "bWl0GAMgAygFEhQKDHBsYXllcl9saW1pdBgEIAEoBRIQCghhcmVhX211bBgF",
            "IAMoBRISCgpzdGF0ZV90aW1lGAYgAygFEhMKC3JlbWFpbl90aW1lGAcgASgF",
            "Eg0KBXN0YXRlGAggASgFIiUKBk1zZ0JldBINCgVpbmRleBgBIAEoBRIMCgRh",
            "cmVhGAIgASgFIkUKCk1zZ0JldFJlc3ASEAoIY2hhaXJfaWQYASABKAUSJQoI",
            "YmV0X2luZm8YAiABKAsyEy5SZWRBbmRCbGFjay5Nc2dCZXQiPwoRTXNnU2lu",
            "Z2xlQWdhaW5CZXQSDQoFaW5kZXgYASABKAUSDAoEYXJlYRgCIAEoBRINCgVj",
            "b3VudBgDIAEoBSJFCgtNc2dBZ2FpbkJldBI2Cg5hZ2Fpbl9iZXRfaW5mbxgB",
            "IAMoCzIeLlJlZEFuZEJsYWNrLk1zZ1NpbmdsZUFnYWluQmV0IlUKD01zZ0Fn",
            "YWluQmV0UmVzcBIQCghjaGFpcl9pZBgBIAEoBRIwCg5hZ2Fpbl9iZXRfaW5m",
            "bxgCIAEoCzIYLlJlZEFuZEJsYWNrLk1zZ0FnYWluQmV0IisKCU1zZ1dpbk1z",
            "ZxIQCghjaGFpcl9pZBgBIAEoBRIMCgRnb2xkGAIgASgDImUKCU1zZ1Jlc3Vs",
            "dBInCgd3aW5fbXNnGAEgAygLMhYuUmVkQW5kQmxhY2suTXNnV2luTXNnEgwK",
            "BGNhcmQYAiADKAUSEQoJY2FyZF90eXBlGAMgAygFEg4KBnJlc3VsdBgEIAEo",
            "BSI6CgtNc2dUb3RhbEJldBIQCghjaGFpcl9pZBgBIAEoBRILCgNiZXQYAiAD",
            "KAUSDAoEZ29sZBgDIAMoAyI8CgxNc2dCZXRSZWNvcmQSLAoKYmV0X3JlY29y",
            "ZBgBIAMoCzIYLlJlZEFuZEJsYWNrLk1zZ1RvdGFsQmV0KvMBCg1FTXNnSURT",
            "dWJHYW1lEhUKEU1zZ0lEU3ViR2FtZV9OdWxsEAASFAoQTXNnSURTdWJHYW1l",
            "X0JldBABEhgKFE1zZ0lEU3ViR2FtZV9CZXRSZXNwEAISGQoVTXNnSURTdWJH",
            "YW1lX0FnYWluQmV0EAMSHQoZTXNnSURTdWJHYW1lX0FnYWluQmV0UmVzcBAE",
            "Eh8KG01zZ0lEU3ViR2FtZV9HYW1lUmVzdWx0UmVzcBAFEh4KGk1zZ0lEU3Vi",
            "R2FtZV9CZXRSZWNvcmRSZXNwEAYSIAocTXNnSURTdWJHYW1lX05vdGlmeVN0",
            "YXRlUmVzcBAHYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::RedAndBlack.EMsgIDSubGame), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RedAndBlack.MsgRecord), global::RedAndBlack.MsgRecord.Parser, new[]{ "Result", "CardType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RedAndBlack.MsgSceneInfo), global::RedAndBlack.MsgSceneInfo.Parser, new[]{ "Bet", "Record", "BetLimit", "PlayerLimit", "AreaMul", "StateTime", "RemainTime", "State" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RedAndBlack.MsgBet), global::RedAndBlack.MsgBet.Parser, new[]{ "Index", "Area" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RedAndBlack.MsgBetResp), global::RedAndBlack.MsgBetResp.Parser, new[]{ "ChairId", "BetInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RedAndBlack.MsgSingleAgainBet), global::RedAndBlack.MsgSingleAgainBet.Parser, new[]{ "Index", "Area", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RedAndBlack.MsgAgainBet), global::RedAndBlack.MsgAgainBet.Parser, new[]{ "AgainBetInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RedAndBlack.MsgAgainBetResp), global::RedAndBlack.MsgAgainBetResp.Parser, new[]{ "ChairId", "AgainBetInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RedAndBlack.MsgWinMsg), global::RedAndBlack.MsgWinMsg.Parser, new[]{ "ChairId", "Gold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RedAndBlack.MsgResult), global::RedAndBlack.MsgResult.Parser, new[]{ "WinMsg", "Card", "CardType", "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RedAndBlack.MsgTotalBet), global::RedAndBlack.MsgTotalBet.Parser, new[]{ "ChairId", "Bet", "Gold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RedAndBlack.MsgBetRecord), global::RedAndBlack.MsgBetRecord.Parser, new[]{ "BetRecord" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDSubGame {
    [pbr::OriginalName("MsgIDSubGame_Null")] MsgIdsubGameNull = 0,
    /// <summary>
    ///玩家下注(MsgBet)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_Bet")] MsgIdsubGameBet = 1,
    /// <summary>
    ///玩家下注返回(MsgBetResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_BetResp")] MsgIdsubGameBetResp = 2,
    /// <summary>
    ///玩家续投(MsgAgainBet)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_AgainBet")] MsgIdsubGameAgainBet = 3,
    /// <summary>
    ///玩家续投(MsgAgainBetResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_AgainBetResp")] MsgIdsubGameAgainBetResp = 4,
    /// <summary>
    ///游戏结果(MsgResult)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameResultResp")] MsgIdsubGameGameResultResp = 5,
    /// <summary>
    ///玩家下注记录(MsgBetRecord)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_BetRecordResp")] MsgIdsubGameBetRecordResp = 6,
    /// <summary>
    ///游戏状态(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyStateResp")] MsgIdsubGameNotifyStateResp = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  ///开牌记录
  /// </summary>
  public sealed partial class MsgRecord : pb::IMessage<MsgRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgRecord> _parser = new pb::MessageParser<MsgRecord>(() => new MsgRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RedAndBlack.RedAndBlackIndiaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRecord(MsgRecord other) : this() {
      result_ = other.result_;
      cardType_ = other.cardType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgRecord Clone() {
      return new MsgRecord(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///开牌结果(0:红 1:黑 2:红和幸运一击 3:黑和幸运一击)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 2;
    private int cardType_;
    /// <summary>
    ///赢牌类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (CardType != other.CardType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (CardType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (CardType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgRecord other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class MsgSceneInfo : pb::IMessage<MsgSceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgSceneInfo> _parser = new pb::MessageParser<MsgSceneInfo>(() => new MsgSceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgSceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RedAndBlack.RedAndBlackIndiaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSceneInfo(MsgSceneInfo other) : this() {
      bet_ = other.bet_.Clone();
      record_ = other.record_.Clone();
      betLimit_ = other.betLimit_.Clone();
      playerLimit_ = other.playerLimit_;
      areaMul_ = other.areaMul_.Clone();
      stateTime_ = other.stateTime_.Clone();
      remainTime_ = other.remainTime_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSceneInfo Clone() {
      return new MsgSceneInfo(this);
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_bet_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> bet_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///固定押注配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bet {
      get { return bet_; }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 2;
    private static readonly pb::FieldCodec<global::RedAndBlack.MsgRecord> _repeated_record_codec
        = pb::FieldCodec.ForMessage(18, global::RedAndBlack.MsgRecord.Parser);
    private readonly pbc::RepeatedField<global::RedAndBlack.MsgRecord> record_ = new pbc::RepeatedField<global::RedAndBlack.MsgRecord>();
    /// <summary>
    ///开牌记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RedAndBlack.MsgRecord> Record {
      get { return record_; }
    }

    /// <summary>Field number for the "bet_limit" field.</summary>
    public const int BetLimitFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_betLimit_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> betLimit_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///个人区域限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BetLimit {
      get { return betLimit_; }
    }

    /// <summary>Field number for the "player_limit" field.</summary>
    public const int PlayerLimitFieldNumber = 4;
    private int playerLimit_;
    /// <summary>
    ///个人下注限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLimit {
      get { return playerLimit_; }
      set {
        playerLimit_ = value;
      }
    }

    /// <summary>Field number for the "area_mul" field.</summary>
    public const int AreaMulFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_areaMul_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> areaMul_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///区域赔付倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AreaMul {
      get { return areaMul_; }
    }

    /// <summary>Field number for the "state_time" field.</summary>
    public const int StateTimeFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_stateTime_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> stateTime_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///各个状态配置时间(0:准备 7s 1:下注 15s 2:结算 10s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StateTime {
      get { return stateTime_; }
    }

    /// <summary>Field number for the "remain_time" field.</summary>
    public const int RemainTimeFieldNumber = 7;
    private int remainTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 8;
    private int state_;
    /// <summary>
    ///当前状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgSceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgSceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bet_.Equals(other.bet_)) return false;
      if(!record_.Equals(other.record_)) return false;
      if(!betLimit_.Equals(other.betLimit_)) return false;
      if (PlayerLimit != other.PlayerLimit) return false;
      if(!areaMul_.Equals(other.areaMul_)) return false;
      if(!stateTime_.Equals(other.stateTime_)) return false;
      if (RemainTime != other.RemainTime) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bet_.GetHashCode();
      hash ^= record_.GetHashCode();
      hash ^= betLimit_.GetHashCode();
      if (PlayerLimit != 0) hash ^= PlayerLimit.GetHashCode();
      hash ^= areaMul_.GetHashCode();
      hash ^= stateTime_.GetHashCode();
      if (RemainTime != 0) hash ^= RemainTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      bet_.WriteTo(output, _repeated_bet_codec);
      record_.WriteTo(output, _repeated_record_codec);
      betLimit_.WriteTo(output, _repeated_betLimit_codec);
      if (PlayerLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerLimit);
      }
      areaMul_.WriteTo(output, _repeated_areaMul_codec);
      stateTime_.WriteTo(output, _repeated_stateTime_codec);
      if (RemainTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RemainTime);
      }
      if (State != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      bet_.WriteTo(ref output, _repeated_bet_codec);
      record_.WriteTo(ref output, _repeated_record_codec);
      betLimit_.WriteTo(ref output, _repeated_betLimit_codec);
      if (PlayerLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayerLimit);
      }
      areaMul_.WriteTo(ref output, _repeated_areaMul_codec);
      stateTime_.WriteTo(ref output, _repeated_stateTime_codec);
      if (RemainTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RemainTime);
      }
      if (State != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bet_.CalculateSize(_repeated_bet_codec);
      size += record_.CalculateSize(_repeated_record_codec);
      size += betLimit_.CalculateSize(_repeated_betLimit_codec);
      if (PlayerLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLimit);
      }
      size += areaMul_.CalculateSize(_repeated_areaMul_codec);
      size += stateTime_.CalculateSize(_repeated_stateTime_codec);
      if (RemainTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgSceneInfo other) {
      if (other == null) {
        return;
      }
      bet_.Add(other.bet_);
      record_.Add(other.record_);
      betLimit_.Add(other.betLimit_);
      if (other.PlayerLimit != 0) {
        PlayerLimit = other.PlayerLimit;
      }
      areaMul_.Add(other.areaMul_);
      stateTime_.Add(other.stateTime_);
      if (other.RemainTime != 0) {
        RemainTime = other.RemainTime;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
          case 18: {
            record_.AddEntriesFrom(input, _repeated_record_codec);
            break;
          }
          case 26:
          case 24: {
            betLimit_.AddEntriesFrom(input, _repeated_betLimit_codec);
            break;
          }
          case 32: {
            PlayerLimit = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            areaMul_.AddEntriesFrom(input, _repeated_areaMul_codec);
            break;
          }
          case 50:
          case 48: {
            stateTime_.AddEntriesFrom(input, _repeated_stateTime_codec);
            break;
          }
          case 56: {
            RemainTime = input.ReadInt32();
            break;
          }
          case 64: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
          case 18: {
            record_.AddEntriesFrom(ref input, _repeated_record_codec);
            break;
          }
          case 26:
          case 24: {
            betLimit_.AddEntriesFrom(ref input, _repeated_betLimit_codec);
            break;
          }
          case 32: {
            PlayerLimit = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            areaMul_.AddEntriesFrom(ref input, _repeated_areaMul_codec);
            break;
          }
          case 50:
          case 48: {
            stateTime_.AddEntriesFrom(ref input, _repeated_stateTime_codec);
            break;
          }
          case 56: {
            RemainTime = input.ReadInt32();
            break;
          }
          case 64: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家下注
  /// </summary>
  public sealed partial class MsgBet : pb::IMessage<MsgBet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgBet> _parser = new pb::MessageParser<MsgBet>(() => new MsgBet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RedAndBlack.RedAndBlackIndiaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBet(MsgBet other) : this() {
      index_ = other.index_;
      area_ = other.area_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBet Clone() {
      return new MsgBet(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///押注下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 2;
    private int area_;
    /// <summary>
    ///押注区域(0:红 1:黑 2:幸运一击)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Area != other.Area) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Area != 0) hash ^= Area.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Area);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgBet other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Area != 0) {
        Area = other.Area;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家下注返回
  /// </summary>
  public sealed partial class MsgBetResp : pb::IMessage<MsgBetResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgBetResp> _parser = new pb::MessageParser<MsgBetResp>(() => new MsgBetResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBetResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RedAndBlack.RedAndBlackIndiaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBetResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBetResp(MsgBetResp other) : this() {
      chairId_ = other.chairId_;
      betInfo_ = other.betInfo_ != null ? other.betInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBetResp Clone() {
      return new MsgBetResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "bet_info" field.</summary>
    public const int BetInfoFieldNumber = 2;
    private global::RedAndBlack.MsgBet betInfo_;
    /// <summary>
    ///玩家下注信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RedAndBlack.MsgBet BetInfo {
      get { return betInfo_; }
      set {
        betInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBetResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBetResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (!object.Equals(BetInfo, other.BetInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (betInfo_ != null) hash ^= BetInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (betInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BetInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (betInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BetInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (betInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BetInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgBetResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.betInfo_ != null) {
        if (betInfo_ == null) {
          BetInfo = new global::RedAndBlack.MsgBet();
        }
        BetInfo.MergeFrom(other.BetInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18: {
            if (betInfo_ == null) {
              BetInfo = new global::RedAndBlack.MsgBet();
            }
            input.ReadMessage(BetInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18: {
            if (betInfo_ == null) {
              BetInfo = new global::RedAndBlack.MsgBet();
            }
            input.ReadMessage(BetInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家下注
  /// </summary>
  public sealed partial class MsgSingleAgainBet : pb::IMessage<MsgSingleAgainBet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgSingleAgainBet> _parser = new pb::MessageParser<MsgSingleAgainBet>(() => new MsgSingleAgainBet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgSingleAgainBet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RedAndBlack.RedAndBlackIndiaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSingleAgainBet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSingleAgainBet(MsgSingleAgainBet other) : this() {
      index_ = other.index_;
      area_ = other.area_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSingleAgainBet Clone() {
      return new MsgSingleAgainBet(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///押注下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 2;
    private int area_;
    /// <summary>
    ///押注区域(0:红 1:黑 2:幸运一击)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    ///次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgSingleAgainBet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgSingleAgainBet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Area != other.Area) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Area != 0) hash ^= Area.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Area);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgSingleAgainBet other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Area != 0) {
        Area = other.Area;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家续投
  /// </summary>
  public sealed partial class MsgAgainBet : pb::IMessage<MsgAgainBet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgAgainBet> _parser = new pb::MessageParser<MsgAgainBet>(() => new MsgAgainBet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgAgainBet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RedAndBlack.RedAndBlackIndiaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAgainBet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAgainBet(MsgAgainBet other) : this() {
      againBetInfo_ = other.againBetInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAgainBet Clone() {
      return new MsgAgainBet(this);
    }

    /// <summary>Field number for the "again_bet_info" field.</summary>
    public const int AgainBetInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RedAndBlack.MsgSingleAgainBet> _repeated_againBetInfo_codec
        = pb::FieldCodec.ForMessage(10, global::RedAndBlack.MsgSingleAgainBet.Parser);
    private readonly pbc::RepeatedField<global::RedAndBlack.MsgSingleAgainBet> againBetInfo_ = new pbc::RepeatedField<global::RedAndBlack.MsgSingleAgainBet>();
    /// <summary>
    ///玩家续投
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RedAndBlack.MsgSingleAgainBet> AgainBetInfo {
      get { return againBetInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgAgainBet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgAgainBet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!againBetInfo_.Equals(other.againBetInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= againBetInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      againBetInfo_.WriteTo(output, _repeated_againBetInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      againBetInfo_.WriteTo(ref output, _repeated_againBetInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += againBetInfo_.CalculateSize(_repeated_againBetInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgAgainBet other) {
      if (other == null) {
        return;
      }
      againBetInfo_.Add(other.againBetInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            againBetInfo_.AddEntriesFrom(input, _repeated_againBetInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            againBetInfo_.AddEntriesFrom(ref input, _repeated_againBetInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家续投返回
  /// </summary>
  public sealed partial class MsgAgainBetResp : pb::IMessage<MsgAgainBetResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgAgainBetResp> _parser = new pb::MessageParser<MsgAgainBetResp>(() => new MsgAgainBetResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgAgainBetResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RedAndBlack.RedAndBlackIndiaReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAgainBetResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAgainBetResp(MsgAgainBetResp other) : this() {
      chairId_ = other.chairId_;
      againBetInfo_ = other.againBetInfo_ != null ? other.againBetInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgAgainBetResp Clone() {
      return new MsgAgainBetResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "again_bet_info" field.</summary>
    public const int AgainBetInfoFieldNumber = 2;
    private global::RedAndBlack.MsgAgainBet againBetInfo_;
    /// <summary>
    ///玩家续投信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RedAndBlack.MsgAgainBet AgainBetInfo {
      get { return againBetInfo_; }
      set {
        againBetInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgAgainBetResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgAgainBetResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (!object.Equals(AgainBetInfo, other.AgainBetInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (againBetInfo_ != null) hash ^= AgainBetInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (againBetInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AgainBetInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (againBetInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AgainBetInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (againBetInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AgainBetInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgAgainBetResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.againBetInfo_ != null) {
        if (againBetInfo_ == null) {
          AgainBetInfo = new global::RedAndBlack.MsgAgainBet();
        }
        AgainBetInfo.MergeFrom(other.AgainBetInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18: {
            if (againBetInfo_ == null) {
              AgainBetInfo = new global::RedAndBlack.MsgAgainBet();
            }
            input.ReadMessage(AgainBetInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18: {
            if (againBetInfo_ == null) {
              AgainBetInfo = new global::RedAndBlack.MsgAgainBet();
            }
            input.ReadMessage(AgainBetInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家输赢信息                              
  /// </summary>
  public sealed partial class MsgWinMsg : pb::IMessage<MsgWinMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgWinMsg> _parser = new pb::MessageParser<MsgWinMsg>(() => new MsgWinMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgWinMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RedAndBlack.RedAndBlackIndiaReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgWinMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgWinMsg(MsgWinMsg other) : this() {
      chairId_ = other.chairId_;
      gold_ = other.gold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgWinMsg Clone() {
      return new MsgWinMsg(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private long gold_;
    /// <summary>
    ///玩家输赢信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgWinMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgWinMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (Gold != other.Gold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Gold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Gold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgWinMsg other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Gold = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Gold = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏结果                                  
  /// </summary>
  public sealed partial class MsgResult : pb::IMessage<MsgResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgResult> _parser = new pb::MessageParser<MsgResult>(() => new MsgResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RedAndBlack.RedAndBlackIndiaReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgResult(MsgResult other) : this() {
      winMsg_ = other.winMsg_.Clone();
      card_ = other.card_.Clone();
      cardType_ = other.cardType_.Clone();
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgResult Clone() {
      return new MsgResult(this);
    }

    /// <summary>Field number for the "win_msg" field.</summary>
    public const int WinMsgFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RedAndBlack.MsgWinMsg> _repeated_winMsg_codec
        = pb::FieldCodec.ForMessage(10, global::RedAndBlack.MsgWinMsg.Parser);
    private readonly pbc::RepeatedField<global::RedAndBlack.MsgWinMsg> winMsg_ = new pbc::RepeatedField<global::RedAndBlack.MsgWinMsg>();
    /// <summary>
    ///玩家输赢信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RedAndBlack.MsgWinMsg> WinMsg {
      get { return winMsg_; }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_card_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> card_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///牌信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Card {
      get { return card_; }
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cardType_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> cardType_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///牌类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardType {
      get { return cardType_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private int result_;
    /// <summary>
    ///开牌结果(0:红 1:黑 2:红和幸运一击 3:黑和幸运一击)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!winMsg_.Equals(other.winMsg_)) return false;
      if(!card_.Equals(other.card_)) return false;
      if(!cardType_.Equals(other.cardType_)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= winMsg_.GetHashCode();
      hash ^= card_.GetHashCode();
      hash ^= cardType_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      winMsg_.WriteTo(output, _repeated_winMsg_codec);
      card_.WriteTo(output, _repeated_card_codec);
      cardType_.WriteTo(output, _repeated_cardType_codec);
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      winMsg_.WriteTo(ref output, _repeated_winMsg_codec);
      card_.WriteTo(ref output, _repeated_card_codec);
      cardType_.WriteTo(ref output, _repeated_cardType_codec);
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += winMsg_.CalculateSize(_repeated_winMsg_codec);
      size += card_.CalculateSize(_repeated_card_codec);
      size += cardType_.CalculateSize(_repeated_cardType_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgResult other) {
      if (other == null) {
        return;
      }
      winMsg_.Add(other.winMsg_);
      card_.Add(other.card_);
      cardType_.Add(other.cardType_);
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            winMsg_.AddEntriesFrom(input, _repeated_winMsg_codec);
            break;
          }
          case 18:
          case 16: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
          case 26:
          case 24: {
            cardType_.AddEntriesFrom(input, _repeated_cardType_codec);
            break;
          }
          case 32: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            winMsg_.AddEntriesFrom(ref input, _repeated_winMsg_codec);
            break;
          }
          case 18:
          case 16: {
            card_.AddEntriesFrom(ref input, _repeated_card_codec);
            break;
          }
          case 26:
          case 24: {
            cardType_.AddEntriesFrom(ref input, _repeated_cardType_codec);
            break;
          }
          case 32: {
            Result = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///下注记录                                  
  /// </summary>
  public sealed partial class MsgTotalBet : pb::IMessage<MsgTotalBet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgTotalBet> _parser = new pb::MessageParser<MsgTotalBet>(() => new MsgTotalBet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgTotalBet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RedAndBlack.RedAndBlackIndiaReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTotalBet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTotalBet(MsgTotalBet other) : this() {
      chairId_ = other.chairId_;
      bet_ = other.bet_.Clone();
      gold_ = other.gold_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTotalBet Clone() {
      return new MsgTotalBet(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_bet_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> bet_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩家押注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bet {
      get { return bet_; }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_gold_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> gold_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///玩家输赢金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Gold {
      get { return gold_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgTotalBet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgTotalBet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if(!bet_.Equals(other.bet_)) return false;
      if(!gold_.Equals(other.gold_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      hash ^= bet_.GetHashCode();
      hash ^= gold_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      bet_.WriteTo(output, _repeated_bet_codec);
      gold_.WriteTo(output, _repeated_gold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      bet_.WriteTo(ref output, _repeated_bet_codec);
      gold_.WriteTo(ref output, _repeated_gold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      size += bet_.CalculateSize(_repeated_bet_codec);
      size += gold_.CalculateSize(_repeated_gold_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgTotalBet other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      bet_.Add(other.bet_);
      gold_.Add(other.gold_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
          case 26:
          case 24: {
            gold_.AddEntriesFrom(input, _repeated_gold_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
          case 26:
          case 24: {
            gold_.AddEntriesFrom(ref input, _repeated_gold_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///下注记录                                  
  /// </summary>
  public sealed partial class MsgBetRecord : pb::IMessage<MsgBetRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgBetRecord> _parser = new pb::MessageParser<MsgBetRecord>(() => new MsgBetRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBetRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RedAndBlack.RedAndBlackIndiaReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBetRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBetRecord(MsgBetRecord other) : this() {
      betRecord_ = other.betRecord_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBetRecord Clone() {
      return new MsgBetRecord(this);
    }

    /// <summary>Field number for the "bet_record" field.</summary>
    public const int BetRecordFieldNumber = 1;
    private static readonly pb::FieldCodec<global::RedAndBlack.MsgTotalBet> _repeated_betRecord_codec
        = pb::FieldCodec.ForMessage(10, global::RedAndBlack.MsgTotalBet.Parser);
    private readonly pbc::RepeatedField<global::RedAndBlack.MsgTotalBet> betRecord_ = new pbc::RepeatedField<global::RedAndBlack.MsgTotalBet>();
    /// <summary>
    ///下注记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::RedAndBlack.MsgTotalBet> BetRecord {
      get { return betRecord_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBetRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBetRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!betRecord_.Equals(other.betRecord_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= betRecord_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      betRecord_.WriteTo(output, _repeated_betRecord_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      betRecord_.WriteTo(ref output, _repeated_betRecord_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += betRecord_.CalculateSize(_repeated_betRecord_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgBetRecord other) {
      if (other == null) {
        return;
      }
      betRecord_.Add(other.betRecord_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            betRecord_.AddEntriesFrom(input, _repeated_betRecord_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            betRecord_.AddEntriesFrom(ref input, _repeated_betRecord_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
