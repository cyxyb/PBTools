// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/TJZ.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TJZ {

  /// <summary>Holder for reflection information generated from Proto/SubGame/TJZ.proto</summary>
  public static partial class TJZReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/TJZ.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TJZReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQcm90by9TdWJHYW1lL1RKWi5wcm90bxIDVEpaItQBCgxTQ19TY2VuZUlu",
            "Zm8SEwoLY3VyX2phY2twb3QYASABKAMSCwoDYmV0GAIgAygFEhAKCGN1cl9j",
            "aGlwGAMgASgFEhgKEGNoZWF0X2xpbWl0X2NoaXAYBCABKAUSEAoIZnJlZV9j",
            "bnQYBSABKAUSDAoEaWNvbhgGIAMoBRIWCg5jdXJfdXBfcHJvY2VzcxgHIAEo",
            "BRISCgp1cF9wcm9jZXNzGAggASgFEg4KBnJldHVybhgJIAEoCBIaChJoaXNf",
            "Z29sZF9tb3JlX3RoYW4YCiABKAgiHgoHSGl0SWNvbhITCgtpc19oaXRfaWNv",
            "bhgBIAMoCCLaAgoQQ01EXzNEX1NDX1Jlc3VsdBITCgtjdXJfamFja3BvdBgB",
            "IAEoAxIYChBoaXRfamFja3BvdF9nb2xkGAIgASgDEhYKDmxpbmVfd2luX3Nv",
            "Y3JlGAMgASgDEhYKDndpbl90eXBlX3Njb3JlGAQgASgDEgsKA29kZBgFIAEo",
            "BRIYChBjaGVhdF9saW1pdF9jaGlwGAYgASgFEgwKBGljb24YByADKAUSHAoG",
            "aXNfaGl0GAggAygLMgwuVEpaLkhpdEljb24SFAoMYWRkX2ZyZWVfY250GAkg",
            "ASgFEhAKCGZyZWVfY250GAogASgFEhYKDmN1cl91cF9wcm9jZXNzGAsgASgF",
            "EhIKCnVwX3Byb2Nlc3MYDCABKAUSFAoMbWF4X3dpbl90eXBlGA0gASgFEg4K",
            "BnJldHVybhgOIAEoCBIaChJoaXNfZ29sZF9tb3JlX3RoYW4YDyABKAgqOAoJ",
            "RU1zZ0lEVEpaEhUKEVNVQl9DU19HQU1FX1NUQVJUEAASFAoQU1VCX1NDX0dB",
            "TUVfT1ZFUhABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TJZ.EMsgIDTJZ), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TJZ.SC_SceneInfo), global::TJZ.SC_SceneInfo.Parser, new[]{ "CurJackpot", "Bet", "CurChip", "CheatLimitChip", "FreeCnt", "Icon", "CurUpProcess", "UpProcess", "Return", "HisGoldMoreThan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TJZ.HitIcon), global::TJZ.HitIcon.Parser, new[]{ "IsHitIcon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TJZ.CMD_3D_SC_Result), global::TJZ.CMD_3D_SC_Result.Parser, new[]{ "CurJackpot", "HitJackpotGold", "LineWinSocre", "WinTypeScore", "Odd", "CheatLimitChip", "Icon", "IsHit", "AddFreeCnt", "FreeCnt", "CurUpProcess", "UpProcess", "MaxWinType", "Return", "HisGoldMoreThan" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDTJZ {
    /// <summary>
    ///开始游戏(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_CS_GAME_START")] SubCsGameStart = 0,
    /// <summary>
    ///游戏结束(CMD_3D_SC_Result)
    /// </summary>
    [pbr::OriginalName("SUB_SC_GAME_OVER")] SubScGameOver = 1,
  }

  #endregion

  #region Messages
  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TJZ.TJZReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      curJackpot_ = other.curJackpot_;
      bet_ = other.bet_.Clone();
      curChip_ = other.curChip_;
      cheatLimitChip_ = other.cheatLimitChip_;
      freeCnt_ = other.freeCnt_;
      icon_ = other.icon_.Clone();
      curUpProcess_ = other.curUpProcess_;
      upProcess_ = other.upProcess_;
      return_ = other.return_;
      hisGoldMoreThan_ = other.hisGoldMoreThan_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "cur_jackpot" field.</summary>
    public const int CurJackpotFieldNumber = 1;
    private long curJackpot_;
    /// <summary>
    /// 当前奖池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurJackpot {
      get { return curJackpot_; }
      set {
        curJackpot_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_bet_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> bet_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 押注列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bet {
      get { return bet_; }
    }

    /// <summary>Field number for the "cur_chip" field.</summary>
    public const int CurChipFieldNumber = 3;
    private int curChip_;
    /// <summary>
    /// 当前押注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChip {
      get { return curChip_; }
      set {
        curChip_ = value;
      }
    }

    /// <summary>Field number for the "cheat_limit_chip" field.</summary>
    public const int CheatLimitChipFieldNumber = 4;
    private int cheatLimitChip_;
    /// <summary>
    /// 作弊下注限制  没用 发0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheatLimitChip {
      get { return cheatLimitChip_; }
      set {
        cheatLimitChip_ = value;
      }
    }

    /// <summary>Field number for the "free_cnt" field.</summary>
    public const int FreeCntFieldNumber = 5;
    private int freeCnt_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCnt {
      get { return freeCnt_; }
      set {
        freeCnt_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "cur_up_process" field.</summary>
    public const int CurUpProcessFieldNumber = 7;
    private int curUpProcess_;
    /// <summary>
    /// 当前图标升级进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurUpProcess {
      get { return curUpProcess_; }
      set {
        curUpProcess_ = value;
      }
    }

    /// <summary>Field number for the "up_process" field.</summary>
    public const int UpProcessFieldNumber = 8;
    private int upProcess_;
    /// <summary>
    /// 下次转动使用图标进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpProcess {
      get { return upProcess_; }
      set {
        upProcess_ = value;
      }
    }

    /// <summary>Field number for the "return" field.</summary>
    public const int ReturnFieldNumber = 9;
    private bool return_;
    /// <summary>
    /// 是否重转 	1-->是  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Return {
      get { return return_; }
      set {
        return_ = value;
      }
    }

    /// <summary>Field number for the "his_gold_more_than" field.</summary>
    public const int HisGoldMoreThanFieldNumber = 10;
    private bool hisGoldMoreThan_;
    /// <summary>
    /// 历史金币是否超过限制 没用 发0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HisGoldMoreThan {
      get { return hisGoldMoreThan_; }
      set {
        hisGoldMoreThan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurJackpot != other.CurJackpot) return false;
      if(!bet_.Equals(other.bet_)) return false;
      if (CurChip != other.CurChip) return false;
      if (CheatLimitChip != other.CheatLimitChip) return false;
      if (FreeCnt != other.FreeCnt) return false;
      if(!icon_.Equals(other.icon_)) return false;
      if (CurUpProcess != other.CurUpProcess) return false;
      if (UpProcess != other.UpProcess) return false;
      if (Return != other.Return) return false;
      if (HisGoldMoreThan != other.HisGoldMoreThan) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurJackpot != 0L) hash ^= CurJackpot.GetHashCode();
      hash ^= bet_.GetHashCode();
      if (CurChip != 0) hash ^= CurChip.GetHashCode();
      if (CheatLimitChip != 0) hash ^= CheatLimitChip.GetHashCode();
      if (FreeCnt != 0) hash ^= FreeCnt.GetHashCode();
      hash ^= icon_.GetHashCode();
      if (CurUpProcess != 0) hash ^= CurUpProcess.GetHashCode();
      if (UpProcess != 0) hash ^= UpProcess.GetHashCode();
      if (Return != false) hash ^= Return.GetHashCode();
      if (HisGoldMoreThan != false) hash ^= HisGoldMoreThan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurJackpot != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurJackpot);
      }
      bet_.WriteTo(output, _repeated_bet_codec);
      if (CurChip != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurChip);
      }
      if (CheatLimitChip != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CheatLimitChip);
      }
      if (FreeCnt != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeCnt);
      }
      icon_.WriteTo(output, _repeated_icon_codec);
      if (CurUpProcess != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurUpProcess);
      }
      if (UpProcess != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UpProcess);
      }
      if (Return != false) {
        output.WriteRawTag(72);
        output.WriteBool(Return);
      }
      if (HisGoldMoreThan != false) {
        output.WriteRawTag(80);
        output.WriteBool(HisGoldMoreThan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurJackpot != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurJackpot);
      }
      bet_.WriteTo(ref output, _repeated_bet_codec);
      if (CurChip != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurChip);
      }
      if (CheatLimitChip != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CheatLimitChip);
      }
      if (FreeCnt != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeCnt);
      }
      icon_.WriteTo(ref output, _repeated_icon_codec);
      if (CurUpProcess != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurUpProcess);
      }
      if (UpProcess != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(UpProcess);
      }
      if (Return != false) {
        output.WriteRawTag(72);
        output.WriteBool(Return);
      }
      if (HisGoldMoreThan != false) {
        output.WriteRawTag(80);
        output.WriteBool(HisGoldMoreThan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurJackpot != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurJackpot);
      }
      size += bet_.CalculateSize(_repeated_bet_codec);
      if (CurChip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChip);
      }
      if (CheatLimitChip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheatLimitChip);
      }
      if (FreeCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCnt);
      }
      size += icon_.CalculateSize(_repeated_icon_codec);
      if (CurUpProcess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurUpProcess);
      }
      if (UpProcess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpProcess);
      }
      if (Return != false) {
        size += 1 + 1;
      }
      if (HisGoldMoreThan != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurJackpot != 0L) {
        CurJackpot = other.CurJackpot;
      }
      bet_.Add(other.bet_);
      if (other.CurChip != 0) {
        CurChip = other.CurChip;
      }
      if (other.CheatLimitChip != 0) {
        CheatLimitChip = other.CheatLimitChip;
      }
      if (other.FreeCnt != 0) {
        FreeCnt = other.FreeCnt;
      }
      icon_.Add(other.icon_);
      if (other.CurUpProcess != 0) {
        CurUpProcess = other.CurUpProcess;
      }
      if (other.UpProcess != 0) {
        UpProcess = other.UpProcess;
      }
      if (other.Return != false) {
        Return = other.Return;
      }
      if (other.HisGoldMoreThan != false) {
        HisGoldMoreThan = other.HisGoldMoreThan;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurJackpot = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
          case 24: {
            CurChip = input.ReadInt32();
            break;
          }
          case 32: {
            CheatLimitChip = input.ReadInt32();
            break;
          }
          case 40: {
            FreeCnt = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 56: {
            CurUpProcess = input.ReadInt32();
            break;
          }
          case 64: {
            UpProcess = input.ReadInt32();
            break;
          }
          case 72: {
            Return = input.ReadBool();
            break;
          }
          case 80: {
            HisGoldMoreThan = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurJackpot = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
          case 24: {
            CurChip = input.ReadInt32();
            break;
          }
          case 32: {
            CheatLimitChip = input.ReadInt32();
            break;
          }
          case 40: {
            FreeCnt = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 56: {
            CurUpProcess = input.ReadInt32();
            break;
          }
          case 64: {
            UpProcess = input.ReadInt32();
            break;
          }
          case 72: {
            Return = input.ReadBool();
            break;
          }
          case 80: {
            HisGoldMoreThan = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HitIcon : pb::IMessage<HitIcon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HitIcon> _parser = new pb::MessageParser<HitIcon>(() => new HitIcon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitIcon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TJZ.TJZReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitIcon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitIcon(HitIcon other) : this() {
      isHitIcon_ = other.isHitIcon_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitIcon Clone() {
      return new HitIcon(this);
    }

    /// <summary>Field number for the "is_hit_icon" field.</summary>
    public const int IsHitIconFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_isHitIcon_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> isHitIcon_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> IsHitIcon {
      get { return isHitIcon_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitIcon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitIcon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!isHitIcon_.Equals(other.isHitIcon_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= isHitIcon_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      isHitIcon_.WriteTo(output, _repeated_isHitIcon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      isHitIcon_.WriteTo(ref output, _repeated_isHitIcon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += isHitIcon_.CalculateSize(_repeated_isHitIcon_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitIcon other) {
      if (other == null) {
        return;
      }
      isHitIcon_.Add(other.isHitIcon_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            isHitIcon_.AddEntriesFrom(input, _repeated_isHitIcon_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            isHitIcon_.AddEntriesFrom(ref input, _repeated_isHitIcon_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 游戏结果返回
  /// </summary>
  public sealed partial class CMD_3D_SC_Result : pb::IMessage<CMD_3D_SC_Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_Result> _parser = new pb::MessageParser<CMD_3D_SC_Result>(() => new CMD_3D_SC_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TJZ.TJZReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result(CMD_3D_SC_Result other) : this() {
      curJackpot_ = other.curJackpot_;
      hitJackpotGold_ = other.hitJackpotGold_;
      lineWinSocre_ = other.lineWinSocre_;
      winTypeScore_ = other.winTypeScore_;
      odd_ = other.odd_;
      cheatLimitChip_ = other.cheatLimitChip_;
      icon_ = other.icon_.Clone();
      isHit_ = other.isHit_.Clone();
      addFreeCnt_ = other.addFreeCnt_;
      freeCnt_ = other.freeCnt_;
      curUpProcess_ = other.curUpProcess_;
      upProcess_ = other.upProcess_;
      maxWinType_ = other.maxWinType_;
      return_ = other.return_;
      hisGoldMoreThan_ = other.hisGoldMoreThan_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result Clone() {
      return new CMD_3D_SC_Result(this);
    }

    /// <summary>Field number for the "cur_jackpot" field.</summary>
    public const int CurJackpotFieldNumber = 1;
    private long curJackpot_;
    /// <summary>
    /// 当前奖池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurJackpot {
      get { return curJackpot_; }
      set {
        curJackpot_ = value;
      }
    }

    /// <summary>Field number for the "hit_jackpot_gold" field.</summary>
    public const int HitJackpotGoldFieldNumber = 2;
    private long hitJackpotGold_;
    /// <summary>
    /// 中彩金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HitJackpotGold {
      get { return hitJackpotGold_; }
      set {
        hitJackpotGold_ = value;
      }
    }

    /// <summary>Field number for the "line_win_socre" field.</summary>
    public const int LineWinSocreFieldNumber = 3;
    private long lineWinSocre_;
    /// <summary>
    /// 结算金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LineWinSocre {
      get { return lineWinSocre_; }
      set {
        lineWinSocre_ = value;
      }
    }

    /// <summary>Field number for the "win_type_score" field.</summary>
    public const int WinTypeScoreFieldNumber = 4;
    private long winTypeScore_;
    /// <summary>
    /// 大奖提示的金币？？？
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinTypeScore {
      get { return winTypeScore_; }
      set {
        winTypeScore_ = value;
      }
    }

    /// <summary>Field number for the "odd" field.</summary>
    public const int OddFieldNumber = 5;
    private int odd_;
    /// <summary>
    /// 总倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Odd {
      get { return odd_; }
      set {
        odd_ = value;
      }
    }

    /// <summary>Field number for the "cheat_limit_chip" field.</summary>
    public const int CheatLimitChipFieldNumber = 6;
    private int cheatLimitChip_;
    /// <summary>
    /// 作弊下注限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheatLimitChip {
      get { return cheatLimitChip_; }
      set {
        cheatLimitChip_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "is_hit" field.</summary>
    public const int IsHitFieldNumber = 8;
    private static readonly pb::FieldCodec<global::TJZ.HitIcon> _repeated_isHit_codec
        = pb::FieldCodec.ForMessage(66, global::TJZ.HitIcon.Parser);
    private readonly pbc::RepeatedField<global::TJZ.HitIcon> isHit_ = new pbc::RepeatedField<global::TJZ.HitIcon>();
    /// <summary>
    /// 击中的图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TJZ.HitIcon> IsHit {
      get { return isHit_; }
    }

    /// <summary>Field number for the "add_free_cnt" field.</summary>
    public const int AddFreeCntFieldNumber = 9;
    private int addFreeCnt_;
    /// <summary>
    /// 增加免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddFreeCnt {
      get { return addFreeCnt_; }
      set {
        addFreeCnt_ = value;
      }
    }

    /// <summary>Field number for the "free_cnt" field.</summary>
    public const int FreeCntFieldNumber = 10;
    private int freeCnt_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCnt {
      get { return freeCnt_; }
      set {
        freeCnt_ = value;
      }
    }

    /// <summary>Field number for the "cur_up_process" field.</summary>
    public const int CurUpProcessFieldNumber = 11;
    private int curUpProcess_;
    /// <summary>
    /// 当前升级图标进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurUpProcess {
      get { return curUpProcess_; }
      set {
        curUpProcess_ = value;
      }
    }

    /// <summary>Field number for the "up_process" field.</summary>
    public const int UpProcessFieldNumber = 12;
    private int upProcess_;
    /// <summary>
    /// 下次转动使用图标进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpProcess {
      get { return upProcess_; }
      set {
        upProcess_ = value;
      }
    }

    /// <summary>Field number for the "max_win_type" field.</summary>
    public const int MaxWinTypeFieldNumber = 13;
    private int maxWinType_;
    /// <summary>
    /// 大奖类型(0:无, 1:发家致富, 2:腰缠万贯, 3:富甲天下)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxWinType {
      get { return maxWinType_; }
      set {
        maxWinType_ = value;
      }
    }

    /// <summary>Field number for the "return" field.</summary>
    public const int ReturnFieldNumber = 14;
    private bool return_;
    /// <summary>
    /// 是否重转  1-->是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Return {
      get { return return_; }
      set {
        return_ = value;
      }
    }

    /// <summary>Field number for the "his_gold_more_than" field.</summary>
    public const int HisGoldMoreThanFieldNumber = 15;
    private bool hisGoldMoreThan_;
    /// <summary>
    /// 历史金币是否超过限制 没用 发0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HisGoldMoreThan {
      get { return hisGoldMoreThan_; }
      set {
        hisGoldMoreThan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurJackpot != other.CurJackpot) return false;
      if (HitJackpotGold != other.HitJackpotGold) return false;
      if (LineWinSocre != other.LineWinSocre) return false;
      if (WinTypeScore != other.WinTypeScore) return false;
      if (Odd != other.Odd) return false;
      if (CheatLimitChip != other.CheatLimitChip) return false;
      if(!icon_.Equals(other.icon_)) return false;
      if(!isHit_.Equals(other.isHit_)) return false;
      if (AddFreeCnt != other.AddFreeCnt) return false;
      if (FreeCnt != other.FreeCnt) return false;
      if (CurUpProcess != other.CurUpProcess) return false;
      if (UpProcess != other.UpProcess) return false;
      if (MaxWinType != other.MaxWinType) return false;
      if (Return != other.Return) return false;
      if (HisGoldMoreThan != other.HisGoldMoreThan) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurJackpot != 0L) hash ^= CurJackpot.GetHashCode();
      if (HitJackpotGold != 0L) hash ^= HitJackpotGold.GetHashCode();
      if (LineWinSocre != 0L) hash ^= LineWinSocre.GetHashCode();
      if (WinTypeScore != 0L) hash ^= WinTypeScore.GetHashCode();
      if (Odd != 0) hash ^= Odd.GetHashCode();
      if (CheatLimitChip != 0) hash ^= CheatLimitChip.GetHashCode();
      hash ^= icon_.GetHashCode();
      hash ^= isHit_.GetHashCode();
      if (AddFreeCnt != 0) hash ^= AddFreeCnt.GetHashCode();
      if (FreeCnt != 0) hash ^= FreeCnt.GetHashCode();
      if (CurUpProcess != 0) hash ^= CurUpProcess.GetHashCode();
      if (UpProcess != 0) hash ^= UpProcess.GetHashCode();
      if (MaxWinType != 0) hash ^= MaxWinType.GetHashCode();
      if (Return != false) hash ^= Return.GetHashCode();
      if (HisGoldMoreThan != false) hash ^= HisGoldMoreThan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurJackpot != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurJackpot);
      }
      if (HitJackpotGold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HitJackpotGold);
      }
      if (LineWinSocre != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LineWinSocre);
      }
      if (WinTypeScore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WinTypeScore);
      }
      if (Odd != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Odd);
      }
      if (CheatLimitChip != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CheatLimitChip);
      }
      icon_.WriteTo(output, _repeated_icon_codec);
      isHit_.WriteTo(output, _repeated_isHit_codec);
      if (AddFreeCnt != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AddFreeCnt);
      }
      if (FreeCnt != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FreeCnt);
      }
      if (CurUpProcess != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CurUpProcess);
      }
      if (UpProcess != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(UpProcess);
      }
      if (MaxWinType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MaxWinType);
      }
      if (Return != false) {
        output.WriteRawTag(112);
        output.WriteBool(Return);
      }
      if (HisGoldMoreThan != false) {
        output.WriteRawTag(120);
        output.WriteBool(HisGoldMoreThan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurJackpot != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CurJackpot);
      }
      if (HitJackpotGold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HitJackpotGold);
      }
      if (LineWinSocre != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LineWinSocre);
      }
      if (WinTypeScore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WinTypeScore);
      }
      if (Odd != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Odd);
      }
      if (CheatLimitChip != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CheatLimitChip);
      }
      icon_.WriteTo(ref output, _repeated_icon_codec);
      isHit_.WriteTo(ref output, _repeated_isHit_codec);
      if (AddFreeCnt != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AddFreeCnt);
      }
      if (FreeCnt != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FreeCnt);
      }
      if (CurUpProcess != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CurUpProcess);
      }
      if (UpProcess != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(UpProcess);
      }
      if (MaxWinType != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MaxWinType);
      }
      if (Return != false) {
        output.WriteRawTag(112);
        output.WriteBool(Return);
      }
      if (HisGoldMoreThan != false) {
        output.WriteRawTag(120);
        output.WriteBool(HisGoldMoreThan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurJackpot != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurJackpot);
      }
      if (HitJackpotGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HitJackpotGold);
      }
      if (LineWinSocre != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LineWinSocre);
      }
      if (WinTypeScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinTypeScore);
      }
      if (Odd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Odd);
      }
      if (CheatLimitChip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheatLimitChip);
      }
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += isHit_.CalculateSize(_repeated_isHit_codec);
      if (AddFreeCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddFreeCnt);
      }
      if (FreeCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCnt);
      }
      if (CurUpProcess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurUpProcess);
      }
      if (UpProcess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpProcess);
      }
      if (MaxWinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxWinType);
      }
      if (Return != false) {
        size += 1 + 1;
      }
      if (HisGoldMoreThan != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_Result other) {
      if (other == null) {
        return;
      }
      if (other.CurJackpot != 0L) {
        CurJackpot = other.CurJackpot;
      }
      if (other.HitJackpotGold != 0L) {
        HitJackpotGold = other.HitJackpotGold;
      }
      if (other.LineWinSocre != 0L) {
        LineWinSocre = other.LineWinSocre;
      }
      if (other.WinTypeScore != 0L) {
        WinTypeScore = other.WinTypeScore;
      }
      if (other.Odd != 0) {
        Odd = other.Odd;
      }
      if (other.CheatLimitChip != 0) {
        CheatLimitChip = other.CheatLimitChip;
      }
      icon_.Add(other.icon_);
      isHit_.Add(other.isHit_);
      if (other.AddFreeCnt != 0) {
        AddFreeCnt = other.AddFreeCnt;
      }
      if (other.FreeCnt != 0) {
        FreeCnt = other.FreeCnt;
      }
      if (other.CurUpProcess != 0) {
        CurUpProcess = other.CurUpProcess;
      }
      if (other.UpProcess != 0) {
        UpProcess = other.UpProcess;
      }
      if (other.MaxWinType != 0) {
        MaxWinType = other.MaxWinType;
      }
      if (other.Return != false) {
        Return = other.Return;
      }
      if (other.HisGoldMoreThan != false) {
        HisGoldMoreThan = other.HisGoldMoreThan;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurJackpot = input.ReadInt64();
            break;
          }
          case 16: {
            HitJackpotGold = input.ReadInt64();
            break;
          }
          case 24: {
            LineWinSocre = input.ReadInt64();
            break;
          }
          case 32: {
            WinTypeScore = input.ReadInt64();
            break;
          }
          case 40: {
            Odd = input.ReadInt32();
            break;
          }
          case 48: {
            CheatLimitChip = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 66: {
            isHit_.AddEntriesFrom(input, _repeated_isHit_codec);
            break;
          }
          case 72: {
            AddFreeCnt = input.ReadInt32();
            break;
          }
          case 80: {
            FreeCnt = input.ReadInt32();
            break;
          }
          case 88: {
            CurUpProcess = input.ReadInt32();
            break;
          }
          case 96: {
            UpProcess = input.ReadInt32();
            break;
          }
          case 104: {
            MaxWinType = input.ReadInt32();
            break;
          }
          case 112: {
            Return = input.ReadBool();
            break;
          }
          case 120: {
            HisGoldMoreThan = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurJackpot = input.ReadInt64();
            break;
          }
          case 16: {
            HitJackpotGold = input.ReadInt64();
            break;
          }
          case 24: {
            LineWinSocre = input.ReadInt64();
            break;
          }
          case 32: {
            WinTypeScore = input.ReadInt64();
            break;
          }
          case 40: {
            Odd = input.ReadInt32();
            break;
          }
          case 48: {
            CheatLimitChip = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 66: {
            isHit_.AddEntriesFrom(ref input, _repeated_isHit_codec);
            break;
          }
          case 72: {
            AddFreeCnt = input.ReadInt32();
            break;
          }
          case 80: {
            FreeCnt = input.ReadInt32();
            break;
          }
          case 88: {
            CurUpProcess = input.ReadInt32();
            break;
          }
          case 96: {
            UpProcess = input.ReadInt32();
            break;
          }
          case 104: {
            MaxWinType = input.ReadInt32();
            break;
          }
          case 112: {
            Return = input.ReadBool();
            break;
          }
          case 120: {
            HisGoldMoreThan = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
