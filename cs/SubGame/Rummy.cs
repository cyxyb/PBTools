// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/Rummy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rummy {

  /// <summary>Holder for reflection information generated from Proto/SubGame/Rummy.proto</summary>
  public static partial class RummyReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/Rummy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RummyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlQcm90by9TdWJHYW1lL1J1bW15LnByb3RvEgVSdW1teSJECgxSTUNvbHVt",
            "bkluZm8SEwoLc3RhcnRfdmFsdWUYASABKAUSEAoIY29sX3R5cGUYAiABKAUS",
            "DQoFY2FyZHMYAyADKAUiMQoPUk1Nc2dUYWJsZVN0YXRlEg0KBXN0YXRlGAEg",
            "ASgFEg8KB291dF9pbWUYAiABKAUiHwoOUk1Nc2dIYW5kQ2FyZHMSDQoFY2Fy",
            "ZHMYASADKAUilQEKD1JNTXNnUGxheWVySW5mbxIQCghjaGFpcl9pZBgBIAEo",
            "BRITCgtwbGF5X3N0YXR1cxgCIAEoBRIMCgRnb2xkGAMgASgDEhAKCHdpbl9n",
            "b2xkGAQgASgDEg0KBWNhcmRzGAUgAygFEiwKD2hhbmRfZ3JvdXBfaW5mbxgG",
            "IAMoCzITLlJ1bW15LlJNQ29sdW1uSW5mbyK3AgoOUk1Nc2dTY2VuZUluZm8S",
            "FAoMbWF4X211bHRpcGxlGAEgASgDEhIKCmNlbGxfc2NvcmUYAiABKAMSEwoL",
            "dGFibGVfc3RhdGUYAyABKAUSCwoDdGF4GAQgASgFEhcKD2Jhbmtlcl9jaGFp",
            "cl9pZBgFIAEoBRIUCgxjdXJfY2hhaXJfaWQYBiABKAUSFQoNY3VyX2NoYWly",
            "X2FjdBgHIAEoBRIQCghvdXRfdGltZRgIIAEoBRISCgp0b3RhbF90aW1lGAkg",
            "ASgFEhIKCmpva2VyX2NhcmQYCiABKAUSGAoQc3VycGx1c19jYXJkX251bRgL",
            "IAEoBRIRCglvdXRfY2FyZHMYDCADKAUSLAoMcGxheWVyX2luZm9zGA0gAygL",
            "MhYuUnVtbXkuUk1Nc2dQbGF5ZXJJbmZvIuEBChJSTU1zZ0dhbWVTdGFydFJl",
            "c3ASFAoMY3VyX2NoYWlyX2lkGAEgASgFEhcKD2Jhbmtlcl9jaGFpcl9pZBgC",
            "IAEoBRIRCgltYXhfc2NvcmUYAyABKAMSEgoKY2VsbF9zY29yZRgEIAEoAxIU",
            "CgxtYXhfbXVsdGlwbGUYBSABKAMSEgoKam9rZXJfY2FyZBgKIAEoBRIVCg1s",
            "ZWZ0X2NhcmRfbnVtGAsgASgFEhEKCW91dF9jYXJkcxgMIAMoBRISCgpwbGF5",
            "X2luZGV4GA0gAygFEg0KBWNhcmRzGA8gAygFIlUKFVJNTXNnTm90aWZ5QWN0",
            "aW9uUmVzcBIUCgxjdXJfY2hhaXJfaWQYASABKAUSEwoLY3VycmVudF9hY3QY",
            "AyABKAUSEQoJb3Blcl90aW1lGAQgASgFIogBCgtSTU1zZ0FjdGlvbhIQCghj",
            "aGFpcl9pZBgBIAEoBRIQCghhY3RfdHlwZRgCIAEoBRIRCglkZXN0X2NhcmQY",
            "AyABKAUSFAoMZ2V0X291dF9jYXJkGAQgASgIEiwKD2hhbmRfZ3JvdXBfaW5m",
            "bxgFIAMoCzITLlJ1bW15LlJNQ29sdW1uSW5mbyLPAQoPUk1Nc2dBY3Rpb25S",
            "ZXNwEhAKCGNoYWlyX2lkGAEgASgFEhAKCGFjdF90eXBlGAIgASgFEhEKCWRl",
            "c3RfY2FyZBgDIAEoBRIUCgxnZXRfb3V0X2NhcmQYBCABKAgSFQoNZG9ycF9t",
            "dWx0aXBsZRgGIAEoDRITCgthdXRvX2FjdGlvbhgHIAEoCBIVCg1sZWZ0X2Nh",
            "cmRfbnVtGAkgASgFEiwKD2hhbmRfZ3JvdXBfaW5mbxgKIAMoCzITLlJ1bW15",
            "LlJNQ29sdW1uSW5mbyKXAQoRUk1Nc2dBY3Rpb25DaG9pY2USGAoQZGV0ZXJt",
            "aW5lZF9sZXZlbBgBIAEoBRIUCgxpc19kZXRlcm1pbmUYAiABKAgSIwoHY2hv",
            "aWNlcxgDIAMoCzISLlJ1bW15LlJNTXNnQWN0aW9uEi0KEWRldGVybWluZWRf",
            "YWN0aW9uGAQgASgLMhIuUnVtbXkuUk1Nc2dBY3Rpb24iTQoPUk1Nc2dHaXZl",
            "VXBSZXNwEhAKCGNoYWlyX2lkGAEgASgFEhEKCWxvc3NfZ29sZBgCIAEoBRIV",
            "Cg1kb3JwX211bHRpcGxlGAMgASgNImMKD1JNTXNnR2FtZVJlc3VsdBIQCghn",
            "YW1lX3RheBgBIAEoBRIrCgtwbGF5ZXJfaW5mbxgCIAMoCzIWLlJ1bW15LlJN",
            "TXNnUGxheWVySW5mbxIRCgllbmRfc3RhdGUYAyABKAUiRAoWUk1Nc2dOb3Rp",
            "ZnlUcnVzdGVlc2hpcBISCgpzZWF0X2luZGV4GAEgASgFEhYKDmlzX3RydXN0",
            "ZWVzaGlwGAIgASgIIjUKFFJNTXNnTm90aWZ5UGxheWVyQWN0EhAKCGNoYWly",
            "X2lkGAEgASgFEgsKA2FjdBgCIAEoBSpkCgxFUk1HYW1lU3RhdGUSDwoLR1Nf",
            "VFBfUkVBRFkQABIOCgpHU19UUF9ERUFMEAESEQoNR1NfVFBfUExBWUlORxAC",
            "Eg4KCkdTX1RQX1NIT1cQAxIQCgxHU19UUF9SRVNVTFQQBCpCCgtQbGF5ZXJT",
            "dGF0ZRIMCghQU19SRUFEWRAAEgsKB1BTX1BMQVkQARILCgdQU19HSVZFEAIS",
            "CwoHUFNfRkFJTBADKmIKDUVSTUdhbWVBY3Rpb24SDQoJSW52YWxkQWN0EAAS",
            "DAoIRHJvcENhcmQQARIKCgZOYUNhcmQQAhILCgdDaHVDYXJkEAQSDQoJU29y",
            "dHNDYXJkEAgSDAoIU2hvd0NhcmQQECpiCg5FUk1Db2xDYXJkVHlwZRIOCgpD",
            "T0xfU0lOR0xFEAASDgoKQ09MX0JBT19aSRABEhAKDENPTF9TSFVOX1pISRAC",
            "EhEKDUNPTF9RSU5HX1NIVU4QAxILCgdDT0xfTUFYEAQqiQUKD0VSTU1zZ0lE",
            "U3ViR2FtZRIVChFNc2dJRFN1YkdhbWVfTnVsbBAAEh4KGk1zZ0lEU3ViR2Ft",
            "ZV9HYW1lU3RhcnRSZXNwEAESIQodTXNnSURTdWJHYW1lX05vdGlmeUFjdGlv",
            "blJlc3AQAhIXChNNc2dJRFN1YkdhbWVfQWN0aW9uEAMSGwoXTXNnSURTdWJH",
            "YW1lX0FjdGlvblJlc3AQBBIbChdNc2dJRFN1YkdhbWVfR2l2ZVVwUmVzcBAF",
            "Eh8KG01zZ0lEU3ViR2FtZV9HYW1lUmVzdWx0UmVzcBAGEiAKHE1zZ0lEU3Vi",
            "R2FtZV9Ob3RpZnlTdGF0ZVJlc3AQChIcChhNc2dJRFN1YkdhbWVfVGltZU91",
            "dFJlc3AQCxIdChlNc2dJRFN1YkdhbWVfVGltZU91dFJlYWR5EAwSIQodTXNn",
            "SURTdWJHYW1lX1RpbWVPdXRSZWFkeVJlc3AQDRIgChxNc2dJRFN1YkdhbWVf",
            "VGltZU91dEtpY2tSZXNwEA4SJgoiTXNnSURTdWJHYW1lX05vdGlmeVRydXN0",
            "ZWVzaGlwUmVzcBAPEiYKIk1zZ0lEU3ViR2FtZV9Ob3RpZnlTeXN0ZW1DaGVh",
            "dFJlc3AQFBIjCh9Nc2dJRFN1YkdhbWVfTm90aWZ5Q2FyZFR5cGVSZXNwEBUS",
            "IAocTXNnSURTdWJHYW1lX05vdGlmeUlzTWF4UmVzcBAWEicKI01zZ0lEU3Vi",
            "R2FtZV9Ob3RpZnlSZW1haW5Eb3VibGVSZXNwEBcSIAocTXNnSURTdWJHYW1l",
            "X05vdGlmeVJvdW5kUmVzcBAYEiIKHk1zZ0lEU3ViR2FtZV9Ob3RpZnlMYXN0",
            "QWN0UmVzcBAZYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Rummy.ERMGameState), typeof(global::Rummy.PlayerState), typeof(global::Rummy.ERMGameAction), typeof(global::Rummy.ERMColCardType), typeof(global::Rummy.ERMMsgIDSubGame), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMColumnInfo), global::Rummy.RMColumnInfo.Parser, new[]{ "StartValue", "ColType", "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgTableState), global::Rummy.RMMsgTableState.Parser, new[]{ "State", "OutIme" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgHandCards), global::Rummy.RMMsgHandCards.Parser, new[]{ "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgPlayerInfo), global::Rummy.RMMsgPlayerInfo.Parser, new[]{ "ChairId", "PlayStatus", "Gold", "WinGold", "Cards", "HandGroupInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgSceneInfo), global::Rummy.RMMsgSceneInfo.Parser, new[]{ "MaxMultiple", "CellScore", "TableState", "Tax", "BankerChairId", "CurChairId", "CurChairAct", "OutTime", "TotalTime", "JokerCard", "SurplusCardNum", "OutCards", "PlayerInfos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgGameStartResp), global::Rummy.RMMsgGameStartResp.Parser, new[]{ "CurChairId", "BankerChairId", "MaxScore", "CellScore", "MaxMultiple", "JokerCard", "LeftCardNum", "OutCards", "PlayIndex", "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgNotifyActionResp), global::Rummy.RMMsgNotifyActionResp.Parser, new[]{ "CurChairId", "CurrentAct", "OperTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgAction), global::Rummy.RMMsgAction.Parser, new[]{ "ChairId", "ActType", "DestCard", "GetOutCard", "HandGroupInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgActionResp), global::Rummy.RMMsgActionResp.Parser, new[]{ "ChairId", "ActType", "DestCard", "GetOutCard", "DorpMultiple", "AutoAction", "LeftCardNum", "HandGroupInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgActionChoice), global::Rummy.RMMsgActionChoice.Parser, new[]{ "DeterminedLevel", "IsDetermine", "Choices", "DeterminedAction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgGiveUpResp), global::Rummy.RMMsgGiveUpResp.Parser, new[]{ "ChairId", "LossGold", "DorpMultiple" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgGameResult), global::Rummy.RMMsgGameResult.Parser, new[]{ "GameTax", "PlayerInfo", "EndState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgNotifyTrusteeship), global::Rummy.RMMsgNotifyTrusteeship.Parser, new[]{ "SeatIndex", "IsTrusteeship" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rummy.RMMsgNotifyPlayerAct), global::Rummy.RMMsgNotifyPlayerAct.Parser, new[]{ "ChairId", "Act" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///桌子状态
  /// </summary>
  public enum ERMGameState {
    /// <summary>
    ///准备
    /// </summary>
    [pbr::OriginalName("GS_TP_READY")] GsTpReady = 0,
    /// <summary>
    ///发牌
    /// </summary>
    [pbr::OriginalName("GS_TP_DEAL")] GsTpDeal = 1,
    /// <summary>
    ///游戏
    /// </summary>
    [pbr::OriginalName("GS_TP_PLAYING")] GsTpPlaying = 2,
    /// <summary>
    ///秀牌
    /// </summary>
    [pbr::OriginalName("GS_TP_SHOW")] GsTpShow = 3,
    /// <summary>
    ///结算
    /// </summary>
    [pbr::OriginalName("GS_TP_RESULT")] GsTpResult = 4,
  }

  /// <summary>
  ///玩家状态
  /// </summary>
  public enum PlayerState {
    /// <summary>
    ///准备
    /// </summary>
    [pbr::OriginalName("PS_READY")] PsReady = 0,
    /// <summary>
    ///游戏
    /// </summary>
    [pbr::OriginalName("PS_PLAY")] PsPlay = 1,
    /// <summary>
    ///弃牌
    /// </summary>
    [pbr::OriginalName("PS_GIVE")] PsGive = 2,
    /// <summary>
    ///失败
    /// </summary>
    [pbr::OriginalName("PS_FAIL")] PsFail = 3,
  }

  /// <summary>
  ///操作码
  /// </summary>
  public enum ERMGameAction {
    /// <summary>
    ///无效
    /// </summary>
    [pbr::OriginalName("InvaldAct")] InvaldAct = 0,
    /// <summary>
    ///弃牌
    /// </summary>
    [pbr::OriginalName("DropCard")] DropCard = 1,
    /// <summary>
    ///拿牌
    /// </summary>
    [pbr::OriginalName("NaCard")] NaCard = 2,
    /// <summary>
    ///出牌
    /// </summary>
    [pbr::OriginalName("ChuCard")] ChuCard = 4,
    /// <summary>
    ///理牌
    /// </summary>
    [pbr::OriginalName("SortsCard")] SortsCard = 8,
    /// <summary>
    ///秀牌
    /// </summary>
    [pbr::OriginalName("ShowCard")] ShowCard = 16,
  }

  public enum ERMColCardType {
    /// <summary>
    ///扑克类型
    /// </summary>
    [pbr::OriginalName("COL_SINGLE")] ColSingle = 0,
    /// <summary>
    ///豹子类型
    /// </summary>
    [pbr::OriginalName("COL_BAO_ZI")] ColBaoZi = 1,
    /// <summary>
    ///百搭顺金
    /// </summary>
    [pbr::OriginalName("COL_SHUN_ZHI")] ColShunZhi = 2,
    /// <summary>
    ///顺金类型
    /// </summary>
    [pbr::OriginalName("COL_QING_SHUN")] ColQingShun = 3,
    /// <summary>
    ///最大牌型
    /// </summary>
    [pbr::OriginalName("COL_MAX")] ColMax = 4,
  }

  public enum ERMMsgIDSubGame {
    [pbr::OriginalName("MsgIDSubGame_Null")] MsgIdsubGameNull = 0,
    /// <summary>
    ///游戏开始(RMMsgGameStartResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameStartResp")] MsgIdsubGameGameStartResp = 1,
    /// <summary>
    ///通知玩家操作(RMMsgNotifyActionResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyActionResp")] MsgIdsubGameNotifyActionResp = 2,
    /// <summary>
    ///玩家操作(RMMsgAction)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_Action")] MsgIdsubGameAction = 3,
    /// <summary>
    ///玩家操作返回(RMMsgActionResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_ActionResp")] MsgIdsubGameActionResp = 4,
    /// <summary>
    ///玩家弃牌返回(RMMsgGiveUpResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GiveUpResp")] MsgIdsubGameGiveUpResp = 5,
    /// <summary>
    ///结算(RMMsgGameResult)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameResultResp")] MsgIdsubGameGameResultResp = 6,
    /// <summary>
    ///桌子状态(RMMsgTableState)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyStateResp")] MsgIdsubGameNotifyStateResp = 10,
    /// <summary>
    ///通知超时(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutResp")] MsgIdsubGameTimeOutResp = 11,
    /// <summary>
    ///重新准备(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutReady")] MsgIdsubGameTimeOutReady = 12,
    /// <summary>
    ///准备返回(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutReadyResp")] MsgIdsubGameTimeOutReadyResp = 13,
    /// <summary>
    ///超时踢了游戏(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutKickResp")] MsgIdsubGameTimeOutKickResp = 14,
    /// <summary>
    ///托管变化通知(RMMsgNotifyTrusteeship)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyTrusteeshipResp")] MsgIdsubGameNotifyTrusteeshipResp = 15,
    /// <summary>
    //////////////////////////机器人消息///////////////////////
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifySystemCheatResp")] MsgIdsubGameNotifySystemCheatResp = 20,
    /// <summary>
    ///通知牌型
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyCardTypeResp")] MsgIdsubGameNotifyCardTypeResp = 21,
    /// <summary>
    ///通知是否最大
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyIsMaxResp")] MsgIdsubGameNotifyIsMaxResp = 22,
    /// <summary>
    ///是否剩2人
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyRemainDoubleResp")] MsgIdsubGameNotifyRemainDoubleResp = 23,
    /// <summary>
    ///通知回合数
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyRoundResp")] MsgIdsubGameNotifyRoundResp = 24,
    /// <summary>
    ///通知玩家行为
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyLastActResp")] MsgIdsubGameNotifyLastActResp = 25,
  }

  #endregion

  #region Messages
  public sealed partial class RMColumnInfo : pb::IMessage<RMColumnInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMColumnInfo> _parser = new pb::MessageParser<RMColumnInfo>(() => new RMColumnInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMColumnInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMColumnInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMColumnInfo(RMColumnInfo other) : this() {
      startValue_ = other.startValue_;
      colType_ = other.colType_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMColumnInfo Clone() {
      return new RMColumnInfo(this);
    }

    /// <summary>Field number for the "start_value" field.</summary>
    public const int StartValueFieldNumber = 1;
    private int startValue_;
    /// <summary>
    ///开始值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartValue {
      get { return startValue_; }
      set {
        startValue_ = value;
      }
    }

    /// <summary>Field number for the "col_type" field.</summary>
    public const int ColTypeFieldNumber = 2;
    private int colType_;
    /// <summary>
    ///分组类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColType {
      get { return colType_; }
      set {
        colType_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///操作玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMColumnInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMColumnInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartValue != other.StartValue) return false;
      if (ColType != other.ColType) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartValue != 0) hash ^= StartValue.GetHashCode();
      if (ColType != 0) hash ^= ColType.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartValue);
      }
      if (ColType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColType);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartValue);
      }
      if (ColType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColType);
      }
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartValue);
      }
      if (ColType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColType);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMColumnInfo other) {
      if (other == null) {
        return;
      }
      if (other.StartValue != 0) {
        StartValue = other.StartValue;
      }
      if (other.ColType != 0) {
        ColType = other.ColType;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartValue = input.ReadInt32();
            break;
          }
          case 16: {
            ColType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartValue = input.ReadInt32();
            break;
          }
          case 16: {
            ColType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RMMsgTableState : pb::IMessage<RMMsgTableState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgTableState> _parser = new pb::MessageParser<RMMsgTableState>(() => new RMMsgTableState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgTableState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgTableState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgTableState(RMMsgTableState other) : this() {
      state_ = other.state_;
      outIme_ = other.outIme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgTableState Clone() {
      return new RMMsgTableState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    /// <summary>
    ///桌子状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "out_ime" field.</summary>
    public const int OutImeFieldNumber = 2;
    private int outIme_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutIme {
      get { return outIme_; }
      set {
        outIme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgTableState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgTableState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (OutIme != other.OutIme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (OutIme != 0) hash ^= OutIme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (OutIme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutIme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (OutIme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutIme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (OutIme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutIme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgTableState other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.OutIme != 0) {
        OutIme = other.OutIme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            OutIme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            OutIme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RMMsgHandCards : pb::IMessage<RMMsgHandCards>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgHandCards> _parser = new pb::MessageParser<RMMsgHandCards>(() => new RMMsgHandCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgHandCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgHandCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgHandCards(RMMsgHandCards other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgHandCards Clone() {
      return new RMMsgHandCards(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgHandCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgHandCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgHandCards other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RMMsgPlayerInfo : pb::IMessage<RMMsgPlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgPlayerInfo> _parser = new pb::MessageParser<RMMsgPlayerInfo>(() => new RMMsgPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgPlayerInfo(RMMsgPlayerInfo other) : this() {
      chairId_ = other.chairId_;
      playStatus_ = other.playStatus_;
      gold_ = other.gold_;
      winGold_ = other.winGold_;
      cards_ = other.cards_.Clone();
      handGroupInfo_ = other.handGroupInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgPlayerInfo Clone() {
      return new RMMsgPlayerInfo(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "play_status" field.</summary>
    public const int PlayStatusFieldNumber = 2;
    private int playStatus_;
    /// <summary>
    ///玩家状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayStatus {
      get { return playStatus_; }
      set {
        playStatus_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private long gold_;
    /// <summary>
    ///自己的金币，别人的是空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 4;
    private long winGold_;
    /// <summary>
    ///输赢分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "hand_group_info" field.</summary>
    public const int HandGroupInfoFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Rummy.RMColumnInfo> _repeated_handGroupInfo_codec
        = pb::FieldCodec.ForMessage(50, global::Rummy.RMColumnInfo.Parser);
    private readonly pbc::RepeatedField<global::Rummy.RMColumnInfo> handGroupInfo_ = new pbc::RepeatedField<global::Rummy.RMColumnInfo>();
    /// <summary>
    ///手牌分组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rummy.RMColumnInfo> HandGroupInfo {
      get { return handGroupInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (PlayStatus != other.PlayStatus) return false;
      if (Gold != other.Gold) return false;
      if (WinGold != other.WinGold) return false;
      if(!cards_.Equals(other.cards_)) return false;
      if(!handGroupInfo_.Equals(other.handGroupInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (PlayStatus != 0) hash ^= PlayStatus.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (WinGold != 0L) hash ^= WinGold.GetHashCode();
      hash ^= cards_.GetHashCode();
      hash ^= handGroupInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (PlayStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayStatus);
      }
      if (Gold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Gold);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WinGold);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      handGroupInfo_.WriteTo(output, _repeated_handGroupInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (PlayStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayStatus);
      }
      if (Gold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Gold);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WinGold);
      }
      cards_.WriteTo(ref output, _repeated_cards_codec);
      handGroupInfo_.WriteTo(ref output, _repeated_handGroupInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (PlayStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayStatus);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (WinGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinGold);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      size += handGroupInfo_.CalculateSize(_repeated_handGroupInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.PlayStatus != 0) {
        PlayStatus = other.PlayStatus;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.WinGold != 0L) {
        WinGold = other.WinGold;
      }
      cards_.Add(other.cards_);
      handGroupInfo_.Add(other.handGroupInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayStatus = input.ReadInt32();
            break;
          }
          case 24: {
            Gold = input.ReadInt64();
            break;
          }
          case 32: {
            WinGold = input.ReadInt64();
            break;
          }
          case 42:
          case 40: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 50: {
            handGroupInfo_.AddEntriesFrom(input, _repeated_handGroupInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayStatus = input.ReadInt32();
            break;
          }
          case 24: {
            Gold = input.ReadInt64();
            break;
          }
          case 32: {
            WinGold = input.ReadInt64();
            break;
          }
          case 42:
          case 40: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
          case 50: {
            handGroupInfo_.AddEntriesFrom(ref input, _repeated_handGroupInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class RMMsgSceneInfo : pb::IMessage<RMMsgSceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgSceneInfo> _parser = new pb::MessageParser<RMMsgSceneInfo>(() => new RMMsgSceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgSceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgSceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgSceneInfo(RMMsgSceneInfo other) : this() {
      maxMultiple_ = other.maxMultiple_;
      cellScore_ = other.cellScore_;
      tableState_ = other.tableState_;
      tax_ = other.tax_;
      bankerChairId_ = other.bankerChairId_;
      curChairId_ = other.curChairId_;
      curChairAct_ = other.curChairAct_;
      outTime_ = other.outTime_;
      totalTime_ = other.totalTime_;
      jokerCard_ = other.jokerCard_;
      surplusCardNum_ = other.surplusCardNum_;
      outCards_ = other.outCards_.Clone();
      playerInfos_ = other.playerInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgSceneInfo Clone() {
      return new RMMsgSceneInfo(this);
    }

    /// <summary>Field number for the "max_multiple" field.</summary>
    public const int MaxMultipleFieldNumber = 1;
    private long maxMultiple_;
    /// <summary>
    ///最大倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxMultiple {
      get { return maxMultiple_; }
      set {
        maxMultiple_ = value;
      }
    }

    /// <summary>Field number for the "cell_score" field.</summary>
    public const int CellScoreFieldNumber = 2;
    private long cellScore_;
    /// <summary>
    ///底分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CellScore {
      get { return cellScore_; }
      set {
        cellScore_ = value;
      }
    }

    /// <summary>Field number for the "table_state" field.</summary>
    public const int TableStateFieldNumber = 3;
    private int tableState_;
    /// <summary>
    ///桌子状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableState {
      get { return tableState_; }
      set {
        tableState_ = value;
      }
    }

    /// <summary>Field number for the "tax" field.</summary>
    public const int TaxFieldNumber = 4;
    private int tax_;
    /// <summary>
    ///抽水
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tax {
      get { return tax_; }
      set {
        tax_ = value;
      }
    }

    /// <summary>Field number for the "banker_chair_id" field.</summary>
    public const int BankerChairIdFieldNumber = 5;
    private int bankerChairId_;
    /// <summary>
    ///庄家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerChairId {
      get { return bankerChairId_; }
      set {
        bankerChairId_ = value;
      }
    }

    /// <summary>Field number for the "cur_chair_id" field.</summary>
    public const int CurChairIdFieldNumber = 6;
    private int curChairId_;
    /// <summary>
    ///当前操作椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairId {
      get { return curChairId_; }
      set {
        curChairId_ = value;
      }
    }

    /// <summary>Field number for the "cur_chair_act" field.</summary>
    public const int CurChairActFieldNumber = 7;
    private int curChairAct_;
    /// <summary>
    ///当前玩家的操作码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairAct {
      get { return curChairAct_; }
      set {
        curChairAct_ = value;
      }
    }

    /// <summary>Field number for the "out_time" field.</summary>
    public const int OutTimeFieldNumber = 8;
    private int outTime_;
    /// <summary>
    ///当前状态剩余超时时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutTime {
      get { return outTime_; }
      set {
        outTime_ = value;
      }
    }

    /// <summary>Field number for the "total_time" field.</summary>
    public const int TotalTimeFieldNumber = 9;
    private int totalTime_;
    /// <summary>
    ///当前状态总时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    /// <summary>Field number for the "joker_card" field.</summary>
    public const int JokerCardFieldNumber = 10;
    private int jokerCard_;
    /// <summary>
    ///百搭牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JokerCard {
      get { return jokerCard_; }
      set {
        jokerCard_ = value;
      }
    }

    /// <summary>Field number for the "surplus_card_num" field.</summary>
    public const int SurplusCardNumFieldNumber = 11;
    private int surplusCardNum_;
    /// <summary>
    ///牌堆牌数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SurplusCardNum {
      get { return surplusCardNum_; }
      set {
        surplusCardNum_ = value;
      }
    }

    /// <summary>Field number for the "out_cards" field.</summary>
    public const int OutCardsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_outCards_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> outCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///失效牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> OutCards {
      get { return outCards_; }
    }

    /// <summary>Field number for the "player_infos" field.</summary>
    public const int PlayerInfosFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Rummy.RMMsgPlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(106, global::Rummy.RMMsgPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Rummy.RMMsgPlayerInfo> playerInfos_ = new pbc::RepeatedField<global::Rummy.RMMsgPlayerInfo>();
    /// <summary>
    ///玩家状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rummy.RMMsgPlayerInfo> PlayerInfos {
      get { return playerInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgSceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgSceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxMultiple != other.MaxMultiple) return false;
      if (CellScore != other.CellScore) return false;
      if (TableState != other.TableState) return false;
      if (Tax != other.Tax) return false;
      if (BankerChairId != other.BankerChairId) return false;
      if (CurChairId != other.CurChairId) return false;
      if (CurChairAct != other.CurChairAct) return false;
      if (OutTime != other.OutTime) return false;
      if (TotalTime != other.TotalTime) return false;
      if (JokerCard != other.JokerCard) return false;
      if (SurplusCardNum != other.SurplusCardNum) return false;
      if(!outCards_.Equals(other.outCards_)) return false;
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxMultiple != 0L) hash ^= MaxMultiple.GetHashCode();
      if (CellScore != 0L) hash ^= CellScore.GetHashCode();
      if (TableState != 0) hash ^= TableState.GetHashCode();
      if (Tax != 0) hash ^= Tax.GetHashCode();
      if (BankerChairId != 0) hash ^= BankerChairId.GetHashCode();
      if (CurChairId != 0) hash ^= CurChairId.GetHashCode();
      if (CurChairAct != 0) hash ^= CurChairAct.GetHashCode();
      if (OutTime != 0) hash ^= OutTime.GetHashCode();
      if (TotalTime != 0) hash ^= TotalTime.GetHashCode();
      if (JokerCard != 0) hash ^= JokerCard.GetHashCode();
      if (SurplusCardNum != 0) hash ^= SurplusCardNum.GetHashCode();
      hash ^= outCards_.GetHashCode();
      hash ^= playerInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MaxMultiple != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxMultiple);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CellScore);
      }
      if (TableState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TableState);
      }
      if (Tax != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Tax);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BankerChairId);
      }
      if (CurChairId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurChairId);
      }
      if (CurChairAct != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurChairAct);
      }
      if (OutTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OutTime);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TotalTime);
      }
      if (JokerCard != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(JokerCard);
      }
      if (SurplusCardNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SurplusCardNum);
      }
      outCards_.WriteTo(output, _repeated_outCards_codec);
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MaxMultiple != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxMultiple);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CellScore);
      }
      if (TableState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TableState);
      }
      if (Tax != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Tax);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BankerChairId);
      }
      if (CurChairId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurChairId);
      }
      if (CurChairAct != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurChairAct);
      }
      if (OutTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OutTime);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TotalTime);
      }
      if (JokerCard != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(JokerCard);
      }
      if (SurplusCardNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SurplusCardNum);
      }
      outCards_.WriteTo(ref output, _repeated_outCards_codec);
      playerInfos_.WriteTo(ref output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxMultiple != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxMultiple);
      }
      if (CellScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CellScore);
      }
      if (TableState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableState);
      }
      if (Tax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tax);
      }
      if (BankerChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerChairId);
      }
      if (CurChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairId);
      }
      if (CurChairAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairAct);
      }
      if (OutTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutTime);
      }
      if (TotalTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTime);
      }
      if (JokerCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JokerCard);
      }
      if (SurplusCardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurplusCardNum);
      }
      size += outCards_.CalculateSize(_repeated_outCards_codec);
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgSceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.MaxMultiple != 0L) {
        MaxMultiple = other.MaxMultiple;
      }
      if (other.CellScore != 0L) {
        CellScore = other.CellScore;
      }
      if (other.TableState != 0) {
        TableState = other.TableState;
      }
      if (other.Tax != 0) {
        Tax = other.Tax;
      }
      if (other.BankerChairId != 0) {
        BankerChairId = other.BankerChairId;
      }
      if (other.CurChairId != 0) {
        CurChairId = other.CurChairId;
      }
      if (other.CurChairAct != 0) {
        CurChairAct = other.CurChairAct;
      }
      if (other.OutTime != 0) {
        OutTime = other.OutTime;
      }
      if (other.TotalTime != 0) {
        TotalTime = other.TotalTime;
      }
      if (other.JokerCard != 0) {
        JokerCard = other.JokerCard;
      }
      if (other.SurplusCardNum != 0) {
        SurplusCardNum = other.SurplusCardNum;
      }
      outCards_.Add(other.outCards_);
      playerInfos_.Add(other.playerInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxMultiple = input.ReadInt64();
            break;
          }
          case 16: {
            CellScore = input.ReadInt64();
            break;
          }
          case 24: {
            TableState = input.ReadInt32();
            break;
          }
          case 32: {
            Tax = input.ReadInt32();
            break;
          }
          case 40: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 48: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 56: {
            CurChairAct = input.ReadInt32();
            break;
          }
          case 64: {
            OutTime = input.ReadInt32();
            break;
          }
          case 72: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 80: {
            JokerCard = input.ReadInt32();
            break;
          }
          case 88: {
            SurplusCardNum = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            outCards_.AddEntriesFrom(input, _repeated_outCards_codec);
            break;
          }
          case 106: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MaxMultiple = input.ReadInt64();
            break;
          }
          case 16: {
            CellScore = input.ReadInt64();
            break;
          }
          case 24: {
            TableState = input.ReadInt32();
            break;
          }
          case 32: {
            Tax = input.ReadInt32();
            break;
          }
          case 40: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 48: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 56: {
            CurChairAct = input.ReadInt32();
            break;
          }
          case 64: {
            OutTime = input.ReadInt32();
            break;
          }
          case 72: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 80: {
            JokerCard = input.ReadInt32();
            break;
          }
          case 88: {
            SurplusCardNum = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            outCards_.AddEntriesFrom(ref input, _repeated_outCards_codec);
            break;
          }
          case 106: {
            playerInfos_.AddEntriesFrom(ref input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏开始
  /// </summary>
  public sealed partial class RMMsgGameStartResp : pb::IMessage<RMMsgGameStartResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgGameStartResp> _parser = new pb::MessageParser<RMMsgGameStartResp>(() => new RMMsgGameStartResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgGameStartResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgGameStartResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgGameStartResp(RMMsgGameStartResp other) : this() {
      curChairId_ = other.curChairId_;
      bankerChairId_ = other.bankerChairId_;
      maxScore_ = other.maxScore_;
      cellScore_ = other.cellScore_;
      maxMultiple_ = other.maxMultiple_;
      jokerCard_ = other.jokerCard_;
      leftCardNum_ = other.leftCardNum_;
      outCards_ = other.outCards_.Clone();
      playIndex_ = other.playIndex_.Clone();
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgGameStartResp Clone() {
      return new RMMsgGameStartResp(this);
    }

    /// <summary>Field number for the "cur_chair_id" field.</summary>
    public const int CurChairIdFieldNumber = 1;
    private int curChairId_;
    /// <summary>
    ///操作玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairId {
      get { return curChairId_; }
      set {
        curChairId_ = value;
      }
    }

    /// <summary>Field number for the "banker_chair_id" field.</summary>
    public const int BankerChairIdFieldNumber = 2;
    private int bankerChairId_;
    /// <summary>
    ///庄家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerChairId {
      get { return bankerChairId_; }
      set {
        bankerChairId_ = value;
      }
    }

    /// <summary>Field number for the "max_score" field.</summary>
    public const int MaxScoreFieldNumber = 3;
    private long maxScore_;
    /// <summary>
    ///最大下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxScore {
      get { return maxScore_; }
      set {
        maxScore_ = value;
      }
    }

    /// <summary>Field number for the "cell_score" field.</summary>
    public const int CellScoreFieldNumber = 4;
    private long cellScore_;
    /// <summary>
    ///底分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CellScore {
      get { return cellScore_; }
      set {
        cellScore_ = value;
      }
    }

    /// <summary>Field number for the "max_multiple" field.</summary>
    public const int MaxMultipleFieldNumber = 5;
    private long maxMultiple_;
    /// <summary>
    ///最大倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxMultiple {
      get { return maxMultiple_; }
      set {
        maxMultiple_ = value;
      }
    }

    /// <summary>Field number for the "joker_card" field.</summary>
    public const int JokerCardFieldNumber = 10;
    private int jokerCard_;
    /// <summary>
    ///百搭牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JokerCard {
      get { return jokerCard_; }
      set {
        jokerCard_ = value;
      }
    }

    /// <summary>Field number for the "left_card_num" field.</summary>
    public const int LeftCardNumFieldNumber = 11;
    private int leftCardNum_;
    /// <summary>
    ///牌堆牌数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftCardNum {
      get { return leftCardNum_; }
      set {
        leftCardNum_ = value;
      }
    }

    /// <summary>Field number for the "out_cards" field.</summary>
    public const int OutCardsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_outCards_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> outCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///失效牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> OutCards {
      get { return outCards_; }
    }

    /// <summary>Field number for the "play_index" field.</summary>
    public const int PlayIndexFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_playIndex_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> playIndex_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///在玩下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayIndex {
      get { return playIndex_; }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgGameStartResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgGameStartResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurChairId != other.CurChairId) return false;
      if (BankerChairId != other.BankerChairId) return false;
      if (MaxScore != other.MaxScore) return false;
      if (CellScore != other.CellScore) return false;
      if (MaxMultiple != other.MaxMultiple) return false;
      if (JokerCard != other.JokerCard) return false;
      if (LeftCardNum != other.LeftCardNum) return false;
      if(!outCards_.Equals(other.outCards_)) return false;
      if(!playIndex_.Equals(other.playIndex_)) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurChairId != 0) hash ^= CurChairId.GetHashCode();
      if (BankerChairId != 0) hash ^= BankerChairId.GetHashCode();
      if (MaxScore != 0L) hash ^= MaxScore.GetHashCode();
      if (CellScore != 0L) hash ^= CellScore.GetHashCode();
      if (MaxMultiple != 0L) hash ^= MaxMultiple.GetHashCode();
      if (JokerCard != 0) hash ^= JokerCard.GetHashCode();
      if (LeftCardNum != 0) hash ^= LeftCardNum.GetHashCode();
      hash ^= outCards_.GetHashCode();
      hash ^= playIndex_.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BankerChairId);
      }
      if (MaxScore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MaxScore);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CellScore);
      }
      if (MaxMultiple != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MaxMultiple);
      }
      if (JokerCard != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(JokerCard);
      }
      if (LeftCardNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(LeftCardNum);
      }
      outCards_.WriteTo(output, _repeated_outCards_codec);
      playIndex_.WriteTo(output, _repeated_playIndex_codec);
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (BankerChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BankerChairId);
      }
      if (MaxScore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MaxScore);
      }
      if (CellScore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CellScore);
      }
      if (MaxMultiple != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MaxMultiple);
      }
      if (JokerCard != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(JokerCard);
      }
      if (LeftCardNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(LeftCardNum);
      }
      outCards_.WriteTo(ref output, _repeated_outCards_codec);
      playIndex_.WriteTo(ref output, _repeated_playIndex_codec);
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairId);
      }
      if (BankerChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerChairId);
      }
      if (MaxScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxScore);
      }
      if (CellScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CellScore);
      }
      if (MaxMultiple != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxMultiple);
      }
      if (JokerCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JokerCard);
      }
      if (LeftCardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardNum);
      }
      size += outCards_.CalculateSize(_repeated_outCards_codec);
      size += playIndex_.CalculateSize(_repeated_playIndex_codec);
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgGameStartResp other) {
      if (other == null) {
        return;
      }
      if (other.CurChairId != 0) {
        CurChairId = other.CurChairId;
      }
      if (other.BankerChairId != 0) {
        BankerChairId = other.BankerChairId;
      }
      if (other.MaxScore != 0L) {
        MaxScore = other.MaxScore;
      }
      if (other.CellScore != 0L) {
        CellScore = other.CellScore;
      }
      if (other.MaxMultiple != 0L) {
        MaxMultiple = other.MaxMultiple;
      }
      if (other.JokerCard != 0) {
        JokerCard = other.JokerCard;
      }
      if (other.LeftCardNum != 0) {
        LeftCardNum = other.LeftCardNum;
      }
      outCards_.Add(other.outCards_);
      playIndex_.Add(other.playIndex_);
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 16: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 24: {
            MaxScore = input.ReadInt64();
            break;
          }
          case 32: {
            CellScore = input.ReadInt64();
            break;
          }
          case 40: {
            MaxMultiple = input.ReadInt64();
            break;
          }
          case 80: {
            JokerCard = input.ReadInt32();
            break;
          }
          case 88: {
            LeftCardNum = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            outCards_.AddEntriesFrom(input, _repeated_outCards_codec);
            break;
          }
          case 106:
          case 104: {
            playIndex_.AddEntriesFrom(input, _repeated_playIndex_codec);
            break;
          }
          case 122:
          case 120: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 16: {
            BankerChairId = input.ReadInt32();
            break;
          }
          case 24: {
            MaxScore = input.ReadInt64();
            break;
          }
          case 32: {
            CellScore = input.ReadInt64();
            break;
          }
          case 40: {
            MaxMultiple = input.ReadInt64();
            break;
          }
          case 80: {
            JokerCard = input.ReadInt32();
            break;
          }
          case 88: {
            LeftCardNum = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            outCards_.AddEntriesFrom(ref input, _repeated_outCards_codec);
            break;
          }
          case 106:
          case 104: {
            playIndex_.AddEntriesFrom(ref input, _repeated_playIndex_codec);
            break;
          }
          case 122:
          case 120: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///通知操作
  /// </summary>
  public sealed partial class RMMsgNotifyActionResp : pb::IMessage<RMMsgNotifyActionResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgNotifyActionResp> _parser = new pb::MessageParser<RMMsgNotifyActionResp>(() => new RMMsgNotifyActionResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgNotifyActionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgNotifyActionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgNotifyActionResp(RMMsgNotifyActionResp other) : this() {
      curChairId_ = other.curChairId_;
      currentAct_ = other.currentAct_;
      operTime_ = other.operTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgNotifyActionResp Clone() {
      return new RMMsgNotifyActionResp(this);
    }

    /// <summary>Field number for the "cur_chair_id" field.</summary>
    public const int CurChairIdFieldNumber = 1;
    private int curChairId_;
    /// <summary>
    ///操作玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChairId {
      get { return curChairId_; }
      set {
        curChairId_ = value;
      }
    }

    /// <summary>Field number for the "current_act" field.</summary>
    public const int CurrentActFieldNumber = 3;
    private int currentAct_;
    /// <summary>
    ///当前操作码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentAct {
      get { return currentAct_; }
      set {
        currentAct_ = value;
      }
    }

    /// <summary>Field number for the "oper_time" field.</summary>
    public const int OperTimeFieldNumber = 4;
    private int operTime_;
    /// <summary>
    ///操作时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OperTime {
      get { return operTime_; }
      set {
        operTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgNotifyActionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgNotifyActionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurChairId != other.CurChairId) return false;
      if (CurrentAct != other.CurrentAct) return false;
      if (OperTime != other.OperTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurChairId != 0) hash ^= CurChairId.GetHashCode();
      if (CurrentAct != 0) hash ^= CurrentAct.GetHashCode();
      if (OperTime != 0) hash ^= OperTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (CurrentAct != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentAct);
      }
      if (OperTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OperTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChairId);
      }
      if (CurrentAct != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrentAct);
      }
      if (OperTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OperTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChairId);
      }
      if (CurrentAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentAct);
      }
      if (OperTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgNotifyActionResp other) {
      if (other == null) {
        return;
      }
      if (other.CurChairId != 0) {
        CurChairId = other.CurChairId;
      }
      if (other.CurrentAct != 0) {
        CurrentAct = other.CurrentAct;
      }
      if (other.OperTime != 0) {
        OperTime = other.OperTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 24: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 32: {
            OperTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurChairId = input.ReadInt32();
            break;
          }
          case 24: {
            CurrentAct = input.ReadInt32();
            break;
          }
          case 32: {
            OperTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家操作
  /// </summary>
  public sealed partial class RMMsgAction : pb::IMessage<RMMsgAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgAction> _parser = new pb::MessageParser<RMMsgAction>(() => new RMMsgAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgAction(RMMsgAction other) : this() {
      chairId_ = other.chairId_;
      actType_ = other.actType_;
      destCard_ = other.destCard_;
      getOutCard_ = other.getOutCard_;
      handGroupInfo_ = other.handGroupInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgAction Clone() {
      return new RMMsgAction(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "act_type" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private int actType_;
    /// <summary>
    ///操作标示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "dest_card" field.</summary>
    public const int DestCardFieldNumber = 3;
    private int destCard_;
    /// <summary>
    ///目标牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestCard {
      get { return destCard_; }
      set {
        destCard_ = value;
      }
    }

    /// <summary>Field number for the "get_out_card" field.</summary>
    public const int GetOutCardFieldNumber = 4;
    private bool getOutCard_;
    /// <summary>
    ///是否拿最后一张了的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GetOutCard {
      get { return getOutCard_; }
      set {
        getOutCard_ = value;
      }
    }

    /// <summary>Field number for the "hand_group_info" field.</summary>
    public const int HandGroupInfoFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Rummy.RMColumnInfo> _repeated_handGroupInfo_codec
        = pb::FieldCodec.ForMessage(42, global::Rummy.RMColumnInfo.Parser);
    private readonly pbc::RepeatedField<global::Rummy.RMColumnInfo> handGroupInfo_ = new pbc::RepeatedField<global::Rummy.RMColumnInfo>();
    /// <summary>
    ///手牌分组	(拿牌的时候可以不传 出牌时必传)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rummy.RMColumnInfo> HandGroupInfo {
      get { return handGroupInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (ActType != other.ActType) return false;
      if (DestCard != other.DestCard) return false;
      if (GetOutCard != other.GetOutCard) return false;
      if(!handGroupInfo_.Equals(other.handGroupInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (DestCard != 0) hash ^= DestCard.GetHashCode();
      if (GetOutCard != false) hash ^= GetOutCard.GetHashCode();
      hash ^= handGroupInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActType);
      }
      if (DestCard != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DestCard);
      }
      if (GetOutCard != false) {
        output.WriteRawTag(32);
        output.WriteBool(GetOutCard);
      }
      handGroupInfo_.WriteTo(output, _repeated_handGroupInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActType);
      }
      if (DestCard != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DestCard);
      }
      if (GetOutCard != false) {
        output.WriteRawTag(32);
        output.WriteBool(GetOutCard);
      }
      handGroupInfo_.WriteTo(ref output, _repeated_handGroupInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActType);
      }
      if (DestCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestCard);
      }
      if (GetOutCard != false) {
        size += 1 + 1;
      }
      size += handGroupInfo_.CalculateSize(_repeated_handGroupInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgAction other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.DestCard != 0) {
        DestCard = other.DestCard;
      }
      if (other.GetOutCard != false) {
        GetOutCard = other.GetOutCard;
      }
      handGroupInfo_.Add(other.handGroupInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ActType = input.ReadInt32();
            break;
          }
          case 24: {
            DestCard = input.ReadInt32();
            break;
          }
          case 32: {
            GetOutCard = input.ReadBool();
            break;
          }
          case 42: {
            handGroupInfo_.AddEntriesFrom(input, _repeated_handGroupInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ActType = input.ReadInt32();
            break;
          }
          case 24: {
            DestCard = input.ReadInt32();
            break;
          }
          case 32: {
            GetOutCard = input.ReadBool();
            break;
          }
          case 42: {
            handGroupInfo_.AddEntriesFrom(ref input, _repeated_handGroupInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家操作
  /// </summary>
  public sealed partial class RMMsgActionResp : pb::IMessage<RMMsgActionResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgActionResp> _parser = new pb::MessageParser<RMMsgActionResp>(() => new RMMsgActionResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgActionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgActionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgActionResp(RMMsgActionResp other) : this() {
      chairId_ = other.chairId_;
      actType_ = other.actType_;
      destCard_ = other.destCard_;
      getOutCard_ = other.getOutCard_;
      dorpMultiple_ = other.dorpMultiple_;
      autoAction_ = other.autoAction_;
      leftCardNum_ = other.leftCardNum_;
      handGroupInfo_ = other.handGroupInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgActionResp Clone() {
      return new RMMsgActionResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "act_type" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private int actType_;
    /// <summary>
    ///操作标示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "dest_card" field.</summary>
    public const int DestCardFieldNumber = 3;
    private int destCard_;
    /// <summary>
    ///目标牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestCard {
      get { return destCard_; }
      set {
        destCard_ = value;
      }
    }

    /// <summary>Field number for the "get_out_card" field.</summary>
    public const int GetOutCardFieldNumber = 4;
    private bool getOutCard_;
    /// <summary>
    ///是否拿最后一张了的牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GetOutCard {
      get { return getOutCard_; }
      set {
        getOutCard_ = value;
      }
    }

    /// <summary>Field number for the "dorp_multiple" field.</summary>
    public const int DorpMultipleFieldNumber = 6;
    private uint dorpMultiple_;
    /// <summary>
    ///弃牌倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DorpMultiple {
      get { return dorpMultiple_; }
      set {
        dorpMultiple_ = value;
      }
    }

    /// <summary>Field number for the "auto_action" field.</summary>
    public const int AutoActionFieldNumber = 7;
    private bool autoAction_;
    /// <summary>
    ///是否自动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoAction {
      get { return autoAction_; }
      set {
        autoAction_ = value;
      }
    }

    /// <summary>Field number for the "left_card_num" field.</summary>
    public const int LeftCardNumFieldNumber = 9;
    private int leftCardNum_;
    /// <summary>
    ///剩余牌堆数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftCardNum {
      get { return leftCardNum_; }
      set {
        leftCardNum_ = value;
      }
    }

    /// <summary>Field number for the "hand_group_info" field.</summary>
    public const int HandGroupInfoFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Rummy.RMColumnInfo> _repeated_handGroupInfo_codec
        = pb::FieldCodec.ForMessage(82, global::Rummy.RMColumnInfo.Parser);
    private readonly pbc::RepeatedField<global::Rummy.RMColumnInfo> handGroupInfo_ = new pbc::RepeatedField<global::Rummy.RMColumnInfo>();
    /// <summary>
    ///手牌分组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rummy.RMColumnInfo> HandGroupInfo {
      get { return handGroupInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgActionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgActionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (ActType != other.ActType) return false;
      if (DestCard != other.DestCard) return false;
      if (GetOutCard != other.GetOutCard) return false;
      if (DorpMultiple != other.DorpMultiple) return false;
      if (AutoAction != other.AutoAction) return false;
      if (LeftCardNum != other.LeftCardNum) return false;
      if(!handGroupInfo_.Equals(other.handGroupInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (DestCard != 0) hash ^= DestCard.GetHashCode();
      if (GetOutCard != false) hash ^= GetOutCard.GetHashCode();
      if (DorpMultiple != 0) hash ^= DorpMultiple.GetHashCode();
      if (AutoAction != false) hash ^= AutoAction.GetHashCode();
      if (LeftCardNum != 0) hash ^= LeftCardNum.GetHashCode();
      hash ^= handGroupInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActType);
      }
      if (DestCard != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DestCard);
      }
      if (GetOutCard != false) {
        output.WriteRawTag(32);
        output.WriteBool(GetOutCard);
      }
      if (DorpMultiple != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DorpMultiple);
      }
      if (AutoAction != false) {
        output.WriteRawTag(56);
        output.WriteBool(AutoAction);
      }
      if (LeftCardNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LeftCardNum);
      }
      handGroupInfo_.WriteTo(output, _repeated_handGroupInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActType);
      }
      if (DestCard != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DestCard);
      }
      if (GetOutCard != false) {
        output.WriteRawTag(32);
        output.WriteBool(GetOutCard);
      }
      if (DorpMultiple != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DorpMultiple);
      }
      if (AutoAction != false) {
        output.WriteRawTag(56);
        output.WriteBool(AutoAction);
      }
      if (LeftCardNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LeftCardNum);
      }
      handGroupInfo_.WriteTo(ref output, _repeated_handGroupInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActType);
      }
      if (DestCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestCard);
      }
      if (GetOutCard != false) {
        size += 1 + 1;
      }
      if (DorpMultiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DorpMultiple);
      }
      if (AutoAction != false) {
        size += 1 + 1;
      }
      if (LeftCardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCardNum);
      }
      size += handGroupInfo_.CalculateSize(_repeated_handGroupInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgActionResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.DestCard != 0) {
        DestCard = other.DestCard;
      }
      if (other.GetOutCard != false) {
        GetOutCard = other.GetOutCard;
      }
      if (other.DorpMultiple != 0) {
        DorpMultiple = other.DorpMultiple;
      }
      if (other.AutoAction != false) {
        AutoAction = other.AutoAction;
      }
      if (other.LeftCardNum != 0) {
        LeftCardNum = other.LeftCardNum;
      }
      handGroupInfo_.Add(other.handGroupInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ActType = input.ReadInt32();
            break;
          }
          case 24: {
            DestCard = input.ReadInt32();
            break;
          }
          case 32: {
            GetOutCard = input.ReadBool();
            break;
          }
          case 48: {
            DorpMultiple = input.ReadUInt32();
            break;
          }
          case 56: {
            AutoAction = input.ReadBool();
            break;
          }
          case 72: {
            LeftCardNum = input.ReadInt32();
            break;
          }
          case 82: {
            handGroupInfo_.AddEntriesFrom(input, _repeated_handGroupInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ActType = input.ReadInt32();
            break;
          }
          case 24: {
            DestCard = input.ReadInt32();
            break;
          }
          case 32: {
            GetOutCard = input.ReadBool();
            break;
          }
          case 48: {
            DorpMultiple = input.ReadUInt32();
            break;
          }
          case 56: {
            AutoAction = input.ReadBool();
            break;
          }
          case 72: {
            LeftCardNum = input.ReadInt32();
            break;
          }
          case 82: {
            handGroupInfo_.AddEntriesFrom(ref input, _repeated_handGroupInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RMMsgActionChoice : pb::IMessage<RMMsgActionChoice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgActionChoice> _parser = new pb::MessageParser<RMMsgActionChoice>(() => new RMMsgActionChoice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgActionChoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgActionChoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgActionChoice(RMMsgActionChoice other) : this() {
      determinedLevel_ = other.determinedLevel_;
      isDetermine_ = other.isDetermine_;
      choices_ = other.choices_.Clone();
      determinedAction_ = other.determinedAction_ != null ? other.determinedAction_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgActionChoice Clone() {
      return new RMMsgActionChoice(this);
    }

    /// <summary>Field number for the "determined_level" field.</summary>
    public const int DeterminedLevelFieldNumber = 1;
    private int determinedLevel_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeterminedLevel {
      get { return determinedLevel_; }
      set {
        determinedLevel_ = value;
      }
    }

    /// <summary>Field number for the "is_determine" field.</summary>
    public const int IsDetermineFieldNumber = 2;
    private bool isDetermine_;
    /// <summary>
    ///确定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDetermine {
      get { return isDetermine_; }
      set {
        isDetermine_ = value;
      }
    }

    /// <summary>Field number for the "choices" field.</summary>
    public const int ChoicesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Rummy.RMMsgAction> _repeated_choices_codec
        = pb::FieldCodec.ForMessage(26, global::Rummy.RMMsgAction.Parser);
    private readonly pbc::RepeatedField<global::Rummy.RMMsgAction> choices_ = new pbc::RepeatedField<global::Rummy.RMMsgAction>();
    /// <summary>
    ///历史
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rummy.RMMsgAction> Choices {
      get { return choices_; }
    }

    /// <summary>Field number for the "determined_action" field.</summary>
    public const int DeterminedActionFieldNumber = 4;
    private global::Rummy.RMMsgAction determinedAction_;
    /// <summary>
    ///确定操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rummy.RMMsgAction DeterminedAction {
      get { return determinedAction_; }
      set {
        determinedAction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgActionChoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgActionChoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeterminedLevel != other.DeterminedLevel) return false;
      if (IsDetermine != other.IsDetermine) return false;
      if(!choices_.Equals(other.choices_)) return false;
      if (!object.Equals(DeterminedAction, other.DeterminedAction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeterminedLevel != 0) hash ^= DeterminedLevel.GetHashCode();
      if (IsDetermine != false) hash ^= IsDetermine.GetHashCode();
      hash ^= choices_.GetHashCode();
      if (determinedAction_ != null) hash ^= DeterminedAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DeterminedLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeterminedLevel);
      }
      if (IsDetermine != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDetermine);
      }
      choices_.WriteTo(output, _repeated_choices_codec);
      if (determinedAction_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DeterminedAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DeterminedLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeterminedLevel);
      }
      if (IsDetermine != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDetermine);
      }
      choices_.WriteTo(ref output, _repeated_choices_codec);
      if (determinedAction_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DeterminedAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeterminedLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeterminedLevel);
      }
      if (IsDetermine != false) {
        size += 1 + 1;
      }
      size += choices_.CalculateSize(_repeated_choices_codec);
      if (determinedAction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeterminedAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgActionChoice other) {
      if (other == null) {
        return;
      }
      if (other.DeterminedLevel != 0) {
        DeterminedLevel = other.DeterminedLevel;
      }
      if (other.IsDetermine != false) {
        IsDetermine = other.IsDetermine;
      }
      choices_.Add(other.choices_);
      if (other.determinedAction_ != null) {
        if (determinedAction_ == null) {
          DeterminedAction = new global::Rummy.RMMsgAction();
        }
        DeterminedAction.MergeFrom(other.DeterminedAction);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeterminedLevel = input.ReadInt32();
            break;
          }
          case 16: {
            IsDetermine = input.ReadBool();
            break;
          }
          case 26: {
            choices_.AddEntriesFrom(input, _repeated_choices_codec);
            break;
          }
          case 34: {
            if (determinedAction_ == null) {
              DeterminedAction = new global::Rummy.RMMsgAction();
            }
            input.ReadMessage(DeterminedAction);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DeterminedLevel = input.ReadInt32();
            break;
          }
          case 16: {
            IsDetermine = input.ReadBool();
            break;
          }
          case 26: {
            choices_.AddEntriesFrom(ref input, _repeated_choices_codec);
            break;
          }
          case 34: {
            if (determinedAction_ == null) {
              DeterminedAction = new global::Rummy.RMMsgAction();
            }
            input.ReadMessage(DeterminedAction);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家弃牌返回
  /// </summary>
  public sealed partial class RMMsgGiveUpResp : pb::IMessage<RMMsgGiveUpResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgGiveUpResp> _parser = new pb::MessageParser<RMMsgGiveUpResp>(() => new RMMsgGiveUpResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgGiveUpResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgGiveUpResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgGiveUpResp(RMMsgGiveUpResp other) : this() {
      chairId_ = other.chairId_;
      lossGold_ = other.lossGold_;
      dorpMultiple_ = other.dorpMultiple_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgGiveUpResp Clone() {
      return new RMMsgGiveUpResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "loss_gold" field.</summary>
    public const int LossGoldFieldNumber = 2;
    private int lossGold_;
    /// <summary>
    ///输分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LossGold {
      get { return lossGold_; }
      set {
        lossGold_ = value;
      }
    }

    /// <summary>Field number for the "dorp_multiple" field.</summary>
    public const int DorpMultipleFieldNumber = 3;
    private uint dorpMultiple_;
    /// <summary>
    ///弃牌倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DorpMultiple {
      get { return dorpMultiple_; }
      set {
        dorpMultiple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgGiveUpResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgGiveUpResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (LossGold != other.LossGold) return false;
      if (DorpMultiple != other.DorpMultiple) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (LossGold != 0) hash ^= LossGold.GetHashCode();
      if (DorpMultiple != 0) hash ^= DorpMultiple.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (LossGold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LossGold);
      }
      if (DorpMultiple != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DorpMultiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (LossGold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LossGold);
      }
      if (DorpMultiple != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DorpMultiple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (LossGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LossGold);
      }
      if (DorpMultiple != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DorpMultiple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgGiveUpResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.LossGold != 0) {
        LossGold = other.LossGold;
      }
      if (other.DorpMultiple != 0) {
        DorpMultiple = other.DorpMultiple;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            LossGold = input.ReadInt32();
            break;
          }
          case 24: {
            DorpMultiple = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            LossGold = input.ReadInt32();
            break;
          }
          case 24: {
            DorpMultiple = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏结果                                  
  /// </summary>
  public sealed partial class RMMsgGameResult : pb::IMessage<RMMsgGameResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgGameResult> _parser = new pb::MessageParser<RMMsgGameResult>(() => new RMMsgGameResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgGameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgGameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgGameResult(RMMsgGameResult other) : this() {
      gameTax_ = other.gameTax_;
      playerInfo_ = other.playerInfo_.Clone();
      endState_ = other.endState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgGameResult Clone() {
      return new RMMsgGameResult(this);
    }

    /// <summary>Field number for the "game_tax" field.</summary>
    public const int GameTaxFieldNumber = 1;
    private int gameTax_;
    /// <summary>
    ///税收
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameTax {
      get { return gameTax_; }
      set {
        gameTax_ = value;
      }
    }

    /// <summary>Field number for the "player_info" field.</summary>
    public const int PlayerInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Rummy.RMMsgPlayerInfo> _repeated_playerInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Rummy.RMMsgPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Rummy.RMMsgPlayerInfo> playerInfo_ = new pbc::RepeatedField<global::Rummy.RMMsgPlayerInfo>();
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rummy.RMMsgPlayerInfo> PlayerInfo {
      get { return playerInfo_; }
    }

    /// <summary>Field number for the "end_state" field.</summary>
    public const int EndStateFieldNumber = 3;
    private int endState_;
    /// <summary>
    ///结束状态  1 比牌结束 2 全场秀牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndState {
      get { return endState_; }
      set {
        endState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgGameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgGameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameTax != other.GameTax) return false;
      if(!playerInfo_.Equals(other.playerInfo_)) return false;
      if (EndState != other.EndState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameTax != 0) hash ^= GameTax.GetHashCode();
      hash ^= playerInfo_.GetHashCode();
      if (EndState != 0) hash ^= EndState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameTax != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameTax);
      }
      playerInfo_.WriteTo(output, _repeated_playerInfo_codec);
      if (EndState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameTax != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameTax);
      }
      playerInfo_.WriteTo(ref output, _repeated_playerInfo_codec);
      if (EndState != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameTax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTax);
      }
      size += playerInfo_.CalculateSize(_repeated_playerInfo_codec);
      if (EndState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgGameResult other) {
      if (other == null) {
        return;
      }
      if (other.GameTax != 0) {
        GameTax = other.GameTax;
      }
      playerInfo_.Add(other.playerInfo_);
      if (other.EndState != 0) {
        EndState = other.EndState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameTax = input.ReadInt32();
            break;
          }
          case 18: {
            playerInfo_.AddEntriesFrom(input, _repeated_playerInfo_codec);
            break;
          }
          case 24: {
            EndState = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameTax = input.ReadInt32();
            break;
          }
          case 18: {
            playerInfo_.AddEntriesFrom(ref input, _repeated_playerInfo_codec);
            break;
          }
          case 24: {
            EndState = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///托管                               
  /// </summary>
  public sealed partial class RMMsgNotifyTrusteeship : pb::IMessage<RMMsgNotifyTrusteeship>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgNotifyTrusteeship> _parser = new pb::MessageParser<RMMsgNotifyTrusteeship>(() => new RMMsgNotifyTrusteeship());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgNotifyTrusteeship> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgNotifyTrusteeship() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgNotifyTrusteeship(RMMsgNotifyTrusteeship other) : this() {
      seatIndex_ = other.seatIndex_;
      isTrusteeship_ = other.isTrusteeship_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgNotifyTrusteeship Clone() {
      return new RMMsgNotifyTrusteeship(this);
    }

    /// <summary>Field number for the "seat_index" field.</summary>
    public const int SeatIndexFieldNumber = 1;
    private int seatIndex_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatIndex {
      get { return seatIndex_; }
      set {
        seatIndex_ = value;
      }
    }

    /// <summary>Field number for the "is_trusteeship" field.</summary>
    public const int IsTrusteeshipFieldNumber = 2;
    private bool isTrusteeship_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTrusteeship {
      get { return isTrusteeship_; }
      set {
        isTrusteeship_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgNotifyTrusteeship);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgNotifyTrusteeship other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeatIndex != other.SeatIndex) return false;
      if (IsTrusteeship != other.IsTrusteeship) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeatIndex != 0) hash ^= SeatIndex.GetHashCode();
      if (IsTrusteeship != false) hash ^= IsTrusteeship.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (IsTrusteeship != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTrusteeship);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SeatIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeatIndex);
      }
      if (IsTrusteeship != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTrusteeship);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeatIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatIndex);
      }
      if (IsTrusteeship != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgNotifyTrusteeship other) {
      if (other == null) {
        return;
      }
      if (other.SeatIndex != 0) {
        SeatIndex = other.SeatIndex;
      }
      if (other.IsTrusteeship != false) {
        IsTrusteeship = other.IsTrusteeship;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            IsTrusteeship = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SeatIndex = input.ReadInt32();
            break;
          }
          case 16: {
            IsTrusteeship = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///////////////////////////////////////////////////////////////机器人消息///////////////////////////////////////
  /// </summary>
  public sealed partial class RMMsgNotifyPlayerAct : pb::IMessage<RMMsgNotifyPlayerAct>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RMMsgNotifyPlayerAct> _parser = new pb::MessageParser<RMMsgNotifyPlayerAct>(() => new RMMsgNotifyPlayerAct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RMMsgNotifyPlayerAct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rummy.RummyReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgNotifyPlayerAct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgNotifyPlayerAct(RMMsgNotifyPlayerAct other) : this() {
      chairId_ = other.chairId_;
      act_ = other.act_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RMMsgNotifyPlayerAct Clone() {
      return new RMMsgNotifyPlayerAct(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 2;
    private int act_;
    /// <summary>
    ///被比玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RMMsgNotifyPlayerAct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RMMsgNotifyPlayerAct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (Act != other.Act) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (Act != 0) hash ^= Act.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Act != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Act);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Act);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RMMsgNotifyPlayerAct other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Act = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
