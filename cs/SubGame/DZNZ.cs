// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/DZNZ.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DZNZ {

  /// <summary>Holder for reflection information generated from Proto/SubGame/DZNZ.proto</summary>
  public static partial class DZNZReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/DZNZ.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DZNZReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9TdWJHYW1lL0RaTloucHJvdG8SBERaTloiIgoLUmVjb2RlUHJv",
            "dG8SEwoLZ2FtZV9yZWNvZGUYASADKAUiXQoPUGxheWVySW5mb1Byb3RvEhEK",
            "CXdpbl9jb3VudBgBIAEoBRISCgpwbGF5ZXJfYmV0GAIgASgDEhEKCXRvdGFs",
            "X3dpbhgDIAEoAxIQCghiZXRfaW5mbxgEIAMoBSJBCg5QbGF5ZXJHYW1lRGF0",
            "YRIvChBQbGF5ZXJfR2FtZV9EYXRhGAEgAygLMhUuRFpOWi5QbGF5ZXJJbmZv",
            "UHJvdG8i1AEKEVNDX1NjZW5lSW5mb1Byb3RvEhIKCmdhbWVfc3RhdGUYASAB",
            "KAUSEwoLcmVtYWluX3RpbWUYAiABKAUSJwoJd2hlZWxfbXNnGAMgAygLMhQu",
            "RFpOWi5XaGVlbEluZm9Qcm90bxIRCgliZXRfbGltaXQYBCADKAMSEgoKYmV0",
            "X2NvbmZpZxgFIAMoBRIVCg1hcmVhX211bHRpcGxlGAYgAygFEi8KEHBsYXll",
            "cl9nYW1lX2RhdGEYByADKAsyFS5EWk5aLlBsYXllckluZm9Qcm90byJBCg9D",
            "TURfU0NfQmV0UHJvdG8SDwoHY2hhaXJpZBgBIAEoBRIMCgRhcmVhGAIgASgF",
            "Eg8KB2JldF9udW0YAyABKAUiQgoOV2hlZWxJbmZvUHJvdG8SDwoHd2luX21z",
            "ZxgBIAEoBRIMCgRoYW5kGAIgAygFEhEKCWNhcmRfdHlwZRgDIAEoBSLCAQoW",
            "Q01EX1NDX0dhbWVSZXN1bHRQcm90bxIRCgljYXJkX3R5cGUYASADKAUSDAoE",
            "Y2FyZBgCIAMoBRIQCgh3aW5fY2FyZBgDIAMoBRIaChJ3aGVlbF9pbmZvX3dp",
            "bl9tc2cYBSABKAUSFwoPd2hlZWxfaW5mb19oYW5kGAYgAygFEhwKFHdoZWVs",
            "X2luZm9fY2FyZF90eXBlGAcgASgFEg8KB3dpbl9tc2cYCCADKAMSEQoJdXNl",
            "cl9nb2xkGAkgAygDIlkKFENNRF9TQ19CZXRBZ2FpblByb3RvEg8KB2NoYWly",
            "aWQYASABKAUSDAoEYXJlYRgCIAEoBRIPCgdiZXRfbnVtGAMgASgFEhEKCWJl",
            "dF9jb3VudBgEIAEoBSI8ChhDTURfU0NfTm90aWZ5U3RhdHVzUHJvdG8SEgoK",
            "Z2FtZV9zdGF0ZRgBIAEoBRIMCgR0aW1lGAIgASgFIisKCkNNRF9DU19CZXQS",
            "DAoEYXJlYRgBIAEoBRIPCgdiZXRfbnVtGAIgASgFIkMKD0NNRF9DU19CZXRB",
            "Z2FpbhIMCgRhcmVhGAEgASgFEg8KB2JldF9udW0YAiABKAUSEQoJYmV0X2Nv",
            "dW50GAMgASgFKsgBCgpFTXNnSUREWk5aEg4KCkNNRF9DU19CRVQQABITCg9D",
            "TURfQ1NfQkVUQUdBSU4QARIOCgpDTURfU0NfQkVUEAISFQoRQ01EX1NDX0dB",
            "TUVSRVNVTFQQAxITCg9DTURfU0NfQkVUQUdBSU4QBBIWChJDTURfU0NfTk9U",
            "SUZZU1RBVFUQBRIWChJDTURfU0NfUExBWUVSSU5GT1MQBhIRCg1DTURfU0Nf",
            "QUlfQkVUEAcSFgoSQ01EX1NDX0dBTUVfUkVDT1JEEAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DZNZ.EMsgIDDZNZ), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DZNZ.RecodeProto), global::DZNZ.RecodeProto.Parser, new[]{ "GameRecode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DZNZ.PlayerInfoProto), global::DZNZ.PlayerInfoProto.Parser, new[]{ "WinCount", "PlayerBet", "TotalWin", "BetInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DZNZ.PlayerGameData), global::DZNZ.PlayerGameData.Parser, new[]{ "PlayerGameData_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DZNZ.SC_SceneInfoProto), global::DZNZ.SC_SceneInfoProto.Parser, new[]{ "GameState", "RemainTime", "WheelMsg", "BetLimit", "BetConfig", "AreaMultiple", "PlayerGameData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DZNZ.CMD_SC_BetProto), global::DZNZ.CMD_SC_BetProto.Parser, new[]{ "Chairid", "Area", "BetNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DZNZ.WheelInfoProto), global::DZNZ.WheelInfoProto.Parser, new[]{ "WinMsg", "Hand", "CardType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DZNZ.CMD_SC_GameResultProto), global::DZNZ.CMD_SC_GameResultProto.Parser, new[]{ "CardType", "Card", "WinCard", "WheelInfoWinMsg", "WheelInfoHand", "WheelInfoCardType", "WinMsg", "UserGold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DZNZ.CMD_SC_BetAgainProto), global::DZNZ.CMD_SC_BetAgainProto.Parser, new[]{ "Chairid", "Area", "BetNum", "BetCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DZNZ.CMD_SC_NotifyStatusProto), global::DZNZ.CMD_SC_NotifyStatusProto.Parser, new[]{ "GameState", "Time" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DZNZ.CMD_CS_Bet), global::DZNZ.CMD_CS_Bet.Parser, new[]{ "Area", "BetNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DZNZ.CMD_CS_BetAgain), global::DZNZ.CMD_CS_BetAgain.Parser, new[]{ "Area", "BetNum", "BetCount" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDDZNZ {
    /// <summary>
    ///玩家下注(CMD_CS_Bet)
    /// </summary>
    [pbr::OriginalName("CMD_CS_BET")] CmdCsBet = 0,
    /// <summary>
    ///下注续投(CMD_CS_BetAgain)
    /// </summary>
    [pbr::OriginalName("CMD_CS_BETAGAIN")] CmdCsBetagain = 1,
    /// <summary>
    ///玩家下注值(CMD_SC_BetProto)
    /// </summary>
    [pbr::OriginalName("CMD_SC_BET")] CmdScBet = 2,
    /// <summary>
    ///游戏结果(CMD_SC_GameResultProto)
    /// </summary>
    [pbr::OriginalName("CMD_SC_GAMERESULT")] CmdScGameresult = 3,
    /// <summary>
    ///下注续投(CMD_SC_BetAgainProto)
    /// </summary>
    [pbr::OriginalName("CMD_SC_BETAGAIN")] CmdScBetagain = 4,
    /// <summary>
    ///通知状态(CMD_SC_NotifyStatusProto)
    /// </summary>
    [pbr::OriginalName("CMD_SC_NOTIFYSTATU")] CmdScNotifystatu = 5,
    /// <summary>
    ///玩家数据(PlayerGameData)
    /// </summary>
    [pbr::OriginalName("CMD_SC_PLAYERINFOS")] CmdScPlayerinfos = 6,
    [pbr::OriginalName("CMD_SC_AI_BET")] CmdScAiBet = 7,
    /// <summary>
    ///游戏总记录(RecodeProto)
    /// </summary>
    [pbr::OriginalName("CMD_SC_GAME_RECORD")] CmdScGameRecord = 8,
  }

  #endregion

  #region Messages
  /// <summary>
  ///游戏总记录
  /// </summary>
  public sealed partial class RecodeProto : pb::IMessage<RecodeProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RecodeProto> _parser = new pb::MessageParser<RecodeProto>(() => new RecodeProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecodeProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DZNZ.DZNZReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecodeProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecodeProto(RecodeProto other) : this() {
      gameRecode_ = other.gameRecode_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecodeProto Clone() {
      return new RecodeProto(this);
    }

    /// <summary>Field number for the "game_recode" field.</summary>
    public const int GameRecodeFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_gameRecode_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> gameRecode_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GameRecode {
      get { return gameRecode_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecodeProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecodeProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gameRecode_.Equals(other.gameRecode_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gameRecode_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gameRecode_.WriteTo(output, _repeated_gameRecode_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gameRecode_.WriteTo(ref output, _repeated_gameRecode_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gameRecode_.CalculateSize(_repeated_gameRecode_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecodeProto other) {
      if (other == null) {
        return;
      }
      gameRecode_.Add(other.gameRecode_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            gameRecode_.AddEntriesFrom(input, _repeated_gameRecode_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            gameRecode_.AddEntriesFrom(ref input, _repeated_gameRecode_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家数据
  /// </summary>
  public sealed partial class PlayerInfoProto : pb::IMessage<PlayerInfoProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerInfoProto> _parser = new pb::MessageParser<PlayerInfoProto>(() => new PlayerInfoProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfoProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DZNZ.DZNZReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoProto(PlayerInfoProto other) : this() {
      winCount_ = other.winCount_;
      playerBet_ = other.playerBet_;
      totalWin_ = other.totalWin_;
      betInfo_ = other.betInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoProto Clone() {
      return new PlayerInfoProto(this);
    }

    /// <summary>Field number for the "win_count" field.</summary>
    public const int WinCountFieldNumber = 1;
    private int winCount_;
    /// <summary>
    ///二十局赢次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinCount {
      get { return winCount_; }
      set {
        winCount_ = value;
      }
    }

    /// <summary>Field number for the "player_bet" field.</summary>
    public const int PlayerBetFieldNumber = 2;
    private long playerBet_;
    /// <summary>
    ///二十局总投注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerBet {
      get { return playerBet_; }
      set {
        playerBet_ = value;
      }
    }

    /// <summary>Field number for the "total_win" field.</summary>
    public const int TotalWinFieldNumber = 3;
    private long totalWin_;
    /// <summary>
    ///玩家本房间总输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "bet_info" field.</summary>
    public const int BetInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_betInfo_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> betInfo_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///玩家下注详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BetInfo {
      get { return betInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfoProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfoProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinCount != other.WinCount) return false;
      if (PlayerBet != other.PlayerBet) return false;
      if (TotalWin != other.TotalWin) return false;
      if(!betInfo_.Equals(other.betInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WinCount != 0) hash ^= WinCount.GetHashCode();
      if (PlayerBet != 0L) hash ^= PlayerBet.GetHashCode();
      if (TotalWin != 0L) hash ^= TotalWin.GetHashCode();
      hash ^= betInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WinCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinCount);
      }
      if (PlayerBet != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PlayerBet);
      }
      if (TotalWin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalWin);
      }
      betInfo_.WriteTo(output, _repeated_betInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WinCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinCount);
      }
      if (PlayerBet != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PlayerBet);
      }
      if (TotalWin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalWin);
      }
      betInfo_.WriteTo(ref output, _repeated_betInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinCount);
      }
      if (PlayerBet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerBet);
      }
      if (TotalWin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalWin);
      }
      size += betInfo_.CalculateSize(_repeated_betInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfoProto other) {
      if (other == null) {
        return;
      }
      if (other.WinCount != 0) {
        WinCount = other.WinCount;
      }
      if (other.PlayerBet != 0L) {
        PlayerBet = other.PlayerBet;
      }
      if (other.TotalWin != 0L) {
        TotalWin = other.TotalWin;
      }
      betInfo_.Add(other.betInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WinCount = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerBet = input.ReadInt64();
            break;
          }
          case 24: {
            TotalWin = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            betInfo_.AddEntriesFrom(input, _repeated_betInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WinCount = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerBet = input.ReadInt64();
            break;
          }
          case 24: {
            TotalWin = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            betInfo_.AddEntriesFrom(ref input, _repeated_betInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家数据
  /// </summary>
  public sealed partial class PlayerGameData : pb::IMessage<PlayerGameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerGameData> _parser = new pb::MessageParser<PlayerGameData>(() => new PlayerGameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerGameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DZNZ.DZNZReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGameData(PlayerGameData other) : this() {
      playerGameData_ = other.playerGameData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerGameData Clone() {
      return new PlayerGameData(this);
    }

    /// <summary>Field number for the "Player_Game_Data" field.</summary>
    public const int PlayerGameData_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::DZNZ.PlayerInfoProto> _repeated_playerGameData_codec
        = pb::FieldCodec.ForMessage(10, global::DZNZ.PlayerInfoProto.Parser);
    private readonly pbc::RepeatedField<global::DZNZ.PlayerInfoProto> playerGameData_ = new pbc::RepeatedField<global::DZNZ.PlayerInfoProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DZNZ.PlayerInfoProto> PlayerGameData_ {
      get { return playerGameData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerGameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerGameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerGameData_.Equals(other.playerGameData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerGameData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      playerGameData_.WriteTo(output, _repeated_playerGameData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      playerGameData_.WriteTo(ref output, _repeated_playerGameData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerGameData_.CalculateSize(_repeated_playerGameData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerGameData other) {
      if (other == null) {
        return;
      }
      playerGameData_.Add(other.playerGameData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerGameData_.AddEntriesFrom(input, _repeated_playerGameData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            playerGameData_.AddEntriesFrom(ref input, _repeated_playerGameData_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class SC_SceneInfoProto : pb::IMessage<SC_SceneInfoProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfoProto> _parser = new pb::MessageParser<SC_SceneInfoProto>(() => new SC_SceneInfoProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfoProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DZNZ.DZNZReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfoProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfoProto(SC_SceneInfoProto other) : this() {
      gameState_ = other.gameState_;
      remainTime_ = other.remainTime_;
      wheelMsg_ = other.wheelMsg_.Clone();
      betLimit_ = other.betLimit_.Clone();
      betConfig_ = other.betConfig_.Clone();
      areaMultiple_ = other.areaMultiple_.Clone();
      playerGameData_ = other.playerGameData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfoProto Clone() {
      return new SC_SceneInfoProto(this);
    }

    /// <summary>Field number for the "game_state" field.</summary>
    public const int GameStateFieldNumber = 1;
    private int gameState_;
    /// <summary>
    ///游戏状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "remain_time" field.</summary>
    public const int RemainTimeFieldNumber = 2;
    private int remainTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    /// <summary>Field number for the "wheel_msg" field.</summary>
    public const int WheelMsgFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DZNZ.WheelInfoProto> _repeated_wheelMsg_codec
        = pb::FieldCodec.ForMessage(26, global::DZNZ.WheelInfoProto.Parser);
    private readonly pbc::RepeatedField<global::DZNZ.WheelInfoProto> wheelMsg_ = new pbc::RepeatedField<global::DZNZ.WheelInfoProto>();
    /// <summary>
    ///牌路信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DZNZ.WheelInfoProto> WheelMsg {
      get { return wheelMsg_; }
    }

    /// <summary>Field number for the "bet_limit" field.</summary>
    public const int BetLimitFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_betLimit_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> betLimit_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///限红 0: 10倍以下  1:10-99倍  2:100-248
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> BetLimit {
      get { return betLimit_; }
    }

    /// <summary>Field number for the "bet_config" field.</summary>
    public const int BetConfigFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_betConfig_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> betConfig_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///下注配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BetConfig {
      get { return betConfig_; }
    }

    /// <summary>Field number for the "area_multiple" field.</summary>
    public const int AreaMultipleFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_areaMultiple_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> areaMultiple_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///佩服倍数配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AreaMultiple {
      get { return areaMultiple_; }
    }

    /// <summary>Field number for the "player_game_data" field.</summary>
    public const int PlayerGameDataFieldNumber = 7;
    private static readonly pb::FieldCodec<global::DZNZ.PlayerInfoProto> _repeated_playerGameData_codec
        = pb::FieldCodec.ForMessage(58, global::DZNZ.PlayerInfoProto.Parser);
    private readonly pbc::RepeatedField<global::DZNZ.PlayerInfoProto> playerGameData_ = new pbc::RepeatedField<global::DZNZ.PlayerInfoProto>();
    /// <summary>
    ///玩家游戏信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DZNZ.PlayerInfoProto> PlayerGameData {
      get { return playerGameData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfoProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfoProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameState != other.GameState) return false;
      if (RemainTime != other.RemainTime) return false;
      if(!wheelMsg_.Equals(other.wheelMsg_)) return false;
      if(!betLimit_.Equals(other.betLimit_)) return false;
      if(!betConfig_.Equals(other.betConfig_)) return false;
      if(!areaMultiple_.Equals(other.areaMultiple_)) return false;
      if(!playerGameData_.Equals(other.playerGameData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameState != 0) hash ^= GameState.GetHashCode();
      if (RemainTime != 0) hash ^= RemainTime.GetHashCode();
      hash ^= wheelMsg_.GetHashCode();
      hash ^= betLimit_.GetHashCode();
      hash ^= betConfig_.GetHashCode();
      hash ^= areaMultiple_.GetHashCode();
      hash ^= playerGameData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameState != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameState);
      }
      if (RemainTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainTime);
      }
      wheelMsg_.WriteTo(output, _repeated_wheelMsg_codec);
      betLimit_.WriteTo(output, _repeated_betLimit_codec);
      betConfig_.WriteTo(output, _repeated_betConfig_codec);
      areaMultiple_.WriteTo(output, _repeated_areaMultiple_codec);
      playerGameData_.WriteTo(output, _repeated_playerGameData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameState != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameState);
      }
      if (RemainTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainTime);
      }
      wheelMsg_.WriteTo(ref output, _repeated_wheelMsg_codec);
      betLimit_.WriteTo(ref output, _repeated_betLimit_codec);
      betConfig_.WriteTo(ref output, _repeated_betConfig_codec);
      areaMultiple_.WriteTo(ref output, _repeated_areaMultiple_codec);
      playerGameData_.WriteTo(ref output, _repeated_playerGameData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameState);
      }
      if (RemainTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainTime);
      }
      size += wheelMsg_.CalculateSize(_repeated_wheelMsg_codec);
      size += betLimit_.CalculateSize(_repeated_betLimit_codec);
      size += betConfig_.CalculateSize(_repeated_betConfig_codec);
      size += areaMultiple_.CalculateSize(_repeated_areaMultiple_codec);
      size += playerGameData_.CalculateSize(_repeated_playerGameData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfoProto other) {
      if (other == null) {
        return;
      }
      if (other.GameState != 0) {
        GameState = other.GameState;
      }
      if (other.RemainTime != 0) {
        RemainTime = other.RemainTime;
      }
      wheelMsg_.Add(other.wheelMsg_);
      betLimit_.Add(other.betLimit_);
      betConfig_.Add(other.betConfig_);
      areaMultiple_.Add(other.areaMultiple_);
      playerGameData_.Add(other.playerGameData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameState = input.ReadInt32();
            break;
          }
          case 16: {
            RemainTime = input.ReadInt32();
            break;
          }
          case 26: {
            wheelMsg_.AddEntriesFrom(input, _repeated_wheelMsg_codec);
            break;
          }
          case 34:
          case 32: {
            betLimit_.AddEntriesFrom(input, _repeated_betLimit_codec);
            break;
          }
          case 42:
          case 40: {
            betConfig_.AddEntriesFrom(input, _repeated_betConfig_codec);
            break;
          }
          case 50:
          case 48: {
            areaMultiple_.AddEntriesFrom(input, _repeated_areaMultiple_codec);
            break;
          }
          case 58: {
            playerGameData_.AddEntriesFrom(input, _repeated_playerGameData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameState = input.ReadInt32();
            break;
          }
          case 16: {
            RemainTime = input.ReadInt32();
            break;
          }
          case 26: {
            wheelMsg_.AddEntriesFrom(ref input, _repeated_wheelMsg_codec);
            break;
          }
          case 34:
          case 32: {
            betLimit_.AddEntriesFrom(ref input, _repeated_betLimit_codec);
            break;
          }
          case 42:
          case 40: {
            betConfig_.AddEntriesFrom(ref input, _repeated_betConfig_codec);
            break;
          }
          case 50:
          case 48: {
            areaMultiple_.AddEntriesFrom(ref input, _repeated_areaMultiple_codec);
            break;
          }
          case 58: {
            playerGameData_.AddEntriesFrom(ref input, _repeated_playerGameData_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家下注
  /// </summary>
  public sealed partial class CMD_SC_BetProto : pb::IMessage<CMD_SC_BetProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_SC_BetProto> _parser = new pb::MessageParser<CMD_SC_BetProto>(() => new CMD_SC_BetProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_SC_BetProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DZNZ.DZNZReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_BetProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_BetProto(CMD_SC_BetProto other) : this() {
      chairid_ = other.chairid_;
      area_ = other.area_;
      betNum_ = other.betNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_BetProto Clone() {
      return new CMD_SC_BetProto(this);
    }

    /// <summary>Field number for the "chairid" field.</summary>
    public const int ChairidFieldNumber = 1;
    private int chairid_;
    /// <summary>
    ///椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chairid {
      get { return chairid_; }
      set {
        chairid_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 2;
    private int area_;
    /// <summary>
    ///下注区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "bet_num" field.</summary>
    public const int BetNumFieldNumber = 3;
    private int betNum_;
    /// <summary>
    ///下注数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BetNum {
      get { return betNum_; }
      set {
        betNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_SC_BetProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_SC_BetProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chairid != other.Chairid) return false;
      if (Area != other.Area) return false;
      if (BetNum != other.BetNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chairid != 0) hash ^= Chairid.GetHashCode();
      if (Area != 0) hash ^= Area.GetHashCode();
      if (BetNum != 0) hash ^= BetNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chairid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chairid);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (BetNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BetNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chairid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chairid);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (BetNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BetNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chairid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chairid);
      }
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Area);
      }
      if (BetNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BetNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_SC_BetProto other) {
      if (other == null) {
        return;
      }
      if (other.Chairid != 0) {
        Chairid = other.Chairid;
      }
      if (other.Area != 0) {
        Area = other.Area;
      }
      if (other.BetNum != 0) {
        BetNum = other.BetNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chairid = input.ReadInt32();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
          case 24: {
            BetNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chairid = input.ReadInt32();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
          case 24: {
            BetNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// </summary>
  public sealed partial class WheelInfoProto : pb::IMessage<WheelInfoProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WheelInfoProto> _parser = new pb::MessageParser<WheelInfoProto>(() => new WheelInfoProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WheelInfoProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DZNZ.DZNZReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WheelInfoProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WheelInfoProto(WheelInfoProto other) : this() {
      winMsg_ = other.winMsg_;
      hand_ = other.hand_.Clone();
      cardType_ = other.cardType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WheelInfoProto Clone() {
      return new WheelInfoProto(this);
    }

    /// <summary>Field number for the "win_msg" field.</summary>
    public const int WinMsgFieldNumber = 1;
    private int winMsg_;
    /// <summary>
    ///输赢信息 1: 牛仔胜 2: 平 3: 公牛胜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinMsg {
      get { return winMsg_; }
      set {
        winMsg_ = value;
      }
    }

    /// <summary>Field number for the "hand" field.</summary>
    public const int HandFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_hand_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> hand_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///任一手牌 11: 无 3:同花/连牌/同花连牌 6:对子 7:对a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Hand {
      get { return hand_; }
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 3;
    private int cardType_;
    /// <summary>
    ///获胜牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WheelInfoProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WheelInfoProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinMsg != other.WinMsg) return false;
      if(!hand_.Equals(other.hand_)) return false;
      if (CardType != other.CardType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WinMsg != 0) hash ^= WinMsg.GetHashCode();
      hash ^= hand_.GetHashCode();
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WinMsg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinMsg);
      }
      hand_.WriteTo(output, _repeated_hand_codec);
      if (CardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WinMsg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinMsg);
      }
      hand_.WriteTo(ref output, _repeated_hand_codec);
      if (CardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinMsg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinMsg);
      }
      size += hand_.CalculateSize(_repeated_hand_codec);
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WheelInfoProto other) {
      if (other == null) {
        return;
      }
      if (other.WinMsg != 0) {
        WinMsg = other.WinMsg;
      }
      hand_.Add(other.hand_);
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WinMsg = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            hand_.AddEntriesFrom(input, _repeated_hand_codec);
            break;
          }
          case 24: {
            CardType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WinMsg = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            hand_.AddEntriesFrom(ref input, _repeated_hand_codec);
            break;
          }
          case 24: {
            CardType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏结果
  /// </summary>
  public sealed partial class CMD_SC_GameResultProto : pb::IMessage<CMD_SC_GameResultProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_SC_GameResultProto> _parser = new pb::MessageParser<CMD_SC_GameResultProto>(() => new CMD_SC_GameResultProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_SC_GameResultProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DZNZ.DZNZReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_GameResultProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_GameResultProto(CMD_SC_GameResultProto other) : this() {
      cardType_ = other.cardType_.Clone();
      card_ = other.card_.Clone();
      winCard_ = other.winCard_.Clone();
      wheelInfoWinMsg_ = other.wheelInfoWinMsg_;
      wheelInfoHand_ = other.wheelInfoHand_.Clone();
      wheelInfoCardType_ = other.wheelInfoCardType_;
      winMsg_ = other.winMsg_.Clone();
      userGold_ = other.userGold_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_GameResultProto Clone() {
      return new CMD_SC_GameResultProto(this);
    }

    /// <summary>Field number for the "card_type" field.</summary>
    public const int CardTypeFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_cardType_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> cardType_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///0: 牛仔  1:公牛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CardType {
      get { return cardType_; }
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_card_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> card_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///左到右9张牌 1黑2红3梅4方 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Card {
      get { return card_; }
    }

    /// <summary>Field number for the "win_card" field.</summary>
    public const int WinCardFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_winCard_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> winCard_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///赢的5张牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WinCard {
      get { return winCard_; }
    }

    /// <summary>Field number for the "wheel_info_win_msg" field.</summary>
    public const int WheelInfoWinMsgFieldNumber = 5;
    private int wheelInfoWinMsg_;
    /// <summary>
    ///输赢信息 1: 牛仔胜 2: 平 3: 公牛胜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WheelInfoWinMsg {
      get { return wheelInfoWinMsg_; }
      set {
        wheelInfoWinMsg_ = value;
      }
    }

    /// <summary>Field number for the "wheel_info_hand" field.</summary>
    public const int WheelInfoHandFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_wheelInfoHand_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> wheelInfoHand_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///任一手牌 11: 无 3:同花/连牌/同花连牌 6:对子 7:对a
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WheelInfoHand {
      get { return wheelInfoHand_; }
    }

    /// <summary>Field number for the "wheel_info_card_type" field.</summary>
    public const int WheelInfoCardTypeFieldNumber = 7;
    private int wheelInfoCardType_;
    /// <summary>
    ///获胜牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WheelInfoCardType {
      get { return wheelInfoCardType_; }
      set {
        wheelInfoCardType_ = value;
      }
    }

    /// <summary>Field number for the "win_msg" field.</summary>
    public const int WinMsgFieldNumber = 8;
    private static readonly pb::FieldCodec<long> _repeated_winMsg_codec
        = pb::FieldCodec.ForInt64(66);
    private readonly pbc::RepeatedField<long> winMsg_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///输赢结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> WinMsg {
      get { return winMsg_; }
    }

    /// <summary>Field number for the "user_gold" field.</summary>
    public const int UserGoldFieldNumber = 9;
    private static readonly pb::FieldCodec<long> _repeated_userGold_codec
        = pb::FieldCodec.ForInt64(74);
    private readonly pbc::RepeatedField<long> userGold_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///用户金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UserGold {
      get { return userGold_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_SC_GameResultProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_SC_GameResultProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardType_.Equals(other.cardType_)) return false;
      if(!card_.Equals(other.card_)) return false;
      if(!winCard_.Equals(other.winCard_)) return false;
      if (WheelInfoWinMsg != other.WheelInfoWinMsg) return false;
      if(!wheelInfoHand_.Equals(other.wheelInfoHand_)) return false;
      if (WheelInfoCardType != other.WheelInfoCardType) return false;
      if(!winMsg_.Equals(other.winMsg_)) return false;
      if(!userGold_.Equals(other.userGold_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardType_.GetHashCode();
      hash ^= card_.GetHashCode();
      hash ^= winCard_.GetHashCode();
      if (WheelInfoWinMsg != 0) hash ^= WheelInfoWinMsg.GetHashCode();
      hash ^= wheelInfoHand_.GetHashCode();
      if (WheelInfoCardType != 0) hash ^= WheelInfoCardType.GetHashCode();
      hash ^= winMsg_.GetHashCode();
      hash ^= userGold_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cardType_.WriteTo(output, _repeated_cardType_codec);
      card_.WriteTo(output, _repeated_card_codec);
      winCard_.WriteTo(output, _repeated_winCard_codec);
      if (WheelInfoWinMsg != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WheelInfoWinMsg);
      }
      wheelInfoHand_.WriteTo(output, _repeated_wheelInfoHand_codec);
      if (WheelInfoCardType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WheelInfoCardType);
      }
      winMsg_.WriteTo(output, _repeated_winMsg_codec);
      userGold_.WriteTo(output, _repeated_userGold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cardType_.WriteTo(ref output, _repeated_cardType_codec);
      card_.WriteTo(ref output, _repeated_card_codec);
      winCard_.WriteTo(ref output, _repeated_winCard_codec);
      if (WheelInfoWinMsg != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WheelInfoWinMsg);
      }
      wheelInfoHand_.WriteTo(ref output, _repeated_wheelInfoHand_codec);
      if (WheelInfoCardType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WheelInfoCardType);
      }
      winMsg_.WriteTo(ref output, _repeated_winMsg_codec);
      userGold_.WriteTo(ref output, _repeated_userGold_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardType_.CalculateSize(_repeated_cardType_codec);
      size += card_.CalculateSize(_repeated_card_codec);
      size += winCard_.CalculateSize(_repeated_winCard_codec);
      if (WheelInfoWinMsg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WheelInfoWinMsg);
      }
      size += wheelInfoHand_.CalculateSize(_repeated_wheelInfoHand_codec);
      if (WheelInfoCardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WheelInfoCardType);
      }
      size += winMsg_.CalculateSize(_repeated_winMsg_codec);
      size += userGold_.CalculateSize(_repeated_userGold_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_SC_GameResultProto other) {
      if (other == null) {
        return;
      }
      cardType_.Add(other.cardType_);
      card_.Add(other.card_);
      winCard_.Add(other.winCard_);
      if (other.WheelInfoWinMsg != 0) {
        WheelInfoWinMsg = other.WheelInfoWinMsg;
      }
      wheelInfoHand_.Add(other.wheelInfoHand_);
      if (other.WheelInfoCardType != 0) {
        WheelInfoCardType = other.WheelInfoCardType;
      }
      winMsg_.Add(other.winMsg_);
      userGold_.Add(other.userGold_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            cardType_.AddEntriesFrom(input, _repeated_cardType_codec);
            break;
          }
          case 18:
          case 16: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
          case 26:
          case 24: {
            winCard_.AddEntriesFrom(input, _repeated_winCard_codec);
            break;
          }
          case 40: {
            WheelInfoWinMsg = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            wheelInfoHand_.AddEntriesFrom(input, _repeated_wheelInfoHand_codec);
            break;
          }
          case 56: {
            WheelInfoCardType = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            winMsg_.AddEntriesFrom(input, _repeated_winMsg_codec);
            break;
          }
          case 74:
          case 72: {
            userGold_.AddEntriesFrom(input, _repeated_userGold_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            cardType_.AddEntriesFrom(ref input, _repeated_cardType_codec);
            break;
          }
          case 18:
          case 16: {
            card_.AddEntriesFrom(ref input, _repeated_card_codec);
            break;
          }
          case 26:
          case 24: {
            winCard_.AddEntriesFrom(ref input, _repeated_winCard_codec);
            break;
          }
          case 40: {
            WheelInfoWinMsg = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            wheelInfoHand_.AddEntriesFrom(ref input, _repeated_wheelInfoHand_codec);
            break;
          }
          case 56: {
            WheelInfoCardType = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            winMsg_.AddEntriesFrom(ref input, _repeated_winMsg_codec);
            break;
          }
          case 74:
          case 72: {
            userGold_.AddEntriesFrom(ref input, _repeated_userGold_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家续投下注
  /// </summary>
  public sealed partial class CMD_SC_BetAgainProto : pb::IMessage<CMD_SC_BetAgainProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_SC_BetAgainProto> _parser = new pb::MessageParser<CMD_SC_BetAgainProto>(() => new CMD_SC_BetAgainProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_SC_BetAgainProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DZNZ.DZNZReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_BetAgainProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_BetAgainProto(CMD_SC_BetAgainProto other) : this() {
      chairid_ = other.chairid_;
      area_ = other.area_;
      betNum_ = other.betNum_;
      betCount_ = other.betCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_BetAgainProto Clone() {
      return new CMD_SC_BetAgainProto(this);
    }

    /// <summary>Field number for the "chairid" field.</summary>
    public const int ChairidFieldNumber = 1;
    private int chairid_;
    /// <summary>
    ///椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chairid {
      get { return chairid_; }
      set {
        chairid_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 2;
    private int area_;
    /// <summary>
    ///下注区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "bet_num" field.</summary>
    public const int BetNumFieldNumber = 3;
    private int betNum_;
    /// <summary>
    ///下注数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BetNum {
      get { return betNum_; }
      set {
        betNum_ = value;
      }
    }

    /// <summary>Field number for the "bet_count" field.</summary>
    public const int BetCountFieldNumber = 4;
    private int betCount_;
    /// <summary>
    ///下注次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BetCount {
      get { return betCount_; }
      set {
        betCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_SC_BetAgainProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_SC_BetAgainProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chairid != other.Chairid) return false;
      if (Area != other.Area) return false;
      if (BetNum != other.BetNum) return false;
      if (BetCount != other.BetCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chairid != 0) hash ^= Chairid.GetHashCode();
      if (Area != 0) hash ^= Area.GetHashCode();
      if (BetNum != 0) hash ^= BetNum.GetHashCode();
      if (BetCount != 0) hash ^= BetCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chairid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chairid);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (BetNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BetNum);
      }
      if (BetCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BetCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chairid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chairid);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (BetNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BetNum);
      }
      if (BetCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BetCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chairid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chairid);
      }
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Area);
      }
      if (BetNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BetNum);
      }
      if (BetCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BetCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_SC_BetAgainProto other) {
      if (other == null) {
        return;
      }
      if (other.Chairid != 0) {
        Chairid = other.Chairid;
      }
      if (other.Area != 0) {
        Area = other.Area;
      }
      if (other.BetNum != 0) {
        BetNum = other.BetNum;
      }
      if (other.BetCount != 0) {
        BetCount = other.BetCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chairid = input.ReadInt32();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
          case 24: {
            BetNum = input.ReadInt32();
            break;
          }
          case 32: {
            BetCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chairid = input.ReadInt32();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
          case 24: {
            BetNum = input.ReadInt32();
            break;
          }
          case 32: {
            BetCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///通知状态
  /// </summary>
  public sealed partial class CMD_SC_NotifyStatusProto : pb::IMessage<CMD_SC_NotifyStatusProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_SC_NotifyStatusProto> _parser = new pb::MessageParser<CMD_SC_NotifyStatusProto>(() => new CMD_SC_NotifyStatusProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_SC_NotifyStatusProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DZNZ.DZNZReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_NotifyStatusProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_NotifyStatusProto(CMD_SC_NotifyStatusProto other) : this() {
      gameState_ = other.gameState_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_SC_NotifyStatusProto Clone() {
      return new CMD_SC_NotifyStatusProto(this);
    }

    /// <summary>Field number for the "game_state" field.</summary>
    public const int GameStateFieldNumber = 1;
    private int gameState_;
    /// <summary>
    ///当前状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private int time_;
    /// <summary>
    ///当前阶段时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_SC_NotifyStatusProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_SC_NotifyStatusProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameState != other.GameState) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameState != 0) hash ^= GameState.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameState != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameState);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameState != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameState);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameState);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_SC_NotifyStatusProto other) {
      if (other == null) {
        return;
      }
      if (other.GameState != 0) {
        GameState = other.GameState;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameState = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameState = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家下注
  /// </summary>
  public sealed partial class CMD_CS_Bet : pb::IMessage<CMD_CS_Bet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_CS_Bet> _parser = new pb::MessageParser<CMD_CS_Bet>(() => new CMD_CS_Bet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_CS_Bet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DZNZ.DZNZReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_CS_Bet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_CS_Bet(CMD_CS_Bet other) : this() {
      area_ = other.area_;
      betNum_ = other.betNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_CS_Bet Clone() {
      return new CMD_CS_Bet(this);
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 1;
    private int area_;
    /// <summary>
    ///下注区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "bet_num" field.</summary>
    public const int BetNumFieldNumber = 2;
    private int betNum_;
    /// <summary>
    ///下注下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BetNum {
      get { return betNum_; }
      set {
        betNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_CS_Bet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_CS_Bet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Area != other.Area) return false;
      if (BetNum != other.BetNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Area != 0) hash ^= Area.GetHashCode();
      if (BetNum != 0) hash ^= BetNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Area != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Area);
      }
      if (BetNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BetNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Area != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Area);
      }
      if (BetNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BetNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Area);
      }
      if (BetNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BetNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_CS_Bet other) {
      if (other == null) {
        return;
      }
      if (other.Area != 0) {
        Area = other.Area;
      }
      if (other.BetNum != 0) {
        BetNum = other.BetNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Area = input.ReadInt32();
            break;
          }
          case 16: {
            BetNum = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Area = input.ReadInt32();
            break;
          }
          case 16: {
            BetNum = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家下注
  /// </summary>
  public sealed partial class CMD_CS_BetAgain : pb::IMessage<CMD_CS_BetAgain>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_CS_BetAgain> _parser = new pb::MessageParser<CMD_CS_BetAgain>(() => new CMD_CS_BetAgain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_CS_BetAgain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DZNZ.DZNZReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_CS_BetAgain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_CS_BetAgain(CMD_CS_BetAgain other) : this() {
      area_ = other.area_;
      betNum_ = other.betNum_;
      betCount_ = other.betCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_CS_BetAgain Clone() {
      return new CMD_CS_BetAgain(this);
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 1;
    private int area_;
    /// <summary>
    ///下注区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "bet_num" field.</summary>
    public const int BetNumFieldNumber = 2;
    private int betNum_;
    /// <summary>
    ///下注下表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BetNum {
      get { return betNum_; }
      set {
        betNum_ = value;
      }
    }

    /// <summary>Field number for the "bet_count" field.</summary>
    public const int BetCountFieldNumber = 3;
    private int betCount_;
    /// <summary>
    ///下注次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BetCount {
      get { return betCount_; }
      set {
        betCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_CS_BetAgain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_CS_BetAgain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Area != other.Area) return false;
      if (BetNum != other.BetNum) return false;
      if (BetCount != other.BetCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Area != 0) hash ^= Area.GetHashCode();
      if (BetNum != 0) hash ^= BetNum.GetHashCode();
      if (BetCount != 0) hash ^= BetCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Area != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Area);
      }
      if (BetNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BetNum);
      }
      if (BetCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BetCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Area != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Area);
      }
      if (BetNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BetNum);
      }
      if (BetCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BetCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Area);
      }
      if (BetNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BetNum);
      }
      if (BetCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BetCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_CS_BetAgain other) {
      if (other == null) {
        return;
      }
      if (other.Area != 0) {
        Area = other.Area;
      }
      if (other.BetNum != 0) {
        BetNum = other.BetNum;
      }
      if (other.BetCount != 0) {
        BetCount = other.BetCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Area = input.ReadInt32();
            break;
          }
          case 16: {
            BetNum = input.ReadInt32();
            break;
          }
          case 24: {
            BetCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Area = input.ReadInt32();
            break;
          }
          case 16: {
            BetNum = input.ReadInt32();
            break;
          }
          case 24: {
            BetCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
