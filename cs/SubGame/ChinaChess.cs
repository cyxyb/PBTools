// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/ChinaChess.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ChinaChess {

  /// <summary>Holder for reflection information generated from Proto/SubGame/ChinaChess.proto</summary>
  public static partial class ChinaChessReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/ChinaChess.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChinaChessReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5Qcm90by9TdWJHYW1lL0NoaW5hQ2hlc3MucHJvdG8SCkNoaW5hQ2hlc3Mi",
            "UwoPU2NlbmVfQ2hlc3NJdGVtEg4KBmNiWFBvcxgBIAEoBRIOCgZjYllQb3MY",
            "AiABKAUSDwoHY2JDaGVzcxgDIAEoBRIPCgdjYkNvbG9yGAQgASgFIjkKC1Nj",
            "ZW5lX0NoZXNzEioKBWl0ZW1zGAEgAygLMhsuQ2hpbmFDaGVzcy5TY2VuZV9D",
            "aGVzc0l0ZW0ihAEKElNjZW5lX0dhbWVSdWxlSW5mbxIPCgdsQmV0TWluGAEg",
            "ASgFEg8KB2xCZXRNYXgYAiABKAUSDgoGc3pDaGlwGAMgAygFEg0KBWR3QmV0",
            "GAQgASgFEhYKDndSdWxlTGltaXRUaW1lGAUgASgFEhUKDXdSdWxlU3RlcFRp",
            "bWUYBiABKAUi0QEKDFNjZW5lX0RldGFpbBIUCgx3Q3VycmVudFVzZXIYASAB",
            "KAUSFwoPd0NoZXNzU3RlcENvdW50GAIgAygFEjQKDEdhbWVSdWxlSW5mbxgD",
            "IAEoCzIeLkNoaW5hQ2hlc3MuU2NlbmVfR2FtZVJ1bGVJbmZvEhQKDGNiUGVh",
            "Y2VDb3VudBgEIAMoBRIVCg1jYlJlZ3JldENvdW50GAUgAygFEi8KDkNoZXNz",
            "SXRlbUFycmF5GAYgASgLMhcuQ2hpbmFDaGVzcy5TY2VuZV9DaGVzcyJuCgxT",
            "Q19TY2VuZUluZm8SDgoGc3RhdHVzGAEgASgFEiYKBGZyZWUYAiABKAsyGC5D",
            "aGluYUNoZXNzLlNjZW5lX0RldGFpbBImCgRwbGF5GAMgASgLMhguQ2hpbmFD",
            "aGVzcy5TY2VuZV9EZXRhaWwihAEKFENNRF9DaGVzc19NT1ZFX0NIRVNTEhQK",
            "DGNiWFNvdXJjZVBvcxgBIAEoBRIUCgxjYllTb3VyY2VQb3MYAiABKAUSFAoM",
            "Y2JYVGFyZ2V0UG9zGAMgASgFEhQKDGNiWVRhcmdldFBvcxgEIAEoBRIUCgx3",
            "Q3VycmVudFVzZXIYBSABKAUiUAoMUmVncmV0UmVzdWx0EhMKC3dSZWdyZXRV",
            "c2VyGAEgASgFEhQKDHdDdXJyZW50VXNlchgCIAEoBRIVCg1jYlJlZ3JldENv",
            "dW50GAMgASgFIi8KCkNNRF9Db21tb24SDwoHb3BJbmRleBgBIAEoBRIQCgh3",
            "YWl0VGltZRgCIAEoBSIvCgdHYW1lRW5kEhAKCHdXaW5Vc2VyGAEgASgFEhIK",
            "CmxVc2VyU2NvcmUYAiADKAMirAEKEUNoZXNzX01hbnVhbF9JdGVtEhkKEWNi",
            "WFNvdXJjZUNoZXNzUG9zGAEgASgFEhkKEWNiWVNvdXJjZUNoZXNzUG9zGAIg",
            "ASgFEhkKEWNiWFRhcmdldENoZXNzUG9zGAMgASgFEhkKEWNiWVRhcmdldENo",
            "ZXNzUG9zGAQgASgFEhQKDGNiVW5pdGVDaGVzcxgFIAEoBRIVCg1jYlNvdXJj",
            "ZUNvbG9yGAYgASgFIjwKDENoZXNzX01hbnVhbBIsCgVpdGVtcxgBIAMoCzId",
            "LkNoaW5hQ2hlc3MuQ2hlc3NfTWFudWFsX0l0ZW0iMgoMTm90aWZ5X1RpbWVy",
            "EhAKCHdhaXRUaW1lGAEgASgFEhAKCHJvb21UeXBlGAIgASgFIi8KDUNNRF9N",
            "YWtlX1J1bGUSDwoHZXJyb3JJRBgBIAEoBRINCgVzY29yZRgCIAEoAyqtCAoN",
            "RU1zZ0lEU3ViR2FtZRIeChpDTURfQ2hlc3NfU1VCX0NfUkVHUkVUX1JFURAA",
            "EiEKHUNNRF9DaGVzc19TVUJfQ19SRUdSRVRfQU5TV0VSEAESHgoaQ01EX0No",
            "ZXNzX1NVQl9DX0dJVkVVUF9SRVEQAhIdChlDTURfQ2hlc3NfU1VCX0NfUEVB",
            "Q0VfUkVREAMSIAocQ01EX0NoZXNzX1NVQl9DX1BFQUNFX0FOU1dFUhAEEh4K",
            "GkNNRF9DaGVzc19TVUJfQ19NT1ZFX0NIRVNTEAUSHwobQ01EX0NoZXNzX1NV",
            "Ql9DX0tJQ0tfUExBWUVSEAYSHAoYQ01EX0NoZXNzX1NVQl9DX1NFVF9SVUxF",
            "EAcSHQoZQ01EX0NoZXNzX1NVQl9DX01BS0VfUlVMRRAIEiAKHENNRF9DaGVz",
            "c19TVUJfQ19OT1RJRllfUkVBRFkQCRIgChxDTURfQ2hlc3NfU1VCX0NfTk9U",
            "SUZZX1NUQVJUEAoSHAoYQ01EX0NoZXNzX1NVQl9DX0NPTlRJTlVFEAsSHgoa",
            "Q01EX0NoZXNzX1NVQl9TX0dBTUVfU1RBUlQQDBIeChpDTURfQ2hlc3NfU1VC",
            "X1NfTU9WRV9DSEVTUxANEh4KGkNNRF9DaGVzc19TVUJfU19SRUdSRVRfUkVR",
            "EA4SIAocQ01EX0NoZXNzX1NVQl9TX1JFR1JFVF9GQUlMRRAPEiEKHUNNRF9D",
            "aGVzc19TVUJfU19SRUdSRVRfUkVTVUxUEBASHQoZQ01EX0NoZXNzX1NVQl9T",
            "X1BFQUNFX1JFURAREiAKHENNRF9DaGVzc19TVUJfU19QRUFDRV9BTlNXRVIQ",
            "EhIcChhDTURfQ2hlc3NfU1VCX1NfR0FNRV9FTkQQExIgChxDTURfQ2hlc3Nf",
            "U1VCX1NfQ0hFU1NfTUFOVUFMEBQSIAocQ01EX0NoZXNzX1NVQl9TX1JFUV9T",
            "RVRfUlVMRRAVEiIKHkNNRF9DaGVzc19TVUJfU19SRVFfQUdSRUVfUlVMRRAW",
            "Eh8KG0NNRF9DaGVzc19TVUJfU19LSUNLX1BMQVlFUhAXEiAKHENNRF9DaGVz",
            "c19TVUJfU19OT1RJRllfVElNRVIQGBIlCiFDTURfQ2hlc3NfU1VCX1NfTk9U",
            "SUZZX1JPT01fT1dORVIQGRIjCh9DTURfQ2hlc3NfU1VCX1NfTk9USUZZX1NF",
            "VF9SVUxFEBoSHAoYQ01EX0NoZXNzX1NVQl9TX1NFVF9SVUxFEBsSHQoZQ01E",
            "X0NoZXNzX1NVQl9TX01BS0VfUlVMRRAcEiAKHENNRF9DaGVzc19TVUJfU19O",
            "T1RJRllfUkVBRFkQHRIgChxDTURfQ2hlc3NfU1VCX1NfTk9USUZZX1NUQVJU",
            "EB4SHAoYQ01EX0NoZXNzX1NVQl9TX0NPTlRJTlVFEB9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ChinaChess.EMsgIDSubGame), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.Scene_ChessItem), global::ChinaChess.Scene_ChessItem.Parser, new[]{ "CbXPos", "CbYPos", "CbChess", "CbColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.Scene_Chess), global::ChinaChess.Scene_Chess.Parser, new[]{ "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.Scene_GameRuleInfo), global::ChinaChess.Scene_GameRuleInfo.Parser, new[]{ "LBetMin", "LBetMax", "SzChip", "DwBet", "WRuleLimitTime", "WRuleStepTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.Scene_Detail), global::ChinaChess.Scene_Detail.Parser, new[]{ "WCurrentUser", "WChessStepCount", "GameRuleInfo", "CbPeaceCount", "CbRegretCount", "ChessItemArray" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.SC_SceneInfo), global::ChinaChess.SC_SceneInfo.Parser, new[]{ "Status", "Free", "Play" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.CMD_Chess_MOVE_CHESS), global::ChinaChess.CMD_Chess_MOVE_CHESS.Parser, new[]{ "CbXSourcePos", "CbYSourcePos", "CbXTargetPos", "CbYTargetPos", "WCurrentUser" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.RegretResult), global::ChinaChess.RegretResult.Parser, new[]{ "WRegretUser", "WCurrentUser", "CbRegretCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.CMD_Common), global::ChinaChess.CMD_Common.Parser, new[]{ "OpIndex", "WaitTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.GameEnd), global::ChinaChess.GameEnd.Parser, new[]{ "WWinUser", "LUserScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.Chess_Manual_Item), global::ChinaChess.Chess_Manual_Item.Parser, new[]{ "CbXSourceChessPos", "CbYSourceChessPos", "CbXTargetChessPos", "CbYTargetChessPos", "CbUniteChess", "CbSourceColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.Chess_Manual), global::ChinaChess.Chess_Manual.Parser, new[]{ "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.Notify_Timer), global::ChinaChess.Notify_Timer.Parser, new[]{ "WaitTime", "RoomType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.CMD_Make_Rule), global::ChinaChess.CMD_Make_Rule.Parser, new[]{ "ErrorID", "Score" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDSubGame {
    /// <summary>
    ///悔棋(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_REGRET_REQ")] CmdChessSubCRegretReq = 0,
    /// <summary>
    ///悔棋应答(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_REGRET_ANSWER")] CmdChessSubCRegretAnswer = 1,
    /// <summary>
    ///认输请求(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_GIVEUP_REQ")] CmdChessSubCGiveupReq = 2,
    /// <summary>
    ///和棋请求(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_PEACE_REQ")] CmdChessSubCPeaceReq = 3,
    /// <summary>
    ///和棋应答(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_PEACE_ANSWER")] CmdChessSubCPeaceAnswer = 4,
    /// <summary>
    ///移动棋子(CMD_Chess_MOVE_CHESS)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_MOVE_CHESS")] CmdChessSubCMoveChess = 5,
    /// <summary>
    ///房主踢人(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_KICK_PLAYER")] CmdChessSubCKickPlayer = 6,
    /// <summary>
    ///玩家设置规则(MsgCommonN64)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_SET_RULE")] CmdChessSubCSetRule = 7,
    /// <summary>
    ///玩家确定下注(MsgCommonN64)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_MAKE_RULE")] CmdChessSubCMakeRule = 8,
    /// <summary>
    ///玩家选择准备(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_NOTIFY_READY")] CmdChessSubCNotifyReady = 9,
    /// <summary>
    ///玩家选择开始(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_NOTIFY_START")] CmdChessSubCNotifyStart = 10,
    /// <summary>
    ///玩家选择继续(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_CONTINUE")] CmdChessSubCContinue = 11,
    /// <summary>
    ///游戏开始(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_GAME_START")] CmdChessSubSGameStart = 12,
    /// <summary>
    ///移动棋子(CMD_Chess_MOVE_CHESS)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_MOVE_CHESS")] CmdChessSubSMoveChess = 13,
    /// <summary>
    ///悔棋请求(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REGRET_REQ")] CmdChessSubSRegretReq = 14,
    /// <summary>
    ///悔棋失败(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REGRET_FAILE")] CmdChessSubSRegretFaile = 15,
    /// <summary>
    ///悔棋结果(RegretResult)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REGRET_RESULT")] CmdChessSubSRegretResult = 16,
    /// <summary>
    ///和棋请求(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_PEACE_REQ")] CmdChessSubSPeaceReq = 17,
    /// <summary>
    ///悔棋失败(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_PEACE_ANSWER")] CmdChessSubSPeaceAnswer = 18,
    /// <summary>
    ///游戏结束(GameEnd)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_GAME_END")] CmdChessSubSGameEnd = 19,
    /// <summary>
    ///棋谱信息(Chess_Manual)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_CHESS_MANUAL")] CmdChessSubSChessManual = 20,
    /// <summary>
    ///请求设置
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REQ_SET_RULE")] CmdChessSubSReqSetRule = 21,
    /// <summary>
    ///请求同意
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REQ_AGREE_RULE")] CmdChessSubSReqAgreeRule = 22,
    /// <summary>
    ///房主踢人(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_KICK_PLAYER")] CmdChessSubSKickPlayer = 23,
    /// <summary>
    ///等待时间通知(Notify_Timer)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_TIMER")] CmdChessSubSNotifyTimer = 24,
    /// <summary>
    ///通知谁是房主(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_ROOM_OWNER")] CmdChessSubSNotifyRoomOwner = 25,
    /// <summary>
    ///通知玩家设置规则(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_SET_RULE")] CmdChessSubSNotifySetRule = 26,
    /// <summary>
    ///玩家设置规则
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_SET_RULE")] CmdChessSubSSetRule = 27,
    /// <summary>
    ///玩家确定下注(CMD_Make_Rule)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_MAKE_RULE")] CmdChessSubSMakeRule = 28,
    /// <summary>
    ///通知玩家选择准备(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_READY")] CmdChessSubSNotifyReady = 29,
    /// <summary>
    ///通知玩家选择开始(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_START")] CmdChessSubSNotifyStart = 30,
    /// <summary>
    ///玩家选择继续(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_CONTINUE")] CmdChessSubSContinue = 31,
  }

  #endregion

  #region Messages
  public sealed partial class Scene_ChessItem : pb::IMessage<Scene_ChessItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Scene_ChessItem> _parser = new pb::MessageParser<Scene_ChessItem>(() => new Scene_ChessItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scene_ChessItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_ChessItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_ChessItem(Scene_ChessItem other) : this() {
      cbXPos_ = other.cbXPos_;
      cbYPos_ = other.cbYPos_;
      cbChess_ = other.cbChess_;
      cbColor_ = other.cbColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_ChessItem Clone() {
      return new Scene_ChessItem(this);
    }

    /// <summary>Field number for the "cbXPos" field.</summary>
    public const int CbXPosFieldNumber = 1;
    private int cbXPos_;
    /// <summary>
    ///255被吃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXPos {
      get { return cbXPos_; }
      set {
        cbXPos_ = value;
      }
    }

    /// <summary>Field number for the "cbYPos" field.</summary>
    public const int CbYPosFieldNumber = 2;
    private int cbYPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYPos {
      get { return cbYPos_; }
      set {
        cbYPos_ = value;
      }
    }

    /// <summary>Field number for the "cbChess" field.</summary>
    public const int CbChessFieldNumber = 3;
    private int cbChess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbChess {
      get { return cbChess_; }
      set {
        cbChess_ = value;
      }
    }

    /// <summary>Field number for the "cbColor" field.</summary>
    public const int CbColorFieldNumber = 4;
    private int cbColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbColor {
      get { return cbColor_; }
      set {
        cbColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scene_ChessItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scene_ChessItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CbXPos != other.CbXPos) return false;
      if (CbYPos != other.CbYPos) return false;
      if (CbChess != other.CbChess) return false;
      if (CbColor != other.CbColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CbXPos != 0) hash ^= CbXPos.GetHashCode();
      if (CbYPos != 0) hash ^= CbYPos.GetHashCode();
      if (CbChess != 0) hash ^= CbChess.GetHashCode();
      if (CbColor != 0) hash ^= CbColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CbXPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXPos);
      }
      if (CbYPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYPos);
      }
      if (CbChess != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbChess);
      }
      if (CbColor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CbXPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXPos);
      }
      if (CbYPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYPos);
      }
      if (CbChess != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbChess);
      }
      if (CbColor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CbXPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXPos);
      }
      if (CbYPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYPos);
      }
      if (CbChess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbChess);
      }
      if (CbColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scene_ChessItem other) {
      if (other == null) {
        return;
      }
      if (other.CbXPos != 0) {
        CbXPos = other.CbXPos;
      }
      if (other.CbYPos != 0) {
        CbYPos = other.CbYPos;
      }
      if (other.CbChess != 0) {
        CbChess = other.CbChess;
      }
      if (other.CbColor != 0) {
        CbColor = other.CbColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CbXPos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYPos = input.ReadInt32();
            break;
          }
          case 24: {
            CbChess = input.ReadInt32();
            break;
          }
          case 32: {
            CbColor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CbXPos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYPos = input.ReadInt32();
            break;
          }
          case 24: {
            CbChess = input.ReadInt32();
            break;
          }
          case 32: {
            CbColor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Scene_Chess : pb::IMessage<Scene_Chess>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Scene_Chess> _parser = new pb::MessageParser<Scene_Chess>(() => new Scene_Chess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scene_Chess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_Chess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_Chess(Scene_Chess other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_Chess Clone() {
      return new Scene_Chess(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ChinaChess.Scene_ChessItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ChinaChess.Scene_ChessItem.Parser);
    private readonly pbc::RepeatedField<global::ChinaChess.Scene_ChessItem> items_ = new pbc::RepeatedField<global::ChinaChess.Scene_ChessItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinaChess.Scene_ChessItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scene_Chess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scene_Chess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scene_Chess other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Scene_GameRuleInfo : pb::IMessage<Scene_GameRuleInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Scene_GameRuleInfo> _parser = new pb::MessageParser<Scene_GameRuleInfo>(() => new Scene_GameRuleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scene_GameRuleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_GameRuleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_GameRuleInfo(Scene_GameRuleInfo other) : this() {
      lBetMin_ = other.lBetMin_;
      lBetMax_ = other.lBetMax_;
      szChip_ = other.szChip_.Clone();
      dwBet_ = other.dwBet_;
      wRuleLimitTime_ = other.wRuleLimitTime_;
      wRuleStepTime_ = other.wRuleStepTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_GameRuleInfo Clone() {
      return new Scene_GameRuleInfo(this);
    }

    /// <summary>Field number for the "lBetMin" field.</summary>
    public const int LBetMinFieldNumber = 1;
    private int lBetMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LBetMin {
      get { return lBetMin_; }
      set {
        lBetMin_ = value;
      }
    }

    /// <summary>Field number for the "lBetMax" field.</summary>
    public const int LBetMaxFieldNumber = 2;
    private int lBetMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LBetMax {
      get { return lBetMax_; }
      set {
        lBetMax_ = value;
      }
    }

    /// <summary>Field number for the "szChip" field.</summary>
    public const int SzChipFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_szChip_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> szChip_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SzChip {
      get { return szChip_; }
    }

    /// <summary>Field number for the "dwBet" field.</summary>
    public const int DwBetFieldNumber = 4;
    private int dwBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DwBet {
      get { return dwBet_; }
      set {
        dwBet_ = value;
      }
    }

    /// <summary>Field number for the "wRuleLimitTime" field.</summary>
    public const int WRuleLimitTimeFieldNumber = 5;
    private int wRuleLimitTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WRuleLimitTime {
      get { return wRuleLimitTime_; }
      set {
        wRuleLimitTime_ = value;
      }
    }

    /// <summary>Field number for the "wRuleStepTime" field.</summary>
    public const int WRuleStepTimeFieldNumber = 6;
    private int wRuleStepTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WRuleStepTime {
      get { return wRuleStepTime_; }
      set {
        wRuleStepTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scene_GameRuleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scene_GameRuleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LBetMin != other.LBetMin) return false;
      if (LBetMax != other.LBetMax) return false;
      if(!szChip_.Equals(other.szChip_)) return false;
      if (DwBet != other.DwBet) return false;
      if (WRuleLimitTime != other.WRuleLimitTime) return false;
      if (WRuleStepTime != other.WRuleStepTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LBetMin != 0) hash ^= LBetMin.GetHashCode();
      if (LBetMax != 0) hash ^= LBetMax.GetHashCode();
      hash ^= szChip_.GetHashCode();
      if (DwBet != 0) hash ^= DwBet.GetHashCode();
      if (WRuleLimitTime != 0) hash ^= WRuleLimitTime.GetHashCode();
      if (WRuleStepTime != 0) hash ^= WRuleStepTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LBetMin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LBetMin);
      }
      if (LBetMax != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LBetMax);
      }
      szChip_.WriteTo(output, _repeated_szChip_codec);
      if (DwBet != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DwBet);
      }
      if (WRuleLimitTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WRuleLimitTime);
      }
      if (WRuleStepTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WRuleStepTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LBetMin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LBetMin);
      }
      if (LBetMax != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LBetMax);
      }
      szChip_.WriteTo(ref output, _repeated_szChip_codec);
      if (DwBet != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DwBet);
      }
      if (WRuleLimitTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WRuleLimitTime);
      }
      if (WRuleStepTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WRuleStepTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LBetMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LBetMin);
      }
      if (LBetMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LBetMax);
      }
      size += szChip_.CalculateSize(_repeated_szChip_codec);
      if (DwBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DwBet);
      }
      if (WRuleLimitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WRuleLimitTime);
      }
      if (WRuleStepTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WRuleStepTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scene_GameRuleInfo other) {
      if (other == null) {
        return;
      }
      if (other.LBetMin != 0) {
        LBetMin = other.LBetMin;
      }
      if (other.LBetMax != 0) {
        LBetMax = other.LBetMax;
      }
      szChip_.Add(other.szChip_);
      if (other.DwBet != 0) {
        DwBet = other.DwBet;
      }
      if (other.WRuleLimitTime != 0) {
        WRuleLimitTime = other.WRuleLimitTime;
      }
      if (other.WRuleStepTime != 0) {
        WRuleStepTime = other.WRuleStepTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LBetMin = input.ReadInt32();
            break;
          }
          case 16: {
            LBetMax = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            szChip_.AddEntriesFrom(input, _repeated_szChip_codec);
            break;
          }
          case 32: {
            DwBet = input.ReadInt32();
            break;
          }
          case 40: {
            WRuleLimitTime = input.ReadInt32();
            break;
          }
          case 48: {
            WRuleStepTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LBetMin = input.ReadInt32();
            break;
          }
          case 16: {
            LBetMax = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            szChip_.AddEntriesFrom(ref input, _repeated_szChip_codec);
            break;
          }
          case 32: {
            DwBet = input.ReadInt32();
            break;
          }
          case 40: {
            WRuleLimitTime = input.ReadInt32();
            break;
          }
          case 48: {
            WRuleStepTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Scene_Detail : pb::IMessage<Scene_Detail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Scene_Detail> _parser = new pb::MessageParser<Scene_Detail>(() => new Scene_Detail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scene_Detail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_Detail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_Detail(Scene_Detail other) : this() {
      wCurrentUser_ = other.wCurrentUser_;
      wChessStepCount_ = other.wChessStepCount_.Clone();
      gameRuleInfo_ = other.gameRuleInfo_ != null ? other.gameRuleInfo_.Clone() : null;
      cbPeaceCount_ = other.cbPeaceCount_.Clone();
      cbRegretCount_ = other.cbRegretCount_.Clone();
      chessItemArray_ = other.chessItemArray_ != null ? other.chessItemArray_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene_Detail Clone() {
      return new Scene_Detail(this);
    }

    /// <summary>Field number for the "wCurrentUser" field.</summary>
    public const int WCurrentUserFieldNumber = 1;
    private int wCurrentUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WCurrentUser {
      get { return wCurrentUser_; }
      set {
        wCurrentUser_ = value;
      }
    }

    /// <summary>Field number for the "wChessStepCount" field.</summary>
    public const int WChessStepCountFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_wChessStepCount_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> wChessStepCount_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WChessStepCount {
      get { return wChessStepCount_; }
    }

    /// <summary>Field number for the "GameRuleInfo" field.</summary>
    public const int GameRuleInfoFieldNumber = 3;
    private global::ChinaChess.Scene_GameRuleInfo gameRuleInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChinaChess.Scene_GameRuleInfo GameRuleInfo {
      get { return gameRuleInfo_; }
      set {
        gameRuleInfo_ = value;
      }
    }

    /// <summary>Field number for the "cbPeaceCount" field.</summary>
    public const int CbPeaceCountFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_cbPeaceCount_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> cbPeaceCount_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CbPeaceCount {
      get { return cbPeaceCount_; }
    }

    /// <summary>Field number for the "cbRegretCount" field.</summary>
    public const int CbRegretCountFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_cbRegretCount_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> cbRegretCount_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CbRegretCount {
      get { return cbRegretCount_; }
    }

    /// <summary>Field number for the "ChessItemArray" field.</summary>
    public const int ChessItemArrayFieldNumber = 6;
    private global::ChinaChess.Scene_Chess chessItemArray_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChinaChess.Scene_Chess ChessItemArray {
      get { return chessItemArray_; }
      set {
        chessItemArray_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scene_Detail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scene_Detail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WCurrentUser != other.WCurrentUser) return false;
      if(!wChessStepCount_.Equals(other.wChessStepCount_)) return false;
      if (!object.Equals(GameRuleInfo, other.GameRuleInfo)) return false;
      if(!cbPeaceCount_.Equals(other.cbPeaceCount_)) return false;
      if(!cbRegretCount_.Equals(other.cbRegretCount_)) return false;
      if (!object.Equals(ChessItemArray, other.ChessItemArray)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WCurrentUser != 0) hash ^= WCurrentUser.GetHashCode();
      hash ^= wChessStepCount_.GetHashCode();
      if (gameRuleInfo_ != null) hash ^= GameRuleInfo.GetHashCode();
      hash ^= cbPeaceCount_.GetHashCode();
      hash ^= cbRegretCount_.GetHashCode();
      if (chessItemArray_ != null) hash ^= ChessItemArray.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WCurrentUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WCurrentUser);
      }
      wChessStepCount_.WriteTo(output, _repeated_wChessStepCount_codec);
      if (gameRuleInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GameRuleInfo);
      }
      cbPeaceCount_.WriteTo(output, _repeated_cbPeaceCount_codec);
      cbRegretCount_.WriteTo(output, _repeated_cbRegretCount_codec);
      if (chessItemArray_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ChessItemArray);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WCurrentUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WCurrentUser);
      }
      wChessStepCount_.WriteTo(ref output, _repeated_wChessStepCount_codec);
      if (gameRuleInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GameRuleInfo);
      }
      cbPeaceCount_.WriteTo(ref output, _repeated_cbPeaceCount_codec);
      cbRegretCount_.WriteTo(ref output, _repeated_cbRegretCount_codec);
      if (chessItemArray_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ChessItemArray);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WCurrentUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WCurrentUser);
      }
      size += wChessStepCount_.CalculateSize(_repeated_wChessStepCount_codec);
      if (gameRuleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameRuleInfo);
      }
      size += cbPeaceCount_.CalculateSize(_repeated_cbPeaceCount_codec);
      size += cbRegretCount_.CalculateSize(_repeated_cbRegretCount_codec);
      if (chessItemArray_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChessItemArray);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scene_Detail other) {
      if (other == null) {
        return;
      }
      if (other.WCurrentUser != 0) {
        WCurrentUser = other.WCurrentUser;
      }
      wChessStepCount_.Add(other.wChessStepCount_);
      if (other.gameRuleInfo_ != null) {
        if (gameRuleInfo_ == null) {
          GameRuleInfo = new global::ChinaChess.Scene_GameRuleInfo();
        }
        GameRuleInfo.MergeFrom(other.GameRuleInfo);
      }
      cbPeaceCount_.Add(other.cbPeaceCount_);
      cbRegretCount_.Add(other.cbRegretCount_);
      if (other.chessItemArray_ != null) {
        if (chessItemArray_ == null) {
          ChessItemArray = new global::ChinaChess.Scene_Chess();
        }
        ChessItemArray.MergeFrom(other.ChessItemArray);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WCurrentUser = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            wChessStepCount_.AddEntriesFrom(input, _repeated_wChessStepCount_codec);
            break;
          }
          case 26: {
            if (gameRuleInfo_ == null) {
              GameRuleInfo = new global::ChinaChess.Scene_GameRuleInfo();
            }
            input.ReadMessage(GameRuleInfo);
            break;
          }
          case 34:
          case 32: {
            cbPeaceCount_.AddEntriesFrom(input, _repeated_cbPeaceCount_codec);
            break;
          }
          case 42:
          case 40: {
            cbRegretCount_.AddEntriesFrom(input, _repeated_cbRegretCount_codec);
            break;
          }
          case 50: {
            if (chessItemArray_ == null) {
              ChessItemArray = new global::ChinaChess.Scene_Chess();
            }
            input.ReadMessage(ChessItemArray);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WCurrentUser = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            wChessStepCount_.AddEntriesFrom(ref input, _repeated_wChessStepCount_codec);
            break;
          }
          case 26: {
            if (gameRuleInfo_ == null) {
              GameRuleInfo = new global::ChinaChess.Scene_GameRuleInfo();
            }
            input.ReadMessage(GameRuleInfo);
            break;
          }
          case 34:
          case 32: {
            cbPeaceCount_.AddEntriesFrom(ref input, _repeated_cbPeaceCount_codec);
            break;
          }
          case 42:
          case 40: {
            cbRegretCount_.AddEntriesFrom(ref input, _repeated_cbRegretCount_codec);
            break;
          }
          case 50: {
            if (chessItemArray_ == null) {
              ChessItemArray = new global::ChinaChess.Scene_Chess();
            }
            input.ReadMessage(ChessItemArray);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      status_ = other.status_;
      free_ = other.free_ != null ? other.free_.Clone() : null;
      play_ = other.play_ != null ? other.play_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "free" field.</summary>
    public const int FreeFieldNumber = 2;
    private global::ChinaChess.Scene_Detail free_;
    /// <summary>
    /// 当前下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChinaChess.Scene_Detail Free {
      get { return free_; }
      set {
        free_ = value;
      }
    }

    /// <summary>Field number for the "play" field.</summary>
    public const int PlayFieldNumber = 3;
    private global::ChinaChess.Scene_Detail play_;
    /// <summary>
    /// 当前下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChinaChess.Scene_Detail Play {
      get { return play_; }
      set {
        play_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Free, other.Free)) return false;
      if (!object.Equals(Play, other.Play)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (free_ != null) hash ^= Free.GetHashCode();
      if (play_ != null) hash ^= Play.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (free_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Free);
      }
      if (play_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Play);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (free_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Free);
      }
      if (play_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Play);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (free_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Free);
      }
      if (play_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Play);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.free_ != null) {
        if (free_ == null) {
          Free = new global::ChinaChess.Scene_Detail();
        }
        Free.MergeFrom(other.Free);
      }
      if (other.play_ != null) {
        if (play_ == null) {
          Play = new global::ChinaChess.Scene_Detail();
        }
        Play.MergeFrom(other.Play);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (free_ == null) {
              Free = new global::ChinaChess.Scene_Detail();
            }
            input.ReadMessage(Free);
            break;
          }
          case 26: {
            if (play_ == null) {
              Play = new global::ChinaChess.Scene_Detail();
            }
            input.ReadMessage(Play);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            if (free_ == null) {
              Free = new global::ChinaChess.Scene_Detail();
            }
            input.ReadMessage(Free);
            break;
          }
          case 26: {
            if (play_ == null) {
              Play = new global::ChinaChess.Scene_Detail();
            }
            input.ReadMessage(Play);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///移动棋子
  /// </summary>
  public sealed partial class CMD_Chess_MOVE_CHESS : pb::IMessage<CMD_Chess_MOVE_CHESS>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_Chess_MOVE_CHESS> _parser = new pb::MessageParser<CMD_Chess_MOVE_CHESS>(() => new CMD_Chess_MOVE_CHESS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_Chess_MOVE_CHESS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Chess_MOVE_CHESS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Chess_MOVE_CHESS(CMD_Chess_MOVE_CHESS other) : this() {
      cbXSourcePos_ = other.cbXSourcePos_;
      cbYSourcePos_ = other.cbYSourcePos_;
      cbXTargetPos_ = other.cbXTargetPos_;
      cbYTargetPos_ = other.cbYTargetPos_;
      wCurrentUser_ = other.wCurrentUser_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Chess_MOVE_CHESS Clone() {
      return new CMD_Chess_MOVE_CHESS(this);
    }

    /// <summary>Field number for the "cbXSourcePos" field.</summary>
    public const int CbXSourcePosFieldNumber = 1;
    private int cbXSourcePos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXSourcePos {
      get { return cbXSourcePos_; }
      set {
        cbXSourcePos_ = value;
      }
    }

    /// <summary>Field number for the "cbYSourcePos" field.</summary>
    public const int CbYSourcePosFieldNumber = 2;
    private int cbYSourcePos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYSourcePos {
      get { return cbYSourcePos_; }
      set {
        cbYSourcePos_ = value;
      }
    }

    /// <summary>Field number for the "cbXTargetPos" field.</summary>
    public const int CbXTargetPosFieldNumber = 3;
    private int cbXTargetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXTargetPos {
      get { return cbXTargetPos_; }
      set {
        cbXTargetPos_ = value;
      }
    }

    /// <summary>Field number for the "cbYTargetPos" field.</summary>
    public const int CbYTargetPosFieldNumber = 4;
    private int cbYTargetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYTargetPos {
      get { return cbYTargetPos_; }
      set {
        cbYTargetPos_ = value;
      }
    }

    /// <summary>Field number for the "wCurrentUser" field.</summary>
    public const int WCurrentUserFieldNumber = 5;
    private int wCurrentUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WCurrentUser {
      get { return wCurrentUser_; }
      set {
        wCurrentUser_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_Chess_MOVE_CHESS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_Chess_MOVE_CHESS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CbXSourcePos != other.CbXSourcePos) return false;
      if (CbYSourcePos != other.CbYSourcePos) return false;
      if (CbXTargetPos != other.CbXTargetPos) return false;
      if (CbYTargetPos != other.CbYTargetPos) return false;
      if (WCurrentUser != other.WCurrentUser) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CbXSourcePos != 0) hash ^= CbXSourcePos.GetHashCode();
      if (CbYSourcePos != 0) hash ^= CbYSourcePos.GetHashCode();
      if (CbXTargetPos != 0) hash ^= CbXTargetPos.GetHashCode();
      if (CbYTargetPos != 0) hash ^= CbYTargetPos.GetHashCode();
      if (WCurrentUser != 0) hash ^= WCurrentUser.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CbXSourcePos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetPos);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WCurrentUser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CbXSourcePos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetPos);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WCurrentUser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CbXSourcePos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYTargetPos);
      }
      if (WCurrentUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WCurrentUser);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_Chess_MOVE_CHESS other) {
      if (other == null) {
        return;
      }
      if (other.CbXSourcePos != 0) {
        CbXSourcePos = other.CbXSourcePos;
      }
      if (other.CbYSourcePos != 0) {
        CbYSourcePos = other.CbYSourcePos;
      }
      if (other.CbXTargetPos != 0) {
        CbXTargetPos = other.CbXTargetPos;
      }
      if (other.CbYTargetPos != 0) {
        CbYTargetPos = other.CbYTargetPos;
      }
      if (other.WCurrentUser != 0) {
        WCurrentUser = other.WCurrentUser;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CbXSourcePos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourcePos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetPos = input.ReadInt32();
            break;
          }
          case 40: {
            WCurrentUser = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CbXSourcePos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourcePos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetPos = input.ReadInt32();
            break;
          }
          case 40: {
            WCurrentUser = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///悔棋结果
  /// </summary>
  public sealed partial class RegretResult : pb::IMessage<RegretResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RegretResult> _parser = new pb::MessageParser<RegretResult>(() => new RegretResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegretResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegretResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegretResult(RegretResult other) : this() {
      wRegretUser_ = other.wRegretUser_;
      wCurrentUser_ = other.wCurrentUser_;
      cbRegretCount_ = other.cbRegretCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegretResult Clone() {
      return new RegretResult(this);
    }

    /// <summary>Field number for the "wRegretUser" field.</summary>
    public const int WRegretUserFieldNumber = 1;
    private int wRegretUser_;
    /// <summary>
    ///悔棋操作玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WRegretUser {
      get { return wRegretUser_; }
      set {
        wRegretUser_ = value;
      }
    }

    /// <summary>Field number for the "wCurrentUser" field.</summary>
    public const int WCurrentUserFieldNumber = 2;
    private int wCurrentUser_;
    /// <summary>
    ///当前玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WCurrentUser {
      get { return wCurrentUser_; }
      set {
        wCurrentUser_ = value;
      }
    }

    /// <summary>Field number for the "cbRegretCount" field.</summary>
    public const int CbRegretCountFieldNumber = 3;
    private int cbRegretCount_;
    /// <summary>
    ///悔棋次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbRegretCount {
      get { return cbRegretCount_; }
      set {
        cbRegretCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegretResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegretResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WRegretUser != other.WRegretUser) return false;
      if (WCurrentUser != other.WCurrentUser) return false;
      if (CbRegretCount != other.CbRegretCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WRegretUser != 0) hash ^= WRegretUser.GetHashCode();
      if (WCurrentUser != 0) hash ^= WCurrentUser.GetHashCode();
      if (CbRegretCount != 0) hash ^= CbRegretCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WRegretUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WRegretUser);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WCurrentUser);
      }
      if (CbRegretCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbRegretCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WRegretUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WRegretUser);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WCurrentUser);
      }
      if (CbRegretCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbRegretCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WRegretUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WRegretUser);
      }
      if (WCurrentUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WCurrentUser);
      }
      if (CbRegretCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbRegretCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegretResult other) {
      if (other == null) {
        return;
      }
      if (other.WRegretUser != 0) {
        WRegretUser = other.WRegretUser;
      }
      if (other.WCurrentUser != 0) {
        WCurrentUser = other.WCurrentUser;
      }
      if (other.CbRegretCount != 0) {
        CbRegretCount = other.CbRegretCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WRegretUser = input.ReadInt32();
            break;
          }
          case 16: {
            WCurrentUser = input.ReadInt32();
            break;
          }
          case 24: {
            CbRegretCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WRegretUser = input.ReadInt32();
            break;
          }
          case 16: {
            WCurrentUser = input.ReadInt32();
            break;
          }
          case 24: {
            CbRegretCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///通用请求和回复
  /// </summary>
  public sealed partial class CMD_Common : pb::IMessage<CMD_Common>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_Common> _parser = new pb::MessageParser<CMD_Common>(() => new CMD_Common());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_Common> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Common() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Common(CMD_Common other) : this() {
      opIndex_ = other.opIndex_;
      waitTime_ = other.waitTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Common Clone() {
      return new CMD_Common(this);
    }

    /// <summary>Field number for the "opIndex" field.</summary>
    public const int OpIndexFieldNumber = 1;
    private int opIndex_;
    /// <summary>
    ///操作玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpIndex {
      get { return opIndex_; }
      set {
        opIndex_ = value;
      }
    }

    /// <summary>Field number for the "waitTime" field.</summary>
    public const int WaitTimeFieldNumber = 2;
    private int waitTime_;
    /// <summary>
    ///操作时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitTime {
      get { return waitTime_; }
      set {
        waitTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_Common);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_Common other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpIndex != other.OpIndex) return false;
      if (WaitTime != other.WaitTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpIndex != 0) hash ^= OpIndex.GetHashCode();
      if (WaitTime != 0) hash ^= WaitTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OpIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OpIndex);
      }
      if (WaitTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WaitTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OpIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OpIndex);
      }
      if (WaitTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WaitTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpIndex);
      }
      if (WaitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_Common other) {
      if (other == null) {
        return;
      }
      if (other.OpIndex != 0) {
        OpIndex = other.OpIndex;
      }
      if (other.WaitTime != 0) {
        WaitTime = other.WaitTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OpIndex = input.ReadInt32();
            break;
          }
          case 16: {
            WaitTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OpIndex = input.ReadInt32();
            break;
          }
          case 16: {
            WaitTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏结束
  /// </summary>
  public sealed partial class GameEnd : pb::IMessage<GameEnd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameEnd> _parser = new pb::MessageParser<GameEnd>(() => new GameEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEnd(GameEnd other) : this() {
      wWinUser_ = other.wWinUser_;
      lUserScore_ = other.lUserScore_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEnd Clone() {
      return new GameEnd(this);
    }

    /// <summary>Field number for the "wWinUser" field.</summary>
    public const int WWinUserFieldNumber = 1;
    private int wWinUser_;
    /// <summary>
    ///赢家，和局为65535
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WWinUser {
      get { return wWinUser_; }
      set {
        wWinUser_ = value;
      }
    }

    /// <summary>Field number for the "lUserScore" field.</summary>
    public const int LUserScoreFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_lUserScore_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> lUserScore_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///玩家金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> LUserScore {
      get { return lUserScore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WWinUser != other.WWinUser) return false;
      if(!lUserScore_.Equals(other.lUserScore_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WWinUser != 0) hash ^= WWinUser.GetHashCode();
      hash ^= lUserScore_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WWinUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WWinUser);
      }
      lUserScore_.WriteTo(output, _repeated_lUserScore_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WWinUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WWinUser);
      }
      lUserScore_.WriteTo(ref output, _repeated_lUserScore_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WWinUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WWinUser);
      }
      size += lUserScore_.CalculateSize(_repeated_lUserScore_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEnd other) {
      if (other == null) {
        return;
      }
      if (other.WWinUser != 0) {
        WWinUser = other.WWinUser;
      }
      lUserScore_.Add(other.lUserScore_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WWinUser = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            lUserScore_.AddEntriesFrom(input, _repeated_lUserScore_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WWinUser = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            lUserScore_.AddEntriesFrom(ref input, _repeated_lUserScore_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Chess_Manual_Item : pb::IMessage<Chess_Manual_Item>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Chess_Manual_Item> _parser = new pb::MessageParser<Chess_Manual_Item>(() => new Chess_Manual_Item());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chess_Manual_Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual_Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual_Item(Chess_Manual_Item other) : this() {
      cbXSourceChessPos_ = other.cbXSourceChessPos_;
      cbYSourceChessPos_ = other.cbYSourceChessPos_;
      cbXTargetChessPos_ = other.cbXTargetChessPos_;
      cbYTargetChessPos_ = other.cbYTargetChessPos_;
      cbUniteChess_ = other.cbUniteChess_;
      cbSourceColor_ = other.cbSourceColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual_Item Clone() {
      return new Chess_Manual_Item(this);
    }

    /// <summary>Field number for the "cbXSourceChessPos" field.</summary>
    public const int CbXSourceChessPosFieldNumber = 1;
    private int cbXSourceChessPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXSourceChessPos {
      get { return cbXSourceChessPos_; }
      set {
        cbXSourceChessPos_ = value;
      }
    }

    /// <summary>Field number for the "cbYSourceChessPos" field.</summary>
    public const int CbYSourceChessPosFieldNumber = 2;
    private int cbYSourceChessPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYSourceChessPos {
      get { return cbYSourceChessPos_; }
      set {
        cbYSourceChessPos_ = value;
      }
    }

    /// <summary>Field number for the "cbXTargetChessPos" field.</summary>
    public const int CbXTargetChessPosFieldNumber = 3;
    private int cbXTargetChessPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXTargetChessPos {
      get { return cbXTargetChessPos_; }
      set {
        cbXTargetChessPos_ = value;
      }
    }

    /// <summary>Field number for the "cbYTargetChessPos" field.</summary>
    public const int CbYTargetChessPosFieldNumber = 4;
    private int cbYTargetChessPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYTargetChessPos {
      get { return cbYTargetChessPos_; }
      set {
        cbYTargetChessPos_ = value;
      }
    }

    /// <summary>Field number for the "cbUniteChess" field.</summary>
    public const int CbUniteChessFieldNumber = 5;
    private int cbUniteChess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbUniteChess {
      get { return cbUniteChess_; }
      set {
        cbUniteChess_ = value;
      }
    }

    /// <summary>Field number for the "cbSourceColor" field.</summary>
    public const int CbSourceColorFieldNumber = 6;
    private int cbSourceColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbSourceColor {
      get { return cbSourceColor_; }
      set {
        cbSourceColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chess_Manual_Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chess_Manual_Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CbXSourceChessPos != other.CbXSourceChessPos) return false;
      if (CbYSourceChessPos != other.CbYSourceChessPos) return false;
      if (CbXTargetChessPos != other.CbXTargetChessPos) return false;
      if (CbYTargetChessPos != other.CbYTargetChessPos) return false;
      if (CbUniteChess != other.CbUniteChess) return false;
      if (CbSourceColor != other.CbSourceColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CbXSourceChessPos != 0) hash ^= CbXSourceChessPos.GetHashCode();
      if (CbYSourceChessPos != 0) hash ^= CbYSourceChessPos.GetHashCode();
      if (CbXTargetChessPos != 0) hash ^= CbXTargetChessPos.GetHashCode();
      if (CbYTargetChessPos != 0) hash ^= CbYTargetChessPos.GetHashCode();
      if (CbUniteChess != 0) hash ^= CbUniteChess.GetHashCode();
      if (CbSourceColor != 0) hash ^= CbSourceColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CbXSourceChessPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourceChessPos);
      }
      if (CbYSourceChessPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourceChessPos);
      }
      if (CbXTargetChessPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetChessPos);
      }
      if (CbYTargetChessPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetChessPos);
      }
      if (CbUniteChess != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CbUniteChess);
      }
      if (CbSourceColor != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CbSourceColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CbXSourceChessPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourceChessPos);
      }
      if (CbYSourceChessPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourceChessPos);
      }
      if (CbXTargetChessPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetChessPos);
      }
      if (CbYTargetChessPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetChessPos);
      }
      if (CbUniteChess != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CbUniteChess);
      }
      if (CbSourceColor != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CbSourceColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CbXSourceChessPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXSourceChessPos);
      }
      if (CbYSourceChessPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYSourceChessPos);
      }
      if (CbXTargetChessPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXTargetChessPos);
      }
      if (CbYTargetChessPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYTargetChessPos);
      }
      if (CbUniteChess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbUniteChess);
      }
      if (CbSourceColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbSourceColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chess_Manual_Item other) {
      if (other == null) {
        return;
      }
      if (other.CbXSourceChessPos != 0) {
        CbXSourceChessPos = other.CbXSourceChessPos;
      }
      if (other.CbYSourceChessPos != 0) {
        CbYSourceChessPos = other.CbYSourceChessPos;
      }
      if (other.CbXTargetChessPos != 0) {
        CbXTargetChessPos = other.CbXTargetChessPos;
      }
      if (other.CbYTargetChessPos != 0) {
        CbYTargetChessPos = other.CbYTargetChessPos;
      }
      if (other.CbUniteChess != 0) {
        CbUniteChess = other.CbUniteChess;
      }
      if (other.CbSourceColor != 0) {
        CbSourceColor = other.CbSourceColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CbXSourceChessPos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourceChessPos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetChessPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetChessPos = input.ReadInt32();
            break;
          }
          case 40: {
            CbUniteChess = input.ReadInt32();
            break;
          }
          case 48: {
            CbSourceColor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CbXSourceChessPos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourceChessPos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetChessPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetChessPos = input.ReadInt32();
            break;
          }
          case 40: {
            CbUniteChess = input.ReadInt32();
            break;
          }
          case 48: {
            CbSourceColor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///棋谱信息，操作历史记录
  /// </summary>
  public sealed partial class Chess_Manual : pb::IMessage<Chess_Manual>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Chess_Manual> _parser = new pb::MessageParser<Chess_Manual>(() => new Chess_Manual());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chess_Manual> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual(Chess_Manual other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual Clone() {
      return new Chess_Manual(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ChinaChess.Chess_Manual_Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ChinaChess.Chess_Manual_Item.Parser);
    private readonly pbc::RepeatedField<global::ChinaChess.Chess_Manual_Item> items_ = new pbc::RepeatedField<global::ChinaChess.Chess_Manual_Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinaChess.Chess_Manual_Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chess_Manual);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chess_Manual other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chess_Manual other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Notify_Timer : pb::IMessage<Notify_Timer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Notify_Timer> _parser = new pb::MessageParser<Notify_Timer>(() => new Notify_Timer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_Timer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Timer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Timer(Notify_Timer other) : this() {
      waitTime_ = other.waitTime_;
      roomType_ = other.roomType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Timer Clone() {
      return new Notify_Timer(this);
    }

    /// <summary>Field number for the "waitTime" field.</summary>
    public const int WaitTimeFieldNumber = 1;
    private int waitTime_;
    /// <summary>
    ///等待时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitTime {
      get { return waitTime_; }
      set {
        waitTime_ = value;
      }
    }

    /// <summary>Field number for the "roomType" field.</summary>
    public const int RoomTypeFieldNumber = 2;
    private int roomType_;
    /// <summary>
    ///阶段,2:等待玩家加入,4:设置金额中,6:准备中,8:准备开始,9:时间到,10:结算中,11:求和中,12:悔棋中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_Timer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_Timer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WaitTime != other.WaitTime) return false;
      if (RoomType != other.RoomType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WaitTime != 0) hash ^= WaitTime.GetHashCode();
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WaitTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaitTime);
      }
      if (RoomType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WaitTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaitTime);
      }
      if (RoomType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTime);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_Timer other) {
      if (other == null) {
        return;
      }
      if (other.WaitTime != 0) {
        WaitTime = other.WaitTime;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WaitTime = input.ReadInt32();
            break;
          }
          case 16: {
            RoomType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WaitTime = input.ReadInt32();
            break;
          }
          case 16: {
            RoomType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMD_Make_Rule : pb::IMessage<CMD_Make_Rule>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_Make_Rule> _parser = new pb::MessageParser<CMD_Make_Rule>(() => new CMD_Make_Rule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_Make_Rule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Make_Rule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Make_Rule(CMD_Make_Rule other) : this() {
      errorID_ = other.errorID_;
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Make_Rule Clone() {
      return new CMD_Make_Rule(this);
    }

    /// <summary>Field number for the "errorID" field.</summary>
    public const int ErrorIDFieldNumber = 1;
    private int errorID_;
    /// <summary>
    ///确认状态码，0成功，1设置金额小于最小下注，2设置金额大于最大下注，3红方金币不足，4黑方金币不足
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorID {
      get { return errorID_; }
      set {
        errorID_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private long score_;
    /// <summary>
    ///下注金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_Make_Rule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_Make_Rule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorID != other.ErrorID) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorID != 0) hash ^= ErrorID.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ErrorID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorID);
      }
      if (Score != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ErrorID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorID);
      }
      if (Score != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorID);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_Make_Rule other) {
      if (other == null) {
        return;
      }
      if (other.ErrorID != 0) {
        ErrorID = other.ErrorID;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorID = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ErrorID = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
