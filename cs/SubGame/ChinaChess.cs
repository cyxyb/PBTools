// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/ChinaChess.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ChinaChess {

  /// <summary>Holder for reflection information generated from Proto/SubGame/ChinaChess.proto</summary>
  public static partial class ChinaChessReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/ChinaChess.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChinaChessReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5Qcm90by9TdWJHYW1lL0NoaW5hQ2hlc3MucHJvdG8SCkNoaW5hQ2hlc3Mi",
            "KgoJQ29tbW9uUnNwEgwKBGNvZGUYASABKAUSDwoHY29udGVudBgCIAEoCSIr",
            "CghMb2dpblJlcRIQCghVc2VyREJJRBgBIAEoBRINCgVUb2tlbhgCIAEoCSJd",
            "CghMb2dpblJzcBIQCghVc2VyREJJRBgBIAEoBRIPCgd0YWJsZUlEGAIgASgF",
            "Eg8KB2NoYWlySUQYAyABKAUSDAoEY29kZRgEIAEoBRIPCgdjb250ZW50GAUg",
            "ASgJIh0KCUxvZ291dFJlcRIQCghVc2VyREJJRBgBIAEoBSIqCglMb2dvdXRS",
            "c3ASDAoEY29kZRgBIAEoBRIPCgdjb250ZW50GAIgASgJIksKDkN1c3RvbUxv",
            "Z2luUmVxEhAKCFVzZXJEQklEGAEgASgFEgoKAnNuGAIgASgFEgwKBHJ1bGUY",
            "AyABKAUSDQoFVG9rZW4YBCABKAkikQEKDkN1c3RvbUxvZ2luUnNwEhAKCFVz",
            "ZXJEQklEGAEgASgFEg8KB3RhYmxlSUQYAiABKAUSDwoHY2hhaXJJRBgDIAEo",
            "BRIMCgRjb2RlGAQgASgFEg8KB2NvbnRlbnQYBSABKAkSCgoCc24YBiABKAUS",
            "EAoIcGFzc3dvcmQYByABKAkSDgoGUm9vbUlkGAggASgFIlwKDFBsYXllclJl",
            "c3VsdBILCgNwaWQYASABKAUSDwoHY2hhaXJJZBgCIAEoBRINCgVzY29yZRgD",
            "IAEoAxIQCgh3aW5TdGF0ZRgEIAMoBRINCgVtb25leRgFIAEoAyJJCgpSZXN1",
            "bHRQdXNoEikKB3BsYXllcnMYASADKAsyGC5DaGluYUNoZXNzLlBsYXllclJl",
            "c3VsdBIQCgh3aW5uZXJJRBgCIAEoBSK7AQoKQ29uZmlnUHVzaBIUCgxpc09w",
            "ZW5UYWtlSW4YASABKAgSDgoGdGFpRmVlGAIgASgFEhEKCVNldHRsZVBheRgD",
            "IAEoCBIXCg9TZXR0bGVQYXlGYWN0b3IYBCABKAUSEQoJUm91bmRUaW1lGAUg",
            "ASgFEhAKCFN0ZXBUaW1lGAYgASgFEhEKCVN0ZXBUaW1lMhgHIAEoBRIQCghE",
            "aW5nVGltZRgIIAEoBRIRCglCYXNlU2NvcmUYCSABKAMiGAoIQ2hlc3NNYXAS",
            "DAoETWFwWRgBIAMoBSKgAgoIU2NlbmVSc3ASDQoFc3RhZ2UYASABKAUSDwoH",
            "dGltZW91dBgCIAEoBRIVCg1hY3RpdmVDaGFpcklkGAMgASgFEiEKA21hcBgE",
            "IAMoCzIULkNoaW5hQ2hlc3MuQ2hlc3NNYXASKAoHY291bnRlchgFIAEoCzIX",
            "LkNoaW5hQ2hlc3MuQ291bnRlclB1c2gSJAoFdGltZXIYBiADKAsyFS5DaGlu",
            "YUNoZXNzLlRpbWVyUHVzaBIRCglpc1JlZFNpZGUYByABKAgSEAoIc3RhcnRf",
            "eDAYCCABKAUSEAoIc3RhcnRfeTAYCSABKAUSDgoGZW5kX3gwGAogASgFEg4K",
            "BmVuZF95MBgLIAEoBRITCgtpc0dhbWVCZWdpbhgMIAEoCCI4CghFbW9qaVJl",
            "cRIOCgZzZW5kZXIYASABKAUSDgoGc2VuZGVlGAIgASgFEgwKBGllSUQYAyAB",
            "KAUiRQoIRW1vamlSc3ASDgoGc2VuZGVyGAEgASgFEg4KBnNlbmRlZRgCIAEo",
            "BRIMCgRpZUlEGAMgASgFEgsKA3JldBgEIAEoBSIoCgpFeHRlbmRDb2luEgoK",
            "AmlkGAEgASgFEg4KBmFtb3VudBgCIAEoAyKLAgoMVXNlckluZm9QdXNoEhAK",
            "CHRhYmxlX2lkGAEgASgFEg0KBWluZGV4GAIgASgFEhEKCXVzZXJfZGJpZBgD",
            "IAEoBRIkCgVTY29yZRgEIAEoCzIVLkNoaW5hQ2hlc3MuR2FtZVNjb3JlEhAK",
            "CGNoYWlyX2lkGAUgASgFEg8KB2ZhY2VfaWQYBiABKAUSDgoGc3RhdHVzGAcg",
            "ASgFEhUKDXZpcF9sZWZ0X2RheXMYCCABKAUSFQoNdXNlcl9uYW1lX2xlbhgJ",
            "IAEoBRIRCgl1c2VyX25hbWUYCiABKAkSDwoHcGFydG5lchgLIAEoCRIKCgJp",
            "cBgMIAEoCRIQCghsb2NhdGlvbhgNIAEoCSKCAQoJR2FtZVNjb3JlEg0KBXNj",
            "b3JlGAEgASgDEg0KBW1vbmV5GAIgASgDEgsKA3RheBgDIAEoBRIOCgZyZXN1",
            "bHQYBCADKAUSDgoGdGlja2V0GAUgASgFEioKCmV4dGVuZENvaW4YBiADKAsy",
            "Fi5DaGluYUNoZXNzLkV4dGVuZENvaW4iIgoNUmVhZHlBZ2FpblJlcRIRCgl1",
            "c2VyX2RiaWQYASABKAUiLwoNUmVhZHlBZ2FpblJzcBIOCgZzdGF0dXMYASAB",
            "KAUSDgoGZXJyTXNnGAIgASgJIiYKCUVtb2ppSW5mbxIKCgJpZBgBIAEoBRIN",
            "CgVwcmljZRgCIAEoBSI7Cg9FbW9qaUNvbmZpZ1B1c2gSKAoJZW1vamlMaXN0",
            "GAEgAygLMhUuQ2hpbmFDaGVzcy5FbW9qaUluZm8iQgoNQ2hhdE9yRmFjZVJl",
            "cRIRCgl1c2VyX2RiaWQYASABKAUSDgoGb3BUeXBlGAIgASgFEg4KBmZhY2VJ",
            "RBgDIAEoBSJCCg1DaGF0T3JGYWNlUnNwEhEKCXVzZXJfZGJpZBgBIAEoBRIO",
            "CgZvcFR5cGUYAiABKAUSDgoGZmFjZUlEGAMgASgFIhoKCEFkbWl0UmVxEg4K",
            "BnVzZXJJRBgBIAEoBSI+CghBZG1pdFJzcBIMCgRjb2RlGAEgASgFEg8KB2Nv",
            "bnRlbnQYAiABKAkSEwoLYXBwbHlVc2VySUQYAyABKAUiTQoJUmVncmV0UnNw",
            "EhMKC3dSZWdyZXRVc2VyGAEgASgFEhQKDHdDdXJyZW50VXNlchgCIAEoBRIV",
            "Cg1jYlJlZ3JldENvdW50GAMgASgFIhkKB0RyYXdSZXESDgoGdXNlcklEGAEg",
            "ASgFIlEKB0RyYXdSc3ASDAoEY29kZRgBIAEoBRIPCgdjb250ZW50GAIgASgJ",
            "EhMKC2FwcGx5VXNlcklEGAMgASgFEhIKCmhhbmRsZVRpbWUYBCABKAUiNwoI",
            "QWdyZWVSZXESDgoGdXNlcklEGAEgASgFEgwKBGtpbmQYAiABKAUSDQoFYWdy",
            "ZWUYAyABKAgiuwIKCEFncmVlUnNwEgwKBGNvZGUYASABKAUSDwoHY29udGVu",
            "dBgCIAEoCRITCgthcHBseVVzZXJJRBgDIAEoBRIUCgxoYW5kbGVVc2VySUQY",
            "BCABKAUSDAoEa2luZBgFIAEoBRINCgVhZ3JlZRgGIAEoCBIQCghsZWZ0VGlt",
            "ZRgHIAEoBRIQCghzdGFydF94MBgIIAEoBRIQCghzdGFydF95MBgJIAEoBRIO",
            "CgZlbmRfeDAYCiABKAUSDgoGZW5kX3kwGAsgASgFEg8KB3N0YXJ0X3gYDCAB",
            "KAUSDwoHc3RhcnRfeRgNIAEoBRINCgVlbmRfeBgOIAEoBRINCgVlbmRfeRgP",
            "IAEoBRIMCgRraWxsGBAgASgFEiQKBXRpbWVyGBEgAygLMhUuQ2hpbmFDaGVz",
            "cy5UaW1lclB1c2gicwoLQ291bnRlclB1c2gSEAoIY2FuQWRtaXQYASABKAgS",
            "EQoJY2FuUmVncmV0GAIgASgIEhcKD3JlZ3JldExlZnRDb3VudBgDIAEoBRIP",
            "CgdjYW5EcmF3GAQgASgIEhUKDWRyYXdMZWZ0Q291bnQYBSABKAUiYQoHTW92",
            "ZVJlcRIUCgxjYlhTb3VyY2VQb3MYASABKAUSFAoMY2JZU291cmNlUG9zGAIg",
            "ASgFEhQKDGNiWFRhcmdldFBvcxgDIAEoBRIUCgxjYllUYXJnZXRQb3MYBCAB",
            "KAUidwoHTW92ZVJzcBIUCgxjYlhTb3VyY2VQb3MYASABKAUSFAoMY2JZU291",
            "cmNlUG9zGAIgASgFEhQKDGNiWFRhcmdldFBvcxgDIAEoBRIUCgxjYllUYXJn",
            "ZXRQb3MYBCABKAUSFAoMd0N1cnJlbnRVc2VyGAUgASgFIlkKCVRpbWVyUHVz",
            "aBINCgVjaGFpchgBIAEoBRIVCg1yb3VuZExlZnRUaW1lGAIgASgFEhQKDHN0",
            "ZXBMZWZ0VGltZRgDIAEoBRIQCghzdGVwVGltZRgEIAEoBSqtCAoNRU1zZ0lE",
            "U3ViR2FtZRIeChpDTURfQ2hlc3NfU1VCX0NfUkVHUkVUX1JFURAAEiEKHUNN",
            "RF9DaGVzc19TVUJfQ19SRUdSRVRfQU5TV0VSEAESHgoaQ01EX0NoZXNzX1NV",
            "Ql9DX0dJVkVVUF9SRVEQAhIdChlDTURfQ2hlc3NfU1VCX0NfUEVBQ0VfUkVR",
            "EAMSIAocQ01EX0NoZXNzX1NVQl9DX1BFQUNFX0FOU1dFUhAEEh4KGkNNRF9D",
            "aGVzc19TVUJfQ19NT1ZFX0NIRVNTEAUSHwobQ01EX0NoZXNzX1NVQl9DX0tJ",
            "Q0tfUExBWUVSEAYSHAoYQ01EX0NoZXNzX1NVQl9DX1NFVF9SVUxFEAcSHQoZ",
            "Q01EX0NoZXNzX1NVQl9DX01BS0VfUlVMRRAIEiAKHENNRF9DaGVzc19TVUJf",
            "Q19OT1RJRllfUkVBRFkQCRIgChxDTURfQ2hlc3NfU1VCX0NfTk9USUZZX1NU",
            "QVJUEAoSHAoYQ01EX0NoZXNzX1NVQl9DX0NPTlRJTlVFEAsSHgoaQ01EX0No",
            "ZXNzX1NVQl9TX0dBTUVfU1RBUlQQDBIeChpDTURfQ2hlc3NfU1VCX1NfTU9W",
            "RV9DSEVTUxANEh4KGkNNRF9DaGVzc19TVUJfU19SRUdSRVRfUkVREA4SIAoc",
            "Q01EX0NoZXNzX1NVQl9TX1JFR1JFVF9GQUlMRRAPEiEKHUNNRF9DaGVzc19T",
            "VUJfU19SRUdSRVRfUkVTVUxUEBASHQoZQ01EX0NoZXNzX1NVQl9TX1BFQUNF",
            "X1JFURAREiAKHENNRF9DaGVzc19TVUJfU19QRUFDRV9BTlNXRVIQEhIcChhD",
            "TURfQ2hlc3NfU1VCX1NfR0FNRV9FTkQQExIgChxDTURfQ2hlc3NfU1VCX1Nf",
            "Q0hFU1NfTUFOVUFMEBQSIAocQ01EX0NoZXNzX1NVQl9TX1JFUV9TRVRfUlVM",
            "RRAVEiIKHkNNRF9DaGVzc19TVUJfU19SRVFfQUdSRUVfUlVMRRAWEh8KG0NN",
            "RF9DaGVzc19TVUJfU19LSUNLX1BMQVlFUhAXEiAKHENNRF9DaGVzc19TVUJf",
            "U19OT1RJRllfVElNRVIQGBIlCiFDTURfQ2hlc3NfU1VCX1NfTk9USUZZX1JP",
            "T01fT1dORVIQGRIjCh9DTURfQ2hlc3NfU1VCX1NfTk9USUZZX1NFVF9SVUxF",
            "EBoSHAoYQ01EX0NoZXNzX1NVQl9TX1NFVF9SVUxFEBsSHQoZQ01EX0NoZXNz",
            "X1NVQl9TX01BS0VfUlVMRRAcEiAKHENNRF9DaGVzc19TVUJfU19OT1RJRllf",
            "UkVBRFkQHRIgChxDTURfQ2hlc3NfU1VCX1NfTk9USUZZX1NUQVJUEB4SHAoY",
            "Q01EX0NoZXNzX1NVQl9TX0NPTlRJTlVFEB9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ChinaChess.EMsgIDSubGame), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.CommonRsp), global::ChinaChess.CommonRsp.Parser, new[]{ "Code", "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.LoginReq), global::ChinaChess.LoginReq.Parser, new[]{ "UserDBID", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.LoginRsp), global::ChinaChess.LoginRsp.Parser, new[]{ "UserDBID", "TableID", "ChairID", "Code", "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.LogoutReq), global::ChinaChess.LogoutReq.Parser, new[]{ "UserDBID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.LogoutRsp), global::ChinaChess.LogoutRsp.Parser, new[]{ "Code", "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.CustomLoginReq), global::ChinaChess.CustomLoginReq.Parser, new[]{ "UserDBID", "Sn", "Rule", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.CustomLoginRsp), global::ChinaChess.CustomLoginRsp.Parser, new[]{ "UserDBID", "TableID", "ChairID", "Code", "Content", "Sn", "Password", "RoomId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.PlayerResult), global::ChinaChess.PlayerResult.Parser, new[]{ "Pid", "ChairId", "Score", "WinState", "Money" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.ResultPush), global::ChinaChess.ResultPush.Parser, new[]{ "Players", "WinnerID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.ConfigPush), global::ChinaChess.ConfigPush.Parser, new[]{ "IsOpenTakeIn", "TaiFee", "SettlePay", "SettlePayFactor", "RoundTime", "StepTime", "StepTime2", "DingTime", "BaseScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.ChessMap), global::ChinaChess.ChessMap.Parser, new[]{ "MapY" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.SceneRsp), global::ChinaChess.SceneRsp.Parser, new[]{ "Stage", "Timeout", "ActiveChairId", "Map", "Counter", "Timer", "IsRedSide", "StartX0", "StartY0", "EndX0", "EndY0", "IsGameBegin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.EmojiReq), global::ChinaChess.EmojiReq.Parser, new[]{ "Sender", "Sendee", "IeID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.EmojiRsp), global::ChinaChess.EmojiRsp.Parser, new[]{ "Sender", "Sendee", "IeID", "Ret" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.ExtendCoin), global::ChinaChess.ExtendCoin.Parser, new[]{ "Id", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.UserInfoPush), global::ChinaChess.UserInfoPush.Parser, new[]{ "TableId", "Index", "UserDbid", "Score", "ChairId", "FaceId", "Status", "VipLeftDays", "UserNameLen", "UserName", "Partner", "Ip", "Location" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.GameScore), global::ChinaChess.GameScore.Parser, new[]{ "Score", "Money", "Tax", "Result", "Ticket", "ExtendCoin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.ReadyAgainReq), global::ChinaChess.ReadyAgainReq.Parser, new[]{ "UserDbid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.ReadyAgainRsp), global::ChinaChess.ReadyAgainRsp.Parser, new[]{ "Status", "ErrMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.EmojiInfo), global::ChinaChess.EmojiInfo.Parser, new[]{ "Id", "Price" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.EmojiConfigPush), global::ChinaChess.EmojiConfigPush.Parser, new[]{ "EmojiList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.ChatOrFaceReq), global::ChinaChess.ChatOrFaceReq.Parser, new[]{ "UserDbid", "OpType", "FaceID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.ChatOrFaceRsp), global::ChinaChess.ChatOrFaceRsp.Parser, new[]{ "UserDbid", "OpType", "FaceID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.AdmitReq), global::ChinaChess.AdmitReq.Parser, new[]{ "UserID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.AdmitRsp), global::ChinaChess.AdmitRsp.Parser, new[]{ "Code", "Content", "ApplyUserID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.RegretRsp), global::ChinaChess.RegretRsp.Parser, new[]{ "WRegretUser", "WCurrentUser", "CbRegretCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.DrawReq), global::ChinaChess.DrawReq.Parser, new[]{ "UserID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.DrawRsp), global::ChinaChess.DrawRsp.Parser, new[]{ "Code", "Content", "ApplyUserID", "HandleTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.AgreeReq), global::ChinaChess.AgreeReq.Parser, new[]{ "UserID", "Kind", "Agree" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.AgreeRsp), global::ChinaChess.AgreeRsp.Parser, new[]{ "Code", "Content", "ApplyUserID", "HandleUserID", "Kind", "Agree", "LeftTime", "StartX0", "StartY0", "EndX0", "EndY0", "StartX", "StartY", "EndX", "EndY", "Kill", "Timer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.CounterPush), global::ChinaChess.CounterPush.Parser, new[]{ "CanAdmit", "CanRegret", "RegretLeftCount", "CanDraw", "DrawLeftCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.MoveReq), global::ChinaChess.MoveReq.Parser, new[]{ "CbXSourcePos", "CbYSourcePos", "CbXTargetPos", "CbYTargetPos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.MoveRsp), global::ChinaChess.MoveRsp.Parser, new[]{ "CbXSourcePos", "CbYSourcePos", "CbXTargetPos", "CbYTargetPos", "WCurrentUser" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinaChess.TimerPush), global::ChinaChess.TimerPush.Parser, new[]{ "Chair", "RoundLeftTime", "StepLeftTime", "StepTime" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDSubGame {
    /// <summary>
    ///悔棋(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_REGRET_REQ")] CmdChessSubCRegretReq = 0,
    /// <summary>
    ///悔棋应答(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_REGRET_ANSWER")] CmdChessSubCRegretAnswer = 1,
    /// <summary>
    ///认输请求(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_GIVEUP_REQ")] CmdChessSubCGiveupReq = 2,
    /// <summary>
    ///和棋请求(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_PEACE_REQ")] CmdChessSubCPeaceReq = 3,
    /// <summary>
    ///和棋应答(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_PEACE_ANSWER")] CmdChessSubCPeaceAnswer = 4,
    /// <summary>
    ///移动棋子(CMD_Chess_MOVE_CHESS)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_MOVE_CHESS")] CmdChessSubCMoveChess = 5,
    /// <summary>
    ///房主踢人(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_KICK_PLAYER")] CmdChessSubCKickPlayer = 6,
    /// <summary>
    ///玩家设置规则(MsgCommonN64)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_SET_RULE")] CmdChessSubCSetRule = 7,
    /// <summary>
    ///玩家确定下注(MsgCommonN64)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_MAKE_RULE")] CmdChessSubCMakeRule = 8,
    /// <summary>
    ///玩家选择准备(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_NOTIFY_READY")] CmdChessSubCNotifyReady = 9,
    /// <summary>
    ///玩家选择开始(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_NOTIFY_START")] CmdChessSubCNotifyStart = 10,
    /// <summary>
    ///玩家选择继续(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_CONTINUE")] CmdChessSubCContinue = 11,
    /// <summary>
    ///游戏开始(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_GAME_START")] CmdChessSubSGameStart = 12,
    /// <summary>
    ///移动棋子(CMD_Chess_MOVE_CHESS)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_MOVE_CHESS")] CmdChessSubSMoveChess = 13,
    /// <summary>
    ///悔棋请求(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REGRET_REQ")] CmdChessSubSRegretReq = 14,
    /// <summary>
    ///悔棋失败(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REGRET_FAILE")] CmdChessSubSRegretFaile = 15,
    /// <summary>
    ///悔棋结果(RegretResult)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REGRET_RESULT")] CmdChessSubSRegretResult = 16,
    /// <summary>
    ///和棋请求(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_PEACE_REQ")] CmdChessSubSPeaceReq = 17,
    /// <summary>
    ///悔棋失败(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_PEACE_ANSWER")] CmdChessSubSPeaceAnswer = 18,
    /// <summary>
    ///游戏结束(GameEnd)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_GAME_END")] CmdChessSubSGameEnd = 19,
    /// <summary>
    ///棋谱信息(Chess_Manual)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_CHESS_MANUAL")] CmdChessSubSChessManual = 20,
    /// <summary>
    ///请求设置
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REQ_SET_RULE")] CmdChessSubSReqSetRule = 21,
    /// <summary>
    ///请求同意
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REQ_AGREE_RULE")] CmdChessSubSReqAgreeRule = 22,
    /// <summary>
    ///房主踢人(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_KICK_PLAYER")] CmdChessSubSKickPlayer = 23,
    /// <summary>
    ///等待时间通知(Notify_Timer)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_TIMER")] CmdChessSubSNotifyTimer = 24,
    /// <summary>
    ///通知谁是房主(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_ROOM_OWNER")] CmdChessSubSNotifyRoomOwner = 25,
    /// <summary>
    ///通知玩家设置规则(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_SET_RULE")] CmdChessSubSNotifySetRule = 26,
    /// <summary>
    ///玩家设置规则
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_SET_RULE")] CmdChessSubSSetRule = 27,
    /// <summary>
    ///玩家确定下注(CMD_Make_Rule)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_MAKE_RULE")] CmdChessSubSMakeRule = 28,
    /// <summary>
    ///通知玩家选择准备(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_READY")] CmdChessSubSNotifyReady = 29,
    /// <summary>
    ///通知玩家选择开始(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_START")] CmdChessSubSNotifyStart = 30,
    /// <summary>
    ///玩家选择继续(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_CONTINUE")] CmdChessSubSContinue = 31,
  }

  #endregion

  #region Messages
  public sealed partial class CommonRsp : pb::IMessage<CommonRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommonRsp> _parser = new pb::MessageParser<CommonRsp>(() => new CommonRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonRsp(CommonRsp other) : this() {
      code_ = other.code_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonRsp Clone() {
      return new CommonRsp(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LoginReq : pb::IMessage<LoginReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginReq> _parser = new pb::MessageParser<LoginReq>(() => new LoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq(LoginReq other) : this() {
      userDBID_ = other.userDBID_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq Clone() {
      return new LoginReq(this);
    }

    /// <summary>Field number for the "UserDBID" field.</summary>
    public const int UserDBIDFieldNumber = 1;
    private int userDBID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserDBID {
      get { return userDBID_; }
      set {
        userDBID_ = value;
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserDBID != other.UserDBID) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserDBID != 0) hash ^= UserDBID.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserDBID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDBID);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserDBID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDBID);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserDBID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDBID);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginReq other) {
      if (other == null) {
        return;
      }
      if (other.UserDBID != 0) {
        UserDBID = other.UserDBID;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserDBID = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserDBID = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LoginRsp : pb::IMessage<LoginRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LoginRsp> _parser = new pb::MessageParser<LoginRsp>(() => new LoginRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp(LoginRsp other) : this() {
      userDBID_ = other.userDBID_;
      tableID_ = other.tableID_;
      chairID_ = other.chairID_;
      code_ = other.code_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp Clone() {
      return new LoginRsp(this);
    }

    /// <summary>Field number for the "UserDBID" field.</summary>
    public const int UserDBIDFieldNumber = 1;
    private int userDBID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserDBID {
      get { return userDBID_; }
      set {
        userDBID_ = value;
      }
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 2;
    private int tableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableID {
      get { return tableID_; }
      set {
        tableID_ = value;
      }
    }

    /// <summary>Field number for the "chairID" field.</summary>
    public const int ChairIDFieldNumber = 3;
    private int chairID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairID {
      get { return chairID_; }
      set {
        chairID_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 5;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserDBID != other.UserDBID) return false;
      if (TableID != other.TableID) return false;
      if (ChairID != other.ChairID) return false;
      if (Code != other.Code) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserDBID != 0) hash ^= UserDBID.GetHashCode();
      if (TableID != 0) hash ^= TableID.GetHashCode();
      if (ChairID != 0) hash ^= ChairID.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserDBID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDBID);
      }
      if (TableID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableID);
      }
      if (ChairID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairID);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserDBID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDBID);
      }
      if (TableID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableID);
      }
      if (ChairID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairID);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserDBID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDBID);
      }
      if (TableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
      }
      if (ChairID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairID);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserDBID != 0) {
        UserDBID = other.UserDBID;
      }
      if (other.TableID != 0) {
        TableID = other.TableID;
      }
      if (other.ChairID != 0) {
        ChairID = other.ChairID;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserDBID = input.ReadInt32();
            break;
          }
          case 16: {
            TableID = input.ReadInt32();
            break;
          }
          case 24: {
            ChairID = input.ReadInt32();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserDBID = input.ReadInt32();
            break;
          }
          case 16: {
            TableID = input.ReadInt32();
            break;
          }
          case 24: {
            ChairID = input.ReadInt32();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LogoutReq : pb::IMessage<LogoutReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LogoutReq> _parser = new pb::MessageParser<LogoutReq>(() => new LogoutReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq(LogoutReq other) : this() {
      userDBID_ = other.userDBID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq Clone() {
      return new LogoutReq(this);
    }

    /// <summary>Field number for the "UserDBID" field.</summary>
    public const int UserDBIDFieldNumber = 1;
    private int userDBID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserDBID {
      get { return userDBID_; }
      set {
        userDBID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserDBID != other.UserDBID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserDBID != 0) hash ^= UserDBID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserDBID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDBID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserDBID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDBID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserDBID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDBID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutReq other) {
      if (other == null) {
        return;
      }
      if (other.UserDBID != 0) {
        UserDBID = other.UserDBID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserDBID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserDBID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LogoutRsp : pb::IMessage<LogoutRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LogoutRsp> _parser = new pb::MessageParser<LogoutRsp>(() => new LogoutRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp(LogoutRsp other) : this() {
      code_ = other.code_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp Clone() {
      return new LogoutRsp(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CustomLoginReq : pb::IMessage<CustomLoginReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CustomLoginReq> _parser = new pb::MessageParser<CustomLoginReq>(() => new CustomLoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomLoginReq(CustomLoginReq other) : this() {
      userDBID_ = other.userDBID_;
      sn_ = other.sn_;
      rule_ = other.rule_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomLoginReq Clone() {
      return new CustomLoginReq(this);
    }

    /// <summary>Field number for the "UserDBID" field.</summary>
    public const int UserDBIDFieldNumber = 1;
    private int userDBID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserDBID {
      get { return userDBID_; }
      set {
        userDBID_ = value;
      }
    }

    /// <summary>Field number for the "sn" field.</summary>
    public const int SnFieldNumber = 2;
    private int sn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sn {
      get { return sn_; }
      set {
        sn_ = value;
      }
    }

    /// <summary>Field number for the "rule" field.</summary>
    public const int RuleFieldNumber = 3;
    private int rule_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rule {
      get { return rule_; }
      set {
        rule_ = value;
      }
    }

    /// <summary>Field number for the "Token" field.</summary>
    public const int TokenFieldNumber = 4;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserDBID != other.UserDBID) return false;
      if (Sn != other.Sn) return false;
      if (Rule != other.Rule) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserDBID != 0) hash ^= UserDBID.GetHashCode();
      if (Sn != 0) hash ^= Sn.GetHashCode();
      if (Rule != 0) hash ^= Rule.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserDBID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDBID);
      }
      if (Sn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sn);
      }
      if (Rule != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rule);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserDBID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDBID);
      }
      if (Sn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sn);
      }
      if (Rule != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rule);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserDBID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDBID);
      }
      if (Sn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sn);
      }
      if (Rule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rule);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.UserDBID != 0) {
        UserDBID = other.UserDBID;
      }
      if (other.Sn != 0) {
        Sn = other.Sn;
      }
      if (other.Rule != 0) {
        Rule = other.Rule;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserDBID = input.ReadInt32();
            break;
          }
          case 16: {
            Sn = input.ReadInt32();
            break;
          }
          case 24: {
            Rule = input.ReadInt32();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserDBID = input.ReadInt32();
            break;
          }
          case 16: {
            Sn = input.ReadInt32();
            break;
          }
          case 24: {
            Rule = input.ReadInt32();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CustomLoginRsp : pb::IMessage<CustomLoginRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CustomLoginRsp> _parser = new pb::MessageParser<CustomLoginRsp>(() => new CustomLoginRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomLoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomLoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomLoginRsp(CustomLoginRsp other) : this() {
      userDBID_ = other.userDBID_;
      tableID_ = other.tableID_;
      chairID_ = other.chairID_;
      code_ = other.code_;
      content_ = other.content_;
      sn_ = other.sn_;
      password_ = other.password_;
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomLoginRsp Clone() {
      return new CustomLoginRsp(this);
    }

    /// <summary>Field number for the "UserDBID" field.</summary>
    public const int UserDBIDFieldNumber = 1;
    private int userDBID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserDBID {
      get { return userDBID_; }
      set {
        userDBID_ = value;
      }
    }

    /// <summary>Field number for the "tableID" field.</summary>
    public const int TableIDFieldNumber = 2;
    private int tableID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableID {
      get { return tableID_; }
      set {
        tableID_ = value;
      }
    }

    /// <summary>Field number for the "chairID" field.</summary>
    public const int ChairIDFieldNumber = 3;
    private int chairID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairID {
      get { return chairID_; }
      set {
        chairID_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 5;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sn" field.</summary>
    public const int SnFieldNumber = 6;
    private int sn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sn {
      get { return sn_; }
      set {
        sn_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 7;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoomId" field.</summary>
    public const int RoomIdFieldNumber = 8;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomLoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomLoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserDBID != other.UserDBID) return false;
      if (TableID != other.TableID) return false;
      if (ChairID != other.ChairID) return false;
      if (Code != other.Code) return false;
      if (Content != other.Content) return false;
      if (Sn != other.Sn) return false;
      if (Password != other.Password) return false;
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserDBID != 0) hash ^= UserDBID.GetHashCode();
      if (TableID != 0) hash ^= TableID.GetHashCode();
      if (ChairID != 0) hash ^= ChairID.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Sn != 0) hash ^= Sn.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserDBID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDBID);
      }
      if (TableID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableID);
      }
      if (ChairID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairID);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      if (Sn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sn);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Password);
      }
      if (RoomId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserDBID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDBID);
      }
      if (TableID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableID);
      }
      if (ChairID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairID);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Content);
      }
      if (Sn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Sn);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Password);
      }
      if (RoomId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserDBID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDBID);
      }
      if (TableID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableID);
      }
      if (ChairID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairID);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Sn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sn);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomLoginRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserDBID != 0) {
        UserDBID = other.UserDBID;
      }
      if (other.TableID != 0) {
        TableID = other.TableID;
      }
      if (other.ChairID != 0) {
        ChairID = other.ChairID;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Sn != 0) {
        Sn = other.Sn;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserDBID = input.ReadInt32();
            break;
          }
          case 16: {
            TableID = input.ReadInt32();
            break;
          }
          case 24: {
            ChairID = input.ReadInt32();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
          case 48: {
            Sn = input.ReadInt32();
            break;
          }
          case 58: {
            Password = input.ReadString();
            break;
          }
          case 64: {
            RoomId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserDBID = input.ReadInt32();
            break;
          }
          case 16: {
            TableID = input.ReadInt32();
            break;
          }
          case 24: {
            ChairID = input.ReadInt32();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 42: {
            Content = input.ReadString();
            break;
          }
          case 48: {
            Sn = input.ReadInt32();
            break;
          }
          case 58: {
            Password = input.ReadString();
            break;
          }
          case 64: {
            RoomId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerResult : pb::IMessage<PlayerResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerResult> _parser = new pb::MessageParser<PlayerResult>(() => new PlayerResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResult(PlayerResult other) : this() {
      pid_ = other.pid_;
      chairId_ = other.chairId_;
      score_ = other.score_;
      winState_ = other.winState_.Clone();
      money_ = other.money_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResult Clone() {
      return new PlayerResult(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "chairId" field.</summary>
    public const int ChairIdFieldNumber = 2;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private long score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "winState" field.</summary>
    public const int WinStateFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_winState_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> winState_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WinState {
      get { return winState_; }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 5;
    private long money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (ChairId != other.ChairId) return false;
      if (Score != other.Score) return false;
      if(!winState_.Equals(other.winState_)) return false;
      if (Money != other.Money) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      hash ^= winState_.GetHashCode();
      if (Money != 0L) hash ^= Money.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (Score != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Score);
      }
      winState_.WriteTo(output, _repeated_winState_codec);
      if (Money != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Money);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (Score != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Score);
      }
      winState_.WriteTo(ref output, _repeated_winState_codec);
      if (Money != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Money);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      size += winState_.CalculateSize(_repeated_winState_codec);
      if (Money != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Money);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerResult other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      winState_.Add(other.winState_);
      if (other.Money != 0L) {
        Money = other.Money;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            winState_.AddEntriesFrom(input, _repeated_winState_codec);
            break;
          }
          case 40: {
            Money = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            Score = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            winState_.AddEntriesFrom(ref input, _repeated_winState_codec);
            break;
          }
          case 40: {
            Money = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ResultPush : pb::IMessage<ResultPush>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ResultPush> _parser = new pb::MessageParser<ResultPush>(() => new ResultPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResultPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultPush(ResultPush other) : this() {
      players_ = other.players_.Clone();
      winnerID_ = other.winnerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultPush Clone() {
      return new ResultPush(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ChinaChess.PlayerResult> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::ChinaChess.PlayerResult.Parser);
    private readonly pbc::RepeatedField<global::ChinaChess.PlayerResult> players_ = new pbc::RepeatedField<global::ChinaChess.PlayerResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinaChess.PlayerResult> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "winnerID" field.</summary>
    public const int WinnerIDFieldNumber = 2;
    private int winnerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinnerID {
      get { return winnerID_; }
      set {
        winnerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResultPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResultPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if (WinnerID != other.WinnerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (WinnerID != 0) hash ^= WinnerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      if (WinnerID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinnerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      if (WinnerID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WinnerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (WinnerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinnerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResultPush other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      if (other.WinnerID != 0) {
        WinnerID = other.WinnerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 16: {
            WinnerID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 16: {
            WinnerID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ConfigPush : pb::IMessage<ConfigPush>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConfigPush> _parser = new pb::MessageParser<ConfigPush>(() => new ConfigPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigPush(ConfigPush other) : this() {
      isOpenTakeIn_ = other.isOpenTakeIn_;
      taiFee_ = other.taiFee_;
      settlePay_ = other.settlePay_;
      settlePayFactor_ = other.settlePayFactor_;
      roundTime_ = other.roundTime_;
      stepTime_ = other.stepTime_;
      stepTime2_ = other.stepTime2_;
      dingTime_ = other.dingTime_;
      baseScore_ = other.baseScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigPush Clone() {
      return new ConfigPush(this);
    }

    /// <summary>Field number for the "isOpenTakeIn" field.</summary>
    public const int IsOpenTakeInFieldNumber = 1;
    private bool isOpenTakeIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOpenTakeIn {
      get { return isOpenTakeIn_; }
      set {
        isOpenTakeIn_ = value;
      }
    }

    /// <summary>Field number for the "taiFee" field.</summary>
    public const int TaiFeeFieldNumber = 2;
    private int taiFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaiFee {
      get { return taiFee_; }
      set {
        taiFee_ = value;
      }
    }

    /// <summary>Field number for the "SettlePay" field.</summary>
    public const int SettlePayFieldNumber = 3;
    private bool settlePay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SettlePay {
      get { return settlePay_; }
      set {
        settlePay_ = value;
      }
    }

    /// <summary>Field number for the "SettlePayFactor" field.</summary>
    public const int SettlePayFactorFieldNumber = 4;
    private int settlePayFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SettlePayFactor {
      get { return settlePayFactor_; }
      set {
        settlePayFactor_ = value;
      }
    }

    /// <summary>Field number for the "RoundTime" field.</summary>
    public const int RoundTimeFieldNumber = 5;
    private int roundTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundTime {
      get { return roundTime_; }
      set {
        roundTime_ = value;
      }
    }

    /// <summary>Field number for the "StepTime" field.</summary>
    public const int StepTimeFieldNumber = 6;
    private int stepTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StepTime {
      get { return stepTime_; }
      set {
        stepTime_ = value;
      }
    }

    /// <summary>Field number for the "StepTime2" field.</summary>
    public const int StepTime2FieldNumber = 7;
    private int stepTime2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StepTime2 {
      get { return stepTime2_; }
      set {
        stepTime2_ = value;
      }
    }

    /// <summary>Field number for the "DingTime" field.</summary>
    public const int DingTimeFieldNumber = 8;
    private int dingTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DingTime {
      get { return dingTime_; }
      set {
        dingTime_ = value;
      }
    }

    /// <summary>Field number for the "BaseScore" field.</summary>
    public const int BaseScoreFieldNumber = 9;
    private long baseScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseScore {
      get { return baseScore_; }
      set {
        baseScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsOpenTakeIn != other.IsOpenTakeIn) return false;
      if (TaiFee != other.TaiFee) return false;
      if (SettlePay != other.SettlePay) return false;
      if (SettlePayFactor != other.SettlePayFactor) return false;
      if (RoundTime != other.RoundTime) return false;
      if (StepTime != other.StepTime) return false;
      if (StepTime2 != other.StepTime2) return false;
      if (DingTime != other.DingTime) return false;
      if (BaseScore != other.BaseScore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsOpenTakeIn != false) hash ^= IsOpenTakeIn.GetHashCode();
      if (TaiFee != 0) hash ^= TaiFee.GetHashCode();
      if (SettlePay != false) hash ^= SettlePay.GetHashCode();
      if (SettlePayFactor != 0) hash ^= SettlePayFactor.GetHashCode();
      if (RoundTime != 0) hash ^= RoundTime.GetHashCode();
      if (StepTime != 0) hash ^= StepTime.GetHashCode();
      if (StepTime2 != 0) hash ^= StepTime2.GetHashCode();
      if (DingTime != 0) hash ^= DingTime.GetHashCode();
      if (BaseScore != 0L) hash ^= BaseScore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsOpenTakeIn != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpenTakeIn);
      }
      if (TaiFee != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaiFee);
      }
      if (SettlePay != false) {
        output.WriteRawTag(24);
        output.WriteBool(SettlePay);
      }
      if (SettlePayFactor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SettlePayFactor);
      }
      if (RoundTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoundTime);
      }
      if (StepTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(StepTime);
      }
      if (StepTime2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StepTime2);
      }
      if (DingTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DingTime);
      }
      if (BaseScore != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(BaseScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsOpenTakeIn != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsOpenTakeIn);
      }
      if (TaiFee != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaiFee);
      }
      if (SettlePay != false) {
        output.WriteRawTag(24);
        output.WriteBool(SettlePay);
      }
      if (SettlePayFactor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SettlePayFactor);
      }
      if (RoundTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RoundTime);
      }
      if (StepTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(StepTime);
      }
      if (StepTime2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StepTime2);
      }
      if (DingTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DingTime);
      }
      if (BaseScore != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(BaseScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsOpenTakeIn != false) {
        size += 1 + 1;
      }
      if (TaiFee != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaiFee);
      }
      if (SettlePay != false) {
        size += 1 + 1;
      }
      if (SettlePayFactor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SettlePayFactor);
      }
      if (RoundTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundTime);
      }
      if (StepTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StepTime);
      }
      if (StepTime2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StepTime2);
      }
      if (DingTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DingTime);
      }
      if (BaseScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseScore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigPush other) {
      if (other == null) {
        return;
      }
      if (other.IsOpenTakeIn != false) {
        IsOpenTakeIn = other.IsOpenTakeIn;
      }
      if (other.TaiFee != 0) {
        TaiFee = other.TaiFee;
      }
      if (other.SettlePay != false) {
        SettlePay = other.SettlePay;
      }
      if (other.SettlePayFactor != 0) {
        SettlePayFactor = other.SettlePayFactor;
      }
      if (other.RoundTime != 0) {
        RoundTime = other.RoundTime;
      }
      if (other.StepTime != 0) {
        StepTime = other.StepTime;
      }
      if (other.StepTime2 != 0) {
        StepTime2 = other.StepTime2;
      }
      if (other.DingTime != 0) {
        DingTime = other.DingTime;
      }
      if (other.BaseScore != 0L) {
        BaseScore = other.BaseScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsOpenTakeIn = input.ReadBool();
            break;
          }
          case 16: {
            TaiFee = input.ReadInt32();
            break;
          }
          case 24: {
            SettlePay = input.ReadBool();
            break;
          }
          case 32: {
            SettlePayFactor = input.ReadInt32();
            break;
          }
          case 40: {
            RoundTime = input.ReadInt32();
            break;
          }
          case 48: {
            StepTime = input.ReadInt32();
            break;
          }
          case 56: {
            StepTime2 = input.ReadInt32();
            break;
          }
          case 64: {
            DingTime = input.ReadInt32();
            break;
          }
          case 72: {
            BaseScore = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsOpenTakeIn = input.ReadBool();
            break;
          }
          case 16: {
            TaiFee = input.ReadInt32();
            break;
          }
          case 24: {
            SettlePay = input.ReadBool();
            break;
          }
          case 32: {
            SettlePayFactor = input.ReadInt32();
            break;
          }
          case 40: {
            RoundTime = input.ReadInt32();
            break;
          }
          case 48: {
            StepTime = input.ReadInt32();
            break;
          }
          case 56: {
            StepTime2 = input.ReadInt32();
            break;
          }
          case 64: {
            DingTime = input.ReadInt32();
            break;
          }
          case 72: {
            BaseScore = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChessMap : pb::IMessage<ChessMap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChessMap> _parser = new pb::MessageParser<ChessMap>(() => new ChessMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChessMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessMap(ChessMap other) : this() {
      mapY_ = other.mapY_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessMap Clone() {
      return new ChessMap(this);
    }

    /// <summary>Field number for the "MapY" field.</summary>
    public const int MapYFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_mapY_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> mapY_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MapY {
      get { return mapY_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChessMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChessMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapY_.Equals(other.mapY_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapY_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      mapY_.WriteTo(output, _repeated_mapY_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      mapY_.WriteTo(ref output, _repeated_mapY_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapY_.CalculateSize(_repeated_mapY_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChessMap other) {
      if (other == null) {
        return;
      }
      mapY_.Add(other.mapY_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            mapY_.AddEntriesFrom(input, _repeated_mapY_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            mapY_.AddEntriesFrom(ref input, _repeated_mapY_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SceneRsp : pb::IMessage<SceneRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SceneRsp> _parser = new pb::MessageParser<SceneRsp>(() => new SceneRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneRsp(SceneRsp other) : this() {
      stage_ = other.stage_;
      timeout_ = other.timeout_;
      activeChairId_ = other.activeChairId_;
      map_ = other.map_.Clone();
      counter_ = other.counter_ != null ? other.counter_.Clone() : null;
      timer_ = other.timer_.Clone();
      isRedSide_ = other.isRedSide_;
      startX0_ = other.startX0_;
      startY0_ = other.startY0_;
      endX0_ = other.endX0_;
      endY0_ = other.endY0_;
      isGameBegin_ = other.isGameBegin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneRsp Clone() {
      return new SceneRsp(this);
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private int stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 2;
    private int timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "activeChairId" field.</summary>
    public const int ActiveChairIdFieldNumber = 3;
    private int activeChairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveChairId {
      get { return activeChairId_; }
      set {
        activeChairId_ = value;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 4;
    private static readonly pb::FieldCodec<global::ChinaChess.ChessMap> _repeated_map_codec
        = pb::FieldCodec.ForMessage(34, global::ChinaChess.ChessMap.Parser);
    private readonly pbc::RepeatedField<global::ChinaChess.ChessMap> map_ = new pbc::RepeatedField<global::ChinaChess.ChessMap>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinaChess.ChessMap> Map {
      get { return map_; }
    }

    /// <summary>Field number for the "counter" field.</summary>
    public const int CounterFieldNumber = 5;
    private global::ChinaChess.CounterPush counter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChinaChess.CounterPush Counter {
      get { return counter_; }
      set {
        counter_ = value;
      }
    }

    /// <summary>Field number for the "timer" field.</summary>
    public const int TimerFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ChinaChess.TimerPush> _repeated_timer_codec
        = pb::FieldCodec.ForMessage(50, global::ChinaChess.TimerPush.Parser);
    private readonly pbc::RepeatedField<global::ChinaChess.TimerPush> timer_ = new pbc::RepeatedField<global::ChinaChess.TimerPush>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinaChess.TimerPush> Timer {
      get { return timer_; }
    }

    /// <summary>Field number for the "isRedSide" field.</summary>
    public const int IsRedSideFieldNumber = 7;
    private bool isRedSide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRedSide {
      get { return isRedSide_; }
      set {
        isRedSide_ = value;
      }
    }

    /// <summary>Field number for the "start_x0" field.</summary>
    public const int StartX0FieldNumber = 8;
    private int startX0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartX0 {
      get { return startX0_; }
      set {
        startX0_ = value;
      }
    }

    /// <summary>Field number for the "start_y0" field.</summary>
    public const int StartY0FieldNumber = 9;
    private int startY0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartY0 {
      get { return startY0_; }
      set {
        startY0_ = value;
      }
    }

    /// <summary>Field number for the "end_x0" field.</summary>
    public const int EndX0FieldNumber = 10;
    private int endX0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndX0 {
      get { return endX0_; }
      set {
        endX0_ = value;
      }
    }

    /// <summary>Field number for the "end_y0" field.</summary>
    public const int EndY0FieldNumber = 11;
    private int endY0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndY0 {
      get { return endY0_; }
      set {
        endY0_ = value;
      }
    }

    /// <summary>Field number for the "isGameBegin" field.</summary>
    public const int IsGameBeginFieldNumber = 12;
    private bool isGameBegin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGameBegin {
      get { return isGameBegin_; }
      set {
        isGameBegin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stage != other.Stage) return false;
      if (Timeout != other.Timeout) return false;
      if (ActiveChairId != other.ActiveChairId) return false;
      if(!map_.Equals(other.map_)) return false;
      if (!object.Equals(Counter, other.Counter)) return false;
      if(!timer_.Equals(other.timer_)) return false;
      if (IsRedSide != other.IsRedSide) return false;
      if (StartX0 != other.StartX0) return false;
      if (StartY0 != other.StartY0) return false;
      if (EndX0 != other.EndX0) return false;
      if (EndY0 != other.EndY0) return false;
      if (IsGameBegin != other.IsGameBegin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      if (ActiveChairId != 0) hash ^= ActiveChairId.GetHashCode();
      hash ^= map_.GetHashCode();
      if (counter_ != null) hash ^= Counter.GetHashCode();
      hash ^= timer_.GetHashCode();
      if (IsRedSide != false) hash ^= IsRedSide.GetHashCode();
      if (StartX0 != 0) hash ^= StartX0.GetHashCode();
      if (StartY0 != 0) hash ^= StartY0.GetHashCode();
      if (EndX0 != 0) hash ^= EndX0.GetHashCode();
      if (EndY0 != 0) hash ^= EndY0.GetHashCode();
      if (IsGameBegin != false) hash ^= IsGameBegin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Stage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Stage);
      }
      if (Timeout != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Timeout);
      }
      if (ActiveChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActiveChairId);
      }
      map_.WriteTo(output, _repeated_map_codec);
      if (counter_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Counter);
      }
      timer_.WriteTo(output, _repeated_timer_codec);
      if (IsRedSide != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsRedSide);
      }
      if (StartX0 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StartX0);
      }
      if (StartY0 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartY0);
      }
      if (EndX0 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EndX0);
      }
      if (EndY0 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(EndY0);
      }
      if (IsGameBegin != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsGameBegin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Stage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Stage);
      }
      if (Timeout != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Timeout);
      }
      if (ActiveChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActiveChairId);
      }
      map_.WriteTo(ref output, _repeated_map_codec);
      if (counter_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Counter);
      }
      timer_.WriteTo(ref output, _repeated_timer_codec);
      if (IsRedSide != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsRedSide);
      }
      if (StartX0 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StartX0);
      }
      if (StartY0 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartY0);
      }
      if (EndX0 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EndX0);
      }
      if (EndY0 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(EndY0);
      }
      if (IsGameBegin != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsGameBegin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (Timeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timeout);
      }
      if (ActiveChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveChairId);
      }
      size += map_.CalculateSize(_repeated_map_codec);
      if (counter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Counter);
      }
      size += timer_.CalculateSize(_repeated_timer_codec);
      if (IsRedSide != false) {
        size += 1 + 1;
      }
      if (StartX0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartX0);
      }
      if (StartY0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartY0);
      }
      if (EndX0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndX0);
      }
      if (EndY0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndY0);
      }
      if (IsGameBegin != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneRsp other) {
      if (other == null) {
        return;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
      if (other.ActiveChairId != 0) {
        ActiveChairId = other.ActiveChairId;
      }
      map_.Add(other.map_);
      if (other.counter_ != null) {
        if (counter_ == null) {
          Counter = new global::ChinaChess.CounterPush();
        }
        Counter.MergeFrom(other.Counter);
      }
      timer_.Add(other.timer_);
      if (other.IsRedSide != false) {
        IsRedSide = other.IsRedSide;
      }
      if (other.StartX0 != 0) {
        StartX0 = other.StartX0;
      }
      if (other.StartY0 != 0) {
        StartY0 = other.StartY0;
      }
      if (other.EndX0 != 0) {
        EndX0 = other.EndX0;
      }
      if (other.EndY0 != 0) {
        EndY0 = other.EndY0;
      }
      if (other.IsGameBegin != false) {
        IsGameBegin = other.IsGameBegin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Stage = input.ReadInt32();
            break;
          }
          case 16: {
            Timeout = input.ReadInt32();
            break;
          }
          case 24: {
            ActiveChairId = input.ReadInt32();
            break;
          }
          case 34: {
            map_.AddEntriesFrom(input, _repeated_map_codec);
            break;
          }
          case 42: {
            if (counter_ == null) {
              Counter = new global::ChinaChess.CounterPush();
            }
            input.ReadMessage(Counter);
            break;
          }
          case 50: {
            timer_.AddEntriesFrom(input, _repeated_timer_codec);
            break;
          }
          case 56: {
            IsRedSide = input.ReadBool();
            break;
          }
          case 64: {
            StartX0 = input.ReadInt32();
            break;
          }
          case 72: {
            StartY0 = input.ReadInt32();
            break;
          }
          case 80: {
            EndX0 = input.ReadInt32();
            break;
          }
          case 88: {
            EndY0 = input.ReadInt32();
            break;
          }
          case 96: {
            IsGameBegin = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Stage = input.ReadInt32();
            break;
          }
          case 16: {
            Timeout = input.ReadInt32();
            break;
          }
          case 24: {
            ActiveChairId = input.ReadInt32();
            break;
          }
          case 34: {
            map_.AddEntriesFrom(ref input, _repeated_map_codec);
            break;
          }
          case 42: {
            if (counter_ == null) {
              Counter = new global::ChinaChess.CounterPush();
            }
            input.ReadMessage(Counter);
            break;
          }
          case 50: {
            timer_.AddEntriesFrom(ref input, _repeated_timer_codec);
            break;
          }
          case 56: {
            IsRedSide = input.ReadBool();
            break;
          }
          case 64: {
            StartX0 = input.ReadInt32();
            break;
          }
          case 72: {
            StartY0 = input.ReadInt32();
            break;
          }
          case 80: {
            EndX0 = input.ReadInt32();
            break;
          }
          case 88: {
            EndY0 = input.ReadInt32();
            break;
          }
          case 96: {
            IsGameBegin = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EmojiReq : pb::IMessage<EmojiReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EmojiReq> _parser = new pb::MessageParser<EmojiReq>(() => new EmojiReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmojiReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiReq(EmojiReq other) : this() {
      sender_ = other.sender_;
      sendee_ = other.sendee_;
      ieID_ = other.ieID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiReq Clone() {
      return new EmojiReq(this);
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 1;
    private int sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "sendee" field.</summary>
    public const int SendeeFieldNumber = 2;
    private int sendee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sendee {
      get { return sendee_; }
      set {
        sendee_ = value;
      }
    }

    /// <summary>Field number for the "ieID" field.</summary>
    public const int IeIDFieldNumber = 3;
    private int ieID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IeID {
      get { return ieID_; }
      set {
        ieID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmojiReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmojiReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sender != other.Sender) return false;
      if (Sendee != other.Sendee) return false;
      if (IeID != other.IeID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sender != 0) hash ^= Sender.GetHashCode();
      if (Sendee != 0) hash ^= Sendee.GetHashCode();
      if (IeID != 0) hash ^= IeID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sender != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sender);
      }
      if (Sendee != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sendee);
      }
      if (IeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IeID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sender != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sender);
      }
      if (Sendee != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sendee);
      }
      if (IeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IeID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sender);
      }
      if (Sendee != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sendee);
      }
      if (IeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IeID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmojiReq other) {
      if (other == null) {
        return;
      }
      if (other.Sender != 0) {
        Sender = other.Sender;
      }
      if (other.Sendee != 0) {
        Sendee = other.Sendee;
      }
      if (other.IeID != 0) {
        IeID = other.IeID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sender = input.ReadInt32();
            break;
          }
          case 16: {
            Sendee = input.ReadInt32();
            break;
          }
          case 24: {
            IeID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Sender = input.ReadInt32();
            break;
          }
          case 16: {
            Sendee = input.ReadInt32();
            break;
          }
          case 24: {
            IeID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EmojiRsp : pb::IMessage<EmojiRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EmojiRsp> _parser = new pb::MessageParser<EmojiRsp>(() => new EmojiRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmojiRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiRsp(EmojiRsp other) : this() {
      sender_ = other.sender_;
      sendee_ = other.sendee_;
      ieID_ = other.ieID_;
      ret_ = other.ret_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiRsp Clone() {
      return new EmojiRsp(this);
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 1;
    private int sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "sendee" field.</summary>
    public const int SendeeFieldNumber = 2;
    private int sendee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sendee {
      get { return sendee_; }
      set {
        sendee_ = value;
      }
    }

    /// <summary>Field number for the "ieID" field.</summary>
    public const int IeIDFieldNumber = 3;
    private int ieID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IeID {
      get { return ieID_; }
      set {
        ieID_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 4;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmojiRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmojiRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sender != other.Sender) return false;
      if (Sendee != other.Sendee) return false;
      if (IeID != other.IeID) return false;
      if (Ret != other.Ret) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sender != 0) hash ^= Sender.GetHashCode();
      if (Sendee != 0) hash ^= Sendee.GetHashCode();
      if (IeID != 0) hash ^= IeID.GetHashCode();
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sender != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sender);
      }
      if (Sendee != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sendee);
      }
      if (IeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IeID);
      }
      if (Ret != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sender != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sender);
      }
      if (Sendee != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sendee);
      }
      if (IeID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IeID);
      }
      if (Ret != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sender);
      }
      if (Sendee != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sendee);
      }
      if (IeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IeID);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmojiRsp other) {
      if (other == null) {
        return;
      }
      if (other.Sender != 0) {
        Sender = other.Sender;
      }
      if (other.Sendee != 0) {
        Sendee = other.Sendee;
      }
      if (other.IeID != 0) {
        IeID = other.IeID;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sender = input.ReadInt32();
            break;
          }
          case 16: {
            Sendee = input.ReadInt32();
            break;
          }
          case 24: {
            IeID = input.ReadInt32();
            break;
          }
          case 32: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Sender = input.ReadInt32();
            break;
          }
          case 16: {
            Sendee = input.ReadInt32();
            break;
          }
          case 24: {
            IeID = input.ReadInt32();
            break;
          }
          case 32: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ExtendCoin : pb::IMessage<ExtendCoin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExtendCoin> _parser = new pb::MessageParser<ExtendCoin>(() => new ExtendCoin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtendCoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendCoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendCoin(ExtendCoin other) : this() {
      id_ = other.id_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendCoin Clone() {
      return new ExtendCoin(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtendCoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtendCoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtendCoin other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UserInfoPush : pb::IMessage<UserInfoPush>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserInfoPush> _parser = new pb::MessageParser<UserInfoPush>(() => new UserInfoPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPush(UserInfoPush other) : this() {
      tableId_ = other.tableId_;
      index_ = other.index_;
      userDbid_ = other.userDbid_;
      score_ = other.score_ != null ? other.score_.Clone() : null;
      chairId_ = other.chairId_;
      faceId_ = other.faceId_;
      status_ = other.status_;
      vipLeftDays_ = other.vipLeftDays_;
      userNameLen_ = other.userNameLen_;
      userName_ = other.userName_;
      partner_ = other.partner_;
      ip_ = other.ip_;
      location_ = other.location_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPush Clone() {
      return new UserInfoPush(this);
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 1;
    private int tableId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "user_dbid" field.</summary>
    public const int UserDbidFieldNumber = 3;
    private int userDbid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserDbid {
      get { return userDbid_; }
      set {
        userDbid_ = value;
      }
    }

    /// <summary>Field number for the "Score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private global::ChinaChess.GameScore score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChinaChess.GameScore Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 5;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "face_id" field.</summary>
    public const int FaceIdFieldNumber = 6;
    private int faceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceId {
      get { return faceId_; }
      set {
        faceId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "vip_left_days" field.</summary>
    public const int VipLeftDaysFieldNumber = 8;
    private int vipLeftDays_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VipLeftDays {
      get { return vipLeftDays_; }
      set {
        vipLeftDays_ = value;
      }
    }

    /// <summary>Field number for the "user_name_len" field.</summary>
    public const int UserNameLenFieldNumber = 9;
    private int userNameLen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserNameLen {
      get { return userNameLen_; }
      set {
        userNameLen_ = value;
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 10;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "partner" field.</summary>
    public const int PartnerFieldNumber = 11;
    private string partner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Partner {
      get { return partner_; }
      set {
        partner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 12;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 13;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableId != other.TableId) return false;
      if (Index != other.Index) return false;
      if (UserDbid != other.UserDbid) return false;
      if (!object.Equals(Score, other.Score)) return false;
      if (ChairId != other.ChairId) return false;
      if (FaceId != other.FaceId) return false;
      if (Status != other.Status) return false;
      if (VipLeftDays != other.VipLeftDays) return false;
      if (UserNameLen != other.UserNameLen) return false;
      if (UserName != other.UserName) return false;
      if (Partner != other.Partner) return false;
      if (Ip != other.Ip) return false;
      if (Location != other.Location) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableId != 0) hash ^= TableId.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (UserDbid != 0) hash ^= UserDbid.GetHashCode();
      if (score_ != null) hash ^= Score.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (FaceId != 0) hash ^= FaceId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (VipLeftDays != 0) hash ^= VipLeftDays.GetHashCode();
      if (UserNameLen != 0) hash ^= UserNameLen.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Partner.Length != 0) hash ^= Partner.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TableId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (UserDbid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserDbid);
      }
      if (score_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Score);
      }
      if (ChairId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChairId);
      }
      if (FaceId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FaceId);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Status);
      }
      if (VipLeftDays != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VipLeftDays);
      }
      if (UserNameLen != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UserNameLen);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserName);
      }
      if (Partner.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Partner);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Ip);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TableId);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (UserDbid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserDbid);
      }
      if (score_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Score);
      }
      if (ChairId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChairId);
      }
      if (FaceId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FaceId);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Status);
      }
      if (VipLeftDays != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(VipLeftDays);
      }
      if (UserNameLen != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(UserNameLen);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserName);
      }
      if (Partner.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Partner);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Ip);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Location);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (UserDbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDbid);
      }
      if (score_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Score);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (FaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (VipLeftDays != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLeftDays);
      }
      if (UserNameLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserNameLen);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Partner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Partner);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoPush other) {
      if (other == null) {
        return;
      }
      if (other.TableId != 0) {
        TableId = other.TableId;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.UserDbid != 0) {
        UserDbid = other.UserDbid;
      }
      if (other.score_ != null) {
        if (score_ == null) {
          Score = new global::ChinaChess.GameScore();
        }
        Score.MergeFrom(other.Score);
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.FaceId != 0) {
        FaceId = other.FaceId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.VipLeftDays != 0) {
        VipLeftDays = other.VipLeftDays;
      }
      if (other.UserNameLen != 0) {
        UserNameLen = other.UserNameLen;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Partner.Length != 0) {
        Partner = other.Partner;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TableId = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            UserDbid = input.ReadInt32();
            break;
          }
          case 34: {
            if (score_ == null) {
              Score = new global::ChinaChess.GameScore();
            }
            input.ReadMessage(Score);
            break;
          }
          case 40: {
            ChairId = input.ReadInt32();
            break;
          }
          case 48: {
            FaceId = input.ReadInt32();
            break;
          }
          case 56: {
            Status = input.ReadInt32();
            break;
          }
          case 64: {
            VipLeftDays = input.ReadInt32();
            break;
          }
          case 72: {
            UserNameLen = input.ReadInt32();
            break;
          }
          case 82: {
            UserName = input.ReadString();
            break;
          }
          case 90: {
            Partner = input.ReadString();
            break;
          }
          case 98: {
            Ip = input.ReadString();
            break;
          }
          case 106: {
            Location = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TableId = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            UserDbid = input.ReadInt32();
            break;
          }
          case 34: {
            if (score_ == null) {
              Score = new global::ChinaChess.GameScore();
            }
            input.ReadMessage(Score);
            break;
          }
          case 40: {
            ChairId = input.ReadInt32();
            break;
          }
          case 48: {
            FaceId = input.ReadInt32();
            break;
          }
          case 56: {
            Status = input.ReadInt32();
            break;
          }
          case 64: {
            VipLeftDays = input.ReadInt32();
            break;
          }
          case 72: {
            UserNameLen = input.ReadInt32();
            break;
          }
          case 82: {
            UserName = input.ReadString();
            break;
          }
          case 90: {
            Partner = input.ReadString();
            break;
          }
          case 98: {
            Ip = input.ReadString();
            break;
          }
          case 106: {
            Location = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameScore : pb::IMessage<GameScore>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameScore> _parser = new pb::MessageParser<GameScore>(() => new GameScore());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameScore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameScore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameScore(GameScore other) : this() {
      score_ = other.score_;
      money_ = other.money_;
      tax_ = other.tax_;
      result_ = other.result_.Clone();
      ticket_ = other.ticket_;
      extendCoin_ = other.extendCoin_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameScore Clone() {
      return new GameScore(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private long score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 2;
    private long money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "tax" field.</summary>
    public const int TaxFieldNumber = 3;
    private int tax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tax {
      get { return tax_; }
      set {
        tax_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_result_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> result_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Result {
      get { return result_; }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 5;
    private int ticket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ticket {
      get { return ticket_; }
      set {
        ticket_ = value;
      }
    }

    /// <summary>Field number for the "extendCoin" field.</summary>
    public const int ExtendCoinFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ChinaChess.ExtendCoin> _repeated_extendCoin_codec
        = pb::FieldCodec.ForMessage(50, global::ChinaChess.ExtendCoin.Parser);
    private readonly pbc::RepeatedField<global::ChinaChess.ExtendCoin> extendCoin_ = new pbc::RepeatedField<global::ChinaChess.ExtendCoin>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinaChess.ExtendCoin> ExtendCoin {
      get { return extendCoin_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameScore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameScore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (Money != other.Money) return false;
      if (Tax != other.Tax) return false;
      if(!result_.Equals(other.result_)) return false;
      if (Ticket != other.Ticket) return false;
      if(!extendCoin_.Equals(other.extendCoin_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (Money != 0L) hash ^= Money.GetHashCode();
      if (Tax != 0) hash ^= Tax.GetHashCode();
      hash ^= result_.GetHashCode();
      if (Ticket != 0) hash ^= Ticket.GetHashCode();
      hash ^= extendCoin_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Score != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Score);
      }
      if (Money != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Money);
      }
      if (Tax != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tax);
      }
      result_.WriteTo(output, _repeated_result_codec);
      if (Ticket != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Ticket);
      }
      extendCoin_.WriteTo(output, _repeated_extendCoin_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Score != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Score);
      }
      if (Money != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Money);
      }
      if (Tax != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tax);
      }
      result_.WriteTo(ref output, _repeated_result_codec);
      if (Ticket != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Ticket);
      }
      extendCoin_.WriteTo(ref output, _repeated_extendCoin_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (Money != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Money);
      }
      if (Tax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tax);
      }
      size += result_.CalculateSize(_repeated_result_codec);
      if (Ticket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ticket);
      }
      size += extendCoin_.CalculateSize(_repeated_extendCoin_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameScore other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.Money != 0L) {
        Money = other.Money;
      }
      if (other.Tax != 0) {
        Tax = other.Tax;
      }
      result_.Add(other.result_);
      if (other.Ticket != 0) {
        Ticket = other.Ticket;
      }
      extendCoin_.Add(other.extendCoin_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Score = input.ReadInt64();
            break;
          }
          case 16: {
            Money = input.ReadInt64();
            break;
          }
          case 24: {
            Tax = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
          case 40: {
            Ticket = input.ReadInt32();
            break;
          }
          case 50: {
            extendCoin_.AddEntriesFrom(input, _repeated_extendCoin_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Score = input.ReadInt64();
            break;
          }
          case 16: {
            Money = input.ReadInt64();
            break;
          }
          case 24: {
            Tax = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            result_.AddEntriesFrom(ref input, _repeated_result_codec);
            break;
          }
          case 40: {
            Ticket = input.ReadInt32();
            break;
          }
          case 50: {
            extendCoin_.AddEntriesFrom(ref input, _repeated_extendCoin_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReadyAgainReq : pb::IMessage<ReadyAgainReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReadyAgainReq> _parser = new pb::MessageParser<ReadyAgainReq>(() => new ReadyAgainReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadyAgainReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyAgainReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyAgainReq(ReadyAgainReq other) : this() {
      userDbid_ = other.userDbid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyAgainReq Clone() {
      return new ReadyAgainReq(this);
    }

    /// <summary>Field number for the "user_dbid" field.</summary>
    public const int UserDbidFieldNumber = 1;
    private int userDbid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserDbid {
      get { return userDbid_; }
      set {
        userDbid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadyAgainReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadyAgainReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserDbid != other.UserDbid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserDbid != 0) hash ^= UserDbid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserDbid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDbid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserDbid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDbid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserDbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDbid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadyAgainReq other) {
      if (other == null) {
        return;
      }
      if (other.UserDbid != 0) {
        UserDbid = other.UserDbid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserDbid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserDbid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReadyAgainRsp : pb::IMessage<ReadyAgainRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReadyAgainRsp> _parser = new pb::MessageParser<ReadyAgainRsp>(() => new ReadyAgainRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadyAgainRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyAgainRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyAgainRsp(ReadyAgainRsp other) : this() {
      status_ = other.status_;
      errMsg_ = other.errMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyAgainRsp Clone() {
      return new ReadyAgainRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "errMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadyAgainRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadyAgainRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (ErrMsg != other.ErrMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadyAgainRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EmojiInfo : pb::IMessage<EmojiInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EmojiInfo> _parser = new pb::MessageParser<EmojiInfo>(() => new EmojiInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmojiInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiInfo(EmojiInfo other) : this() {
      id_ = other.id_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiInfo Clone() {
      return new EmojiInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmojiInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmojiInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmojiInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EmojiConfigPush : pb::IMessage<EmojiConfigPush>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EmojiConfigPush> _parser = new pb::MessageParser<EmojiConfigPush>(() => new EmojiConfigPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmojiConfigPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiConfigPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiConfigPush(EmojiConfigPush other) : this() {
      emojiList_ = other.emojiList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmojiConfigPush Clone() {
      return new EmojiConfigPush(this);
    }

    /// <summary>Field number for the "emojiList" field.</summary>
    public const int EmojiListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ChinaChess.EmojiInfo> _repeated_emojiList_codec
        = pb::FieldCodec.ForMessage(10, global::ChinaChess.EmojiInfo.Parser);
    private readonly pbc::RepeatedField<global::ChinaChess.EmojiInfo> emojiList_ = new pbc::RepeatedField<global::ChinaChess.EmojiInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinaChess.EmojiInfo> EmojiList {
      get { return emojiList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmojiConfigPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmojiConfigPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!emojiList_.Equals(other.emojiList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= emojiList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      emojiList_.WriteTo(output, _repeated_emojiList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      emojiList_.WriteTo(ref output, _repeated_emojiList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += emojiList_.CalculateSize(_repeated_emojiList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmojiConfigPush other) {
      if (other == null) {
        return;
      }
      emojiList_.Add(other.emojiList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            emojiList_.AddEntriesFrom(input, _repeated_emojiList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            emojiList_.AddEntriesFrom(ref input, _repeated_emojiList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChatOrFaceReq : pb::IMessage<ChatOrFaceReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChatOrFaceReq> _parser = new pb::MessageParser<ChatOrFaceReq>(() => new ChatOrFaceReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatOrFaceReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatOrFaceReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatOrFaceReq(ChatOrFaceReq other) : this() {
      userDbid_ = other.userDbid_;
      opType_ = other.opType_;
      faceID_ = other.faceID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatOrFaceReq Clone() {
      return new ChatOrFaceReq(this);
    }

    /// <summary>Field number for the "user_dbid" field.</summary>
    public const int UserDbidFieldNumber = 1;
    private int userDbid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserDbid {
      get { return userDbid_; }
      set {
        userDbid_ = value;
      }
    }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 2;
    private int opType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "faceID" field.</summary>
    public const int FaceIDFieldNumber = 3;
    private int faceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceID {
      get { return faceID_; }
      set {
        faceID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatOrFaceReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatOrFaceReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserDbid != other.UserDbid) return false;
      if (OpType != other.OpType) return false;
      if (FaceID != other.FaceID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserDbid != 0) hash ^= UserDbid.GetHashCode();
      if (OpType != 0) hash ^= OpType.GetHashCode();
      if (FaceID != 0) hash ^= FaceID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserDbid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDbid);
      }
      if (OpType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OpType);
      }
      if (FaceID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FaceID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserDbid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDbid);
      }
      if (OpType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OpType);
      }
      if (FaceID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FaceID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserDbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDbid);
      }
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpType);
      }
      if (FaceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatOrFaceReq other) {
      if (other == null) {
        return;
      }
      if (other.UserDbid != 0) {
        UserDbid = other.UserDbid;
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
      if (other.FaceID != 0) {
        FaceID = other.FaceID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserDbid = input.ReadInt32();
            break;
          }
          case 16: {
            OpType = input.ReadInt32();
            break;
          }
          case 24: {
            FaceID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserDbid = input.ReadInt32();
            break;
          }
          case 16: {
            OpType = input.ReadInt32();
            break;
          }
          case 24: {
            FaceID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChatOrFaceRsp : pb::IMessage<ChatOrFaceRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChatOrFaceRsp> _parser = new pb::MessageParser<ChatOrFaceRsp>(() => new ChatOrFaceRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatOrFaceRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatOrFaceRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatOrFaceRsp(ChatOrFaceRsp other) : this() {
      userDbid_ = other.userDbid_;
      opType_ = other.opType_;
      faceID_ = other.faceID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatOrFaceRsp Clone() {
      return new ChatOrFaceRsp(this);
    }

    /// <summary>Field number for the "user_dbid" field.</summary>
    public const int UserDbidFieldNumber = 1;
    private int userDbid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserDbid {
      get { return userDbid_; }
      set {
        userDbid_ = value;
      }
    }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 2;
    private int opType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "faceID" field.</summary>
    public const int FaceIDFieldNumber = 3;
    private int faceID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceID {
      get { return faceID_; }
      set {
        faceID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatOrFaceRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatOrFaceRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserDbid != other.UserDbid) return false;
      if (OpType != other.OpType) return false;
      if (FaceID != other.FaceID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserDbid != 0) hash ^= UserDbid.GetHashCode();
      if (OpType != 0) hash ^= OpType.GetHashCode();
      if (FaceID != 0) hash ^= FaceID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserDbid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDbid);
      }
      if (OpType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OpType);
      }
      if (FaceID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FaceID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserDbid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserDbid);
      }
      if (OpType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OpType);
      }
      if (FaceID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FaceID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserDbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserDbid);
      }
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpType);
      }
      if (FaceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatOrFaceRsp other) {
      if (other == null) {
        return;
      }
      if (other.UserDbid != 0) {
        UserDbid = other.UserDbid;
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
      if (other.FaceID != 0) {
        FaceID = other.FaceID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserDbid = input.ReadInt32();
            break;
          }
          case 16: {
            OpType = input.ReadInt32();
            break;
          }
          case 24: {
            FaceID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserDbid = input.ReadInt32();
            break;
          }
          case 16: {
            OpType = input.ReadInt32();
            break;
          }
          case 24: {
            FaceID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AdmitReq : pb::IMessage<AdmitReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdmitReq> _parser = new pb::MessageParser<AdmitReq>(() => new AdmitReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdmitReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdmitReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdmitReq(AdmitReq other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdmitReq Clone() {
      return new AdmitReq(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private int userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdmitReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdmitReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdmitReq other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AdmitRsp : pb::IMessage<AdmitRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdmitRsp> _parser = new pb::MessageParser<AdmitRsp>(() => new AdmitRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdmitRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdmitRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdmitRsp(AdmitRsp other) : this() {
      code_ = other.code_;
      content_ = other.content_;
      applyUserID_ = other.applyUserID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdmitRsp Clone() {
      return new AdmitRsp(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "applyUserID" field.</summary>
    public const int ApplyUserIDFieldNumber = 3;
    private int applyUserID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplyUserID {
      get { return applyUserID_; }
      set {
        applyUserID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdmitRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdmitRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Content != other.Content) return false;
      if (ApplyUserID != other.ApplyUserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (ApplyUserID != 0) hash ^= ApplyUserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (ApplyUserID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplyUserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (ApplyUserID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplyUserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (ApplyUserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyUserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdmitRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.ApplyUserID != 0) {
        ApplyUserID = other.ApplyUserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 24: {
            ApplyUserID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 24: {
            ApplyUserID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///悔棋结果
  /// </summary>
  public sealed partial class RegretRsp : pb::IMessage<RegretRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RegretRsp> _parser = new pb::MessageParser<RegretRsp>(() => new RegretRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegretRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegretRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegretRsp(RegretRsp other) : this() {
      wRegretUser_ = other.wRegretUser_;
      wCurrentUser_ = other.wCurrentUser_;
      cbRegretCount_ = other.cbRegretCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegretRsp Clone() {
      return new RegretRsp(this);
    }

    /// <summary>Field number for the "wRegretUser" field.</summary>
    public const int WRegretUserFieldNumber = 1;
    private int wRegretUser_;
    /// <summary>
    ///悔棋操作玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WRegretUser {
      get { return wRegretUser_; }
      set {
        wRegretUser_ = value;
      }
    }

    /// <summary>Field number for the "wCurrentUser" field.</summary>
    public const int WCurrentUserFieldNumber = 2;
    private int wCurrentUser_;
    /// <summary>
    ///当前玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WCurrentUser {
      get { return wCurrentUser_; }
      set {
        wCurrentUser_ = value;
      }
    }

    /// <summary>Field number for the "cbRegretCount" field.</summary>
    public const int CbRegretCountFieldNumber = 3;
    private int cbRegretCount_;
    /// <summary>
    ///悔棋次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbRegretCount {
      get { return cbRegretCount_; }
      set {
        cbRegretCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegretRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegretRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WRegretUser != other.WRegretUser) return false;
      if (WCurrentUser != other.WCurrentUser) return false;
      if (CbRegretCount != other.CbRegretCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WRegretUser != 0) hash ^= WRegretUser.GetHashCode();
      if (WCurrentUser != 0) hash ^= WCurrentUser.GetHashCode();
      if (CbRegretCount != 0) hash ^= CbRegretCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WRegretUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WRegretUser);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WCurrentUser);
      }
      if (CbRegretCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbRegretCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WRegretUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WRegretUser);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WCurrentUser);
      }
      if (CbRegretCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbRegretCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WRegretUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WRegretUser);
      }
      if (WCurrentUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WCurrentUser);
      }
      if (CbRegretCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbRegretCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegretRsp other) {
      if (other == null) {
        return;
      }
      if (other.WRegretUser != 0) {
        WRegretUser = other.WRegretUser;
      }
      if (other.WCurrentUser != 0) {
        WCurrentUser = other.WCurrentUser;
      }
      if (other.CbRegretCount != 0) {
        CbRegretCount = other.CbRegretCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WRegretUser = input.ReadInt32();
            break;
          }
          case 16: {
            WCurrentUser = input.ReadInt32();
            break;
          }
          case 24: {
            CbRegretCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WRegretUser = input.ReadInt32();
            break;
          }
          case 16: {
            WCurrentUser = input.ReadInt32();
            break;
          }
          case 24: {
            CbRegretCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DrawReq : pb::IMessage<DrawReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DrawReq> _parser = new pb::MessageParser<DrawReq>(() => new DrawReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawReq(DrawReq other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawReq Clone() {
      return new DrawReq(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private int userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawReq other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DrawRsp : pb::IMessage<DrawRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DrawRsp> _parser = new pb::MessageParser<DrawRsp>(() => new DrawRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawRsp(DrawRsp other) : this() {
      code_ = other.code_;
      content_ = other.content_;
      applyUserID_ = other.applyUserID_;
      handleTime_ = other.handleTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawRsp Clone() {
      return new DrawRsp(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "applyUserID" field.</summary>
    public const int ApplyUserIDFieldNumber = 3;
    private int applyUserID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplyUserID {
      get { return applyUserID_; }
      set {
        applyUserID_ = value;
      }
    }

    /// <summary>Field number for the "handleTime" field.</summary>
    public const int HandleTimeFieldNumber = 4;
    private int handleTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandleTime {
      get { return handleTime_; }
      set {
        handleTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Content != other.Content) return false;
      if (ApplyUserID != other.ApplyUserID) return false;
      if (HandleTime != other.HandleTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (ApplyUserID != 0) hash ^= ApplyUserID.GetHashCode();
      if (HandleTime != 0) hash ^= HandleTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (ApplyUserID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplyUserID);
      }
      if (HandleTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HandleTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (ApplyUserID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplyUserID);
      }
      if (HandleTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HandleTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (ApplyUserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyUserID);
      }
      if (HandleTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandleTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.ApplyUserID != 0) {
        ApplyUserID = other.ApplyUserID;
      }
      if (other.HandleTime != 0) {
        HandleTime = other.HandleTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 24: {
            ApplyUserID = input.ReadInt32();
            break;
          }
          case 32: {
            HandleTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 24: {
            ApplyUserID = input.ReadInt32();
            break;
          }
          case 32: {
            HandleTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AgreeReq : pb::IMessage<AgreeReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AgreeReq> _parser = new pb::MessageParser<AgreeReq>(() => new AgreeReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AgreeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgreeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgreeReq(AgreeReq other) : this() {
      userID_ = other.userID_;
      kind_ = other.kind_;
      agree_ = other.agree_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgreeReq Clone() {
      return new AgreeReq(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private int userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 2;
    private int kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "agree" field.</summary>
    public const int AgreeFieldNumber = 3;
    private bool agree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AgreeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AgreeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Kind != other.Kind) return false;
      if (Agree != other.Agree) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Agree != false) hash ^= Agree.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserID);
      }
      if (Kind != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Kind);
      }
      if (Agree != false) {
        output.WriteRawTag(24);
        output.WriteBool(Agree);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserID);
      }
      if (Kind != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Kind);
      }
      if (Agree != false) {
        output.WriteRawTag(24);
        output.WriteBool(Agree);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserID);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kind);
      }
      if (Agree != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AgreeReq other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Agree != false) {
        Agree = other.Agree;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt32();
            break;
          }
          case 16: {
            Kind = input.ReadInt32();
            break;
          }
          case 24: {
            Agree = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserID = input.ReadInt32();
            break;
          }
          case 16: {
            Kind = input.ReadInt32();
            break;
          }
          case 24: {
            Agree = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AgreeRsp : pb::IMessage<AgreeRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AgreeRsp> _parser = new pb::MessageParser<AgreeRsp>(() => new AgreeRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AgreeRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgreeRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgreeRsp(AgreeRsp other) : this() {
      code_ = other.code_;
      content_ = other.content_;
      applyUserID_ = other.applyUserID_;
      handleUserID_ = other.handleUserID_;
      kind_ = other.kind_;
      agree_ = other.agree_;
      leftTime_ = other.leftTime_;
      startX0_ = other.startX0_;
      startY0_ = other.startY0_;
      endX0_ = other.endX0_;
      endY0_ = other.endY0_;
      startX_ = other.startX_;
      startY_ = other.startY_;
      endX_ = other.endX_;
      endY_ = other.endY_;
      kill_ = other.kill_;
      timer_ = other.timer_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AgreeRsp Clone() {
      return new AgreeRsp(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "applyUserID" field.</summary>
    public const int ApplyUserIDFieldNumber = 3;
    private int applyUserID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplyUserID {
      get { return applyUserID_; }
      set {
        applyUserID_ = value;
      }
    }

    /// <summary>Field number for the "handleUserID" field.</summary>
    public const int HandleUserIDFieldNumber = 4;
    private int handleUserID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandleUserID {
      get { return handleUserID_; }
      set {
        handleUserID_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 5;
    private int kind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "agree" field.</summary>
    public const int AgreeFieldNumber = 6;
    private bool agree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Agree {
      get { return agree_; }
      set {
        agree_ = value;
      }
    }

    /// <summary>Field number for the "leftTime" field.</summary>
    public const int LeftTimeFieldNumber = 7;
    private int leftTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftTime {
      get { return leftTime_; }
      set {
        leftTime_ = value;
      }
    }

    /// <summary>Field number for the "start_x0" field.</summary>
    public const int StartX0FieldNumber = 8;
    private int startX0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartX0 {
      get { return startX0_; }
      set {
        startX0_ = value;
      }
    }

    /// <summary>Field number for the "start_y0" field.</summary>
    public const int StartY0FieldNumber = 9;
    private int startY0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartY0 {
      get { return startY0_; }
      set {
        startY0_ = value;
      }
    }

    /// <summary>Field number for the "end_x0" field.</summary>
    public const int EndX0FieldNumber = 10;
    private int endX0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndX0 {
      get { return endX0_; }
      set {
        endX0_ = value;
      }
    }

    /// <summary>Field number for the "end_y0" field.</summary>
    public const int EndY0FieldNumber = 11;
    private int endY0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndY0 {
      get { return endY0_; }
      set {
        endY0_ = value;
      }
    }

    /// <summary>Field number for the "start_x" field.</summary>
    public const int StartXFieldNumber = 12;
    private int startX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartX {
      get { return startX_; }
      set {
        startX_ = value;
      }
    }

    /// <summary>Field number for the "start_y" field.</summary>
    public const int StartYFieldNumber = 13;
    private int startY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartY {
      get { return startY_; }
      set {
        startY_ = value;
      }
    }

    /// <summary>Field number for the "end_x" field.</summary>
    public const int EndXFieldNumber = 14;
    private int endX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndX {
      get { return endX_; }
      set {
        endX_ = value;
      }
    }

    /// <summary>Field number for the "end_y" field.</summary>
    public const int EndYFieldNumber = 15;
    private int endY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndY {
      get { return endY_; }
      set {
        endY_ = value;
      }
    }

    /// <summary>Field number for the "kill" field.</summary>
    public const int KillFieldNumber = 16;
    private int kill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Kill {
      get { return kill_; }
      set {
        kill_ = value;
      }
    }

    /// <summary>Field number for the "timer" field.</summary>
    public const int TimerFieldNumber = 17;
    private static readonly pb::FieldCodec<global::ChinaChess.TimerPush> _repeated_timer_codec
        = pb::FieldCodec.ForMessage(138, global::ChinaChess.TimerPush.Parser);
    private readonly pbc::RepeatedField<global::ChinaChess.TimerPush> timer_ = new pbc::RepeatedField<global::ChinaChess.TimerPush>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinaChess.TimerPush> Timer {
      get { return timer_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AgreeRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AgreeRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Content != other.Content) return false;
      if (ApplyUserID != other.ApplyUserID) return false;
      if (HandleUserID != other.HandleUserID) return false;
      if (Kind != other.Kind) return false;
      if (Agree != other.Agree) return false;
      if (LeftTime != other.LeftTime) return false;
      if (StartX0 != other.StartX0) return false;
      if (StartY0 != other.StartY0) return false;
      if (EndX0 != other.EndX0) return false;
      if (EndY0 != other.EndY0) return false;
      if (StartX != other.StartX) return false;
      if (StartY != other.StartY) return false;
      if (EndX != other.EndX) return false;
      if (EndY != other.EndY) return false;
      if (Kill != other.Kill) return false;
      if(!timer_.Equals(other.timer_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (ApplyUserID != 0) hash ^= ApplyUserID.GetHashCode();
      if (HandleUserID != 0) hash ^= HandleUserID.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Agree != false) hash ^= Agree.GetHashCode();
      if (LeftTime != 0) hash ^= LeftTime.GetHashCode();
      if (StartX0 != 0) hash ^= StartX0.GetHashCode();
      if (StartY0 != 0) hash ^= StartY0.GetHashCode();
      if (EndX0 != 0) hash ^= EndX0.GetHashCode();
      if (EndY0 != 0) hash ^= EndY0.GetHashCode();
      if (StartX != 0) hash ^= StartX.GetHashCode();
      if (StartY != 0) hash ^= StartY.GetHashCode();
      if (EndX != 0) hash ^= EndX.GetHashCode();
      if (EndY != 0) hash ^= EndY.GetHashCode();
      if (Kill != 0) hash ^= Kill.GetHashCode();
      hash ^= timer_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (ApplyUserID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplyUserID);
      }
      if (HandleUserID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HandleUserID);
      }
      if (Kind != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Kind);
      }
      if (Agree != false) {
        output.WriteRawTag(48);
        output.WriteBool(Agree);
      }
      if (LeftTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LeftTime);
      }
      if (StartX0 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StartX0);
      }
      if (StartY0 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartY0);
      }
      if (EndX0 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EndX0);
      }
      if (EndY0 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(EndY0);
      }
      if (StartX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(StartX);
      }
      if (StartY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(StartY);
      }
      if (EndX != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(EndX);
      }
      if (EndY != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(EndY);
      }
      if (Kill != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Kill);
      }
      timer_.WriteTo(output, _repeated_timer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (ApplyUserID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ApplyUserID);
      }
      if (HandleUserID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HandleUserID);
      }
      if (Kind != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Kind);
      }
      if (Agree != false) {
        output.WriteRawTag(48);
        output.WriteBool(Agree);
      }
      if (LeftTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LeftTime);
      }
      if (StartX0 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(StartX0);
      }
      if (StartY0 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartY0);
      }
      if (EndX0 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EndX0);
      }
      if (EndY0 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(EndY0);
      }
      if (StartX != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(StartX);
      }
      if (StartY != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(StartY);
      }
      if (EndX != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(EndX);
      }
      if (EndY != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(EndY);
      }
      if (Kill != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Kill);
      }
      timer_.WriteTo(ref output, _repeated_timer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (ApplyUserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyUserID);
      }
      if (HandleUserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandleUserID);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Kind);
      }
      if (Agree != false) {
        size += 1 + 1;
      }
      if (LeftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTime);
      }
      if (StartX0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartX0);
      }
      if (StartY0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartY0);
      }
      if (EndX0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndX0);
      }
      if (EndY0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndY0);
      }
      if (StartX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartX);
      }
      if (StartY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartY);
      }
      if (EndX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndX);
      }
      if (EndY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndY);
      }
      if (Kill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Kill);
      }
      size += timer_.CalculateSize(_repeated_timer_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AgreeRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.ApplyUserID != 0) {
        ApplyUserID = other.ApplyUserID;
      }
      if (other.HandleUserID != 0) {
        HandleUserID = other.HandleUserID;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Agree != false) {
        Agree = other.Agree;
      }
      if (other.LeftTime != 0) {
        LeftTime = other.LeftTime;
      }
      if (other.StartX0 != 0) {
        StartX0 = other.StartX0;
      }
      if (other.StartY0 != 0) {
        StartY0 = other.StartY0;
      }
      if (other.EndX0 != 0) {
        EndX0 = other.EndX0;
      }
      if (other.EndY0 != 0) {
        EndY0 = other.EndY0;
      }
      if (other.StartX != 0) {
        StartX = other.StartX;
      }
      if (other.StartY != 0) {
        StartY = other.StartY;
      }
      if (other.EndX != 0) {
        EndX = other.EndX;
      }
      if (other.EndY != 0) {
        EndY = other.EndY;
      }
      if (other.Kill != 0) {
        Kill = other.Kill;
      }
      timer_.Add(other.timer_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 24: {
            ApplyUserID = input.ReadInt32();
            break;
          }
          case 32: {
            HandleUserID = input.ReadInt32();
            break;
          }
          case 40: {
            Kind = input.ReadInt32();
            break;
          }
          case 48: {
            Agree = input.ReadBool();
            break;
          }
          case 56: {
            LeftTime = input.ReadInt32();
            break;
          }
          case 64: {
            StartX0 = input.ReadInt32();
            break;
          }
          case 72: {
            StartY0 = input.ReadInt32();
            break;
          }
          case 80: {
            EndX0 = input.ReadInt32();
            break;
          }
          case 88: {
            EndY0 = input.ReadInt32();
            break;
          }
          case 96: {
            StartX = input.ReadInt32();
            break;
          }
          case 104: {
            StartY = input.ReadInt32();
            break;
          }
          case 112: {
            EndX = input.ReadInt32();
            break;
          }
          case 120: {
            EndY = input.ReadInt32();
            break;
          }
          case 128: {
            Kill = input.ReadInt32();
            break;
          }
          case 138: {
            timer_.AddEntriesFrom(input, _repeated_timer_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 24: {
            ApplyUserID = input.ReadInt32();
            break;
          }
          case 32: {
            HandleUserID = input.ReadInt32();
            break;
          }
          case 40: {
            Kind = input.ReadInt32();
            break;
          }
          case 48: {
            Agree = input.ReadBool();
            break;
          }
          case 56: {
            LeftTime = input.ReadInt32();
            break;
          }
          case 64: {
            StartX0 = input.ReadInt32();
            break;
          }
          case 72: {
            StartY0 = input.ReadInt32();
            break;
          }
          case 80: {
            EndX0 = input.ReadInt32();
            break;
          }
          case 88: {
            EndY0 = input.ReadInt32();
            break;
          }
          case 96: {
            StartX = input.ReadInt32();
            break;
          }
          case 104: {
            StartY = input.ReadInt32();
            break;
          }
          case 112: {
            EndX = input.ReadInt32();
            break;
          }
          case 120: {
            EndY = input.ReadInt32();
            break;
          }
          case 128: {
            Kill = input.ReadInt32();
            break;
          }
          case 138: {
            timer_.AddEntriesFrom(ref input, _repeated_timer_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CounterPush : pb::IMessage<CounterPush>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CounterPush> _parser = new pb::MessageParser<CounterPush>(() => new CounterPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CounterPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CounterPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CounterPush(CounterPush other) : this() {
      canAdmit_ = other.canAdmit_;
      canRegret_ = other.canRegret_;
      regretLeftCount_ = other.regretLeftCount_;
      canDraw_ = other.canDraw_;
      drawLeftCount_ = other.drawLeftCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CounterPush Clone() {
      return new CounterPush(this);
    }

    /// <summary>Field number for the "canAdmit" field.</summary>
    public const int CanAdmitFieldNumber = 1;
    private bool canAdmit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanAdmit {
      get { return canAdmit_; }
      set {
        canAdmit_ = value;
      }
    }

    /// <summary>Field number for the "canRegret" field.</summary>
    public const int CanRegretFieldNumber = 2;
    private bool canRegret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanRegret {
      get { return canRegret_; }
      set {
        canRegret_ = value;
      }
    }

    /// <summary>Field number for the "regretLeftCount" field.</summary>
    public const int RegretLeftCountFieldNumber = 3;
    private int regretLeftCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegretLeftCount {
      get { return regretLeftCount_; }
      set {
        regretLeftCount_ = value;
      }
    }

    /// <summary>Field number for the "canDraw" field.</summary>
    public const int CanDrawFieldNumber = 4;
    private bool canDraw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanDraw {
      get { return canDraw_; }
      set {
        canDraw_ = value;
      }
    }

    /// <summary>Field number for the "drawLeftCount" field.</summary>
    public const int DrawLeftCountFieldNumber = 5;
    private int drawLeftCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawLeftCount {
      get { return drawLeftCount_; }
      set {
        drawLeftCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CounterPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CounterPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CanAdmit != other.CanAdmit) return false;
      if (CanRegret != other.CanRegret) return false;
      if (RegretLeftCount != other.RegretLeftCount) return false;
      if (CanDraw != other.CanDraw) return false;
      if (DrawLeftCount != other.DrawLeftCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CanAdmit != false) hash ^= CanAdmit.GetHashCode();
      if (CanRegret != false) hash ^= CanRegret.GetHashCode();
      if (RegretLeftCount != 0) hash ^= RegretLeftCount.GetHashCode();
      if (CanDraw != false) hash ^= CanDraw.GetHashCode();
      if (DrawLeftCount != 0) hash ^= DrawLeftCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CanAdmit != false) {
        output.WriteRawTag(8);
        output.WriteBool(CanAdmit);
      }
      if (CanRegret != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanRegret);
      }
      if (RegretLeftCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RegretLeftCount);
      }
      if (CanDraw != false) {
        output.WriteRawTag(32);
        output.WriteBool(CanDraw);
      }
      if (DrawLeftCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DrawLeftCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CanAdmit != false) {
        output.WriteRawTag(8);
        output.WriteBool(CanAdmit);
      }
      if (CanRegret != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanRegret);
      }
      if (RegretLeftCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RegretLeftCount);
      }
      if (CanDraw != false) {
        output.WriteRawTag(32);
        output.WriteBool(CanDraw);
      }
      if (DrawLeftCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DrawLeftCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CanAdmit != false) {
        size += 1 + 1;
      }
      if (CanRegret != false) {
        size += 1 + 1;
      }
      if (RegretLeftCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegretLeftCount);
      }
      if (CanDraw != false) {
        size += 1 + 1;
      }
      if (DrawLeftCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawLeftCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CounterPush other) {
      if (other == null) {
        return;
      }
      if (other.CanAdmit != false) {
        CanAdmit = other.CanAdmit;
      }
      if (other.CanRegret != false) {
        CanRegret = other.CanRegret;
      }
      if (other.RegretLeftCount != 0) {
        RegretLeftCount = other.RegretLeftCount;
      }
      if (other.CanDraw != false) {
        CanDraw = other.CanDraw;
      }
      if (other.DrawLeftCount != 0) {
        DrawLeftCount = other.DrawLeftCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CanAdmit = input.ReadBool();
            break;
          }
          case 16: {
            CanRegret = input.ReadBool();
            break;
          }
          case 24: {
            RegretLeftCount = input.ReadInt32();
            break;
          }
          case 32: {
            CanDraw = input.ReadBool();
            break;
          }
          case 40: {
            DrawLeftCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CanAdmit = input.ReadBool();
            break;
          }
          case 16: {
            CanRegret = input.ReadBool();
            break;
          }
          case 24: {
            RegretLeftCount = input.ReadInt32();
            break;
          }
          case 32: {
            CanDraw = input.ReadBool();
            break;
          }
          case 40: {
            DrawLeftCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MoveReq : pb::IMessage<MoveReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveReq> _parser = new pb::MessageParser<MoveReq>(() => new MoveReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveReq(MoveReq other) : this() {
      cbXSourcePos_ = other.cbXSourcePos_;
      cbYSourcePos_ = other.cbYSourcePos_;
      cbXTargetPos_ = other.cbXTargetPos_;
      cbYTargetPos_ = other.cbYTargetPos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveReq Clone() {
      return new MoveReq(this);
    }

    /// <summary>Field number for the "cbXSourcePos" field.</summary>
    public const int CbXSourcePosFieldNumber = 1;
    private int cbXSourcePos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXSourcePos {
      get { return cbXSourcePos_; }
      set {
        cbXSourcePos_ = value;
      }
    }

    /// <summary>Field number for the "cbYSourcePos" field.</summary>
    public const int CbYSourcePosFieldNumber = 2;
    private int cbYSourcePos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYSourcePos {
      get { return cbYSourcePos_; }
      set {
        cbYSourcePos_ = value;
      }
    }

    /// <summary>Field number for the "cbXTargetPos" field.</summary>
    public const int CbXTargetPosFieldNumber = 3;
    private int cbXTargetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXTargetPos {
      get { return cbXTargetPos_; }
      set {
        cbXTargetPos_ = value;
      }
    }

    /// <summary>Field number for the "cbYTargetPos" field.</summary>
    public const int CbYTargetPosFieldNumber = 4;
    private int cbYTargetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYTargetPos {
      get { return cbYTargetPos_; }
      set {
        cbYTargetPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CbXSourcePos != other.CbXSourcePos) return false;
      if (CbYSourcePos != other.CbYSourcePos) return false;
      if (CbXTargetPos != other.CbXTargetPos) return false;
      if (CbYTargetPos != other.CbYTargetPos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CbXSourcePos != 0) hash ^= CbXSourcePos.GetHashCode();
      if (CbYSourcePos != 0) hash ^= CbYSourcePos.GetHashCode();
      if (CbXTargetPos != 0) hash ^= CbXTargetPos.GetHashCode();
      if (CbYTargetPos != 0) hash ^= CbYTargetPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CbXSourcePos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CbXSourcePos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CbXSourcePos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYTargetPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveReq other) {
      if (other == null) {
        return;
      }
      if (other.CbXSourcePos != 0) {
        CbXSourcePos = other.CbXSourcePos;
      }
      if (other.CbYSourcePos != 0) {
        CbYSourcePos = other.CbYSourcePos;
      }
      if (other.CbXTargetPos != 0) {
        CbXTargetPos = other.CbXTargetPos;
      }
      if (other.CbYTargetPos != 0) {
        CbYTargetPos = other.CbYTargetPos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CbXSourcePos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourcePos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetPos = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CbXSourcePos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourcePos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetPos = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MoveRsp : pb::IMessage<MoveRsp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoveRsp> _parser = new pb::MessageParser<MoveRsp>(() => new MoveRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveRsp(MoveRsp other) : this() {
      cbXSourcePos_ = other.cbXSourcePos_;
      cbYSourcePos_ = other.cbYSourcePos_;
      cbXTargetPos_ = other.cbXTargetPos_;
      cbYTargetPos_ = other.cbYTargetPos_;
      wCurrentUser_ = other.wCurrentUser_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveRsp Clone() {
      return new MoveRsp(this);
    }

    /// <summary>Field number for the "cbXSourcePos" field.</summary>
    public const int CbXSourcePosFieldNumber = 1;
    private int cbXSourcePos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXSourcePos {
      get { return cbXSourcePos_; }
      set {
        cbXSourcePos_ = value;
      }
    }

    /// <summary>Field number for the "cbYSourcePos" field.</summary>
    public const int CbYSourcePosFieldNumber = 2;
    private int cbYSourcePos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYSourcePos {
      get { return cbYSourcePos_; }
      set {
        cbYSourcePos_ = value;
      }
    }

    /// <summary>Field number for the "cbXTargetPos" field.</summary>
    public const int CbXTargetPosFieldNumber = 3;
    private int cbXTargetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXTargetPos {
      get { return cbXTargetPos_; }
      set {
        cbXTargetPos_ = value;
      }
    }

    /// <summary>Field number for the "cbYTargetPos" field.</summary>
    public const int CbYTargetPosFieldNumber = 4;
    private int cbYTargetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYTargetPos {
      get { return cbYTargetPos_; }
      set {
        cbYTargetPos_ = value;
      }
    }

    /// <summary>Field number for the "wCurrentUser" field.</summary>
    public const int WCurrentUserFieldNumber = 5;
    private int wCurrentUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WCurrentUser {
      get { return wCurrentUser_; }
      set {
        wCurrentUser_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CbXSourcePos != other.CbXSourcePos) return false;
      if (CbYSourcePos != other.CbYSourcePos) return false;
      if (CbXTargetPos != other.CbXTargetPos) return false;
      if (CbYTargetPos != other.CbYTargetPos) return false;
      if (WCurrentUser != other.WCurrentUser) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CbXSourcePos != 0) hash ^= CbXSourcePos.GetHashCode();
      if (CbYSourcePos != 0) hash ^= CbYSourcePos.GetHashCode();
      if (CbXTargetPos != 0) hash ^= CbXTargetPos.GetHashCode();
      if (CbYTargetPos != 0) hash ^= CbYTargetPos.GetHashCode();
      if (WCurrentUser != 0) hash ^= WCurrentUser.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CbXSourcePos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetPos);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WCurrentUser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CbXSourcePos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetPos);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WCurrentUser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CbXSourcePos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYTargetPos);
      }
      if (WCurrentUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WCurrentUser);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveRsp other) {
      if (other == null) {
        return;
      }
      if (other.CbXSourcePos != 0) {
        CbXSourcePos = other.CbXSourcePos;
      }
      if (other.CbYSourcePos != 0) {
        CbYSourcePos = other.CbYSourcePos;
      }
      if (other.CbXTargetPos != 0) {
        CbXTargetPos = other.CbXTargetPos;
      }
      if (other.CbYTargetPos != 0) {
        CbYTargetPos = other.CbYTargetPos;
      }
      if (other.WCurrentUser != 0) {
        WCurrentUser = other.WCurrentUser;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CbXSourcePos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourcePos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetPos = input.ReadInt32();
            break;
          }
          case 40: {
            WCurrentUser = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CbXSourcePos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourcePos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetPos = input.ReadInt32();
            break;
          }
          case 40: {
            WCurrentUser = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimerPush : pb::IMessage<TimerPush>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimerPush> _parser = new pb::MessageParser<TimerPush>(() => new TimerPush());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimerPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinaChess.ChinaChessReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerPush(TimerPush other) : this() {
      chair_ = other.chair_;
      roundLeftTime_ = other.roundLeftTime_;
      stepLeftTime_ = other.stepLeftTime_;
      stepTime_ = other.stepTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimerPush Clone() {
      return new TimerPush(this);
    }

    /// <summary>Field number for the "chair" field.</summary>
    public const int ChairFieldNumber = 1;
    private int chair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chair {
      get { return chair_; }
      set {
        chair_ = value;
      }
    }

    /// <summary>Field number for the "roundLeftTime" field.</summary>
    public const int RoundLeftTimeFieldNumber = 2;
    private int roundLeftTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundLeftTime {
      get { return roundLeftTime_; }
      set {
        roundLeftTime_ = value;
      }
    }

    /// <summary>Field number for the "stepLeftTime" field.</summary>
    public const int StepLeftTimeFieldNumber = 3;
    private int stepLeftTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StepLeftTime {
      get { return stepLeftTime_; }
      set {
        stepLeftTime_ = value;
      }
    }

    /// <summary>Field number for the "stepTime" field.</summary>
    public const int StepTimeFieldNumber = 4;
    private int stepTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StepTime {
      get { return stepTime_; }
      set {
        stepTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimerPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimerPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chair != other.Chair) return false;
      if (RoundLeftTime != other.RoundLeftTime) return false;
      if (StepLeftTime != other.StepLeftTime) return false;
      if (StepTime != other.StepTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chair != 0) hash ^= Chair.GetHashCode();
      if (RoundLeftTime != 0) hash ^= RoundLeftTime.GetHashCode();
      if (StepLeftTime != 0) hash ^= StepLeftTime.GetHashCode();
      if (StepTime != 0) hash ^= StepTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (RoundLeftTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoundLeftTime);
      }
      if (StepLeftTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StepLeftTime);
      }
      if (StepTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StepTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chair != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chair);
      }
      if (RoundLeftTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoundLeftTime);
      }
      if (StepLeftTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StepLeftTime);
      }
      if (StepTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StepTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chair);
      }
      if (RoundLeftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundLeftTime);
      }
      if (StepLeftTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StepLeftTime);
      }
      if (StepTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StepTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimerPush other) {
      if (other == null) {
        return;
      }
      if (other.Chair != 0) {
        Chair = other.Chair;
      }
      if (other.RoundLeftTime != 0) {
        RoundLeftTime = other.RoundLeftTime;
      }
      if (other.StepLeftTime != 0) {
        StepLeftTime = other.StepLeftTime;
      }
      if (other.StepTime != 0) {
        StepTime = other.StepTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            RoundLeftTime = input.ReadInt32();
            break;
          }
          case 24: {
            StepLeftTime = input.ReadInt32();
            break;
          }
          case 32: {
            StepTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Chair = input.ReadInt32();
            break;
          }
          case 16: {
            RoundLeftTime = input.ReadInt32();
            break;
          }
          case 24: {
            StepLeftTime = input.ReadInt32();
            break;
          }
          case 32: {
            StepTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
