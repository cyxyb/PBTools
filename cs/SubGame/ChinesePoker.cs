// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/ChinesePoker.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ChinesePoker {

  /// <summary>Holder for reflection information generated from Proto/SubGame/ChinesePoker.proto</summary>
  public static partial class ChinesePokerReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/ChinesePoker.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChinesePokerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBQcm90by9TdWJHYW1lL0NoaW5lc2VQb2tlci5wcm90bxIMQ2hpbmVzZVBv",
            "a2VyIjEKD0NQTXNnVGFibGVTdGF0ZRINCgVzdGF0ZRgBIAEoBRIPCgdvdXRf",
            "aW1lGAIgASgFIjEKDkNQTXNnSGFuZENhcmRzEhAKCGNoYWlyX2lkGAEgASgF",
            "Eg0KBWNhcmRzGAIgAygFIksKDENQQ2FyZFN0YXR1cxIQCghjaGFpcl9pZBgB",
            "IAEoBRIMCgR0eXBlGAIgAygFEg4KBnN0YXR1cxgDIAMoBRILCgNhZGQYBCAD",
            "KAUitwEKD0NQTXNnUGxheWVySW5mbxIQCghjaGFpcl9pZBgBIAEoBRITCgtw",
            "bGF5X3N0YXR1cxgCIAEoBRIvCgtjYXJkX3N0YXR1cxgDIAEoCzIaLkNoaW5l",
            "c2VQb2tlci5DUENhcmRTdGF0dXMSDAoEZ29sZBgEIAEoAxIQCgh3aW5fZ29s",
            "ZBgFIAEoAxIsCgZoYW5kbHMYBiABKAsyHC5DaGluZXNlUG9rZXIuQ1BNc2dI",
            "YW5kQ2FyZHMipwEKDkNQTXNnU2NlbmVJbmZvEhIKCmNlbGxfc2NvcmUYASAB",
            "KAMSEwoLdGFibGVfc3RhdGUYAiABKAUSEAoIb3V0X3RpbWUYAyABKAUSEgoK",
            "dG90YWxfdGltZRgEIAEoBRIRCglzZXJ2ZXJfaWQYBSABKAUSMwoMcGxheWVy",
            "X2luZm9zGAYgAygLMh0uQ2hpbmVzZVBva2VyLkNQTXNnUGxheWVySW5mbyKJ",
            "AQoSQ1BNc2dHYW1lU3RhcnRSZXNwEiwKBmhhbmRscxgBIAEoCzIcLkNoaW5l",
            "c2VQb2tlci5DUE1zZ0hhbmRDYXJkcxIvCgtjYXJkX3N0YXR1cxgCIAEoCzIa",
            "LkNoaW5lc2VQb2tlci5DUENhcmRTdGF0dXMSFAoMc3BlY2lhbF90eXBlGAMg",
            "ASgFIjcKC0NQTXNnQWN0aW9uEgwKBHR5cGUYASABKAUSDAoEcG9zMRgCIAEo",
            "AxIMCgRwb3MyGAMgASgDIl4KFUNQTXNnTm90aWZ5QWN0aW9uUmVzcBIvCgtj",
            "YXJkX3N0YXR1cxgBIAEoCzIaLkNoaW5lc2VQb2tlci5DUENhcmRTdGF0dXMS",
            "FAoMc3BlY2lhbF90eXBlGAIgASgFInMKDENQQ2FyZFJlc3VsdBIQCghjaGFp",
            "cl9pZBgBIAEoBRINCgVzY29yZRgCIAMoAxILCgN3aW4YAyADKAgSDAoEYm9v",
            "bRgEIAEoCBITCgtzY29yZV90b3RhbBgFIAEoAxISCgpndW5rX2NoYWlyGAYg",
            "AygFIvsBCg9DUE1zZ0dhbWVSZXN1bHQSEAoIZ2FtZV90YXgYASABKAUSEgoK",
            "Z2FtZV9zY29yZRgCIAMoAxIvCgtjYXJkX3N0YXR1cxgDIAMoCzIaLkNoaW5l",
            "c2VQb2tlci5DUENhcmRTdGF0dXMSFAoMc3BlY2lhbF90eXBlGAQgAygFEi8K",
            "C2NhcmRfcmVzdWx0GAUgAygLMhouQ2hpbmVzZVBva2VyLkNQQ2FyZFJlc3Vs",
            "dBIyCgxwbGF5ZXJfaGFuZHMYBiADKAsyHC5DaGluZXNlUG9rZXIuQ1BNc2dI",
            "YW5kQ2FyZHMSFgoOYWxsX2d1bmtfY2hhaXIYByABKAUqVAoMRUNQR2FtZVN0",
            "YXRlEg8KC0dTX1RQX1JFQURZEAASDgoKR1NfVFBfREVBTBABEhEKDUdTX1RQ",
            "X1BMQVlJTkcQAhIQCgxHU19UUF9SRVNVTFQQAypLCg5FQ1BQbGF5ZXJTdGF0",
            "ZRIMCghQU19SRUFEWRAAEgsKB1BTX1BMQVkQARIOCgpQU19DT05GSVJNEAIS",
            "DgoKUFNfVElNRU9VVBADKoUCCgtFQ1BDYXJkVHlwZRINCglDVF9TSU5HTEUQ",
            "ABINCglDVF9ET1VCTEUQARIOCgpDVF9ET1VCTEVTEAISDAoIQ1RfVEhSRUUQ",
            "AxIJCgVDVF9TWhAEEgkKBUNUX1RIEAUSDAoIQ1RfSFVfTFUQBhILCgdDVF9G",
            "T1VSEAcSCgoGQ1RfVEhTEAgSDAoIQ1RfSEpUSFMQCRISCg5DVF9TUEVDSUFM",
            "X1NUSBAKEhIKDkNUX1NQRUNJQUxfU1NaEAsSEgoOQ1RfU1BFQ0lBTF9MREIQ",
            "DBISCg5DVF9TUEVDSUFMX1lUTBANEhMKD0NUX1NQRUNJQUxfWlpRTBAOEgoK",
            "BkNUX01BWBAPKoMDCg9FQ1BNc2dJRFN1YkdhbWUSFQoRTXNnSURTdWJHYW1l",
            "X051bGwQABIeChpNc2dJRFN1YkdhbWVfR2FtZVN0YXJ0UmVzcBABEhcKE01z",
            "Z0lEU3ViR2FtZV9BY3Rpb24QAhIhCh1Nc2dJRFN1YkdhbWVfTm90aWZ5QWN0",
            "aW9uUmVzcBADEhgKFE1zZ0lEU3ViR2FtZV9Db25maXJtEAQSHAoYTXNnSURT",
            "dWJHYW1lX0NvbmZpcm1SZXNwEAUSIAocTXNnSURTdWJHYW1lX05vdGlmeVN0",
            "YXRlUmVzcBAGEh8KG01zZ0lEU3ViR2FtZV9HYW1lUmVzdWx0UmVzcBAHEh4K",
            "Gk1zZ0lEU3ViR2FtZV9TdGFydFRpbWVSZXNwEAgSHQoZTXNnSURTdWJHYW1l",
            "X1RpbWVPdXRSZWFkeRAJEiEKHU1zZ0lEU3ViR2FtZV9UaW1lT3V0UmVhZHlS",
            "ZXNwEAoSIAocTXNnSURTdWJHYW1lX1RpbWVPdXRLaWNrUmVzcBALYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ChinesePoker.ECPGameState), typeof(global::ChinesePoker.ECPPlayerState), typeof(global::ChinesePoker.ECPCardType), typeof(global::ChinesePoker.ECPMsgIDSubGame), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinesePoker.CPMsgTableState), global::ChinesePoker.CPMsgTableState.Parser, new[]{ "State", "OutIme" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinesePoker.CPMsgHandCards), global::ChinesePoker.CPMsgHandCards.Parser, new[]{ "ChairId", "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinesePoker.CPCardStatus), global::ChinesePoker.CPCardStatus.Parser, new[]{ "ChairId", "Type", "Status", "Add" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinesePoker.CPMsgPlayerInfo), global::ChinesePoker.CPMsgPlayerInfo.Parser, new[]{ "ChairId", "PlayStatus", "CardStatus", "Gold", "WinGold", "Handls" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinesePoker.CPMsgSceneInfo), global::ChinesePoker.CPMsgSceneInfo.Parser, new[]{ "CellScore", "TableState", "OutTime", "TotalTime", "ServerId", "PlayerInfos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinesePoker.CPMsgGameStartResp), global::ChinesePoker.CPMsgGameStartResp.Parser, new[]{ "Handls", "CardStatus", "SpecialType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinesePoker.CPMsgAction), global::ChinesePoker.CPMsgAction.Parser, new[]{ "Type", "Pos1", "Pos2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinesePoker.CPMsgNotifyActionResp), global::ChinesePoker.CPMsgNotifyActionResp.Parser, new[]{ "CardStatus", "SpecialType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinesePoker.CPCardResult), global::ChinesePoker.CPCardResult.Parser, new[]{ "ChairId", "Score", "Win", "Boom", "ScoreTotal", "GunkChair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChinesePoker.CPMsgGameResult), global::ChinesePoker.CPMsgGameResult.Parser, new[]{ "GameTax", "GameScore", "CardStatus", "SpecialType", "CardResult", "PlayerHands", "AllGunkChair" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///桌子状态
  /// </summary>
  public enum ECPGameState {
    /// <summary>
    ///准备
    /// </summary>
    [pbr::OriginalName("GS_TP_READY")] GsTpReady = 0,
    /// <summary>
    ///发牌
    /// </summary>
    [pbr::OriginalName("GS_TP_DEAL")] GsTpDeal = 1,
    /// <summary>
    ///游戏
    /// </summary>
    [pbr::OriginalName("GS_TP_PLAYING")] GsTpPlaying = 2,
    /// <summary>
    ///结算
    /// </summary>
    [pbr::OriginalName("GS_TP_RESULT")] GsTpResult = 3,
  }

  /// <summary>
  ///玩家状态
  /// </summary>
  public enum ECPPlayerState {
    /// <summary>
    ///准备
    /// </summary>
    [pbr::OriginalName("PS_READY")] PsReady = 0,
    /// <summary>
    ///游戏
    /// </summary>
    [pbr::OriginalName("PS_PLAY")] PsPlay = 1,
    /// <summary>
    ///理牌完成
    /// </summary>
    [pbr::OriginalName("PS_CONFIRM")] PsConfirm = 2,
    /// <summary>
    ///超时
    /// </summary>
    [pbr::OriginalName("PS_TIMEOUT")] PsTimeout = 3,
  }

  /// <summary>
  ///牌型
  /// </summary>
  public enum ECPCardType {
    /// <summary>
    ///扑克类型
    /// </summary>
    [pbr::OriginalName("CT_SINGLE")] CtSingle = 0,
    /// <summary>
    ///对子类型 2张相同点数的牌+1张杂牌（第一敦） 2张相同点数的牌+3张杂牌（二、三敦）
    /// </summary>
    [pbr::OriginalName("CT_DOUBLE")] CtDouble = 1,
    /// <summary>
    ///两对类型 2副对子+1张杂牌
    /// </summary>
    [pbr::OriginalName("CT_DOUBLES")] CtDoubles = 2,
    /// <summary>
    ///三条类型 3张点数相同的牌+2张杂牌
    /// </summary>
    [pbr::OriginalName("CT_THREE")] CtThree = 3,
    /// <summary>
    ///顺子类型 5张数字连续的牌
    /// </summary>
    [pbr::OriginalName("CT_SZ")] CtSz = 4,
    /// <summary>
    ///同花类型 5张花色一样的牌
    /// </summary>
    [pbr::OriginalName("CT_TH")] CtTh = 5,
    /// <summary>
    ///葫芦类型 3张一样的牌+1对子
    /// </summary>
    [pbr::OriginalName("CT_HU_LU")] CtHuLu = 6,
    /// <summary>
    ///四条类型 4张相同点数的牌+1张杂牌
    /// </summary>
    [pbr::OriginalName("CT_FOUR")] CtFour = 7,
    /// <summary>
    ///同花顺类型 5张相同花色且数字连续的牌
    /// </summary>
    [pbr::OriginalName("CT_THS")] CtThs = 8,
    /// <summary>
    ///皇家同花顺类型 10 J Q K A 的同花顺
    /// </summary>
    [pbr::OriginalName("CT_HJTHS")] CtHjths = 9,
    /// <summary>
    ///特殊牌型 三同花
    /// </summary>
    [pbr::OriginalName("CT_SPECIAL_STH")] CtSpecialSth = 10,
    /// <summary>
    ///特殊牌型 三顺子
    /// </summary>
    [pbr::OriginalName("CT_SPECIAL_SSZ")] CtSpecialSsz = 11,
    /// <summary>
    ///特殊牌型 六对半	6副对子+1张杂牌
    /// </summary>
    [pbr::OriginalName("CT_SPECIAL_LDB")] CtSpecialLdb = 12,
    /// <summary>
    ///特殊牌型 一条龙	手牌2345678910JQKA各一张
    /// </summary>
    [pbr::OriginalName("CT_SPECIAL_YTL")] CtSpecialYtl = 13,
    /// <summary>
    ///特殊牌型 至尊青龙 同花的一条龙
    /// </summary>
    [pbr::OriginalName("CT_SPECIAL_ZZQL")] CtSpecialZzql = 14,
    /// <summary>
    ///最大牌型
    /// </summary>
    [pbr::OriginalName("CT_MAX")] CtMax = 15,
  }

  public enum ECPMsgIDSubGame {
    [pbr::OriginalName("MsgIDSubGame_Null")] MsgIdsubGameNull = 0,
    /// <summary>
    ///游戏开始发牌(CPMsgGameStartResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameStartResp")] MsgIdsubGameGameStartResp = 1,
    /// <summary>
    ///玩家操作(CPMsgAction)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_Action")] MsgIdsubGameAction = 2,
    /// <summary>
    ///玩家操作返回(CPMsgNotifyActionResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyActionResp")] MsgIdsubGameNotifyActionResp = 3,
    /// <summary>
    ///玩家确定 无
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_Confirm")] MsgIdsubGameConfirm = 4,
    /// <summary>
    ///玩家确定返回 MsgCommonN32 里面是椅子号 谁确定了已经
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_ConfirmResp")] MsgIdsubGameConfirmResp = 5,
    /// <summary>
    ///桌子状态(CPMsgTableState)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyStateResp")] MsgIdsubGameNotifyStateResp = 6,
    /// <summary>
    ///游戏结束(CPMsgGameResult)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameResultResp")] MsgIdsubGameGameResultResp = 7,
    /// <summary>
    ///有人进来刷新开始倒计时 MsgCommonN32 倒计时的时间
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_StartTimeResp")] MsgIdsubGameStartTimeResp = 8,
    /// <summary>
    ///重新准备(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutReady")] MsgIdsubGameTimeOutReady = 9,
    /// <summary>
    ///准备返回(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutReadyResp")] MsgIdsubGameTimeOutReadyResp = 10,
    /// <summary>
    ///超时踢了游戏(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_TimeOutKickResp")] MsgIdsubGameTimeOutKickResp = 11,
  }

  #endregion

  #region Messages
  public sealed partial class CPMsgTableState : pb::IMessage<CPMsgTableState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPMsgTableState> _parser = new pb::MessageParser<CPMsgTableState>(() => new CPMsgTableState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPMsgTableState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinesePoker.ChinesePokerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgTableState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgTableState(CPMsgTableState other) : this() {
      state_ = other.state_;
      outIme_ = other.outIme_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgTableState Clone() {
      return new CPMsgTableState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    /// <summary>
    ///桌子状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "out_ime" field.</summary>
    public const int OutImeFieldNumber = 2;
    private int outIme_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutIme {
      get { return outIme_; }
      set {
        outIme_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPMsgTableState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPMsgTableState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (OutIme != other.OutIme) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (OutIme != 0) hash ^= OutIme.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (OutIme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutIme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (OutIme != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OutIme);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (OutIme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutIme);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPMsgTableState other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.OutIme != 0) {
        OutIme = other.OutIme;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            OutIme = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            OutIme = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPMsgHandCards : pb::IMessage<CPMsgHandCards>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPMsgHandCards> _parser = new pb::MessageParser<CPMsgHandCards>(() => new CPMsgHandCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPMsgHandCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinesePoker.ChinesePokerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgHandCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgHandCards(CPMsgHandCards other) : this() {
      chairId_ = other.chairId_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgHandCards Clone() {
      return new CPMsgHandCards(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_cards_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> cards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPMsgHandCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPMsgHandCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPMsgHandCards other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///三墩的状态
  /// </summary>
  public sealed partial class CPCardStatus : pb::IMessage<CPCardStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPCardStatus> _parser = new pb::MessageParser<CPCardStatus>(() => new CPCardStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPCardStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinesePoker.ChinesePokerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPCardStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPCardStatus(CPCardStatus other) : this() {
      chairId_ = other.chairId_;
      type_ = other.type_.Clone();
      status_ = other.status_.Clone();
      add_ = other.add_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPCardStatus Clone() {
      return new CPCardStatus(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_type_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> type_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///三墩类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Type {
      get { return type_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_status_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> status_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///三墩状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Status {
      get { return status_; }
    }

    /// <summary>Field number for the "add" field.</summary>
    public const int AddFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_add_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> add_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///三墩加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Add {
      get { return add_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPCardStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPCardStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if(!type_.Equals(other.type_)) return false;
      if(!status_.Equals(other.status_)) return false;
      if(!add_.Equals(other.add_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      hash ^= type_.GetHashCode();
      hash ^= status_.GetHashCode();
      hash ^= add_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      type_.WriteTo(output, _repeated_type_codec);
      status_.WriteTo(output, _repeated_status_codec);
      add_.WriteTo(output, _repeated_add_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      type_.WriteTo(ref output, _repeated_type_codec);
      status_.WriteTo(ref output, _repeated_status_codec);
      add_.WriteTo(ref output, _repeated_add_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      size += type_.CalculateSize(_repeated_type_codec);
      size += status_.CalculateSize(_repeated_status_codec);
      size += add_.CalculateSize(_repeated_add_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPCardStatus other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      type_.Add(other.type_);
      status_.Add(other.status_);
      add_.Add(other.add_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            type_.AddEntriesFrom(input, _repeated_type_codec);
            break;
          }
          case 26:
          case 24: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
          case 34:
          case 32: {
            add_.AddEntriesFrom(input, _repeated_add_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            type_.AddEntriesFrom(ref input, _repeated_type_codec);
            break;
          }
          case 26:
          case 24: {
            status_.AddEntriesFrom(ref input, _repeated_status_codec);
            break;
          }
          case 34:
          case 32: {
            add_.AddEntriesFrom(ref input, _repeated_add_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CPMsgPlayerInfo : pb::IMessage<CPMsgPlayerInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPMsgPlayerInfo> _parser = new pb::MessageParser<CPMsgPlayerInfo>(() => new CPMsgPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPMsgPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinesePoker.ChinesePokerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgPlayerInfo(CPMsgPlayerInfo other) : this() {
      chairId_ = other.chairId_;
      playStatus_ = other.playStatus_;
      cardStatus_ = other.cardStatus_ != null ? other.cardStatus_.Clone() : null;
      gold_ = other.gold_;
      winGold_ = other.winGold_;
      handls_ = other.handls_ != null ? other.handls_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgPlayerInfo Clone() {
      return new CPMsgPlayerInfo(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "play_status" field.</summary>
    public const int PlayStatusFieldNumber = 2;
    private int playStatus_;
    /// <summary>
    ///玩家状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayStatus {
      get { return playStatus_; }
      set {
        playStatus_ = value;
      }
    }

    /// <summary>Field number for the "card_status" field.</summary>
    public const int CardStatusFieldNumber = 3;
    private global::ChinesePoker.CPCardStatus cardStatus_;
    /// <summary>
    ///牌的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChinesePoker.CPCardStatus CardStatus {
      get { return cardStatus_; }
      set {
        cardStatus_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 4;
    private long gold_;
    /// <summary>
    ///自己的金币，别人的是空
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 5;
    private long winGold_;
    /// <summary>
    ///输赢分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "handls" field.</summary>
    public const int HandlsFieldNumber = 6;
    private global::ChinesePoker.CPMsgHandCards handls_;
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChinesePoker.CPMsgHandCards Handls {
      get { return handls_; }
      set {
        handls_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPMsgPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPMsgPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (PlayStatus != other.PlayStatus) return false;
      if (!object.Equals(CardStatus, other.CardStatus)) return false;
      if (Gold != other.Gold) return false;
      if (WinGold != other.WinGold) return false;
      if (!object.Equals(Handls, other.Handls)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (PlayStatus != 0) hash ^= PlayStatus.GetHashCode();
      if (cardStatus_ != null) hash ^= CardStatus.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (WinGold != 0L) hash ^= WinGold.GetHashCode();
      if (handls_ != null) hash ^= Handls.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (PlayStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayStatus);
      }
      if (cardStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CardStatus);
      }
      if (Gold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Gold);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(WinGold);
      }
      if (handls_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Handls);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (PlayStatus != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayStatus);
      }
      if (cardStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CardStatus);
      }
      if (Gold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Gold);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(WinGold);
      }
      if (handls_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Handls);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (PlayStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayStatus);
      }
      if (cardStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardStatus);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (WinGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinGold);
      }
      if (handls_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Handls);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPMsgPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.PlayStatus != 0) {
        PlayStatus = other.PlayStatus;
      }
      if (other.cardStatus_ != null) {
        if (cardStatus_ == null) {
          CardStatus = new global::ChinesePoker.CPCardStatus();
        }
        CardStatus.MergeFrom(other.CardStatus);
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.WinGold != 0L) {
        WinGold = other.WinGold;
      }
      if (other.handls_ != null) {
        if (handls_ == null) {
          Handls = new global::ChinesePoker.CPMsgHandCards();
        }
        Handls.MergeFrom(other.Handls);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayStatus = input.ReadInt32();
            break;
          }
          case 26: {
            if (cardStatus_ == null) {
              CardStatus = new global::ChinesePoker.CPCardStatus();
            }
            input.ReadMessage(CardStatus);
            break;
          }
          case 32: {
            Gold = input.ReadInt64();
            break;
          }
          case 40: {
            WinGold = input.ReadInt64();
            break;
          }
          case 50: {
            if (handls_ == null) {
              Handls = new global::ChinesePoker.CPMsgHandCards();
            }
            input.ReadMessage(Handls);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            PlayStatus = input.ReadInt32();
            break;
          }
          case 26: {
            if (cardStatus_ == null) {
              CardStatus = new global::ChinesePoker.CPCardStatus();
            }
            input.ReadMessage(CardStatus);
            break;
          }
          case 32: {
            Gold = input.ReadInt64();
            break;
          }
          case 40: {
            WinGold = input.ReadInt64();
            break;
          }
          case 50: {
            if (handls_ == null) {
              Handls = new global::ChinesePoker.CPMsgHandCards();
            }
            input.ReadMessage(Handls);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class CPMsgSceneInfo : pb::IMessage<CPMsgSceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPMsgSceneInfo> _parser = new pb::MessageParser<CPMsgSceneInfo>(() => new CPMsgSceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPMsgSceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinesePoker.ChinesePokerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgSceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgSceneInfo(CPMsgSceneInfo other) : this() {
      cellScore_ = other.cellScore_;
      tableState_ = other.tableState_;
      outTime_ = other.outTime_;
      totalTime_ = other.totalTime_;
      serverId_ = other.serverId_;
      playerInfos_ = other.playerInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgSceneInfo Clone() {
      return new CPMsgSceneInfo(this);
    }

    /// <summary>Field number for the "cell_score" field.</summary>
    public const int CellScoreFieldNumber = 1;
    private long cellScore_;
    /// <summary>
    ///底分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CellScore {
      get { return cellScore_; }
      set {
        cellScore_ = value;
      }
    }

    /// <summary>Field number for the "table_state" field.</summary>
    public const int TableStateFieldNumber = 2;
    private int tableState_;
    /// <summary>
    ///桌子状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TableState {
      get { return tableState_; }
      set {
        tableState_ = value;
      }
    }

    /// <summary>Field number for the "out_time" field.</summary>
    public const int OutTimeFieldNumber = 3;
    private int outTime_;
    /// <summary>
    ///当前状态剩余超时时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutTime {
      get { return outTime_; }
      set {
        outTime_ = value;
      }
    }

    /// <summary>Field number for the "total_time" field.</summary>
    public const int TotalTimeFieldNumber = 4;
    private int totalTime_;
    /// <summary>
    ///当前状态总时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTime {
      get { return totalTime_; }
      set {
        totalTime_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 5;
    private int serverId_;
    /// <summary>
    ///房间ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "player_infos" field.</summary>
    public const int PlayerInfosFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ChinesePoker.CPMsgPlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(50, global::ChinesePoker.CPMsgPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::ChinesePoker.CPMsgPlayerInfo> playerInfos_ = new pbc::RepeatedField<global::ChinesePoker.CPMsgPlayerInfo>();
    /// <summary>
    ///玩家状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinesePoker.CPMsgPlayerInfo> PlayerInfos {
      get { return playerInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPMsgSceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPMsgSceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CellScore != other.CellScore) return false;
      if (TableState != other.TableState) return false;
      if (OutTime != other.OutTime) return false;
      if (TotalTime != other.TotalTime) return false;
      if (ServerId != other.ServerId) return false;
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CellScore != 0L) hash ^= CellScore.GetHashCode();
      if (TableState != 0) hash ^= TableState.GetHashCode();
      if (OutTime != 0) hash ^= OutTime.GetHashCode();
      if (TotalTime != 0) hash ^= TotalTime.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      hash ^= playerInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CellScore != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CellScore);
      }
      if (TableState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableState);
      }
      if (OutTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OutTime);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalTime);
      }
      if (ServerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerId);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CellScore != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CellScore);
      }
      if (TableState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TableState);
      }
      if (OutTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OutTime);
      }
      if (TotalTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalTime);
      }
      if (ServerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerId);
      }
      playerInfos_.WriteTo(ref output, _repeated_playerInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CellScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CellScore);
      }
      if (TableState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableState);
      }
      if (OutTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutTime);
      }
      if (TotalTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTime);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPMsgSceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.CellScore != 0L) {
        CellScore = other.CellScore;
      }
      if (other.TableState != 0) {
        TableState = other.TableState;
      }
      if (other.OutTime != 0) {
        OutTime = other.OutTime;
      }
      if (other.TotalTime != 0) {
        TotalTime = other.TotalTime;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      playerInfos_.Add(other.playerInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CellScore = input.ReadInt64();
            break;
          }
          case 16: {
            TableState = input.ReadInt32();
            break;
          }
          case 24: {
            OutTime = input.ReadInt32();
            break;
          }
          case 32: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 40: {
            ServerId = input.ReadInt32();
            break;
          }
          case 50: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CellScore = input.ReadInt64();
            break;
          }
          case 16: {
            TableState = input.ReadInt32();
            break;
          }
          case 24: {
            OutTime = input.ReadInt32();
            break;
          }
          case 32: {
            TotalTime = input.ReadInt32();
            break;
          }
          case 40: {
            ServerId = input.ReadInt32();
            break;
          }
          case 50: {
            playerInfos_.AddEntriesFrom(ref input, _repeated_playerInfos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏开始
  /// </summary>
  public sealed partial class CPMsgGameStartResp : pb::IMessage<CPMsgGameStartResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPMsgGameStartResp> _parser = new pb::MessageParser<CPMsgGameStartResp>(() => new CPMsgGameStartResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPMsgGameStartResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinesePoker.ChinesePokerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgGameStartResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgGameStartResp(CPMsgGameStartResp other) : this() {
      handls_ = other.handls_ != null ? other.handls_.Clone() : null;
      cardStatus_ = other.cardStatus_ != null ? other.cardStatus_.Clone() : null;
      specialType_ = other.specialType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgGameStartResp Clone() {
      return new CPMsgGameStartResp(this);
    }

    /// <summary>Field number for the "handls" field.</summary>
    public const int HandlsFieldNumber = 1;
    private global::ChinesePoker.CPMsgHandCards handls_;
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChinesePoker.CPMsgHandCards Handls {
      get { return handls_; }
      set {
        handls_ = value;
      }
    }

    /// <summary>Field number for the "card_status" field.</summary>
    public const int CardStatusFieldNumber = 2;
    private global::ChinesePoker.CPCardStatus cardStatus_;
    /// <summary>
    ///牌的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChinesePoker.CPCardStatus CardStatus {
      get { return cardStatus_; }
      set {
        cardStatus_ = value;
      }
    }

    /// <summary>Field number for the "special_type" field.</summary>
    public const int SpecialTypeFieldNumber = 3;
    private int specialType_;
    /// <summary>
    ///特殊牌型 0非特殊 其它参照牌型列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialType {
      get { return specialType_; }
      set {
        specialType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPMsgGameStartResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPMsgGameStartResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Handls, other.Handls)) return false;
      if (!object.Equals(CardStatus, other.CardStatus)) return false;
      if (SpecialType != other.SpecialType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (handls_ != null) hash ^= Handls.GetHashCode();
      if (cardStatus_ != null) hash ^= CardStatus.GetHashCode();
      if (SpecialType != 0) hash ^= SpecialType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (handls_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Handls);
      }
      if (cardStatus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CardStatus);
      }
      if (SpecialType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpecialType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (handls_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Handls);
      }
      if (cardStatus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CardStatus);
      }
      if (SpecialType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpecialType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (handls_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Handls);
      }
      if (cardStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardStatus);
      }
      if (SpecialType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPMsgGameStartResp other) {
      if (other == null) {
        return;
      }
      if (other.handls_ != null) {
        if (handls_ == null) {
          Handls = new global::ChinesePoker.CPMsgHandCards();
        }
        Handls.MergeFrom(other.Handls);
      }
      if (other.cardStatus_ != null) {
        if (cardStatus_ == null) {
          CardStatus = new global::ChinesePoker.CPCardStatus();
        }
        CardStatus.MergeFrom(other.CardStatus);
      }
      if (other.SpecialType != 0) {
        SpecialType = other.SpecialType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (handls_ == null) {
              Handls = new global::ChinesePoker.CPMsgHandCards();
            }
            input.ReadMessage(Handls);
            break;
          }
          case 18: {
            if (cardStatus_ == null) {
              CardStatus = new global::ChinesePoker.CPCardStatus();
            }
            input.ReadMessage(CardStatus);
            break;
          }
          case 24: {
            SpecialType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (handls_ == null) {
              Handls = new global::ChinesePoker.CPMsgHandCards();
            }
            input.ReadMessage(Handls);
            break;
          }
          case 18: {
            if (cardStatus_ == null) {
              CardStatus = new global::ChinesePoker.CPCardStatus();
            }
            input.ReadMessage(CardStatus);
            break;
          }
          case 24: {
            SpecialType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家操作
  /// </summary>
  public sealed partial class CPMsgAction : pb::IMessage<CPMsgAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPMsgAction> _parser = new pb::MessageParser<CPMsgAction>(() => new CPMsgAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPMsgAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinesePoker.ChinesePokerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgAction(CPMsgAction other) : this() {
      type_ = other.type_;
      pos1_ = other.pos1_;
      pos2_ = other.pos2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgAction Clone() {
      return new CPMsgAction(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///0 单牌交换 1 整列交换
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "pos1" field.</summary>
    public const int Pos1FieldNumber = 2;
    private long pos1_;
    /// <summary>
    ///交换位置1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pos1 {
      get { return pos1_; }
      set {
        pos1_ = value;
      }
    }

    /// <summary>Field number for the "pos2" field.</summary>
    public const int Pos2FieldNumber = 3;
    private long pos2_;
    /// <summary>
    ///交换位置2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pos2 {
      get { return pos2_; }
      set {
        pos2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPMsgAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPMsgAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Pos1 != other.Pos1) return false;
      if (Pos2 != other.Pos2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Pos1 != 0L) hash ^= Pos1.GetHashCode();
      if (Pos2 != 0L) hash ^= Pos2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Pos1 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Pos1);
      }
      if (Pos2 != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Pos2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Pos1 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Pos1);
      }
      if (Pos2 != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Pos2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Pos1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Pos1);
      }
      if (Pos2 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Pos2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPMsgAction other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Pos1 != 0L) {
        Pos1 = other.Pos1;
      }
      if (other.Pos2 != 0L) {
        Pos2 = other.Pos2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Pos1 = input.ReadInt64();
            break;
          }
          case 24: {
            Pos2 = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Pos1 = input.ReadInt64();
            break;
          }
          case 24: {
            Pos2 = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家操作返回
  /// </summary>
  public sealed partial class CPMsgNotifyActionResp : pb::IMessage<CPMsgNotifyActionResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPMsgNotifyActionResp> _parser = new pb::MessageParser<CPMsgNotifyActionResp>(() => new CPMsgNotifyActionResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPMsgNotifyActionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinesePoker.ChinesePokerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgNotifyActionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgNotifyActionResp(CPMsgNotifyActionResp other) : this() {
      cardStatus_ = other.cardStatus_ != null ? other.cardStatus_.Clone() : null;
      specialType_ = other.specialType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgNotifyActionResp Clone() {
      return new CPMsgNotifyActionResp(this);
    }

    /// <summary>Field number for the "card_status" field.</summary>
    public const int CardStatusFieldNumber = 1;
    private global::ChinesePoker.CPCardStatus cardStatus_;
    /// <summary>
    ///牌的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ChinesePoker.CPCardStatus CardStatus {
      get { return cardStatus_; }
      set {
        cardStatus_ = value;
      }
    }

    /// <summary>Field number for the "special_type" field.</summary>
    public const int SpecialTypeFieldNumber = 2;
    private int specialType_;
    /// <summary>
    ///特殊牌型 0非特殊 其它参照牌型列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialType {
      get { return specialType_; }
      set {
        specialType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPMsgNotifyActionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPMsgNotifyActionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardStatus, other.CardStatus)) return false;
      if (SpecialType != other.SpecialType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardStatus_ != null) hash ^= CardStatus.GetHashCode();
      if (SpecialType != 0) hash ^= SpecialType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (cardStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardStatus);
      }
      if (SpecialType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpecialType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (cardStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardStatus);
      }
      if (SpecialType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpecialType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardStatus);
      }
      if (SpecialType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpecialType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPMsgNotifyActionResp other) {
      if (other == null) {
        return;
      }
      if (other.cardStatus_ != null) {
        if (cardStatus_ == null) {
          CardStatus = new global::ChinesePoker.CPCardStatus();
        }
        CardStatus.MergeFrom(other.CardStatus);
      }
      if (other.SpecialType != 0) {
        SpecialType = other.SpecialType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardStatus_ == null) {
              CardStatus = new global::ChinesePoker.CPCardStatus();
            }
            input.ReadMessage(CardStatus);
            break;
          }
          case 16: {
            SpecialType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (cardStatus_ == null) {
              CardStatus = new global::ChinesePoker.CPCardStatus();
            }
            input.ReadMessage(CardStatus);
            break;
          }
          case 16: {
            SpecialType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///比牌的结果
  /// </summary>
  public sealed partial class CPCardResult : pb::IMessage<CPCardResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPCardResult> _parser = new pb::MessageParser<CPCardResult>(() => new CPCardResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPCardResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinesePoker.ChinesePokerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPCardResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPCardResult(CPCardResult other) : this() {
      chairId_ = other.chairId_;
      score_ = other.score_.Clone();
      win_ = other.win_.Clone();
      boom_ = other.boom_;
      scoreTotal_ = other.scoreTotal_;
      gunkChair_ = other.gunkChair_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPCardResult Clone() {
      return new CPCardResult(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_score_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> score_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///三墩结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Score {
      get { return score_; }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 3;
    private static readonly pb::FieldCodec<bool> _repeated_win_codec
        = pb::FieldCodec.ForBool(26);
    private readonly pbc::RepeatedField<bool> win_ = new pbc::RepeatedField<bool>();
    /// <summary>
    ///三墩输赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Win {
      get { return win_; }
    }

    /// <summary>Field number for the "boom" field.</summary>
    public const int BoomFieldNumber = 4;
    private bool boom_;
    /// <summary>
    ///是不是炸了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Boom {
      get { return boom_; }
      set {
        boom_ = value;
      }
    }

    /// <summary>Field number for the "score_total" field.</summary>
    public const int ScoreTotalFieldNumber = 5;
    private long scoreTotal_;
    /// <summary>
    ///总倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScoreTotal {
      get { return scoreTotal_; }
      set {
        scoreTotal_ = value;
      }
    }

    /// <summary>Field number for the "gunk_chair" field.</summary>
    public const int GunkChairFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_gunkChair_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> gunkChair_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///打枪了哪家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GunkChair {
      get { return gunkChair_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPCardResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPCardResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if(!score_.Equals(other.score_)) return false;
      if(!win_.Equals(other.win_)) return false;
      if (Boom != other.Boom) return false;
      if (ScoreTotal != other.ScoreTotal) return false;
      if(!gunkChair_.Equals(other.gunkChair_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      hash ^= score_.GetHashCode();
      hash ^= win_.GetHashCode();
      if (Boom != false) hash ^= Boom.GetHashCode();
      if (ScoreTotal != 0L) hash ^= ScoreTotal.GetHashCode();
      hash ^= gunkChair_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      score_.WriteTo(output, _repeated_score_codec);
      win_.WriteTo(output, _repeated_win_codec);
      if (Boom != false) {
        output.WriteRawTag(32);
        output.WriteBool(Boom);
      }
      if (ScoreTotal != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ScoreTotal);
      }
      gunkChair_.WriteTo(output, _repeated_gunkChair_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      score_.WriteTo(ref output, _repeated_score_codec);
      win_.WriteTo(ref output, _repeated_win_codec);
      if (Boom != false) {
        output.WriteRawTag(32);
        output.WriteBool(Boom);
      }
      if (ScoreTotal != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ScoreTotal);
      }
      gunkChair_.WriteTo(ref output, _repeated_gunkChair_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      size += score_.CalculateSize(_repeated_score_codec);
      size += win_.CalculateSize(_repeated_win_codec);
      if (Boom != false) {
        size += 1 + 1;
      }
      if (ScoreTotal != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScoreTotal);
      }
      size += gunkChair_.CalculateSize(_repeated_gunkChair_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPCardResult other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      score_.Add(other.score_);
      win_.Add(other.win_);
      if (other.Boom != false) {
        Boom = other.Boom;
      }
      if (other.ScoreTotal != 0L) {
        ScoreTotal = other.ScoreTotal;
      }
      gunkChair_.Add(other.gunkChair_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            score_.AddEntriesFrom(input, _repeated_score_codec);
            break;
          }
          case 26:
          case 24: {
            win_.AddEntriesFrom(input, _repeated_win_codec);
            break;
          }
          case 32: {
            Boom = input.ReadBool();
            break;
          }
          case 40: {
            ScoreTotal = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            gunkChair_.AddEntriesFrom(input, _repeated_gunkChair_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            score_.AddEntriesFrom(ref input, _repeated_score_codec);
            break;
          }
          case 26:
          case 24: {
            win_.AddEntriesFrom(ref input, _repeated_win_codec);
            break;
          }
          case 32: {
            Boom = input.ReadBool();
            break;
          }
          case 40: {
            ScoreTotal = input.ReadInt64();
            break;
          }
          case 50:
          case 48: {
            gunkChair_.AddEntriesFrom(ref input, _repeated_gunkChair_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏结果                                  
  /// </summary>
  public sealed partial class CPMsgGameResult : pb::IMessage<CPMsgGameResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CPMsgGameResult> _parser = new pb::MessageParser<CPMsgGameResult>(() => new CPMsgGameResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CPMsgGameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChinesePoker.ChinesePokerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgGameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgGameResult(CPMsgGameResult other) : this() {
      gameTax_ = other.gameTax_;
      gameScore_ = other.gameScore_.Clone();
      cardStatus_ = other.cardStatus_.Clone();
      specialType_ = other.specialType_.Clone();
      cardResult_ = other.cardResult_.Clone();
      playerHands_ = other.playerHands_.Clone();
      allGunkChair_ = other.allGunkChair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CPMsgGameResult Clone() {
      return new CPMsgGameResult(this);
    }

    /// <summary>Field number for the "game_tax" field.</summary>
    public const int GameTaxFieldNumber = 1;
    private int gameTax_;
    /// <summary>
    ///自己的税收
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameTax {
      get { return gameTax_; }
      set {
        gameTax_ = value;
      }
    }

    /// <summary>Field number for the "game_score" field.</summary>
    public const int GameScoreFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_gameScore_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> gameScore_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///所有玩家的总输赢分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> GameScore {
      get { return gameScore_; }
    }

    /// <summary>Field number for the "card_status" field.</summary>
    public const int CardStatusFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ChinesePoker.CPCardStatus> _repeated_cardStatus_codec
        = pb::FieldCodec.ForMessage(26, global::ChinesePoker.CPCardStatus.Parser);
    private readonly pbc::RepeatedField<global::ChinesePoker.CPCardStatus> cardStatus_ = new pbc::RepeatedField<global::ChinesePoker.CPCardStatus>();
    /// <summary>
    ///牌的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinesePoker.CPCardStatus> CardStatus {
      get { return cardStatus_; }
    }

    /// <summary>Field number for the "special_type" field.</summary>
    public const int SpecialTypeFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_specialType_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> specialType_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///特殊牌型 0非特殊 其它参照牌型列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SpecialType {
      get { return specialType_; }
    }

    /// <summary>Field number for the "card_result" field.</summary>
    public const int CardResultFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ChinesePoker.CPCardResult> _repeated_cardResult_codec
        = pb::FieldCodec.ForMessage(42, global::ChinesePoker.CPCardResult.Parser);
    private readonly pbc::RepeatedField<global::ChinesePoker.CPCardResult> cardResult_ = new pbc::RepeatedField<global::ChinesePoker.CPCardResult>();
    /// <summary>
    ///比牌的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinesePoker.CPCardResult> CardResult {
      get { return cardResult_; }
    }

    /// <summary>Field number for the "player_hands" field.</summary>
    public const int PlayerHandsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::ChinesePoker.CPMsgHandCards> _repeated_playerHands_codec
        = pb::FieldCodec.ForMessage(50, global::ChinesePoker.CPMsgHandCards.Parser);
    private readonly pbc::RepeatedField<global::ChinesePoker.CPMsgHandCards> playerHands_ = new pbc::RepeatedField<global::ChinesePoker.CPMsgHandCards>();
    /// <summary>
    ///手牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChinesePoker.CPMsgHandCards> PlayerHands {
      get { return playerHands_; }
    }

    /// <summary>Field number for the "all_gunk_chair" field.</summary>
    public const int AllGunkChairFieldNumber = 7;
    private int allGunkChair_;
    /// <summary>
    ///全垒打的座位号 0xFF 无效代表没有全垒打
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllGunkChair {
      get { return allGunkChair_; }
      set {
        allGunkChair_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CPMsgGameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CPMsgGameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameTax != other.GameTax) return false;
      if(!gameScore_.Equals(other.gameScore_)) return false;
      if(!cardStatus_.Equals(other.cardStatus_)) return false;
      if(!specialType_.Equals(other.specialType_)) return false;
      if(!cardResult_.Equals(other.cardResult_)) return false;
      if(!playerHands_.Equals(other.playerHands_)) return false;
      if (AllGunkChair != other.AllGunkChair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameTax != 0) hash ^= GameTax.GetHashCode();
      hash ^= gameScore_.GetHashCode();
      hash ^= cardStatus_.GetHashCode();
      hash ^= specialType_.GetHashCode();
      hash ^= cardResult_.GetHashCode();
      hash ^= playerHands_.GetHashCode();
      if (AllGunkChair != 0) hash ^= AllGunkChair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameTax != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameTax);
      }
      gameScore_.WriteTo(output, _repeated_gameScore_codec);
      cardStatus_.WriteTo(output, _repeated_cardStatus_codec);
      specialType_.WriteTo(output, _repeated_specialType_codec);
      cardResult_.WriteTo(output, _repeated_cardResult_codec);
      playerHands_.WriteTo(output, _repeated_playerHands_codec);
      if (AllGunkChair != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AllGunkChair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameTax != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameTax);
      }
      gameScore_.WriteTo(ref output, _repeated_gameScore_codec);
      cardStatus_.WriteTo(ref output, _repeated_cardStatus_codec);
      specialType_.WriteTo(ref output, _repeated_specialType_codec);
      cardResult_.WriteTo(ref output, _repeated_cardResult_codec);
      playerHands_.WriteTo(ref output, _repeated_playerHands_codec);
      if (AllGunkChair != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AllGunkChair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameTax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTax);
      }
      size += gameScore_.CalculateSize(_repeated_gameScore_codec);
      size += cardStatus_.CalculateSize(_repeated_cardStatus_codec);
      size += specialType_.CalculateSize(_repeated_specialType_codec);
      size += cardResult_.CalculateSize(_repeated_cardResult_codec);
      size += playerHands_.CalculateSize(_repeated_playerHands_codec);
      if (AllGunkChair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllGunkChair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CPMsgGameResult other) {
      if (other == null) {
        return;
      }
      if (other.GameTax != 0) {
        GameTax = other.GameTax;
      }
      gameScore_.Add(other.gameScore_);
      cardStatus_.Add(other.cardStatus_);
      specialType_.Add(other.specialType_);
      cardResult_.Add(other.cardResult_);
      playerHands_.Add(other.playerHands_);
      if (other.AllGunkChair != 0) {
        AllGunkChair = other.AllGunkChair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameTax = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            gameScore_.AddEntriesFrom(input, _repeated_gameScore_codec);
            break;
          }
          case 26: {
            cardStatus_.AddEntriesFrom(input, _repeated_cardStatus_codec);
            break;
          }
          case 34:
          case 32: {
            specialType_.AddEntriesFrom(input, _repeated_specialType_codec);
            break;
          }
          case 42: {
            cardResult_.AddEntriesFrom(input, _repeated_cardResult_codec);
            break;
          }
          case 50: {
            playerHands_.AddEntriesFrom(input, _repeated_playerHands_codec);
            break;
          }
          case 56: {
            AllGunkChair = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameTax = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            gameScore_.AddEntriesFrom(ref input, _repeated_gameScore_codec);
            break;
          }
          case 26: {
            cardStatus_.AddEntriesFrom(ref input, _repeated_cardStatus_codec);
            break;
          }
          case 34:
          case 32: {
            specialType_.AddEntriesFrom(ref input, _repeated_specialType_codec);
            break;
          }
          case 42: {
            cardResult_.AddEntriesFrom(ref input, _repeated_cardResult_codec);
            break;
          }
          case 50: {
            playerHands_.AddEntriesFrom(ref input, _repeated_playerHands_codec);
            break;
          }
          case 56: {
            AllGunkChair = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
