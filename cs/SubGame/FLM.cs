// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/FLM.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace FLM {

  /// <summary>Holder for reflection information generated from Proto/SubGame/FLM.proto</summary>
  public static partial class FLMReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/FLM.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FLMReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQcm90by9TdWJHYW1lL0ZMTS5wcm90bxIDRkxNIiEKCklzX0hpdEljb24S",
            "EwoLaXNfaGl0X2ljb24YASADKAgi7QEKDFNDX1NjZW5lSW5mbxIQCghjdXJf",
            "Y2hpcBgBIAEoBRIRCgljaGlwX2xpc3QYAiADKAUSEAoIZnVfc2NvcmUYAyAD",
            "KAUSDAoEaWNvbhgEIAMoBRIQCghnb2xkX251bRgFIAMoBRIfCgZpc19oaXQY",
            "BiADKAsyDy5GTE0uSXNfSGl0SWNvbhIPCgdmdV90eXBlGAcgAygFEhYKDmxp",
            "bmVfd2luX3Njb3JlGAggASgDEhEKCWZyZWVfdGltZRgJIAEoBRIVCg1nb2xk",
            "X21vZGVfbnVtGAogASgFEhIKCnRvdGFsX3JhdGUYCyABKAMiugEKEENNRF8z",
            "RF9TQ19SZXN1bHQSDAoEaWNvbhgBIAMoBRIQCghnb2xkX251bRgCIAMoBRIf",
            "CgZpc19oaXQYAyADKAsyDy5GTE0uSXNfSGl0SWNvbhIPCgdmdV90eXBlGAQg",
            "AygFEhYKDmxpbmVfd2luX3Njb3JlGAUgASgDEhEKCWZyZWVfdGltZRgGIAEo",
            "BRIVCg1nb2xkX21vZGVfbnVtGAcgASgFEhIKCnRvdGFsX3JhdGUYCCABKAMq",
            "VgoJRU1zZ0lERkxNEhUKEVNVQl9DU19HQU1FX1NUQVJUEAASFAoQU1VCX1ND",
            "X0dBTUVfT1ZFUhABEhwKGFNVQl9TQ19VUERBVEVfUFJJWkVfUE9PTBACYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::FLM.EMsgIDFLM), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FLM.Is_HitIcon), global::FLM.Is_HitIcon.Parser, new[]{ "IsHitIcon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FLM.SC_SceneInfo), global::FLM.SC_SceneInfo.Parser, new[]{ "CurChip", "ChipList", "FuScore", "Icon", "GoldNum", "IsHit", "FuType", "LineWinScore", "FreeTime", "GoldModeNum", "TotalRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FLM.CMD_3D_SC_Result), global::FLM.CMD_3D_SC_Result.Parser, new[]{ "Icon", "GoldNum", "IsHit", "FuType", "LineWinScore", "FreeTime", "GoldModeNum", "TotalRate" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDFLM {
    /// <summary>
    ///开始游戏(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_CS_GAME_START")] SubCsGameStart = 0,
    /// <summary>
    ///游戏结束(CMD_3D_SC_Result)
    /// </summary>
    [pbr::OriginalName("SUB_SC_GAME_OVER")] SubScGameOver = 1,
    /// <summary>
    ///奖池分数(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_SC_UPDATE_PRIZE_POOL")] SubScUpdatePrizePool = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Is_HitIcon : pb::IMessage<Is_HitIcon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Is_HitIcon> _parser = new pb::MessageParser<Is_HitIcon>(() => new Is_HitIcon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Is_HitIcon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FLM.FLMReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Is_HitIcon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Is_HitIcon(Is_HitIcon other) : this() {
      isHitIcon_ = other.isHitIcon_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Is_HitIcon Clone() {
      return new Is_HitIcon(this);
    }

    /// <summary>Field number for the "is_hit_icon" field.</summary>
    public const int IsHitIconFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_isHitIcon_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> isHitIcon_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> IsHitIcon {
      get { return isHitIcon_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Is_HitIcon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Is_HitIcon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!isHitIcon_.Equals(other.isHitIcon_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= isHitIcon_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      isHitIcon_.WriteTo(output, _repeated_isHitIcon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      isHitIcon_.WriteTo(ref output, _repeated_isHitIcon_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += isHitIcon_.CalculateSize(_repeated_isHitIcon_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Is_HitIcon other) {
      if (other == null) {
        return;
      }
      isHitIcon_.Add(other.isHitIcon_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            isHitIcon_.AddEntriesFrom(input, _repeated_isHitIcon_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            isHitIcon_.AddEntriesFrom(ref input, _repeated_isHitIcon_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FLM.FLMReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      curChip_ = other.curChip_;
      chipList_ = other.chipList_.Clone();
      fuScore_ = other.fuScore_.Clone();
      icon_ = other.icon_.Clone();
      goldNum_ = other.goldNum_.Clone();
      isHit_ = other.isHit_.Clone();
      fuType_ = other.fuType_.Clone();
      lineWinScore_ = other.lineWinScore_;
      freeTime_ = other.freeTime_;
      goldModeNum_ = other.goldModeNum_;
      totalRate_ = other.totalRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "cur_chip" field.</summary>
    public const int CurChipFieldNumber = 1;
    private int curChip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurChip {
      get { return curChip_; }
      set {
        curChip_ = value;
      }
    }

    /// <summary>Field number for the "chip_list" field.</summary>
    public const int ChipListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_chipList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> chipList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 下注列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ChipList {
      get { return chipList_; }
    }

    /// <summary>Field number for the "fu_score" field.</summary>
    public const int FuScoreFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_fuScore_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> fuScore_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 福倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FuScore {
      get { return fuScore_; }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 桌面结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "gold_num" field.</summary>
    public const int GoldNumFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_goldNum_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> goldNum_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 金币数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GoldNum {
      get { return goldNum_; }
    }

    /// <summary>Field number for the "is_hit" field.</summary>
    public const int IsHitFieldNumber = 6;
    private static readonly pb::FieldCodec<global::FLM.Is_HitIcon> _repeated_isHit_codec
        = pb::FieldCodec.ForMessage(50, global::FLM.Is_HitIcon.Parser);
    private readonly pbc::RepeatedField<global::FLM.Is_HitIcon> isHit_ = new pbc::RepeatedField<global::FLM.Is_HitIcon>();
    /// <summary>
    /// 是否中奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FLM.Is_HitIcon> IsHit {
      get { return isHit_; }
    }

    /// <summary>Field number for the "fu_type" field.</summary>
    public const int FuTypeFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_fuType_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> fuType_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 不知道是啥（客户端说先给0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FuType {
      get { return fuType_; }
    }

    /// <summary>Field number for the "line_win_score" field.</summary>
    public const int LineWinScoreFieldNumber = 8;
    private long lineWinScore_;
    /// <summary>
    /// 普通模式得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LineWinScore {
      get { return lineWinScore_; }
      set {
        lineWinScore_ = value;
      }
    }

    /// <summary>Field number for the "free_time" field.</summary>
    public const int FreeTimeFieldNumber = 9;
    private int freeTime_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTime {
      get { return freeTime_; }
      set {
        freeTime_ = value;
      }
    }

    /// <summary>Field number for the "gold_mode_num" field.</summary>
    public const int GoldModeNumFieldNumber = 10;
    private int goldModeNum_;
    /// <summary>
    /// 堆金积玉免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoldModeNum {
      get { return goldModeNum_; }
      set {
        goldModeNum_ = value;
      }
    }

    /// <summary>Field number for the "total_rate" field.</summary>
    public const int TotalRateFieldNumber = 11;
    private long totalRate_;
    /// <summary>
    /// 总倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalRate {
      get { return totalRate_; }
      set {
        totalRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurChip != other.CurChip) return false;
      if(!chipList_.Equals(other.chipList_)) return false;
      if(!fuScore_.Equals(other.fuScore_)) return false;
      if(!icon_.Equals(other.icon_)) return false;
      if(!goldNum_.Equals(other.goldNum_)) return false;
      if(!isHit_.Equals(other.isHit_)) return false;
      if(!fuType_.Equals(other.fuType_)) return false;
      if (LineWinScore != other.LineWinScore) return false;
      if (FreeTime != other.FreeTime) return false;
      if (GoldModeNum != other.GoldModeNum) return false;
      if (TotalRate != other.TotalRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurChip != 0) hash ^= CurChip.GetHashCode();
      hash ^= chipList_.GetHashCode();
      hash ^= fuScore_.GetHashCode();
      hash ^= icon_.GetHashCode();
      hash ^= goldNum_.GetHashCode();
      hash ^= isHit_.GetHashCode();
      hash ^= fuType_.GetHashCode();
      if (LineWinScore != 0L) hash ^= LineWinScore.GetHashCode();
      if (FreeTime != 0) hash ^= FreeTime.GetHashCode();
      if (GoldModeNum != 0) hash ^= GoldModeNum.GetHashCode();
      if (TotalRate != 0L) hash ^= TotalRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurChip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChip);
      }
      chipList_.WriteTo(output, _repeated_chipList_codec);
      fuScore_.WriteTo(output, _repeated_fuScore_codec);
      icon_.WriteTo(output, _repeated_icon_codec);
      goldNum_.WriteTo(output, _repeated_goldNum_codec);
      isHit_.WriteTo(output, _repeated_isHit_codec);
      fuType_.WriteTo(output, _repeated_fuType_codec);
      if (LineWinScore != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LineWinScore);
      }
      if (FreeTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FreeTime);
      }
      if (GoldModeNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GoldModeNum);
      }
      if (TotalRate != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(TotalRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurChip != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurChip);
      }
      chipList_.WriteTo(ref output, _repeated_chipList_codec);
      fuScore_.WriteTo(ref output, _repeated_fuScore_codec);
      icon_.WriteTo(ref output, _repeated_icon_codec);
      goldNum_.WriteTo(ref output, _repeated_goldNum_codec);
      isHit_.WriteTo(ref output, _repeated_isHit_codec);
      fuType_.WriteTo(ref output, _repeated_fuType_codec);
      if (LineWinScore != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LineWinScore);
      }
      if (FreeTime != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FreeTime);
      }
      if (GoldModeNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GoldModeNum);
      }
      if (TotalRate != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(TotalRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurChip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurChip);
      }
      size += chipList_.CalculateSize(_repeated_chipList_codec);
      size += fuScore_.CalculateSize(_repeated_fuScore_codec);
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += goldNum_.CalculateSize(_repeated_goldNum_codec);
      size += isHit_.CalculateSize(_repeated_isHit_codec);
      size += fuType_.CalculateSize(_repeated_fuType_codec);
      if (LineWinScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LineWinScore);
      }
      if (FreeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTime);
      }
      if (GoldModeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldModeNum);
      }
      if (TotalRate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurChip != 0) {
        CurChip = other.CurChip;
      }
      chipList_.Add(other.chipList_);
      fuScore_.Add(other.fuScore_);
      icon_.Add(other.icon_);
      goldNum_.Add(other.goldNum_);
      isHit_.Add(other.isHit_);
      fuType_.Add(other.fuType_);
      if (other.LineWinScore != 0L) {
        LineWinScore = other.LineWinScore;
      }
      if (other.FreeTime != 0) {
        FreeTime = other.FreeTime;
      }
      if (other.GoldModeNum != 0) {
        GoldModeNum = other.GoldModeNum;
      }
      if (other.TotalRate != 0L) {
        TotalRate = other.TotalRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurChip = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            chipList_.AddEntriesFrom(input, _repeated_chipList_codec);
            break;
          }
          case 26:
          case 24: {
            fuScore_.AddEntriesFrom(input, _repeated_fuScore_codec);
            break;
          }
          case 34:
          case 32: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 42:
          case 40: {
            goldNum_.AddEntriesFrom(input, _repeated_goldNum_codec);
            break;
          }
          case 50: {
            isHit_.AddEntriesFrom(input, _repeated_isHit_codec);
            break;
          }
          case 58:
          case 56: {
            fuType_.AddEntriesFrom(input, _repeated_fuType_codec);
            break;
          }
          case 64: {
            LineWinScore = input.ReadInt64();
            break;
          }
          case 72: {
            FreeTime = input.ReadInt32();
            break;
          }
          case 80: {
            GoldModeNum = input.ReadInt32();
            break;
          }
          case 88: {
            TotalRate = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurChip = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            chipList_.AddEntriesFrom(ref input, _repeated_chipList_codec);
            break;
          }
          case 26:
          case 24: {
            fuScore_.AddEntriesFrom(ref input, _repeated_fuScore_codec);
            break;
          }
          case 34:
          case 32: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 42:
          case 40: {
            goldNum_.AddEntriesFrom(ref input, _repeated_goldNum_codec);
            break;
          }
          case 50: {
            isHit_.AddEntriesFrom(ref input, _repeated_isHit_codec);
            break;
          }
          case 58:
          case 56: {
            fuType_.AddEntriesFrom(ref input, _repeated_fuType_codec);
            break;
          }
          case 64: {
            LineWinScore = input.ReadInt64();
            break;
          }
          case 72: {
            FreeTime = input.ReadInt32();
            break;
          }
          case 80: {
            GoldModeNum = input.ReadInt32();
            break;
          }
          case 88: {
            TotalRate = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 游戏结果返回
  /// </summary>
  public sealed partial class CMD_3D_SC_Result : pb::IMessage<CMD_3D_SC_Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_Result> _parser = new pb::MessageParser<CMD_3D_SC_Result>(() => new CMD_3D_SC_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FLM.FLMReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result(CMD_3D_SC_Result other) : this() {
      icon_ = other.icon_.Clone();
      goldNum_ = other.goldNum_.Clone();
      isHit_ = other.isHit_.Clone();
      fuType_ = other.fuType_.Clone();
      lineWinScore_ = other.lineWinScore_;
      freeTime_ = other.freeTime_;
      goldModeNum_ = other.goldModeNum_;
      totalRate_ = other.totalRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result Clone() {
      return new CMD_3D_SC_Result(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 桌面结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "gold_num" field.</summary>
    public const int GoldNumFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_goldNum_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> goldNum_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 金币数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GoldNum {
      get { return goldNum_; }
    }

    /// <summary>Field number for the "is_hit" field.</summary>
    public const int IsHitFieldNumber = 3;
    private static readonly pb::FieldCodec<global::FLM.Is_HitIcon> _repeated_isHit_codec
        = pb::FieldCodec.ForMessage(26, global::FLM.Is_HitIcon.Parser);
    private readonly pbc::RepeatedField<global::FLM.Is_HitIcon> isHit_ = new pbc::RepeatedField<global::FLM.Is_HitIcon>();
    /// <summary>
    /// 是否中奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FLM.Is_HitIcon> IsHit {
      get { return isHit_; }
    }

    /// <summary>Field number for the "fu_type" field.</summary>
    public const int FuTypeFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_fuType_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> fuType_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 不知道是啥（客户端说先给0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FuType {
      get { return fuType_; }
    }

    /// <summary>Field number for the "line_win_score" field.</summary>
    public const int LineWinScoreFieldNumber = 5;
    private long lineWinScore_;
    /// <summary>
    /// 普通模式得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LineWinScore {
      get { return lineWinScore_; }
      set {
        lineWinScore_ = value;
      }
    }

    /// <summary>Field number for the "free_time" field.</summary>
    public const int FreeTimeFieldNumber = 6;
    private int freeTime_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeTime {
      get { return freeTime_; }
      set {
        freeTime_ = value;
      }
    }

    /// <summary>Field number for the "gold_mode_num" field.</summary>
    public const int GoldModeNumFieldNumber = 7;
    private int goldModeNum_;
    /// <summary>
    /// 堆金积玉免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoldModeNum {
      get { return goldModeNum_; }
      set {
        goldModeNum_ = value;
      }
    }

    /// <summary>Field number for the "total_rate" field.</summary>
    public const int TotalRateFieldNumber = 8;
    private long totalRate_;
    /// <summary>
    /// 总倍率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalRate {
      get { return totalRate_; }
      set {
        totalRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icon_.Equals(other.icon_)) return false;
      if(!goldNum_.Equals(other.goldNum_)) return false;
      if(!isHit_.Equals(other.isHit_)) return false;
      if(!fuType_.Equals(other.fuType_)) return false;
      if (LineWinScore != other.LineWinScore) return false;
      if (FreeTime != other.FreeTime) return false;
      if (GoldModeNum != other.GoldModeNum) return false;
      if (TotalRate != other.TotalRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icon_.GetHashCode();
      hash ^= goldNum_.GetHashCode();
      hash ^= isHit_.GetHashCode();
      hash ^= fuType_.GetHashCode();
      if (LineWinScore != 0L) hash ^= LineWinScore.GetHashCode();
      if (FreeTime != 0) hash ^= FreeTime.GetHashCode();
      if (GoldModeNum != 0) hash ^= GoldModeNum.GetHashCode();
      if (TotalRate != 0L) hash ^= TotalRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      icon_.WriteTo(output, _repeated_icon_codec);
      goldNum_.WriteTo(output, _repeated_goldNum_codec);
      isHit_.WriteTo(output, _repeated_isHit_codec);
      fuType_.WriteTo(output, _repeated_fuType_codec);
      if (LineWinScore != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LineWinScore);
      }
      if (FreeTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeTime);
      }
      if (GoldModeNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GoldModeNum);
      }
      if (TotalRate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TotalRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      icon_.WriteTo(ref output, _repeated_icon_codec);
      goldNum_.WriteTo(ref output, _repeated_goldNum_codec);
      isHit_.WriteTo(ref output, _repeated_isHit_codec);
      fuType_.WriteTo(ref output, _repeated_fuType_codec);
      if (LineWinScore != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LineWinScore);
      }
      if (FreeTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeTime);
      }
      if (GoldModeNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GoldModeNum);
      }
      if (TotalRate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TotalRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += goldNum_.CalculateSize(_repeated_goldNum_codec);
      size += isHit_.CalculateSize(_repeated_isHit_codec);
      size += fuType_.CalculateSize(_repeated_fuType_codec);
      if (LineWinScore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LineWinScore);
      }
      if (FreeTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTime);
      }
      if (GoldModeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldModeNum);
      }
      if (TotalRate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_Result other) {
      if (other == null) {
        return;
      }
      icon_.Add(other.icon_);
      goldNum_.Add(other.goldNum_);
      isHit_.Add(other.isHit_);
      fuType_.Add(other.fuType_);
      if (other.LineWinScore != 0L) {
        LineWinScore = other.LineWinScore;
      }
      if (other.FreeTime != 0) {
        FreeTime = other.FreeTime;
      }
      if (other.GoldModeNum != 0) {
        GoldModeNum = other.GoldModeNum;
      }
      if (other.TotalRate != 0L) {
        TotalRate = other.TotalRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 18:
          case 16: {
            goldNum_.AddEntriesFrom(input, _repeated_goldNum_codec);
            break;
          }
          case 26: {
            isHit_.AddEntriesFrom(input, _repeated_isHit_codec);
            break;
          }
          case 34:
          case 32: {
            fuType_.AddEntriesFrom(input, _repeated_fuType_codec);
            break;
          }
          case 40: {
            LineWinScore = input.ReadInt64();
            break;
          }
          case 48: {
            FreeTime = input.ReadInt32();
            break;
          }
          case 56: {
            GoldModeNum = input.ReadInt32();
            break;
          }
          case 64: {
            TotalRate = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 18:
          case 16: {
            goldNum_.AddEntriesFrom(ref input, _repeated_goldNum_codec);
            break;
          }
          case 26: {
            isHit_.AddEntriesFrom(ref input, _repeated_isHit_codec);
            break;
          }
          case 34:
          case 32: {
            fuType_.AddEntriesFrom(ref input, _repeated_fuType_codec);
            break;
          }
          case 40: {
            LineWinScore = input.ReadInt64();
            break;
          }
          case 48: {
            FreeTime = input.ReadInt32();
            break;
          }
          case 56: {
            GoldModeNum = input.ReadInt32();
            break;
          }
          case 64: {
            TotalRate = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
