// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/AndarBahar.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AndarBahar {

  /// <summary>Holder for reflection information generated from Proto/SubGame/AndarBahar.proto</summary>
  public static partial class AndarBaharReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/AndarBahar.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AndarBaharReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5Qcm90by9TdWJHYW1lL0FuZGFyQmFoYXIucHJvdG8SCkFuZGFyQmFoYXIi",
            "KAoJQUJCZXRJbmZvEgsKA2JldBgBIAEoAxIOCgZzdGF0dXMYAiABKAUigQEK",
            "DEFCUGxheWVyRGF0YRIPCgd1c2VyX2lkGAEgASgFEhAKCHdpbl9nb2xkGAIg",
            "ASgDEhIKCnRvdGFsX3BsYXkYAyABKAUSEAoId2luX3BsYXkYBCABKAUSKAoJ",
            "YmV0X2luZm9zGAUgAygLMhUuQW5kYXJCYWhhci5BQkJldEluZm8ilgMKDE1z",
            "Z1NjZW5lSW5mbxILCgNiZXQYASADKAMSDwoHcmVjb3JkcxgCIAMoBRIRCgli",
            "ZXRfbGltaXQYAyADKAUSFgoOdXBfYmFua2VyX2xpc3QYBCADKAUSFAoMcGxh",
            "eWVyX2xpbWl0GAUgASgFEhAKCGJldF90aW1lGAYgASgFEhAKCG91dF90aW1l",
            "GAcgASgFEg0KBXN0YXRlGAggASgFEgsKA211bBgJIAMoBRIRCgliYW5rZXJf",
            "aWQYCiABKAUSEgoKYmFua2VyX21heBgLIAEoBRISCgpiYW5rZXJfbnVtGAwg",
            "ASgFEhQKDGJhbmtlcl9saW1pdBgNIAEoAxIRCgliYXNlX2NhcmQYDiABKAUS",
            "FQoNcmVkX3RvdGFsX2JldBgPIAEoAxIWCg5ibHVvX3RvdGFsX2JldBgQIAEo",
            "AxIRCglyZWRfY2FyZHMYFCADKAUSEgoKYmx1ZV9jYXJkcxgVIAMoBRItCgtw",
            "bGF5ZXJfbGlzdBgWIAMoCzIYLkFuZGFyQmFoYXIuQUJQbGF5ZXJEYXRhIkwK",
            "EE1zZ1N0YXJ0R2FtZVJlc3ASEQoJYmFua2VyX2lkGAEgASgFEhIKCmJhbmtl",
            "cl9udW0YAiABKAUSEQoJYmFzZV9jYXJkGAMgASgFIiMKBk1zZ0JldBILCgNi",
            "ZXQYASABKAMSDAoEYXJlYRgCIAEoBSJqCgpNc2dCZXRSZXNwEhAKCHJldF9j",
            "b2RlGAEgASgFEg8KB3VzZXJfaWQYAiABKAUSEAoIY2hhaXJfaWQYAyABKAUS",
            "JwoIYmV0X2luZm8YBCABKAsyFS5BbmRhckJhaGFyLkFCQmV0SW5mbyI9Cg9N",
            "c2dTZW5kQ2FyZFJlc3ASDAoEY2FyZBgBIAEoBRIMCgRhcmVhGAIgASgFEg4K",
            "BmlzX2VuZBgDIAEoCCIvCgtNc2dPcEJhbmtlchIPCgdvcF90eXBlGAEgASgF",
            "Eg8KB3VwX2dvbGQYAiABKAMiVwoPTXNnT3BCYW5rZXJSZXNwEhAKCHJldF9j",
            "b2RlGAEgASgFEg8KB3VzZXJfaWQYAiABKAUSEAoIY2hhaXJfaWQYAyABKAUS",
            "DwoHb3BfdHlwZRgEIAEoBSJiCglNc2dXaW5Nc2cSDwoHdXNlcl9pZBgBIAEo",
            "BRIQCghjaGFpcl9pZBgCIAEoBRIQCgh3aW5fZ29sZBgDIAEoAxIQCghuZXdf",
            "Z29sZBgEIAEoAxIOCgZpc193aW4YBSABKAgiRgoJTXNnUmVzdWx0EhEKCXdp",
            "bl9pbmRleBgBIAEoBRImCgd3aW5fbXNnGAIgAygLMhUuQW5kYXJCYWhhci5N",
            "c2dXaW5Nc2cqdQoKRUdhbWVTdGF0ZRIMCghHU19SZWFkeRAAEgwKCEdTX1N0",
            "YXJ0EAESCwoHR1NfQmV0MRACEgsKB0dTX0JldDIQAxIQCgxHU19TZW5kQ2Fy",
            "ZDEQBBIQCgxHU19TZW5kQ2FyZDIQBRINCglHU19SZXN1bHQQBiqSAgoNRU1z",
            "Z0lEU3ViR2FtZRIVChFNc2dJRFN1YkdhbWVfTnVsbBAAEhQKEE1zZ0lEU3Vi",
            "R2FtZV9CZXQQARIYChRNc2dJRFN1YkdhbWVfQmV0UmVzcBACEhkKFU1zZ0lE",
            "U3ViR2FtZV9PcEJhbmtlchADEh0KGU1zZ0lEU3ViR2FtZV9PcEJhbmtlclJl",
            "c3AQBBIeChpNc2dJRFN1YkdhbWVfR2FtZVN0YXJ0UmVzcBAFEh0KGU1zZ0lE",
            "U3ViR2FtZV9TZW5kQ2FyZFJlc3AQBhIfChtNc2dJRFN1YkdhbWVfR2FtZVJl",
            "c3VsdFJlc3AQBxIgChxNc2dJRFN1YkdhbWVfTm90aWZ5U3RhdGVSZXNwEAhi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AndarBahar.EGameState), typeof(global::AndarBahar.EMsgIDSubGame), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AndarBahar.ABBetInfo), global::AndarBahar.ABBetInfo.Parser, new[]{ "Bet", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AndarBahar.ABPlayerData), global::AndarBahar.ABPlayerData.Parser, new[]{ "UserId", "WinGold", "TotalPlay", "WinPlay", "BetInfos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AndarBahar.MsgSceneInfo), global::AndarBahar.MsgSceneInfo.Parser, new[]{ "Bet", "Records", "BetLimit", "UpBankerList", "PlayerLimit", "BetTime", "OutTime", "State", "Mul", "BankerId", "BankerMax", "BankerNum", "BankerLimit", "BaseCard", "RedTotalBet", "BluoTotalBet", "RedCards", "BlueCards", "PlayerList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AndarBahar.MsgStartGameResp), global::AndarBahar.MsgStartGameResp.Parser, new[]{ "BankerId", "BankerNum", "BaseCard" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AndarBahar.MsgBet), global::AndarBahar.MsgBet.Parser, new[]{ "Bet", "Area" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AndarBahar.MsgBetResp), global::AndarBahar.MsgBetResp.Parser, new[]{ "RetCode", "UserId", "ChairId", "BetInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AndarBahar.MsgSendCardResp), global::AndarBahar.MsgSendCardResp.Parser, new[]{ "Card", "Area", "IsEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AndarBahar.MsgOpBanker), global::AndarBahar.MsgOpBanker.Parser, new[]{ "OpType", "UpGold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AndarBahar.MsgOpBankerResp), global::AndarBahar.MsgOpBankerResp.Parser, new[]{ "RetCode", "UserId", "ChairId", "OpType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AndarBahar.MsgWinMsg), global::AndarBahar.MsgWinMsg.Parser, new[]{ "UserId", "ChairId", "WinGold", "NewGold", "IsWin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AndarBahar.MsgResult), global::AndarBahar.MsgResult.Parser, new[]{ "WinIndex", "WinMsg" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EGameState {
    /// <summary>
    ///准备
    /// </summary>
    [pbr::OriginalName("GS_Ready")] GsReady = 0,
    /// <summary>
    ///开始游戏
    /// </summary>
    [pbr::OriginalName("GS_Start")] GsStart = 1,
    /// <summary>
    ///下注1
    /// </summary>
    [pbr::OriginalName("GS_Bet1")] GsBet1 = 2,
    /// <summary>
    ///下注2
    /// </summary>
    [pbr::OriginalName("GS_Bet2")] GsBet2 = 3,
    /// <summary>
    ///发牌1
    /// </summary>
    [pbr::OriginalName("GS_SendCard1")] GsSendCard1 = 4,
    /// <summary>
    ///发牌2
    /// </summary>
    [pbr::OriginalName("GS_SendCard2")] GsSendCard2 = 5,
    /// <summary>
    ///结算
    /// </summary>
    [pbr::OriginalName("GS_Result")] GsResult = 6,
  }

  public enum EMsgIDSubGame {
    [pbr::OriginalName("MsgIDSubGame_Null")] MsgIdsubGameNull = 0,
    /// <summary>
    ///玩家下注(MsgBet)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_Bet")] MsgIdsubGameBet = 1,
    /// <summary>
    ///玩家下注返回(MsgBetResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_BetResp")] MsgIdsubGameBetResp = 2,
    /// <summary>
    ///玩家操作上下庄(MsgOpBanker)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_OpBanker")] MsgIdsubGameOpBanker = 3,
    /// <summary>
    ///玩家操作上下庄(MsgOpBankerResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_OpBankerResp")] MsgIdsubGameOpBankerResp = 4,
    /// <summary>
    ///游戏结果(MsgStartGameResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameStartResp")] MsgIdsubGameGameStartResp = 5,
    /// <summary>
    ///游戏结果(MsgSendCardResp)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_SendCardResp")] MsgIdsubGameSendCardResp = 6,
    /// <summary>
    ///游戏结果(MsgResult)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_GameResultResp")] MsgIdsubGameGameResultResp = 7,
    /// <summary>
    ///游戏状态(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("MsgIDSubGame_NotifyStateResp")] MsgIdsubGameNotifyStateResp = 8,
  }

  #endregion

  #region Messages
  public sealed partial class ABBetInfo : pb::IMessage<ABBetInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ABBetInfo> _parser = new pb::MessageParser<ABBetInfo>(() => new ABBetInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ABBetInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AndarBahar.AndarBaharReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABBetInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABBetInfo(ABBetInfo other) : this() {
      bet_ = other.bet_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABBetInfo Clone() {
      return new ABBetInfo(this);
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 1;
    private long bet_;
    /// <summary>
    ///下注金额  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    ///下注状态 0未操作 1 红 2 蓝 3跳过	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ABBetInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ABBetInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bet != other.Bet) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bet != 0L) hash ^= Bet.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Bet != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Bet);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Bet != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Bet);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bet);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ABBetInfo other) {
      if (other == null) {
        return;
      }
      if (other.Bet != 0L) {
        Bet = other.Bet;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Bet = input.ReadInt64();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Bet = input.ReadInt64();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ABPlayerData : pb::IMessage<ABPlayerData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ABPlayerData> _parser = new pb::MessageParser<ABPlayerData>(() => new ABPlayerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ABPlayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AndarBahar.AndarBaharReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABPlayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABPlayerData(ABPlayerData other) : this() {
      userId_ = other.userId_;
      winGold_ = other.winGold_;
      totalPlay_ = other.totalPlay_;
      winPlay_ = other.winPlay_;
      betInfos_ = other.betInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABPlayerData Clone() {
      return new ABPlayerData(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 2;
    private long winGold_;
    /// <summary>
    /// 总赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "total_play" field.</summary>
    public const int TotalPlayFieldNumber = 3;
    private int totalPlay_;
    /// <summary>
    /// 总玩次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPlay {
      get { return totalPlay_; }
      set {
        totalPlay_ = value;
      }
    }

    /// <summary>Field number for the "win_play" field.</summary>
    public const int WinPlayFieldNumber = 4;
    private int winPlay_;
    /// <summary>
    /// 赢次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinPlay {
      get { return winPlay_; }
      set {
        winPlay_ = value;
      }
    }

    /// <summary>Field number for the "bet_infos" field.</summary>
    public const int BetInfosFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AndarBahar.ABBetInfo> _repeated_betInfos_codec
        = pb::FieldCodec.ForMessage(42, global::AndarBahar.ABBetInfo.Parser);
    private readonly pbc::RepeatedField<global::AndarBahar.ABBetInfo> betInfos_ = new pbc::RepeatedField<global::AndarBahar.ABBetInfo>();
    /// <summary>
    /// 下注状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AndarBahar.ABBetInfo> BetInfos {
      get { return betInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ABPlayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ABPlayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (WinGold != other.WinGold) return false;
      if (TotalPlay != other.TotalPlay) return false;
      if (WinPlay != other.WinPlay) return false;
      if(!betInfos_.Equals(other.betInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (WinGold != 0L) hash ^= WinGold.GetHashCode();
      if (TotalPlay != 0) hash ^= TotalPlay.GetHashCode();
      if (WinPlay != 0) hash ^= WinPlay.GetHashCode();
      hash ^= betInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WinGold);
      }
      if (TotalPlay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalPlay);
      }
      if (WinPlay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WinPlay);
      }
      betInfos_.WriteTo(output, _repeated_betInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WinGold);
      }
      if (TotalPlay != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalPlay);
      }
      if (WinPlay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WinPlay);
      }
      betInfos_.WriteTo(ref output, _repeated_betInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (WinGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinGold);
      }
      if (TotalPlay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPlay);
      }
      if (WinPlay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinPlay);
      }
      size += betInfos_.CalculateSize(_repeated_betInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ABPlayerData other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.WinGold != 0L) {
        WinGold = other.WinGold;
      }
      if (other.TotalPlay != 0) {
        TotalPlay = other.TotalPlay;
      }
      if (other.WinPlay != 0) {
        WinPlay = other.WinPlay;
      }
      betInfos_.Add(other.betInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            WinGold = input.ReadInt64();
            break;
          }
          case 24: {
            TotalPlay = input.ReadInt32();
            break;
          }
          case 32: {
            WinPlay = input.ReadInt32();
            break;
          }
          case 42: {
            betInfos_.AddEntriesFrom(input, _repeated_betInfos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            WinGold = input.ReadInt64();
            break;
          }
          case 24: {
            TotalPlay = input.ReadInt32();
            break;
          }
          case 32: {
            WinPlay = input.ReadInt32();
            break;
          }
          case 42: {
            betInfos_.AddEntriesFrom(ref input, _repeated_betInfos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class MsgSceneInfo : pb::IMessage<MsgSceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgSceneInfo> _parser = new pb::MessageParser<MsgSceneInfo>(() => new MsgSceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgSceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AndarBahar.AndarBaharReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSceneInfo(MsgSceneInfo other) : this() {
      bet_ = other.bet_.Clone();
      records_ = other.records_.Clone();
      betLimit_ = other.betLimit_.Clone();
      upBankerList_ = other.upBankerList_.Clone();
      playerLimit_ = other.playerLimit_;
      betTime_ = other.betTime_;
      outTime_ = other.outTime_;
      state_ = other.state_;
      mul_ = other.mul_.Clone();
      bankerId_ = other.bankerId_;
      bankerMax_ = other.bankerMax_;
      bankerNum_ = other.bankerNum_;
      bankerLimit_ = other.bankerLimit_;
      baseCard_ = other.baseCard_;
      redTotalBet_ = other.redTotalBet_;
      bluoTotalBet_ = other.bluoTotalBet_;
      redCards_ = other.redCards_.Clone();
      blueCards_ = other.blueCards_.Clone();
      playerList_ = other.playerList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSceneInfo Clone() {
      return new MsgSceneInfo(this);
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_bet_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> bet_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///固定押注配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Bet {
      get { return bet_; }
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_records_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> records_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///开牌结果(1:红 2:黑)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "bet_limit" field.</summary>
    public const int BetLimitFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_betLimit_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> betLimit_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///个人区域限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BetLimit {
      get { return betLimit_; }
    }

    /// <summary>Field number for the "up_banker_list" field.</summary>
    public const int UpBankerListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_upBankerList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> upBankerList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///上庄申列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> UpBankerList {
      get { return upBankerList_; }
    }

    /// <summary>Field number for the "player_limit" field.</summary>
    public const int PlayerLimitFieldNumber = 5;
    private int playerLimit_;
    /// <summary>
    ///个人下注限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLimit {
      get { return playerLimit_; }
      set {
        playerLimit_ = value;
      }
    }

    /// <summary>Field number for the "bet_time" field.</summary>
    public const int BetTimeFieldNumber = 6;
    private int betTime_;
    /// <summary>
    ///下注总时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BetTime {
      get { return betTime_; }
      set {
        betTime_ = value;
      }
    }

    /// <summary>Field number for the "out_time" field.</summary>
    public const int OutTimeFieldNumber = 7;
    private int outTime_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutTime {
      get { return outTime_; }
      set {
        outTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 8;
    private int state_;
    /// <summary>
    ///当前状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "mul" field.</summary>
    public const int MulFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_mul_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> mul_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///倍数(红、黑、)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Mul {
      get { return mul_; }
    }

    /// <summary>Field number for the "banker_id" field.</summary>
    public const int BankerIdFieldNumber = 10;
    private int bankerId_;
    /// <summary>
    ///庄ID  -1=系统庄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerId {
      get { return bankerId_; }
      set {
        bankerId_ = value;
      }
    }

    /// <summary>Field number for the "banker_max" field.</summary>
    public const int BankerMaxFieldNumber = 11;
    private int bankerMax_;
    /// <summary>
    ///当庄最大轮数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerMax {
      get { return bankerMax_; }
      set {
        bankerMax_ = value;
      }
    }

    /// <summary>Field number for the "banker_num" field.</summary>
    public const int BankerNumFieldNumber = 12;
    private int bankerNum_;
    /// <summary>
    ///已经上庄轮数 包涵本局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerNum {
      get { return bankerNum_; }
      set {
        bankerNum_ = value;
      }
    }

    /// <summary>Field number for the "banker_limit" field.</summary>
    public const int BankerLimitFieldNumber = 13;
    private long bankerLimit_;
    /// <summary>
    ///上庄金币限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BankerLimit {
      get { return bankerLimit_; }
      set {
        bankerLimit_ = value;
      }
    }

    /// <summary>Field number for the "base_card" field.</summary>
    public const int BaseCardFieldNumber = 14;
    private int baseCard_;
    /// <summary>
    ///底牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseCard {
      get { return baseCard_; }
      set {
        baseCard_ = value;
      }
    }

    /// <summary>Field number for the "red_total_bet" field.</summary>
    public const int RedTotalBetFieldNumber = 15;
    private long redTotalBet_;
    /// <summary>
    ///红方总下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RedTotalBet {
      get { return redTotalBet_; }
      set {
        redTotalBet_ = value;
      }
    }

    /// <summary>Field number for the "bluo_total_bet" field.</summary>
    public const int BluoTotalBetFieldNumber = 16;
    private long bluoTotalBet_;
    /// <summary>
    ///蓝方总下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BluoTotalBet {
      get { return bluoTotalBet_; }
      set {
        bluoTotalBet_ = value;
      }
    }

    /// <summary>Field number for the "red_cards" field.</summary>
    public const int RedCardsFieldNumber = 20;
    private static readonly pb::FieldCodec<int> _repeated_redCards_codec
        = pb::FieldCodec.ForInt32(162);
    private readonly pbc::RepeatedField<int> redCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///红方牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RedCards {
      get { return redCards_; }
    }

    /// <summary>Field number for the "blue_cards" field.</summary>
    public const int BlueCardsFieldNumber = 21;
    private static readonly pb::FieldCodec<int> _repeated_blueCards_codec
        = pb::FieldCodec.ForInt32(170);
    private readonly pbc::RepeatedField<int> blueCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///蓝方牌列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BlueCards {
      get { return blueCards_; }
    }

    /// <summary>Field number for the "player_list" field.</summary>
    public const int PlayerListFieldNumber = 22;
    private static readonly pb::FieldCodec<global::AndarBahar.ABPlayerData> _repeated_playerList_codec
        = pb::FieldCodec.ForMessage(178, global::AndarBahar.ABPlayerData.Parser);
    private readonly pbc::RepeatedField<global::AndarBahar.ABPlayerData> playerList_ = new pbc::RepeatedField<global::AndarBahar.ABPlayerData>();
    /// <summary>
    ///玩家状态	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AndarBahar.ABPlayerData> PlayerList {
      get { return playerList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgSceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgSceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bet_.Equals(other.bet_)) return false;
      if(!records_.Equals(other.records_)) return false;
      if(!betLimit_.Equals(other.betLimit_)) return false;
      if(!upBankerList_.Equals(other.upBankerList_)) return false;
      if (PlayerLimit != other.PlayerLimit) return false;
      if (BetTime != other.BetTime) return false;
      if (OutTime != other.OutTime) return false;
      if (State != other.State) return false;
      if(!mul_.Equals(other.mul_)) return false;
      if (BankerId != other.BankerId) return false;
      if (BankerMax != other.BankerMax) return false;
      if (BankerNum != other.BankerNum) return false;
      if (BankerLimit != other.BankerLimit) return false;
      if (BaseCard != other.BaseCard) return false;
      if (RedTotalBet != other.RedTotalBet) return false;
      if (BluoTotalBet != other.BluoTotalBet) return false;
      if(!redCards_.Equals(other.redCards_)) return false;
      if(!blueCards_.Equals(other.blueCards_)) return false;
      if(!playerList_.Equals(other.playerList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bet_.GetHashCode();
      hash ^= records_.GetHashCode();
      hash ^= betLimit_.GetHashCode();
      hash ^= upBankerList_.GetHashCode();
      if (PlayerLimit != 0) hash ^= PlayerLimit.GetHashCode();
      if (BetTime != 0) hash ^= BetTime.GetHashCode();
      if (OutTime != 0) hash ^= OutTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= mul_.GetHashCode();
      if (BankerId != 0) hash ^= BankerId.GetHashCode();
      if (BankerMax != 0) hash ^= BankerMax.GetHashCode();
      if (BankerNum != 0) hash ^= BankerNum.GetHashCode();
      if (BankerLimit != 0L) hash ^= BankerLimit.GetHashCode();
      if (BaseCard != 0) hash ^= BaseCard.GetHashCode();
      if (RedTotalBet != 0L) hash ^= RedTotalBet.GetHashCode();
      if (BluoTotalBet != 0L) hash ^= BluoTotalBet.GetHashCode();
      hash ^= redCards_.GetHashCode();
      hash ^= blueCards_.GetHashCode();
      hash ^= playerList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      bet_.WriteTo(output, _repeated_bet_codec);
      records_.WriteTo(output, _repeated_records_codec);
      betLimit_.WriteTo(output, _repeated_betLimit_codec);
      upBankerList_.WriteTo(output, _repeated_upBankerList_codec);
      if (PlayerLimit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerLimit);
      }
      if (BetTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BetTime);
      }
      if (OutTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OutTime);
      }
      if (State != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(State);
      }
      mul_.WriteTo(output, _repeated_mul_codec);
      if (BankerId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BankerId);
      }
      if (BankerMax != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BankerMax);
      }
      if (BankerNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BankerNum);
      }
      if (BankerLimit != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(BankerLimit);
      }
      if (BaseCard != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BaseCard);
      }
      if (RedTotalBet != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(RedTotalBet);
      }
      if (BluoTotalBet != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(BluoTotalBet);
      }
      redCards_.WriteTo(output, _repeated_redCards_codec);
      blueCards_.WriteTo(output, _repeated_blueCards_codec);
      playerList_.WriteTo(output, _repeated_playerList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      bet_.WriteTo(ref output, _repeated_bet_codec);
      records_.WriteTo(ref output, _repeated_records_codec);
      betLimit_.WriteTo(ref output, _repeated_betLimit_codec);
      upBankerList_.WriteTo(ref output, _repeated_upBankerList_codec);
      if (PlayerLimit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerLimit);
      }
      if (BetTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BetTime);
      }
      if (OutTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OutTime);
      }
      if (State != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(State);
      }
      mul_.WriteTo(ref output, _repeated_mul_codec);
      if (BankerId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BankerId);
      }
      if (BankerMax != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(BankerMax);
      }
      if (BankerNum != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(BankerNum);
      }
      if (BankerLimit != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(BankerLimit);
      }
      if (BaseCard != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(BaseCard);
      }
      if (RedTotalBet != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(RedTotalBet);
      }
      if (BluoTotalBet != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(BluoTotalBet);
      }
      redCards_.WriteTo(ref output, _repeated_redCards_codec);
      blueCards_.WriteTo(ref output, _repeated_blueCards_codec);
      playerList_.WriteTo(ref output, _repeated_playerList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bet_.CalculateSize(_repeated_bet_codec);
      size += records_.CalculateSize(_repeated_records_codec);
      size += betLimit_.CalculateSize(_repeated_betLimit_codec);
      size += upBankerList_.CalculateSize(_repeated_upBankerList_codec);
      if (PlayerLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerLimit);
      }
      if (BetTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BetTime);
      }
      if (OutTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      size += mul_.CalculateSize(_repeated_mul_codec);
      if (BankerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerId);
      }
      if (BankerMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerMax);
      }
      if (BankerNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerNum);
      }
      if (BankerLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BankerLimit);
      }
      if (BaseCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseCard);
      }
      if (RedTotalBet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RedTotalBet);
      }
      if (BluoTotalBet != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BluoTotalBet);
      }
      size += redCards_.CalculateSize(_repeated_redCards_codec);
      size += blueCards_.CalculateSize(_repeated_blueCards_codec);
      size += playerList_.CalculateSize(_repeated_playerList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgSceneInfo other) {
      if (other == null) {
        return;
      }
      bet_.Add(other.bet_);
      records_.Add(other.records_);
      betLimit_.Add(other.betLimit_);
      upBankerList_.Add(other.upBankerList_);
      if (other.PlayerLimit != 0) {
        PlayerLimit = other.PlayerLimit;
      }
      if (other.BetTime != 0) {
        BetTime = other.BetTime;
      }
      if (other.OutTime != 0) {
        OutTime = other.OutTime;
      }
      if (other.State != 0) {
        State = other.State;
      }
      mul_.Add(other.mul_);
      if (other.BankerId != 0) {
        BankerId = other.BankerId;
      }
      if (other.BankerMax != 0) {
        BankerMax = other.BankerMax;
      }
      if (other.BankerNum != 0) {
        BankerNum = other.BankerNum;
      }
      if (other.BankerLimit != 0L) {
        BankerLimit = other.BankerLimit;
      }
      if (other.BaseCard != 0) {
        BaseCard = other.BaseCard;
      }
      if (other.RedTotalBet != 0L) {
        RedTotalBet = other.RedTotalBet;
      }
      if (other.BluoTotalBet != 0L) {
        BluoTotalBet = other.BluoTotalBet;
      }
      redCards_.Add(other.redCards_);
      blueCards_.Add(other.blueCards_);
      playerList_.Add(other.playerList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
          case 18:
          case 16: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 26:
          case 24: {
            betLimit_.AddEntriesFrom(input, _repeated_betLimit_codec);
            break;
          }
          case 34:
          case 32: {
            upBankerList_.AddEntriesFrom(input, _repeated_upBankerList_codec);
            break;
          }
          case 40: {
            PlayerLimit = input.ReadInt32();
            break;
          }
          case 48: {
            BetTime = input.ReadInt32();
            break;
          }
          case 56: {
            OutTime = input.ReadInt32();
            break;
          }
          case 64: {
            State = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            mul_.AddEntriesFrom(input, _repeated_mul_codec);
            break;
          }
          case 80: {
            BankerId = input.ReadInt32();
            break;
          }
          case 88: {
            BankerMax = input.ReadInt32();
            break;
          }
          case 96: {
            BankerNum = input.ReadInt32();
            break;
          }
          case 104: {
            BankerLimit = input.ReadInt64();
            break;
          }
          case 112: {
            BaseCard = input.ReadInt32();
            break;
          }
          case 120: {
            RedTotalBet = input.ReadInt64();
            break;
          }
          case 128: {
            BluoTotalBet = input.ReadInt64();
            break;
          }
          case 162:
          case 160: {
            redCards_.AddEntriesFrom(input, _repeated_redCards_codec);
            break;
          }
          case 170:
          case 168: {
            blueCards_.AddEntriesFrom(input, _repeated_blueCards_codec);
            break;
          }
          case 178: {
            playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
          case 18:
          case 16: {
            records_.AddEntriesFrom(ref input, _repeated_records_codec);
            break;
          }
          case 26:
          case 24: {
            betLimit_.AddEntriesFrom(ref input, _repeated_betLimit_codec);
            break;
          }
          case 34:
          case 32: {
            upBankerList_.AddEntriesFrom(ref input, _repeated_upBankerList_codec);
            break;
          }
          case 40: {
            PlayerLimit = input.ReadInt32();
            break;
          }
          case 48: {
            BetTime = input.ReadInt32();
            break;
          }
          case 56: {
            OutTime = input.ReadInt32();
            break;
          }
          case 64: {
            State = input.ReadInt32();
            break;
          }
          case 74:
          case 72: {
            mul_.AddEntriesFrom(ref input, _repeated_mul_codec);
            break;
          }
          case 80: {
            BankerId = input.ReadInt32();
            break;
          }
          case 88: {
            BankerMax = input.ReadInt32();
            break;
          }
          case 96: {
            BankerNum = input.ReadInt32();
            break;
          }
          case 104: {
            BankerLimit = input.ReadInt64();
            break;
          }
          case 112: {
            BaseCard = input.ReadInt32();
            break;
          }
          case 120: {
            RedTotalBet = input.ReadInt64();
            break;
          }
          case 128: {
            BluoTotalBet = input.ReadInt64();
            break;
          }
          case 162:
          case 160: {
            redCards_.AddEntriesFrom(ref input, _repeated_redCards_codec);
            break;
          }
          case 170:
          case 168: {
            blueCards_.AddEntriesFrom(ref input, _repeated_blueCards_codec);
            break;
          }
          case 178: {
            playerList_.AddEntriesFrom(ref input, _repeated_playerList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///开始游戏
  /// </summary>
  public sealed partial class MsgStartGameResp : pb::IMessage<MsgStartGameResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgStartGameResp> _parser = new pb::MessageParser<MsgStartGameResp>(() => new MsgStartGameResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgStartGameResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AndarBahar.AndarBaharReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgStartGameResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgStartGameResp(MsgStartGameResp other) : this() {
      bankerId_ = other.bankerId_;
      bankerNum_ = other.bankerNum_;
      baseCard_ = other.baseCard_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgStartGameResp Clone() {
      return new MsgStartGameResp(this);
    }

    /// <summary>Field number for the "banker_id" field.</summary>
    public const int BankerIdFieldNumber = 1;
    private int bankerId_;
    /// <summary>
    ///庄ID  -1=系统庄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerId {
      get { return bankerId_; }
      set {
        bankerId_ = value;
      }
    }

    /// <summary>Field number for the "banker_num" field.</summary>
    public const int BankerNumFieldNumber = 2;
    private int bankerNum_;
    /// <summary>
    ///已经上庄轮数 包涵本局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BankerNum {
      get { return bankerNum_; }
      set {
        bankerNum_ = value;
      }
    }

    /// <summary>Field number for the "base_card" field.</summary>
    public const int BaseCardFieldNumber = 3;
    private int baseCard_;
    /// <summary>
    ///底牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseCard {
      get { return baseCard_; }
      set {
        baseCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgStartGameResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgStartGameResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BankerId != other.BankerId) return false;
      if (BankerNum != other.BankerNum) return false;
      if (BaseCard != other.BaseCard) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BankerId != 0) hash ^= BankerId.GetHashCode();
      if (BankerNum != 0) hash ^= BankerNum.GetHashCode();
      if (BaseCard != 0) hash ^= BaseCard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BankerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BankerId);
      }
      if (BankerNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BankerNum);
      }
      if (BaseCard != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BaseCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BankerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BankerId);
      }
      if (BankerNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BankerNum);
      }
      if (BaseCard != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BaseCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BankerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerId);
      }
      if (BankerNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BankerNum);
      }
      if (BaseCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseCard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgStartGameResp other) {
      if (other == null) {
        return;
      }
      if (other.BankerId != 0) {
        BankerId = other.BankerId;
      }
      if (other.BankerNum != 0) {
        BankerNum = other.BankerNum;
      }
      if (other.BaseCard != 0) {
        BaseCard = other.BaseCard;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BankerId = input.ReadInt32();
            break;
          }
          case 16: {
            BankerNum = input.ReadInt32();
            break;
          }
          case 24: {
            BaseCard = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BankerId = input.ReadInt32();
            break;
          }
          case 16: {
            BankerNum = input.ReadInt32();
            break;
          }
          case 24: {
            BaseCard = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家下注
  /// </summary>
  public sealed partial class MsgBet : pb::IMessage<MsgBet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgBet> _parser = new pb::MessageParser<MsgBet>(() => new MsgBet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AndarBahar.AndarBaharReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBet(MsgBet other) : this() {
      bet_ = other.bet_;
      area_ = other.area_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBet Clone() {
      return new MsgBet(this);
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 1;
    private long bet_;
    /// <summary>
    ///押注金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 2;
    private int area_;
    /// <summary>
    ///押注区域(0:跳过 1:红 2:蓝 )
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bet != other.Bet) return false;
      if (Area != other.Area) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bet != 0L) hash ^= Bet.GetHashCode();
      if (Area != 0) hash ^= Area.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Bet != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Bet);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Bet != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Bet);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bet);
      }
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Area);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgBet other) {
      if (other == null) {
        return;
      }
      if (other.Bet != 0L) {
        Bet = other.Bet;
      }
      if (other.Area != 0) {
        Area = other.Area;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Bet = input.ReadInt64();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Bet = input.ReadInt64();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家下注返回
  /// </summary>
  public sealed partial class MsgBetResp : pb::IMessage<MsgBetResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgBetResp> _parser = new pb::MessageParser<MsgBetResp>(() => new MsgBetResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgBetResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AndarBahar.AndarBaharReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBetResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBetResp(MsgBetResp other) : this() {
      retCode_ = other.retCode_;
      userId_ = other.userId_;
      chairId_ = other.chairId_;
      betInfo_ = other.betInfo_ != null ? other.betInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgBetResp Clone() {
      return new MsgBetResp(this);
    }

    /// <summary>Field number for the "ret_code" field.</summary>
    public const int RetCodeFieldNumber = 1;
    private int retCode_;
    /// <summary>
    ///返回码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 3;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "bet_info" field.</summary>
    public const int BetInfoFieldNumber = 4;
    private global::AndarBahar.ABBetInfo betInfo_;
    /// <summary>
    ///玩家下注信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AndarBahar.ABBetInfo BetInfo {
      get { return betInfo_; }
      set {
        betInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgBetResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgBetResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetCode != other.RetCode) return false;
      if (UserId != other.UserId) return false;
      if (ChairId != other.ChairId) return false;
      if (!object.Equals(BetInfo, other.BetInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RetCode != 0) hash ^= RetCode.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (betInfo_ != null) hash ^= BetInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RetCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairId);
      }
      if (betInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BetInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RetCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairId);
      }
      if (betInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BetInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (betInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BetInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgBetResp other) {
      if (other == null) {
        return;
      }
      if (other.RetCode != 0) {
        RetCode = other.RetCode;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.betInfo_ != null) {
        if (betInfo_ == null) {
          BetInfo = new global::AndarBahar.ABBetInfo();
        }
        BetInfo.MergeFrom(other.BetInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 24: {
            ChairId = input.ReadInt32();
            break;
          }
          case 34: {
            if (betInfo_ == null) {
              BetInfo = new global::AndarBahar.ABBetInfo();
            }
            input.ReadMessage(BetInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 24: {
            ChairId = input.ReadInt32();
            break;
          }
          case 34: {
            if (betInfo_ == null) {
              BetInfo = new global::AndarBahar.ABBetInfo();
            }
            input.ReadMessage(BetInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MsgSendCardResp : pb::IMessage<MsgSendCardResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgSendCardResp> _parser = new pb::MessageParser<MsgSendCardResp>(() => new MsgSendCardResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgSendCardResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AndarBahar.AndarBaharReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSendCardResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSendCardResp(MsgSendCardResp other) : this() {
      card_ = other.card_;
      area_ = other.area_;
      isEnd_ = other.isEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSendCardResp Clone() {
      return new MsgSendCardResp(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private int card_;
    /// <summary>
    ///牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 2;
    private int area_;
    /// <summary>
    ///发牌区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "is_end" field.</summary>
    public const int IsEndFieldNumber = 3;
    private bool isEnd_;
    /// <summary>
    ///是否结束 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnd {
      get { return isEnd_; }
      set {
        isEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgSendCardResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgSendCardResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Card != other.Card) return false;
      if (Area != other.Area) return false;
      if (IsEnd != other.IsEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Card != 0) hash ^= Card.GetHashCode();
      if (Area != 0) hash ^= Area.GetHashCode();
      if (IsEnd != false) hash ^= IsEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Card != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Card);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (IsEnd != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Card != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Card);
      }
      if (Area != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Area);
      }
      if (IsEnd != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Card != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Card);
      }
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Area);
      }
      if (IsEnd != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgSendCardResp other) {
      if (other == null) {
        return;
      }
      if (other.Card != 0) {
        Card = other.Card;
      }
      if (other.Area != 0) {
        Area = other.Area;
      }
      if (other.IsEnd != false) {
        IsEnd = other.IsEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Card = input.ReadInt32();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
          case 24: {
            IsEnd = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Card = input.ReadInt32();
            break;
          }
          case 16: {
            Area = input.ReadInt32();
            break;
          }
          case 24: {
            IsEnd = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///操作庄
  /// </summary>
  public sealed partial class MsgOpBanker : pb::IMessage<MsgOpBanker>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgOpBanker> _parser = new pb::MessageParser<MsgOpBanker>(() => new MsgOpBanker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgOpBanker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AndarBahar.AndarBaharReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOpBanker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOpBanker(MsgOpBanker other) : this() {
      opType_ = other.opType_;
      upGold_ = other.upGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOpBanker Clone() {
      return new MsgOpBanker(this);
    }

    /// <summary>Field number for the "op_type" field.</summary>
    public const int OpTypeFieldNumber = 1;
    private int opType_;
    /// <summary>
    /// 1 = 上庄 2 = 下庄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "up_gold" field.</summary>
    public const int UpGoldFieldNumber = 2;
    private long upGold_;
    /// <summary>
    /// 携带金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpGold {
      get { return upGold_; }
      set {
        upGold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgOpBanker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgOpBanker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpType != other.OpType) return false;
      if (UpGold != other.UpGold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpType != 0) hash ^= OpType.GetHashCode();
      if (UpGold != 0L) hash ^= UpGold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OpType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OpType);
      }
      if (UpGold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UpGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OpType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OpType);
      }
      if (UpGold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UpGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpType);
      }
      if (UpGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpGold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgOpBanker other) {
      if (other == null) {
        return;
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
      if (other.UpGold != 0L) {
        UpGold = other.UpGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OpType = input.ReadInt32();
            break;
          }
          case 16: {
            UpGold = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OpType = input.ReadInt32();
            break;
          }
          case 16: {
            UpGold = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///操作庄
  /// </summary>
  public sealed partial class MsgOpBankerResp : pb::IMessage<MsgOpBankerResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgOpBankerResp> _parser = new pb::MessageParser<MsgOpBankerResp>(() => new MsgOpBankerResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgOpBankerResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AndarBahar.AndarBaharReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOpBankerResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOpBankerResp(MsgOpBankerResp other) : this() {
      retCode_ = other.retCode_;
      userId_ = other.userId_;
      chairId_ = other.chairId_;
      opType_ = other.opType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOpBankerResp Clone() {
      return new MsgOpBankerResp(this);
    }

    /// <summary>Field number for the "ret_code" field.</summary>
    public const int RetCodeFieldNumber = 1;
    private int retCode_;
    /// <summary>
    ///返回码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private int userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 3;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "op_type" field.</summary>
    public const int OpTypeFieldNumber = 4;
    private int opType_;
    /// <summary>
    /// 1 = 上庄 2 = 下庄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgOpBankerResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgOpBankerResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RetCode != other.RetCode) return false;
      if (UserId != other.UserId) return false;
      if (ChairId != other.ChairId) return false;
      if (OpType != other.OpType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RetCode != 0) hash ^= RetCode.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (OpType != 0) hash ^= OpType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RetCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairId);
      }
      if (OpType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OpType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RetCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChairId);
      }
      if (OpType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OpType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgOpBankerResp other) {
      if (other == null) {
        return;
      }
      if (other.RetCode != 0) {
        RetCode = other.RetCode;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 24: {
            ChairId = input.ReadInt32();
            break;
          }
          case 32: {
            OpType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt32();
            break;
          }
          case 24: {
            ChairId = input.ReadInt32();
            break;
          }
          case 32: {
            OpType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///玩家输赢信息                              
  /// </summary>
  public sealed partial class MsgWinMsg : pb::IMessage<MsgWinMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgWinMsg> _parser = new pb::MessageParser<MsgWinMsg>(() => new MsgWinMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgWinMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AndarBahar.AndarBaharReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgWinMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgWinMsg(MsgWinMsg other) : this() {
      userId_ = other.userId_;
      chairId_ = other.chairId_;
      winGold_ = other.winGold_;
      newGold_ = other.newGold_;
      isWin_ = other.isWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgWinMsg Clone() {
      return new MsgWinMsg(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 2;
    private int chairId_;
    /// <summary>
    ///玩家椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "win_gold" field.</summary>
    public const int WinGoldFieldNumber = 3;
    private long winGold_;
    /// <summary>
    ///玩家输赢信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinGold {
      get { return winGold_; }
      set {
        winGold_ = value;
      }
    }

    /// <summary>Field number for the "new_gold" field.</summary>
    public const int NewGoldFieldNumber = 4;
    private long newGold_;
    /// <summary>
    ///最新金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewGold {
      get { return newGold_; }
      set {
        newGold_ = value;
      }
    }

    /// <summary>Field number for the "is_win" field.</summary>
    public const int IsWinFieldNumber = 5;
    private bool isWin_;
    /// <summary>
    ///是否压中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWin {
      get { return isWin_; }
      set {
        isWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgWinMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgWinMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ChairId != other.ChairId) return false;
      if (WinGold != other.WinGold) return false;
      if (NewGold != other.NewGold) return false;
      if (IsWin != other.IsWin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (WinGold != 0L) hash ^= WinGold.GetHashCode();
      if (NewGold != 0L) hash ^= NewGold.GetHashCode();
      if (IsWin != false) hash ^= IsWin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WinGold);
      }
      if (NewGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(NewGold);
      }
      if (IsWin != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (WinGold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WinGold);
      }
      if (NewGold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(NewGold);
      }
      if (IsWin != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (WinGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinGold);
      }
      if (NewGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewGold);
      }
      if (IsWin != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgWinMsg other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.WinGold != 0L) {
        WinGold = other.WinGold;
      }
      if (other.NewGold != 0L) {
        NewGold = other.NewGold;
      }
      if (other.IsWin != false) {
        IsWin = other.IsWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            WinGold = input.ReadInt64();
            break;
          }
          case 32: {
            NewGold = input.ReadInt64();
            break;
          }
          case 40: {
            IsWin = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            WinGold = input.ReadInt64();
            break;
          }
          case 32: {
            NewGold = input.ReadInt64();
            break;
          }
          case 40: {
            IsWin = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏结果                                  
  /// </summary>
  public sealed partial class MsgResult : pb::IMessage<MsgResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgResult> _parser = new pb::MessageParser<MsgResult>(() => new MsgResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AndarBahar.AndarBaharReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgResult(MsgResult other) : this() {
      winIndex_ = other.winIndex_;
      winMsg_ = other.winMsg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgResult Clone() {
      return new MsgResult(this);
    }

    /// <summary>Field number for the "win_index" field.</summary>
    public const int WinIndexFieldNumber = 1;
    private int winIndex_;
    /// <summary>
    ///开牌结果(1:红 2:蓝)赢
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinIndex {
      get { return winIndex_; }
      set {
        winIndex_ = value;
      }
    }

    /// <summary>Field number for the "win_msg" field.</summary>
    public const int WinMsgFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AndarBahar.MsgWinMsg> _repeated_winMsg_codec
        = pb::FieldCodec.ForMessage(18, global::AndarBahar.MsgWinMsg.Parser);
    private readonly pbc::RepeatedField<global::AndarBahar.MsgWinMsg> winMsg_ = new pbc::RepeatedField<global::AndarBahar.MsgWinMsg>();
    /// <summary>
    ///玩家输赢信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AndarBahar.MsgWinMsg> WinMsg {
      get { return winMsg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WinIndex != other.WinIndex) return false;
      if(!winMsg_.Equals(other.winMsg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WinIndex != 0) hash ^= WinIndex.GetHashCode();
      hash ^= winMsg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WinIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinIndex);
      }
      winMsg_.WriteTo(output, _repeated_winMsg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WinIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WinIndex);
      }
      winMsg_.WriteTo(ref output, _repeated_winMsg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WinIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinIndex);
      }
      size += winMsg_.CalculateSize(_repeated_winMsg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgResult other) {
      if (other == null) {
        return;
      }
      if (other.WinIndex != 0) {
        WinIndex = other.WinIndex;
      }
      winMsg_.Add(other.winMsg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WinIndex = input.ReadInt32();
            break;
          }
          case 18: {
            winMsg_.AddEntriesFrom(input, _repeated_winMsg_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WinIndex = input.ReadInt32();
            break;
          }
          case 18: {
            winMsg_.AddEntriesFrom(ref input, _repeated_winMsg_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
