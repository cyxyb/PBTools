// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/LudoQuick.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LudoQuick {

  /// <summary>Holder for reflection information generated from Proto/SubGame/LudoQuick.proto</summary>
  public static partial class LudoQuickReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/LudoQuick.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LudoQuickReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1Qcm90by9TdWJHYW1lL0x1ZG9RdWljay5wcm90bxIJTHVkb1F1aWNrIjwK",
            "CVJvdXRlSW5mbxIQCghjaGVzc19pZBgBIAEoBRIQCghnb2xkX2JhZxgCIAEo",
            "BRILCgNwb3MYAyABKAUibwoIVXNlckluZm8SEAoIY2hhaXJfaWQYASABKAUS",
            "KAoKcm91dGVfaW5mbxgCIAMoCzIULkx1ZG9RdWljay5Sb3V0ZUluZm8SGgoS",
            "ZmluaXNoX2xpbmVfc3dpdGNoGAMgASgIEgsKA2VuZBgEIAEoCCLBAQoJQ2hl",
            "c3NHcmlkEg4KBnBvc19pZBgBIAEoBRISCgpzYWZlX2hvdXNlGAIgASgFEhAK",
            "CGdvbGRfYmFnGAMgASgFEgwKBHByb3AYBCABKAUSDgoGc3dpdGNoGAUgASgF",
            "EhIKCmluZmxlY3Rpb24YBiABKAUSEQoJbmV4dF9wb3MxGAcgASgFEhEKCW5l",
            "eHRfcG9zMhgIIAEoBRITCgtzdGFydF9wb2ludBgJIAEoBRIRCgllbmRfcG9p",
            "bnQYCiABKAUiZgoQTXNnU2NlbmVJbmZvUmVzcBISCgpnYW1lX3N0YXRlGAEg",
            "ASgFEhYKDnRpbWVfcmVtYWluaW5nGAIgASgFEiYKCXVzZXJfaW5mbxgDIAMo",
            "CzITLkx1ZG9RdWljay5Vc2VySW5mbyIyCg9Nc2dOb3RpY2VPcFJlc3ASEAoI",
            "Y2hhaXJfaWQYASABKAUSDQoFdGltZXMYAiABKAUiNwoQTXNnVGhyb3dEaWNl",
            "UmVzcBIQCghjaGFpcl9pZBgBIAEoBRIRCglkaWNlX3JvbGwYAiABKAUiSAoP",
            "TXNnT3BlcmF0ZUNoZXNzEhAKCGNoYWlyX2lkGAEgASgFEhAKCGNoZXNzX2lk",
            "GAIgASgFEhEKCWlzX3VubG9jaxgDIAEoCCJHCg9Nc2dUcmlnZ2VyRXZlbnQS",
            "EAoIY2hhaXJfaWQYASABKAUSEAoIY2hlc3NfaWQYAiABKAUSEAoIZXZlbnRf",
            "aWQYAyABKAUingEKEE1zZ0NoZXNzSW5mb1Jlc3ASEAoIY2hhaXJfaWQYASAB",
            "KAUSEAoIY2hlc3NfaWQYAiABKAUSEQoJaXNfdW5sb2NrGAMgASgIEhEKCWJh",
            "Z19jb3VudBgEIAEoBRINCgVyZXRyeRgFIAEoBRIRCglyb3V0ZV9udW0YBiAB",
            "KAUSEAoIZXZlbnRfaWQYByABKAUSDAoEY29kZRgIIAEoBSJzCgpHYW1lUmVz",
            "dWx0EhAKCGNoYWlyX2lkGAEgASgFEiYKCXVzZXJfaW5mbxgCIAEoCzITLkx1",
            "ZG9RdWljay5Vc2VySW5mbxIRCgl1c2VyX2dvbGQYAyABKAMSCwoDd2luGAQg",
            "ASgDEgsKA2JldBgFIAEoAyI2Cg1Nc2dSZXN1bHRSZXNwEiUKBnJlc3VsdBgB",
            "IAMoCzIVLkx1ZG9RdWljay5HYW1lUmVzdWx0KoYCCg9FTXNnSURMdWRvUXVp",
            "Y2sSFgoSTXNnSURfRmlyc3RQdWJsaXNoEAASFwoTU1VCX1NDX0ZpcnN0UHVi",
            "bGlzaBABEhMKD1NVQl9TQ19Ob3RpY2VPcBACEhMKD1NVQl9DU19EaWNlSW5m",
            "bxADEhQKEFNVQl9TQ19UaHJvd0RpY2UQBBIXChNTVUJfQ1NfT3BlcmF0ZUNo",
            "ZXNzEAUSFAoQU1VCX1NDX0NoZXNzSW5mbxAGEhcKE1NVQl9DU19UcmlnZ2Vy",
            "RXZlbnQQBxIVChFTVUJfU0NfR2FtZVJlc3VsdBAJEhMKD1NVQl9DU19PcHRp",
            "b25hbBAKEg4KClNVQl9TQ19FUlIQC2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LudoQuick.EMsgIDLudoQuick), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LudoQuick.RouteInfo), global::LudoQuick.RouteInfo.Parser, new[]{ "ChessId", "GoldBag", "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LudoQuick.UserInfo), global::LudoQuick.UserInfo.Parser, new[]{ "ChairId", "RouteInfo", "FinishLineSwitch", "End" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LudoQuick.ChessGrid), global::LudoQuick.ChessGrid.Parser, new[]{ "PosId", "SafeHouse", "GoldBag", "Prop", "Switch", "Inflection", "NextPos1", "NextPos2", "StartPoint", "EndPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LudoQuick.MsgSceneInfoResp), global::LudoQuick.MsgSceneInfoResp.Parser, new[]{ "GameState", "TimeRemaining", "UserInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LudoQuick.MsgNoticeOpResp), global::LudoQuick.MsgNoticeOpResp.Parser, new[]{ "ChairId", "Times" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LudoQuick.MsgThrowDiceResp), global::LudoQuick.MsgThrowDiceResp.Parser, new[]{ "ChairId", "DiceRoll" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LudoQuick.MsgOperateChess), global::LudoQuick.MsgOperateChess.Parser, new[]{ "ChairId", "ChessId", "IsUnlock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LudoQuick.MsgTriggerEvent), global::LudoQuick.MsgTriggerEvent.Parser, new[]{ "ChairId", "ChessId", "EventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LudoQuick.MsgChessInfoResp), global::LudoQuick.MsgChessInfoResp.Parser, new[]{ "ChairId", "ChessId", "IsUnlock", "BagCount", "Retry", "RouteNum", "EventId", "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LudoQuick.GameResult), global::LudoQuick.GameResult.Parser, new[]{ "ChairId", "UserInfo", "UserGold", "Win", "Bet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LudoQuick.MsgResultResp), global::LudoQuick.MsgResultResp.Parser, new[]{ "Result" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///消息号
  /// </summary>
  public enum EMsgIDLudoQuick {
    /// <summary>
    ///场景（流程需要前端不管）
    /// </summary>
    [pbr::OriginalName("MsgID_FirstPublish")] MsgIdFirstPublish = 0,
    /// <summary>
    ///随机首发(MsgCommonN32)0红1绿2黄3蓝
    /// </summary>
    [pbr::OriginalName("SUB_SC_FirstPublish")] SubScFirstPublish = 1,
    /// <summary>
    ///通知操作(MsgNoticeOpResp)
    /// </summary>
    [pbr::OriginalName("SUB_SC_NoticeOp")] SubScNoticeOp = 2,
    /// <summary>
    ///投掷骰子(MsgCommonBool)       	ps：正常投掷和触发事件ID 7 和奖励重新摇骰子（优先级低于道具 有道具就触发道具不触发它）
    /// </summary>
    [pbr::OriginalName("SUB_CS_DiceInfo")] SubCsDiceInfo = 3,
    /// <summary>
    ///投掷结果(MsgThrowDiceResp)
    /// </summary>
    [pbr::OriginalName("SUB_SC_ThrowDice")] SubScThrowDice = 4,
    /// <summary>
    ///操作棋子(MsgOperateChess)			ps：触发事件 9 直接处理解除开关动画就行 不用再发消息了 触发事件 10 发送解锁棋子的消息
    /// </summary>
    [pbr::OriginalName("SUB_CS_OperateChess")] SubCsOperateChess = 5,
    /// <summary>
    ///棋子结果(MsgChessInfoResp)
    /// </summary>
    [pbr::OriginalName("SUB_SC_ChessInfo")] SubScChessInfo = 6,
    /// <summary>
    ///触发特殊事件(MsgTriggerEvent)  	ps：事件ID 1-6 发送这个消息
    /// </summary>
    [pbr::OriginalName("SUB_CS_TriggerEvent")] SubCsTriggerEvent = 7,
    /// <summary>
    ///游戏结果(MsgResultResp)
    /// </summary>
    [pbr::OriginalName("SUB_SC_GameResult")] SubScGameResult = 9,
    /// <summary>
    ///自选骰子(MsgCommonN32)			ps：事件ID 8 发送这个消息
    /// </summary>
    [pbr::OriginalName("SUB_CS_Optional")] SubCsOptional = 10,
    /// <summary>
    ///错误消息(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_SC_ERR")] SubScErr = 11,
  }

  #endregion

  #region Messages
  /// <summary>
  ///棋子信息
  /// </summary>
  public sealed partial class RouteInfo : pb::IMessage<RouteInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RouteInfo> _parser = new pb::MessageParser<RouteInfo>(() => new RouteInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RouteInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LudoQuick.LudoQuickReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteInfo(RouteInfo other) : this() {
      chessId_ = other.chessId_;
      goldBag_ = other.goldBag_;
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteInfo Clone() {
      return new RouteInfo(this);
    }

    /// <summary>Field number for the "chess_id" field.</summary>
    public const int ChessIdFieldNumber = 1;
    private int chessId_;
    /// <summary>
    ///棋子信息0123
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChessId {
      get { return chessId_; }
      set {
        chessId_ = value;
      }
    }

    /// <summary>Field number for the "gold_bag" field.</summary>
    public const int GoldBagFieldNumber = 2;
    private int goldBag_;
    /// <summary>
    ///钱袋信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoldBag {
      get { return goldBag_; }
      set {
        goldBag_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private int pos_;
    /// <summary>
    ///棋子位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RouteInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RouteInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChessId != other.ChessId) return false;
      if (GoldBag != other.GoldBag) return false;
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChessId != 0) hash ^= ChessId.GetHashCode();
      if (GoldBag != 0) hash ^= GoldBag.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChessId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChessId);
      }
      if (GoldBag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoldBag);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChessId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChessId);
      }
      if (GoldBag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoldBag);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChessId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChessId);
      }
      if (GoldBag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldBag);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RouteInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChessId != 0) {
        ChessId = other.ChessId;
      }
      if (other.GoldBag != 0) {
        GoldBag = other.GoldBag;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChessId = input.ReadInt32();
            break;
          }
          case 16: {
            GoldBag = input.ReadInt32();
            break;
          }
          case 24: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChessId = input.ReadInt32();
            break;
          }
          case 16: {
            GoldBag = input.ReadInt32();
            break;
          }
          case 24: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///用户信息
  /// </summary>
  public sealed partial class UserInfo : pb::IMessage<UserInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LudoQuick.LudoQuickReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      chairId_ = other.chairId_;
      routeInfo_ = other.routeInfo_.Clone();
      finishLineSwitch_ = other.finishLineSwitch_;
      end_ = other.end_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "route_info" field.</summary>
    public const int RouteInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LudoQuick.RouteInfo> _repeated_routeInfo_codec
        = pb::FieldCodec.ForMessage(18, global::LudoQuick.RouteInfo.Parser);
    private readonly pbc::RepeatedField<global::LudoQuick.RouteInfo> routeInfo_ = new pbc::RepeatedField<global::LudoQuick.RouteInfo>();
    /// <summary>
    ///棋子信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LudoQuick.RouteInfo> RouteInfo {
      get { return routeInfo_; }
    }

    /// <summary>Field number for the "finish_line_switch" field.</summary>
    public const int FinishLineSwitchFieldNumber = 3;
    private bool finishLineSwitch_;
    /// <summary>
    ///终点线开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FinishLineSwitch {
      get { return finishLineSwitch_; }
      set {
        finishLineSwitch_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 4;
    private bool end_;
    /// <summary>
    ///是否到达终点1是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if(!routeInfo_.Equals(other.routeInfo_)) return false;
      if (FinishLineSwitch != other.FinishLineSwitch) return false;
      if (End != other.End) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      hash ^= routeInfo_.GetHashCode();
      if (FinishLineSwitch != false) hash ^= FinishLineSwitch.GetHashCode();
      if (End != false) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      routeInfo_.WriteTo(output, _repeated_routeInfo_codec);
      if (FinishLineSwitch != false) {
        output.WriteRawTag(24);
        output.WriteBool(FinishLineSwitch);
      }
      if (End != false) {
        output.WriteRawTag(32);
        output.WriteBool(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      routeInfo_.WriteTo(ref output, _repeated_routeInfo_codec);
      if (FinishLineSwitch != false) {
        output.WriteRawTag(24);
        output.WriteBool(FinishLineSwitch);
      }
      if (End != false) {
        output.WriteRawTag(32);
        output.WriteBool(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      size += routeInfo_.CalculateSize(_repeated_routeInfo_codec);
      if (FinishLineSwitch != false) {
        size += 1 + 1;
      }
      if (End != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      routeInfo_.Add(other.routeInfo_);
      if (other.FinishLineSwitch != false) {
        FinishLineSwitch = other.FinishLineSwitch;
      }
      if (other.End != false) {
        End = other.End;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18: {
            routeInfo_.AddEntriesFrom(input, _repeated_routeInfo_codec);
            break;
          }
          case 24: {
            FinishLineSwitch = input.ReadBool();
            break;
          }
          case 32: {
            End = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18: {
            routeInfo_.AddEntriesFrom(ref input, _repeated_routeInfo_codec);
            break;
          }
          case 24: {
            FinishLineSwitch = input.ReadBool();
            break;
          }
          case 32: {
            End = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///棋格信息
  /// </summary>
  public sealed partial class ChessGrid : pb::IMessage<ChessGrid>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChessGrid> _parser = new pb::MessageParser<ChessGrid>(() => new ChessGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChessGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LudoQuick.LudoQuickReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessGrid(ChessGrid other) : this() {
      posId_ = other.posId_;
      safeHouse_ = other.safeHouse_;
      goldBag_ = other.goldBag_;
      prop_ = other.prop_;
      switch_ = other.switch_;
      inflection_ = other.inflection_;
      nextPos1_ = other.nextPos1_;
      nextPos2_ = other.nextPos2_;
      startPoint_ = other.startPoint_;
      endPoint_ = other.endPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChessGrid Clone() {
      return new ChessGrid(this);
    }

    /// <summary>Field number for the "pos_id" field.</summary>
    public const int PosIdFieldNumber = 1;
    private int posId_;
    /// <summary>
    ///格子id 1-76 红
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PosId {
      get { return posId_; }
      set {
        posId_ = value;
      }
    }

    /// <summary>Field number for the "safe_house" field.</summary>
    public const int SafeHouseFieldNumber = 2;
    private int safeHouse_;
    /// <summary>
    ///安全屋1是0不是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SafeHouse {
      get { return safeHouse_; }
      set {
        safeHouse_ = value;
      }
    }

    /// <summary>Field number for the "gold_bag" field.</summary>
    public const int GoldBagFieldNumber = 3;
    private int goldBag_;
    /// <summary>
    ///是否有钱袋
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoldBag {
      get { return goldBag_; }
      set {
        goldBag_ = value;
      }
    }

    /// <summary>Field number for the "prop" field.</summary>
    public const int PropFieldNumber = 4;
    private int prop_;
    /// <summary>
    ///道具格子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Prop {
      get { return prop_; }
      set {
        prop_ = value;
      }
    }

    /// <summary>Field number for the "switch" field.</summary>
    public const int SwitchFieldNumber = 5;
    private int switch_;
    /// <summary>
    ///开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Switch {
      get { return switch_; }
      set {
        switch_ = value;
      }
    }

    /// <summary>Field number for the "inflection" field.</summary>
    public const int InflectionFieldNumber = 6;
    private int inflection_;
    /// <summary>
    ///拐点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Inflection {
      get { return inflection_; }
      set {
        inflection_ = value;
      }
    }

    /// <summary>Field number for the "next_pos1" field.</summary>
    public const int NextPos1FieldNumber = 7;
    private int nextPos1_;
    /// <summary>
    ///常规拐点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextPos1 {
      get { return nextPos1_; }
      set {
        nextPos1_ = value;
      }
    }

    /// <summary>Field number for the "next_pos2" field.</summary>
    public const int NextPos2FieldNumber = 8;
    private int nextPos2_;
    /// <summary>
    ///终点拐点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextPos2 {
      get { return nextPos2_; }
      set {
        nextPos2_ = value;
      }
    }

    /// <summary>Field number for the "start_point" field.</summary>
    public const int StartPointFieldNumber = 9;
    private int startPoint_;
    /// <summary>
    ///起点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartPoint {
      get { return startPoint_; }
      set {
        startPoint_ = value;
      }
    }

    /// <summary>Field number for the "end_point" field.</summary>
    public const int EndPointFieldNumber = 10;
    private int endPoint_;
    /// <summary>
    ///终点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndPoint {
      get { return endPoint_; }
      set {
        endPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChessGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChessGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PosId != other.PosId) return false;
      if (SafeHouse != other.SafeHouse) return false;
      if (GoldBag != other.GoldBag) return false;
      if (Prop != other.Prop) return false;
      if (Switch != other.Switch) return false;
      if (Inflection != other.Inflection) return false;
      if (NextPos1 != other.NextPos1) return false;
      if (NextPos2 != other.NextPos2) return false;
      if (StartPoint != other.StartPoint) return false;
      if (EndPoint != other.EndPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosId != 0) hash ^= PosId.GetHashCode();
      if (SafeHouse != 0) hash ^= SafeHouse.GetHashCode();
      if (GoldBag != 0) hash ^= GoldBag.GetHashCode();
      if (Prop != 0) hash ^= Prop.GetHashCode();
      if (Switch != 0) hash ^= Switch.GetHashCode();
      if (Inflection != 0) hash ^= Inflection.GetHashCode();
      if (NextPos1 != 0) hash ^= NextPos1.GetHashCode();
      if (NextPos2 != 0) hash ^= NextPos2.GetHashCode();
      if (StartPoint != 0) hash ^= StartPoint.GetHashCode();
      if (EndPoint != 0) hash ^= EndPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PosId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PosId);
      }
      if (SafeHouse != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SafeHouse);
      }
      if (GoldBag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GoldBag);
      }
      if (Prop != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Prop);
      }
      if (Switch != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Switch);
      }
      if (Inflection != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Inflection);
      }
      if (NextPos1 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NextPos1);
      }
      if (NextPos2 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NextPos2);
      }
      if (StartPoint != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartPoint);
      }
      if (EndPoint != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EndPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PosId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PosId);
      }
      if (SafeHouse != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SafeHouse);
      }
      if (GoldBag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GoldBag);
      }
      if (Prop != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Prop);
      }
      if (Switch != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Switch);
      }
      if (Inflection != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Inflection);
      }
      if (NextPos1 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NextPos1);
      }
      if (NextPos2 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NextPos2);
      }
      if (StartPoint != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(StartPoint);
      }
      if (EndPoint != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EndPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosId);
      }
      if (SafeHouse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SafeHouse);
      }
      if (GoldBag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldBag);
      }
      if (Prop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Prop);
      }
      if (Switch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Switch);
      }
      if (Inflection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inflection);
      }
      if (NextPos1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextPos1);
      }
      if (NextPos2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextPos2);
      }
      if (StartPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartPoint);
      }
      if (EndPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChessGrid other) {
      if (other == null) {
        return;
      }
      if (other.PosId != 0) {
        PosId = other.PosId;
      }
      if (other.SafeHouse != 0) {
        SafeHouse = other.SafeHouse;
      }
      if (other.GoldBag != 0) {
        GoldBag = other.GoldBag;
      }
      if (other.Prop != 0) {
        Prop = other.Prop;
      }
      if (other.Switch != 0) {
        Switch = other.Switch;
      }
      if (other.Inflection != 0) {
        Inflection = other.Inflection;
      }
      if (other.NextPos1 != 0) {
        NextPos1 = other.NextPos1;
      }
      if (other.NextPos2 != 0) {
        NextPos2 = other.NextPos2;
      }
      if (other.StartPoint != 0) {
        StartPoint = other.StartPoint;
      }
      if (other.EndPoint != 0) {
        EndPoint = other.EndPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PosId = input.ReadInt32();
            break;
          }
          case 16: {
            SafeHouse = input.ReadInt32();
            break;
          }
          case 24: {
            GoldBag = input.ReadInt32();
            break;
          }
          case 32: {
            Prop = input.ReadInt32();
            break;
          }
          case 40: {
            Switch = input.ReadInt32();
            break;
          }
          case 48: {
            Inflection = input.ReadInt32();
            break;
          }
          case 56: {
            NextPos1 = input.ReadInt32();
            break;
          }
          case 64: {
            NextPos2 = input.ReadInt32();
            break;
          }
          case 72: {
            StartPoint = input.ReadInt32();
            break;
          }
          case 80: {
            EndPoint = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PosId = input.ReadInt32();
            break;
          }
          case 16: {
            SafeHouse = input.ReadInt32();
            break;
          }
          case 24: {
            GoldBag = input.ReadInt32();
            break;
          }
          case 32: {
            Prop = input.ReadInt32();
            break;
          }
          case 40: {
            Switch = input.ReadInt32();
            break;
          }
          case 48: {
            Inflection = input.ReadInt32();
            break;
          }
          case 56: {
            NextPos1 = input.ReadInt32();
            break;
          }
          case 64: {
            NextPos2 = input.ReadInt32();
            break;
          }
          case 72: {
            StartPoint = input.ReadInt32();
            break;
          }
          case 80: {
            EndPoint = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class MsgSceneInfoResp : pb::IMessage<MsgSceneInfoResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgSceneInfoResp> _parser = new pb::MessageParser<MsgSceneInfoResp>(() => new MsgSceneInfoResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgSceneInfoResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LudoQuick.LudoQuickReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSceneInfoResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSceneInfoResp(MsgSceneInfoResp other) : this() {
      gameState_ = other.gameState_;
      timeRemaining_ = other.timeRemaining_;
      userInfo_ = other.userInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgSceneInfoResp Clone() {
      return new MsgSceneInfoResp(this);
    }

    /// <summary>Field number for the "game_state" field.</summary>
    public const int GameStateFieldNumber = 1;
    private int gameState_;
    /// <summary>
    ///游戏状态 0：选场 非零：对应椅子操作中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "time_remaining" field.</summary>
    public const int TimeRemainingFieldNumber = 2;
    private int timeRemaining_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeRemaining {
      get { return timeRemaining_; }
      set {
        timeRemaining_ = value;
      }
    }

    /// <summary>Field number for the "user_info" field.</summary>
    public const int UserInfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LudoQuick.UserInfo> _repeated_userInfo_codec
        = pb::FieldCodec.ForMessage(26, global::LudoQuick.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::LudoQuick.UserInfo> userInfo_ = new pbc::RepeatedField<global::LudoQuick.UserInfo>();
    /// <summary>
    ///用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LudoQuick.UserInfo> UserInfo {
      get { return userInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgSceneInfoResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgSceneInfoResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameState != other.GameState) return false;
      if (TimeRemaining != other.TimeRemaining) return false;
      if(!userInfo_.Equals(other.userInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameState != 0) hash ^= GameState.GetHashCode();
      if (TimeRemaining != 0) hash ^= TimeRemaining.GetHashCode();
      hash ^= userInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameState != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameState);
      }
      if (TimeRemaining != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeRemaining);
      }
      userInfo_.WriteTo(output, _repeated_userInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameState != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GameState);
      }
      if (TimeRemaining != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeRemaining);
      }
      userInfo_.WriteTo(ref output, _repeated_userInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameState);
      }
      if (TimeRemaining != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeRemaining);
      }
      size += userInfo_.CalculateSize(_repeated_userInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgSceneInfoResp other) {
      if (other == null) {
        return;
      }
      if (other.GameState != 0) {
        GameState = other.GameState;
      }
      if (other.TimeRemaining != 0) {
        TimeRemaining = other.TimeRemaining;
      }
      userInfo_.Add(other.userInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameState = input.ReadInt32();
            break;
          }
          case 16: {
            TimeRemaining = input.ReadInt32();
            break;
          }
          case 26: {
            userInfo_.AddEntriesFrom(input, _repeated_userInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameState = input.ReadInt32();
            break;
          }
          case 16: {
            TimeRemaining = input.ReadInt32();
            break;
          }
          case 26: {
            userInfo_.AddEntriesFrom(ref input, _repeated_userInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///通知操作
  /// </summary>
  public sealed partial class MsgNoticeOpResp : pb::IMessage<MsgNoticeOpResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgNoticeOpResp> _parser = new pb::MessageParser<MsgNoticeOpResp>(() => new MsgNoticeOpResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgNoticeOpResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LudoQuick.LudoQuickReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNoticeOpResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNoticeOpResp(MsgNoticeOpResp other) : this() {
      chairId_ = other.chairId_;
      times_ = other.times_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgNoticeOpResp Clone() {
      return new MsgNoticeOpResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    /// <summary>
    ///剩余时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgNoticeOpResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgNoticeOpResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (Times != other.Times) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgNoticeOpResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///投掷结果	
  /// </summary>
  public sealed partial class MsgThrowDiceResp : pb::IMessage<MsgThrowDiceResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgThrowDiceResp> _parser = new pb::MessageParser<MsgThrowDiceResp>(() => new MsgThrowDiceResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgThrowDiceResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LudoQuick.LudoQuickReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgThrowDiceResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgThrowDiceResp(MsgThrowDiceResp other) : this() {
      chairId_ = other.chairId_;
      diceRoll_ = other.diceRoll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgThrowDiceResp Clone() {
      return new MsgThrowDiceResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///椅子号 对应颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "dice_roll" field.</summary>
    public const int DiceRollFieldNumber = 2;
    private int diceRoll_;
    /// <summary>
    ///骰子点数	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DiceRoll {
      get { return diceRoll_; }
      set {
        diceRoll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgThrowDiceResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgThrowDiceResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (DiceRoll != other.DiceRoll) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (DiceRoll != 0) hash ^= DiceRoll.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (DiceRoll != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DiceRoll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (DiceRoll != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DiceRoll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (DiceRoll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiceRoll);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgThrowDiceResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.DiceRoll != 0) {
        DiceRoll = other.DiceRoll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            DiceRoll = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            DiceRoll = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///操作棋子	
  /// </summary>
  public sealed partial class MsgOperateChess : pb::IMessage<MsgOperateChess>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgOperateChess> _parser = new pb::MessageParser<MsgOperateChess>(() => new MsgOperateChess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgOperateChess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LudoQuick.LudoQuickReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOperateChess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOperateChess(MsgOperateChess other) : this() {
      chairId_ = other.chairId_;
      chessId_ = other.chessId_;
      isUnlock_ = other.isUnlock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOperateChess Clone() {
      return new MsgOperateChess(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///椅子号 对应颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "chess_id" field.</summary>
    public const int ChessIdFieldNumber = 2;
    private int chessId_;
    /// <summary>
    ///棋子ID 0123
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChessId {
      get { return chessId_; }
      set {
        chessId_ = value;
      }
    }

    /// <summary>Field number for the "is_unlock" field.</summary>
    public const int IsUnlockFieldNumber = 3;
    private bool isUnlock_;
    /// <summary>
    ///解锁 1是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgOperateChess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgOperateChess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (ChessId != other.ChessId) return false;
      if (IsUnlock != other.IsUnlock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (ChessId != 0) hash ^= ChessId.GetHashCode();
      if (IsUnlock != false) hash ^= IsUnlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ChessId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChessId);
      }
      if (IsUnlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUnlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ChessId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChessId);
      }
      if (IsUnlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUnlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (ChessId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChessId);
      }
      if (IsUnlock != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgOperateChess other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.ChessId != 0) {
        ChessId = other.ChessId;
      }
      if (other.IsUnlock != false) {
        IsUnlock = other.IsUnlock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ChessId = input.ReadInt32();
            break;
          }
          case 24: {
            IsUnlock = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ChessId = input.ReadInt32();
            break;
          }
          case 24: {
            IsUnlock = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///触发特殊事件	
  /// </summary>
  public sealed partial class MsgTriggerEvent : pb::IMessage<MsgTriggerEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgTriggerEvent> _parser = new pb::MessageParser<MsgTriggerEvent>(() => new MsgTriggerEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgTriggerEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LudoQuick.LudoQuickReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTriggerEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTriggerEvent(MsgTriggerEvent other) : this() {
      chairId_ = other.chairId_;
      chessId_ = other.chessId_;
      eventId_ = other.eventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgTriggerEvent Clone() {
      return new MsgTriggerEvent(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///椅子号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "chess_id" field.</summary>
    public const int ChessIdFieldNumber = 2;
    private int chessId_;
    /// <summary>
    ///棋子ID 0123
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChessId {
      get { return chessId_; }
      set {
        chessId_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 3;
    private int eventId_;
    /// <summary>
    ///事件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgTriggerEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgTriggerEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (ChessId != other.ChessId) return false;
      if (EventId != other.EventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (ChessId != 0) hash ^= ChessId.GetHashCode();
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ChessId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChessId);
      }
      if (EventId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ChessId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChessId);
      }
      if (EventId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (ChessId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChessId);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgTriggerEvent other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.ChessId != 0) {
        ChessId = other.ChessId;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ChessId = input.ReadInt32();
            break;
          }
          case 24: {
            EventId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ChessId = input.ReadInt32();
            break;
          }
          case 24: {
            EventId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///棋子结果
  /// </summary>
  public sealed partial class MsgChessInfoResp : pb::IMessage<MsgChessInfoResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgChessInfoResp> _parser = new pb::MessageParser<MsgChessInfoResp>(() => new MsgChessInfoResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgChessInfoResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LudoQuick.LudoQuickReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgChessInfoResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgChessInfoResp(MsgChessInfoResp other) : this() {
      chairId_ = other.chairId_;
      chessId_ = other.chessId_;
      isUnlock_ = other.isUnlock_;
      bagCount_ = other.bagCount_;
      retry_ = other.retry_;
      routeNum_ = other.routeNum_;
      eventId_ = other.eventId_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgChessInfoResp Clone() {
      return new MsgChessInfoResp(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///椅子号 对应颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "chess_id" field.</summary>
    public const int ChessIdFieldNumber = 2;
    private int chessId_;
    /// <summary>
    ///棋子ID 0123
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChessId {
      get { return chessId_; }
      set {
        chessId_ = value;
      }
    }

    /// <summary>Field number for the "is_unlock" field.</summary>
    public const int IsUnlockFieldNumber = 3;
    private bool isUnlock_;
    /// <summary>
    ///解锁 1是
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    /// <summary>Field number for the "bag_count" field.</summary>
    public const int BagCountFieldNumber = 4;
    private int bagCount_;
    /// <summary>
    ///钱袋个数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BagCount {
      get { return bagCount_; }
      set {
        bagCount_ = value;
      }
    }

    /// <summary>Field number for the "retry" field.</summary>
    public const int RetryFieldNumber = 5;
    private int retry_;
    /// <summary>
    ///是否奖励重新摇骰子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Retry {
      get { return retry_; }
      set {
        retry_ = value;
      }
    }

    /// <summary>Field number for the "route_num" field.</summary>
    public const int RouteNumFieldNumber = 6;
    private int routeNum_;
    /// <summary>
    ///非解锁:走了多少格 解锁:对应的格子ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RouteNum {
      get { return routeNum_; }
      set {
        routeNum_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 7;
    private int eventId_;
    /// <summary>
    ///事件类型 0：未触发 1：前进一格 2：前进三格 3：前进五格 4：前进七格 5：移动到最近棋子 6：移动到最近得安全屋 7 ：获得骰子 8：获得指定骰子 9：解除开关 10：解锁棋子
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 8;
    private int code_;
    /// <summary>
    ///对语言id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgChessInfoResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgChessInfoResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (ChessId != other.ChessId) return false;
      if (IsUnlock != other.IsUnlock) return false;
      if (BagCount != other.BagCount) return false;
      if (Retry != other.Retry) return false;
      if (RouteNum != other.RouteNum) return false;
      if (EventId != other.EventId) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (ChessId != 0) hash ^= ChessId.GetHashCode();
      if (IsUnlock != false) hash ^= IsUnlock.GetHashCode();
      if (BagCount != 0) hash ^= BagCount.GetHashCode();
      if (Retry != 0) hash ^= Retry.GetHashCode();
      if (RouteNum != 0) hash ^= RouteNum.GetHashCode();
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ChessId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChessId);
      }
      if (IsUnlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUnlock);
      }
      if (BagCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BagCount);
      }
      if (Retry != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Retry);
      }
      if (RouteNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RouteNum);
      }
      if (EventId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EventId);
      }
      if (Code != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (ChessId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChessId);
      }
      if (IsUnlock != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUnlock);
      }
      if (BagCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BagCount);
      }
      if (Retry != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Retry);
      }
      if (RouteNum != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RouteNum);
      }
      if (EventId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EventId);
      }
      if (Code != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (ChessId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChessId);
      }
      if (IsUnlock != false) {
        size += 1 + 1;
      }
      if (BagCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BagCount);
      }
      if (Retry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Retry);
      }
      if (RouteNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RouteNum);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgChessInfoResp other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.ChessId != 0) {
        ChessId = other.ChessId;
      }
      if (other.IsUnlock != false) {
        IsUnlock = other.IsUnlock;
      }
      if (other.BagCount != 0) {
        BagCount = other.BagCount;
      }
      if (other.Retry != 0) {
        Retry = other.Retry;
      }
      if (other.RouteNum != 0) {
        RouteNum = other.RouteNum;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ChessId = input.ReadInt32();
            break;
          }
          case 24: {
            IsUnlock = input.ReadBool();
            break;
          }
          case 32: {
            BagCount = input.ReadInt32();
            break;
          }
          case 40: {
            Retry = input.ReadInt32();
            break;
          }
          case 48: {
            RouteNum = input.ReadInt32();
            break;
          }
          case 56: {
            EventId = input.ReadInt32();
            break;
          }
          case 64: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 16: {
            ChessId = input.ReadInt32();
            break;
          }
          case 24: {
            IsUnlock = input.ReadBool();
            break;
          }
          case 32: {
            BagCount = input.ReadInt32();
            break;
          }
          case 40: {
            Retry = input.ReadInt32();
            break;
          }
          case 48: {
            RouteNum = input.ReadInt32();
            break;
          }
          case 56: {
            EventId = input.ReadInt32();
            break;
          }
          case 64: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///结算信息
  /// </summary>
  public sealed partial class GameResult : pb::IMessage<GameResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameResult> _parser = new pb::MessageParser<GameResult>(() => new GameResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LudoQuick.LudoQuickReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult(GameResult other) : this() {
      chairId_ = other.chairId_;
      userInfo_ = other.userInfo_ != null ? other.userInfo_.Clone() : null;
      userGold_ = other.userGold_;
      win_ = other.win_;
      bet_ = other.bet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult Clone() {
      return new GameResult(this);
    }

    /// <summary>Field number for the "chair_id" field.</summary>
    public const int ChairIdFieldNumber = 1;
    private int chairId_;
    /// <summary>
    ///椅子号 对应颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "user_info" field.</summary>
    public const int UserInfoFieldNumber = 2;
    private global::LudoQuick.UserInfo userInfo_;
    /// <summary>
    ///用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LudoQuick.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    /// <summary>Field number for the "user_gold" field.</summary>
    public const int UserGoldFieldNumber = 3;
    private long userGold_;
    /// <summary>
    ///用户金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserGold {
      get { return userGold_; }
      set {
        userGold_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 4;
    private long win_;
    /// <summary>
    ///本次获得
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 5;
    private long bet_;
    /// <summary>
    ///消耗金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChairId != other.ChairId) return false;
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      if (UserGold != other.UserGold) return false;
      if (Win != other.Win) return false;
      if (Bet != other.Bet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      if (UserGold != 0L) hash ^= UserGold.GetHashCode();
      if (Win != 0L) hash ^= Win.GetHashCode();
      if (Bet != 0L) hash ^= Bet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserInfo);
      }
      if (UserGold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserGold);
      }
      if (Win != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Win);
      }
      if (Bet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Bet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChairId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChairId);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserInfo);
      }
      if (UserGold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserGold);
      }
      if (Win != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Win);
      }
      if (Bet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Bet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      if (UserGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserGold);
      }
      if (Win != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Win);
      }
      if (Bet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bet);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameResult other) {
      if (other == null) {
        return;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          UserInfo = new global::LudoQuick.UserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
      if (other.UserGold != 0L) {
        UserGold = other.UserGold;
      }
      if (other.Win != 0L) {
        Win = other.Win;
      }
      if (other.Bet != 0L) {
        Bet = other.Bet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18: {
            if (userInfo_ == null) {
              UserInfo = new global::LudoQuick.UserInfo();
            }
            input.ReadMessage(UserInfo);
            break;
          }
          case 24: {
            UserGold = input.ReadInt64();
            break;
          }
          case 32: {
            Win = input.ReadInt64();
            break;
          }
          case 40: {
            Bet = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChairId = input.ReadInt32();
            break;
          }
          case 18: {
            if (userInfo_ == null) {
              UserInfo = new global::LudoQuick.UserInfo();
            }
            input.ReadMessage(UserInfo);
            break;
          }
          case 24: {
            UserGold = input.ReadInt64();
            break;
          }
          case 32: {
            Win = input.ReadInt64();
            break;
          }
          case 40: {
            Bet = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏结算
  /// </summary>
  public sealed partial class MsgResultResp : pb::IMessage<MsgResultResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MsgResultResp> _parser = new pb::MessageParser<MsgResultResp>(() => new MsgResultResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MsgResultResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LudoQuick.LudoQuickReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgResultResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgResultResp(MsgResultResp other) : this() {
      result_ = other.result_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgResultResp Clone() {
      return new MsgResultResp(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LudoQuick.GameResult> _repeated_result_codec
        = pb::FieldCodec.ForMessage(10, global::LudoQuick.GameResult.Parser);
    private readonly pbc::RepeatedField<global::LudoQuick.GameResult> result_ = new pbc::RepeatedField<global::LudoQuick.GameResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LudoQuick.GameResult> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MsgResultResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MsgResultResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!result_.Equals(other.result_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= result_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      result_.WriteTo(output, _repeated_result_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      result_.WriteTo(ref output, _repeated_result_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += result_.CalculateSize(_repeated_result_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MsgResultResp other) {
      if (other == null) {
        return;
      }
      result_.Add(other.result_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            result_.AddEntriesFrom(ref input, _repeated_result_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
