// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/TGG.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TGG {

  /// <summary>Holder for reflection information generated from Proto/SubGame/TGG.proto</summary>
  public static partial class TGGReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/TGG.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TGGReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQcm90by9TdWJHYW1lL1RHRy5wcm90bxIDVEdHIn0KDFNDX1NjZW5lSW5m",
            "bxIPCgdjdXJfYmV0GAEgASgFEhEKCXVzZXJfZ29sZBgCIAEoBRILCgNiZXQY",
            "AyADKAUSEgoKZnJlZV9jb3VudBgEIAEoBRIXCg9jdXJfZnJlZV9kb3VibGUY",
            "BSABKAUSDwoHY2FpX2ppbhgGIAEoBSIpCgpzdExpbmVJbmZvEgwKBEljb24Y",
            "ASABKAUSDQoFQ291bnQYAiABKAUimAEKEENNRF8zRF9TQ19SZXN1bHQSDAoE",
            "aWNvbhgBIAMoBRIiCglsaW5lX2luZm8YAiADKAsyDy5UR0cuc3RMaW5lSW5m",
            "bxIWCg5saW5lX3dpbl9zY29yZRgDIAEoBRIQCghmcmVlX251bRgEIAEoBRIT",
            "Cgt3aW5fY2FpX2ppbhgFIAEoBRITCgtjaGFuZ2VfbGluZRgGIAEoBSpMCglF",
            "TXNnSURUR0cSFQoRU1VCX0NTX0dBTUVfU1RBUlQQABIUChBTVUJfU0NfR0FN",
            "RV9PVkVSEAESEgoOU1VCX1NDX0JFVF9FUlIQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TGG.EMsgIDTGG), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TGG.SC_SceneInfo), global::TGG.SC_SceneInfo.Parser, new[]{ "CurBet", "UserGold", "Bet", "FreeCount", "CurFreeDouble", "CaiJin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TGG.stLineInfo), global::TGG.stLineInfo.Parser, new[]{ "Icon", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TGG.CMD_3D_SC_Result), global::TGG.CMD_3D_SC_Result.Parser, new[]{ "Icon", "LineInfo", "LineWinScore", "FreeNum", "WinCaiJin", "ChangeLine" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDTGG {
    /// <summary>
    ///开始游戏(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("SUB_CS_GAME_START")] SubCsGameStart = 0,
    /// <summary>
    ///游戏结束(CMD_3D_SC_Result)
    /// </summary>
    [pbr::OriginalName("SUB_SC_GAME_OVER")] SubScGameOver = 1,
    /// <summary>
    ///下注失败MsgCommonN32//金币不足、2下注值不对
    /// </summary>
    [pbr::OriginalName("SUB_SC_BET_ERR")] SubScBetErr = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TGG.TGGReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      curBet_ = other.curBet_;
      userGold_ = other.userGold_;
      bet_ = other.bet_.Clone();
      freeCount_ = other.freeCount_;
      curFreeDouble_ = other.curFreeDouble_;
      caiJin_ = other.caiJin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "cur_bet" field.</summary>
    public const int CurBetFieldNumber = 1;
    private int curBet_;
    /// <summary>
    ///下注值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurBet {
      get { return curBet_; }
      set {
        curBet_ = value;
      }
    }

    /// <summary>Field number for the "user_gold" field.</summary>
    public const int UserGoldFieldNumber = 2;
    private int userGold_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserGold {
      get { return userGold_; }
      set {
        userGold_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_bet_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> bet_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///押注列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bet {
      get { return bet_; }
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 4;
    private int freeCount_;
    /// <summary>
    ///免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "cur_free_double" field.</summary>
    public const int CurFreeDoubleFieldNumber = 5;
    private int curFreeDouble_;
    /// <summary>
    ///免费游戏倍数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurFreeDouble {
      get { return curFreeDouble_; }
      set {
        curFreeDouble_ = value;
      }
    }

    /// <summary>Field number for the "cai_jin" field.</summary>
    public const int CaiJinFieldNumber = 6;
    private int caiJin_;
    /// <summary>
    ///彩金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CaiJin {
      get { return caiJin_; }
      set {
        caiJin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurBet != other.CurBet) return false;
      if (UserGold != other.UserGold) return false;
      if(!bet_.Equals(other.bet_)) return false;
      if (FreeCount != other.FreeCount) return false;
      if (CurFreeDouble != other.CurFreeDouble) return false;
      if (CaiJin != other.CaiJin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurBet != 0) hash ^= CurBet.GetHashCode();
      if (UserGold != 0) hash ^= UserGold.GetHashCode();
      hash ^= bet_.GetHashCode();
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (CurFreeDouble != 0) hash ^= CurFreeDouble.GetHashCode();
      if (CaiJin != 0) hash ^= CaiJin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurBet != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurBet);
      }
      if (UserGold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserGold);
      }
      bet_.WriteTo(output, _repeated_bet_codec);
      if (FreeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeCount);
      }
      if (CurFreeDouble != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurFreeDouble);
      }
      if (CaiJin != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CaiJin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurBet != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurBet);
      }
      if (UserGold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UserGold);
      }
      bet_.WriteTo(ref output, _repeated_bet_codec);
      if (FreeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeCount);
      }
      if (CurFreeDouble != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurFreeDouble);
      }
      if (CaiJin != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CaiJin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurBet);
      }
      if (UserGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserGold);
      }
      size += bet_.CalculateSize(_repeated_bet_codec);
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (CurFreeDouble != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurFreeDouble);
      }
      if (CaiJin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CaiJin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurBet != 0) {
        CurBet = other.CurBet;
      }
      if (other.UserGold != 0) {
        UserGold = other.UserGold;
      }
      bet_.Add(other.bet_);
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.CurFreeDouble != 0) {
        CurFreeDouble = other.CurFreeDouble;
      }
      if (other.CaiJin != 0) {
        CaiJin = other.CaiJin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurBet = input.ReadInt32();
            break;
          }
          case 16: {
            UserGold = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
          case 32: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 40: {
            CurFreeDouble = input.ReadInt32();
            break;
          }
          case 48: {
            CaiJin = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurBet = input.ReadInt32();
            break;
          }
          case 16: {
            UserGold = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
          case 32: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 40: {
            CurFreeDouble = input.ReadInt32();
            break;
          }
          case 48: {
            CaiJin = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class stLineInfo : pb::IMessage<stLineInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<stLineInfo> _parser = new pb::MessageParser<stLineInfo>(() => new stLineInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<stLineInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TGG.TGGReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public stLineInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public stLineInfo(stLineInfo other) : this() {
      icon_ = other.icon_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public stLineInfo Clone() {
      return new stLineInfo(this);
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 1;
    private int icon_;
    /// <summary>
    ///中奖图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    ///中奖数量(几连)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as stLineInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(stLineInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Icon != other.Icon) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Icon != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Icon);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Icon != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Icon);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Icon);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(stLineInfo other) {
      if (other == null) {
        return;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Icon = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Icon = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// 游戏结果返回
  /// </summary>
  public sealed partial class CMD_3D_SC_Result : pb::IMessage<CMD_3D_SC_Result>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_3D_SC_Result> _parser = new pb::MessageParser<CMD_3D_SC_Result>(() => new CMD_3D_SC_Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_3D_SC_Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TGG.TGGReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result(CMD_3D_SC_Result other) : this() {
      icon_ = other.icon_.Clone();
      lineInfo_ = other.lineInfo_.Clone();
      lineWinScore_ = other.lineWinScore_;
      freeNum_ = other.freeNum_;
      winCaiJin_ = other.winCaiJin_;
      changeLine_ = other.changeLine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_3D_SC_Result Clone() {
      return new CMD_3D_SC_Result(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_icon_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> icon_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Icon {
      get { return icon_; }
    }

    /// <summary>Field number for the "line_info" field.</summary>
    public const int LineInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TGG.stLineInfo> _repeated_lineInfo_codec
        = pb::FieldCodec.ForMessage(18, global::TGG.stLineInfo.Parser);
    private readonly pbc::RepeatedField<global::TGG.stLineInfo> lineInfo_ = new pbc::RepeatedField<global::TGG.stLineInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TGG.stLineInfo> LineInfo {
      get { return lineInfo_; }
    }

    /// <summary>Field number for the "line_win_score" field.</summary>
    public const int LineWinScoreFieldNumber = 3;
    private int lineWinScore_;
    /// <summary>
    ///连线赢得的总分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineWinScore {
      get { return lineWinScore_; }
      set {
        lineWinScore_ = value;
      }
    }

    /// <summary>Field number for the "free_num" field.</summary>
    public const int FreeNumFieldNumber = 4;
    private int freeNum_;
    /// <summary>
    ///免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeNum {
      get { return freeNum_; }
      set {
        freeNum_ = value;
      }
    }

    /// <summary>Field number for the "win_cai_jin" field.</summary>
    public const int WinCaiJinFieldNumber = 5;
    private int winCaiJin_;
    /// <summary>
    ///本局获得彩金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinCaiJin {
      get { return winCaiJin_; }
      set {
        winCaiJin_ = value;
      }
    }

    /// <summary>Field number for the "change_line" field.</summary>
    public const int ChangeLineFieldNumber = 6;
    private int changeLine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeLine {
      get { return changeLine_; }
      set {
        changeLine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_3D_SC_Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_3D_SC_Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!icon_.Equals(other.icon_)) return false;
      if(!lineInfo_.Equals(other.lineInfo_)) return false;
      if (LineWinScore != other.LineWinScore) return false;
      if (FreeNum != other.FreeNum) return false;
      if (WinCaiJin != other.WinCaiJin) return false;
      if (ChangeLine != other.ChangeLine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= icon_.GetHashCode();
      hash ^= lineInfo_.GetHashCode();
      if (LineWinScore != 0) hash ^= LineWinScore.GetHashCode();
      if (FreeNum != 0) hash ^= FreeNum.GetHashCode();
      if (WinCaiJin != 0) hash ^= WinCaiJin.GetHashCode();
      if (ChangeLine != 0) hash ^= ChangeLine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      icon_.WriteTo(output, _repeated_icon_codec);
      lineInfo_.WriteTo(output, _repeated_lineInfo_codec);
      if (LineWinScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineWinScore);
      }
      if (FreeNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeNum);
      }
      if (WinCaiJin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WinCaiJin);
      }
      if (ChangeLine != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChangeLine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      icon_.WriteTo(ref output, _repeated_icon_codec);
      lineInfo_.WriteTo(ref output, _repeated_lineInfo_codec);
      if (LineWinScore != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineWinScore);
      }
      if (FreeNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeNum);
      }
      if (WinCaiJin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WinCaiJin);
      }
      if (ChangeLine != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ChangeLine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += icon_.CalculateSize(_repeated_icon_codec);
      size += lineInfo_.CalculateSize(_repeated_lineInfo_codec);
      if (LineWinScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineWinScore);
      }
      if (FreeNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeNum);
      }
      if (WinCaiJin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinCaiJin);
      }
      if (ChangeLine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeLine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_3D_SC_Result other) {
      if (other == null) {
        return;
      }
      icon_.Add(other.icon_);
      lineInfo_.Add(other.lineInfo_);
      if (other.LineWinScore != 0) {
        LineWinScore = other.LineWinScore;
      }
      if (other.FreeNum != 0) {
        FreeNum = other.FreeNum;
      }
      if (other.WinCaiJin != 0) {
        WinCaiJin = other.WinCaiJin;
      }
      if (other.ChangeLine != 0) {
        ChangeLine = other.ChangeLine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(input, _repeated_icon_codec);
            break;
          }
          case 18: {
            lineInfo_.AddEntriesFrom(input, _repeated_lineInfo_codec);
            break;
          }
          case 24: {
            LineWinScore = input.ReadInt32();
            break;
          }
          case 32: {
            FreeNum = input.ReadInt32();
            break;
          }
          case 40: {
            WinCaiJin = input.ReadInt32();
            break;
          }
          case 48: {
            ChangeLine = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            icon_.AddEntriesFrom(ref input, _repeated_icon_codec);
            break;
          }
          case 18: {
            lineInfo_.AddEntriesFrom(ref input, _repeated_lineInfo_codec);
            break;
          }
          case 24: {
            LineWinScore = input.ReadInt32();
            break;
          }
          case 32: {
            FreeNum = input.ReadInt32();
            break;
          }
          case 40: {
            WinCaiJin = input.ReadInt32();
            break;
          }
          case 48: {
            ChangeLine = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
