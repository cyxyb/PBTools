// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/SubGame/ChnChess.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ChnChess {

  /// <summary>Holder for reflection information generated from Proto/SubGame/ChnChess.proto</summary>
  public static partial class ChnChessReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/SubGame/ChnChess.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChnChessReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxQcm90by9TdWJHYW1lL0NobkNoZXNzLnByb3RvEghDaG5DaGVzcyJSCgxT",
            "Q19TY2VuZUluZm8SEgoKZnJlZV9jb3VudBgBIAEoBRISCgpjdXJyZW5fYmV0",
            "GAIgASgFEgsKA2JldBgDIAMoBRINCgVyZXJ1bhgEIAEoBSKEAQoUQ01EX0No",
            "ZXNzX01PVkVfQ0hFU1MSFAoMY2JYU291cmNlUG9zGAEgASgFEhQKDGNiWVNv",
            "dXJjZVBvcxgCIAEoBRIUCgxjYlhUYXJnZXRQb3MYAyABKAUSFAoMY2JZVGFy",
            "Z2V0UG9zGAQgASgFEhQKDHdDdXJyZW50VXNlchgFIAEoBSJQCgxSZWdyZXRS",
            "ZXN1bHQSEwoLd1JlZ3JldFVzZXIYASABKAUSFAoMd0N1cnJlbnRVc2VyGAIg",
            "ASgFEhUKDWNiUmVncmV0Q291bnQYAyABKAUiLwoKQ01EX0NvbW1vbhIPCgdv",
            "cEluZGV4GAEgASgFEhAKCHdhaXRUaW1lGAIgASgFIi8KB0dhbWVFbmQSEAoI",
            "d1dpblVzZXIYASABKAUSEgoKbFVzZXJTY29yZRgCIAMoAyKsAQoRQ2hlc3Nf",
            "TWFudWFsX0l0ZW0SGQoRY2JYU291cmNlQ2hlc3NQb3MYASABKAUSGQoRY2JZ",
            "U291cmNlQ2hlc3NQb3MYAiABKAUSGQoRY2JYVGFyZ2V0Q2hlc3NQb3MYAyAB",
            "KAUSGQoRY2JZVGFyZ2V0Q2hlc3NQb3MYBCABKAUSFAoMY2JVbml0ZUNoZXNz",
            "GAUgASgFEhUKDWNiU291cmNlQ29sb3IYBiABKAUiOgoMQ2hlc3NfTWFudWFs",
            "EioKBWl0ZW1zGAEgAygLMhsuQ2huQ2hlc3MuQ2hlc3NfTWFudWFsX0l0ZW0i",
            "MgoMTm90aWZ5X1RpbWVyEhAKCHdhaXRUaW1lGAEgASgFEhAKCHJvb21UeXBl",
            "GAIgASgFIi8KDUNNRF9NYWtlX1J1bGUSDwoHZXJyb3JJRBgBIAEoBRINCgVz",
            "Y29yZRgCIAEoAyqtCAoNRU1zZ0lEU3ViR2FtZRIeChpDTURfQ2hlc3NfU1VC",
            "X0NfUkVHUkVUX1JFURAAEiEKHUNNRF9DaGVzc19TVUJfQ19SRUdSRVRfQU5T",
            "V0VSEAESHgoaQ01EX0NoZXNzX1NVQl9DX0dJVkVVUF9SRVEQAhIdChlDTURf",
            "Q2hlc3NfU1VCX0NfUEVBQ0VfUkVREAMSIAocQ01EX0NoZXNzX1NVQl9DX1BF",
            "QUNFX0FOU1dFUhAEEh4KGkNNRF9DaGVzc19TVUJfQ19NT1ZFX0NIRVNTEAUS",
            "HwobQ01EX0NoZXNzX1NVQl9DX0tJQ0tfUExBWUVSEAYSHAoYQ01EX0NoZXNz",
            "X1NVQl9DX1NFVF9SVUxFEAcSHQoZQ01EX0NoZXNzX1NVQl9DX01BS0VfUlVM",
            "RRAIEiAKHENNRF9DaGVzc19TVUJfQ19OT1RJRllfUkVBRFkQCRIgChxDTURf",
            "Q2hlc3NfU1VCX0NfTk9USUZZX1NUQVJUEAoSHAoYQ01EX0NoZXNzX1NVQl9D",
            "X0NPTlRJTlVFEAsSHgoaQ01EX0NoZXNzX1NVQl9TX0dBTUVfU1RBUlQQDBIe",
            "ChpDTURfQ2hlc3NfU1VCX1NfTU9WRV9DSEVTUxANEh4KGkNNRF9DaGVzc19T",
            "VUJfU19SRUdSRVRfUkVREA4SIAocQ01EX0NoZXNzX1NVQl9TX1JFR1JFVF9G",
            "QUlMRRAPEiEKHUNNRF9DaGVzc19TVUJfU19SRUdSRVRfUkVTVUxUEBASHQoZ",
            "Q01EX0NoZXNzX1NVQl9TX1BFQUNFX1JFURAREiAKHENNRF9DaGVzc19TVUJf",
            "U19QRUFDRV9BTlNXRVIQEhIcChhDTURfQ2hlc3NfU1VCX1NfR0FNRV9FTkQQ",
            "ExIgChxDTURfQ2hlc3NfU1VCX1NfQ0hFU1NfTUFOVUFMEBQSIAocQ01EX0No",
            "ZXNzX1NVQl9TX1JFUV9TRVRfUlVMRRAVEiIKHkNNRF9DaGVzc19TVUJfU19S",
            "RVFfQUdSRUVfUlVMRRAWEh8KG0NNRF9DaGVzc19TVUJfU19LSUNLX1BMQVlF",
            "UhAXEiAKHENNRF9DaGVzc19TVUJfU19OT1RJRllfVElNRVIQGBIlCiFDTURf",
            "Q2hlc3NfU1VCX1NfTk9USUZZX1JPT01fT1dORVIQGRIjCh9DTURfQ2hlc3Nf",
            "U1VCX1NfTk9USUZZX1NFVF9SVUxFEBoSHAoYQ01EX0NoZXNzX1NVQl9TX1NF",
            "VF9SVUxFEBsSHQoZQ01EX0NoZXNzX1NVQl9TX01BS0VfUlVMRRAcEiAKHENN",
            "RF9DaGVzc19TVUJfU19OT1RJRllfUkVBRFkQHRIgChxDTURfQ2hlc3NfU1VC",
            "X1NfTk9USUZZX1NUQVJUEB4SHAoYQ01EX0NoZXNzX1NVQl9TX0NPTlRJTlVF",
            "EB9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ChnChess.EMsgIDSubGame), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ChnChess.SC_SceneInfo), global::ChnChess.SC_SceneInfo.Parser, new[]{ "FreeCount", "CurrenBet", "Bet", "Rerun" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChnChess.CMD_Chess_MOVE_CHESS), global::ChnChess.CMD_Chess_MOVE_CHESS.Parser, new[]{ "CbXSourcePos", "CbYSourcePos", "CbXTargetPos", "CbYTargetPos", "WCurrentUser" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChnChess.RegretResult), global::ChnChess.RegretResult.Parser, new[]{ "WRegretUser", "WCurrentUser", "CbRegretCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChnChess.CMD_Common), global::ChnChess.CMD_Common.Parser, new[]{ "OpIndex", "WaitTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChnChess.GameEnd), global::ChnChess.GameEnd.Parser, new[]{ "WWinUser", "LUserScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChnChess.Chess_Manual_Item), global::ChnChess.Chess_Manual_Item.Parser, new[]{ "CbXSourceChessPos", "CbYSourceChessPos", "CbXTargetChessPos", "CbYTargetChessPos", "CbUniteChess", "CbSourceColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChnChess.Chess_Manual), global::ChnChess.Chess_Manual.Parser, new[]{ "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChnChess.Notify_Timer), global::ChnChess.Notify_Timer.Parser, new[]{ "WaitTime", "RoomType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ChnChess.CMD_Make_Rule), global::ChnChess.CMD_Make_Rule.Parser, new[]{ "ErrorID", "Score" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EMsgIDSubGame {
    /// <summary>
    ///悔棋(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_REGRET_REQ")] CmdChessSubCRegretReq = 0,
    /// <summary>
    ///悔棋应答(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_REGRET_ANSWER")] CmdChessSubCRegretAnswer = 1,
    /// <summary>
    ///认输请求(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_GIVEUP_REQ")] CmdChessSubCGiveupReq = 2,
    /// <summary>
    ///和棋请求(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_PEACE_REQ")] CmdChessSubCPeaceReq = 3,
    /// <summary>
    ///和棋应答(MsgCommonBool)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_PEACE_ANSWER")] CmdChessSubCPeaceAnswer = 4,
    /// <summary>
    ///移动棋子(CMD_Chess_MOVE_CHESS)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_MOVE_CHESS")] CmdChessSubCMoveChess = 5,
    /// <summary>
    ///房主踢人(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_KICK_PLAYER")] CmdChessSubCKickPlayer = 6,
    /// <summary>
    ///玩家设置规则(MsgCommonN64)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_SET_RULE")] CmdChessSubCSetRule = 7,
    /// <summary>
    ///玩家确定下注(MsgCommonN64)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_MAKE_RULE")] CmdChessSubCMakeRule = 8,
    /// <summary>
    ///玩家选择准备(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_NOTIFY_READY")] CmdChessSubCNotifyReady = 9,
    /// <summary>
    ///玩家选择开始(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_NOTIFY_START")] CmdChessSubCNotifyStart = 10,
    /// <summary>
    ///玩家选择继续(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_C_CONTINUE")] CmdChessSubCContinue = 11,
    /// <summary>
    ///游戏开始(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_GAME_START")] CmdChessSubSGameStart = 12,
    /// <summary>
    ///移动棋子(CMD_Chess_MOVE_CHESS)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_MOVE_CHESS")] CmdChessSubSMoveChess = 13,
    /// <summary>
    ///悔棋请求(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REGRET_REQ")] CmdChessSubSRegretReq = 14,
    /// <summary>
    ///悔棋失败(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REGRET_FAILE")] CmdChessSubSRegretFaile = 15,
    /// <summary>
    ///悔棋结果(RegretResult)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REGRET_RESULT")] CmdChessSubSRegretResult = 16,
    /// <summary>
    ///和棋请求(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_PEACE_REQ")] CmdChessSubSPeaceReq = 17,
    /// <summary>
    ///悔棋失败(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_PEACE_ANSWER")] CmdChessSubSPeaceAnswer = 18,
    /// <summary>
    ///游戏结束(GameEnd)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_GAME_END")] CmdChessSubSGameEnd = 19,
    /// <summary>
    ///棋谱信息(Chess_Manual)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_CHESS_MANUAL")] CmdChessSubSChessManual = 20,
    /// <summary>
    ///请求设置
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REQ_SET_RULE")] CmdChessSubSReqSetRule = 21,
    /// <summary>
    ///请求同意
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_REQ_AGREE_RULE")] CmdChessSubSReqAgreeRule = 22,
    /// <summary>
    ///房主踢人(MsgCommonEmpty)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_KICK_PLAYER")] CmdChessSubSKickPlayer = 23,
    /// <summary>
    ///等待时间通知(Notify_Timer)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_TIMER")] CmdChessSubSNotifyTimer = 24,
    /// <summary>
    ///通知谁是房主(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_ROOM_OWNER")] CmdChessSubSNotifyRoomOwner = 25,
    /// <summary>
    ///通知玩家设置规则(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_SET_RULE")] CmdChessSubSNotifySetRule = 26,
    /// <summary>
    ///玩家设置规则
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_SET_RULE")] CmdChessSubSSetRule = 27,
    /// <summary>
    ///玩家确定下注(CMD_Make_Rule)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_MAKE_RULE")] CmdChessSubSMakeRule = 28,
    /// <summary>
    ///通知玩家选择准备(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_READY")] CmdChessSubSNotifyReady = 29,
    /// <summary>
    ///通知玩家选择开始(CMD_Common)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_NOTIFY_START")] CmdChessSubSNotifyStart = 30,
    /// <summary>
    ///玩家选择继续(MsgCommonN32)
    /// </summary>
    [pbr::OriginalName("CMD_Chess_SUB_S_CONTINUE")] CmdChessSubSContinue = 31,
  }

  #endregion

  #region Messages
  /// <summary>
  ///场景消息
  /// </summary>
  public sealed partial class SC_SceneInfo : pb::IMessage<SC_SceneInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SC_SceneInfo> _parser = new pb::MessageParser<SC_SceneInfo>(() => new SC_SceneInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_SceneInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChnChess.ChnChessReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo(SC_SceneInfo other) : this() {
      freeCount_ = other.freeCount_;
      currenBet_ = other.currenBet_;
      bet_ = other.bet_.Clone();
      rerun_ = other.rerun_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_SceneInfo Clone() {
      return new SC_SceneInfo(this);
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 1;
    private int freeCount_;
    /// <summary>
    /// 免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "curren_bet" field.</summary>
    public const int CurrenBetFieldNumber = 2;
    private int currenBet_;
    /// <summary>
    /// 当前下注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrenBet {
      get { return currenBet_; }
      set {
        currenBet_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_bet_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> bet_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 下注配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bet {
      get { return bet_; }
    }

    /// <summary>Field number for the "rerun" field.</summary>
    public const int RerunFieldNumber = 4;
    private int rerun_;
    /// <summary>
    /// 重转次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rerun {
      get { return rerun_; }
      set {
        rerun_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_SceneInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_SceneInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FreeCount != other.FreeCount) return false;
      if (CurrenBet != other.CurrenBet) return false;
      if(!bet_.Equals(other.bet_)) return false;
      if (Rerun != other.Rerun) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (CurrenBet != 0) hash ^= CurrenBet.GetHashCode();
      hash ^= bet_.GetHashCode();
      if (Rerun != 0) hash ^= Rerun.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeCount);
      }
      if (CurrenBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrenBet);
      }
      bet_.WriteTo(output, _repeated_bet_codec);
      if (Rerun != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rerun);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FreeCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FreeCount);
      }
      if (CurrenBet != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrenBet);
      }
      bet_.WriteTo(ref output, _repeated_bet_codec);
      if (Rerun != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rerun);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (CurrenBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrenBet);
      }
      size += bet_.CalculateSize(_repeated_bet_codec);
      if (Rerun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rerun);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_SceneInfo other) {
      if (other == null) {
        return;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.CurrenBet != 0) {
        CurrenBet = other.CurrenBet;
      }
      bet_.Add(other.bet_);
      if (other.Rerun != 0) {
        Rerun = other.Rerun;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            CurrenBet = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
          case 32: {
            Rerun = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 16: {
            CurrenBet = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
          case 32: {
            Rerun = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///移动棋子
  /// </summary>
  public sealed partial class CMD_Chess_MOVE_CHESS : pb::IMessage<CMD_Chess_MOVE_CHESS>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_Chess_MOVE_CHESS> _parser = new pb::MessageParser<CMD_Chess_MOVE_CHESS>(() => new CMD_Chess_MOVE_CHESS());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_Chess_MOVE_CHESS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChnChess.ChnChessReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Chess_MOVE_CHESS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Chess_MOVE_CHESS(CMD_Chess_MOVE_CHESS other) : this() {
      cbXSourcePos_ = other.cbXSourcePos_;
      cbYSourcePos_ = other.cbYSourcePos_;
      cbXTargetPos_ = other.cbXTargetPos_;
      cbYTargetPos_ = other.cbYTargetPos_;
      wCurrentUser_ = other.wCurrentUser_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Chess_MOVE_CHESS Clone() {
      return new CMD_Chess_MOVE_CHESS(this);
    }

    /// <summary>Field number for the "cbXSourcePos" field.</summary>
    public const int CbXSourcePosFieldNumber = 1;
    private int cbXSourcePos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXSourcePos {
      get { return cbXSourcePos_; }
      set {
        cbXSourcePos_ = value;
      }
    }

    /// <summary>Field number for the "cbYSourcePos" field.</summary>
    public const int CbYSourcePosFieldNumber = 2;
    private int cbYSourcePos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYSourcePos {
      get { return cbYSourcePos_; }
      set {
        cbYSourcePos_ = value;
      }
    }

    /// <summary>Field number for the "cbXTargetPos" field.</summary>
    public const int CbXTargetPosFieldNumber = 3;
    private int cbXTargetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXTargetPos {
      get { return cbXTargetPos_; }
      set {
        cbXTargetPos_ = value;
      }
    }

    /// <summary>Field number for the "cbYTargetPos" field.</summary>
    public const int CbYTargetPosFieldNumber = 4;
    private int cbYTargetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYTargetPos {
      get { return cbYTargetPos_; }
      set {
        cbYTargetPos_ = value;
      }
    }

    /// <summary>Field number for the "wCurrentUser" field.</summary>
    public const int WCurrentUserFieldNumber = 5;
    private int wCurrentUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WCurrentUser {
      get { return wCurrentUser_; }
      set {
        wCurrentUser_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_Chess_MOVE_CHESS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_Chess_MOVE_CHESS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CbXSourcePos != other.CbXSourcePos) return false;
      if (CbYSourcePos != other.CbYSourcePos) return false;
      if (CbXTargetPos != other.CbXTargetPos) return false;
      if (CbYTargetPos != other.CbYTargetPos) return false;
      if (WCurrentUser != other.WCurrentUser) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CbXSourcePos != 0) hash ^= CbXSourcePos.GetHashCode();
      if (CbYSourcePos != 0) hash ^= CbYSourcePos.GetHashCode();
      if (CbXTargetPos != 0) hash ^= CbXTargetPos.GetHashCode();
      if (CbYTargetPos != 0) hash ^= CbYTargetPos.GetHashCode();
      if (WCurrentUser != 0) hash ^= WCurrentUser.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CbXSourcePos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetPos);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WCurrentUser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CbXSourcePos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetPos);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WCurrentUser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CbXSourcePos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXSourcePos);
      }
      if (CbYSourcePos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYSourcePos);
      }
      if (CbXTargetPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXTargetPos);
      }
      if (CbYTargetPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYTargetPos);
      }
      if (WCurrentUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WCurrentUser);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_Chess_MOVE_CHESS other) {
      if (other == null) {
        return;
      }
      if (other.CbXSourcePos != 0) {
        CbXSourcePos = other.CbXSourcePos;
      }
      if (other.CbYSourcePos != 0) {
        CbYSourcePos = other.CbYSourcePos;
      }
      if (other.CbXTargetPos != 0) {
        CbXTargetPos = other.CbXTargetPos;
      }
      if (other.CbYTargetPos != 0) {
        CbYTargetPos = other.CbYTargetPos;
      }
      if (other.WCurrentUser != 0) {
        WCurrentUser = other.WCurrentUser;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CbXSourcePos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourcePos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetPos = input.ReadInt32();
            break;
          }
          case 40: {
            WCurrentUser = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CbXSourcePos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourcePos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetPos = input.ReadInt32();
            break;
          }
          case 40: {
            WCurrentUser = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///悔棋结果
  /// </summary>
  public sealed partial class RegretResult : pb::IMessage<RegretResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RegretResult> _parser = new pb::MessageParser<RegretResult>(() => new RegretResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegretResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChnChess.ChnChessReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegretResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegretResult(RegretResult other) : this() {
      wRegretUser_ = other.wRegretUser_;
      wCurrentUser_ = other.wCurrentUser_;
      cbRegretCount_ = other.cbRegretCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegretResult Clone() {
      return new RegretResult(this);
    }

    /// <summary>Field number for the "wRegretUser" field.</summary>
    public const int WRegretUserFieldNumber = 1;
    private int wRegretUser_;
    /// <summary>
    ///悔棋操作玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WRegretUser {
      get { return wRegretUser_; }
      set {
        wRegretUser_ = value;
      }
    }

    /// <summary>Field number for the "wCurrentUser" field.</summary>
    public const int WCurrentUserFieldNumber = 2;
    private int wCurrentUser_;
    /// <summary>
    ///当前玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WCurrentUser {
      get { return wCurrentUser_; }
      set {
        wCurrentUser_ = value;
      }
    }

    /// <summary>Field number for the "cbRegretCount" field.</summary>
    public const int CbRegretCountFieldNumber = 3;
    private int cbRegretCount_;
    /// <summary>
    ///悔棋次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbRegretCount {
      get { return cbRegretCount_; }
      set {
        cbRegretCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegretResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegretResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WRegretUser != other.WRegretUser) return false;
      if (WCurrentUser != other.WCurrentUser) return false;
      if (CbRegretCount != other.CbRegretCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WRegretUser != 0) hash ^= WRegretUser.GetHashCode();
      if (WCurrentUser != 0) hash ^= WCurrentUser.GetHashCode();
      if (CbRegretCount != 0) hash ^= CbRegretCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WRegretUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WRegretUser);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WCurrentUser);
      }
      if (CbRegretCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbRegretCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WRegretUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WRegretUser);
      }
      if (WCurrentUser != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WCurrentUser);
      }
      if (CbRegretCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbRegretCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WRegretUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WRegretUser);
      }
      if (WCurrentUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WCurrentUser);
      }
      if (CbRegretCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbRegretCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegretResult other) {
      if (other == null) {
        return;
      }
      if (other.WRegretUser != 0) {
        WRegretUser = other.WRegretUser;
      }
      if (other.WCurrentUser != 0) {
        WCurrentUser = other.WCurrentUser;
      }
      if (other.CbRegretCount != 0) {
        CbRegretCount = other.CbRegretCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WRegretUser = input.ReadInt32();
            break;
          }
          case 16: {
            WCurrentUser = input.ReadInt32();
            break;
          }
          case 24: {
            CbRegretCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WRegretUser = input.ReadInt32();
            break;
          }
          case 16: {
            WCurrentUser = input.ReadInt32();
            break;
          }
          case 24: {
            CbRegretCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///通用请求和回复
  /// </summary>
  public sealed partial class CMD_Common : pb::IMessage<CMD_Common>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_Common> _parser = new pb::MessageParser<CMD_Common>(() => new CMD_Common());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_Common> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChnChess.ChnChessReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Common() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Common(CMD_Common other) : this() {
      opIndex_ = other.opIndex_;
      waitTime_ = other.waitTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Common Clone() {
      return new CMD_Common(this);
    }

    /// <summary>Field number for the "opIndex" field.</summary>
    public const int OpIndexFieldNumber = 1;
    private int opIndex_;
    /// <summary>
    ///操作玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpIndex {
      get { return opIndex_; }
      set {
        opIndex_ = value;
      }
    }

    /// <summary>Field number for the "waitTime" field.</summary>
    public const int WaitTimeFieldNumber = 2;
    private int waitTime_;
    /// <summary>
    ///操作时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitTime {
      get { return waitTime_; }
      set {
        waitTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_Common);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_Common other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpIndex != other.OpIndex) return false;
      if (WaitTime != other.WaitTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpIndex != 0) hash ^= OpIndex.GetHashCode();
      if (WaitTime != 0) hash ^= WaitTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OpIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OpIndex);
      }
      if (WaitTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WaitTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OpIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OpIndex);
      }
      if (WaitTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WaitTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpIndex);
      }
      if (WaitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_Common other) {
      if (other == null) {
        return;
      }
      if (other.OpIndex != 0) {
        OpIndex = other.OpIndex;
      }
      if (other.WaitTime != 0) {
        WaitTime = other.WaitTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OpIndex = input.ReadInt32();
            break;
          }
          case 16: {
            WaitTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OpIndex = input.ReadInt32();
            break;
          }
          case 16: {
            WaitTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///游戏结束
  /// </summary>
  public sealed partial class GameEnd : pb::IMessage<GameEnd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameEnd> _parser = new pb::MessageParser<GameEnd>(() => new GameEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChnChess.ChnChessReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEnd(GameEnd other) : this() {
      wWinUser_ = other.wWinUser_;
      lUserScore_ = other.lUserScore_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEnd Clone() {
      return new GameEnd(this);
    }

    /// <summary>Field number for the "wWinUser" field.</summary>
    public const int WWinUserFieldNumber = 1;
    private int wWinUser_;
    /// <summary>
    ///赢家，和局为65535
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WWinUser {
      get { return wWinUser_; }
      set {
        wWinUser_ = value;
      }
    }

    /// <summary>Field number for the "lUserScore" field.</summary>
    public const int LUserScoreFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_lUserScore_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> lUserScore_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///玩家金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> LUserScore {
      get { return lUserScore_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WWinUser != other.WWinUser) return false;
      if(!lUserScore_.Equals(other.lUserScore_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WWinUser != 0) hash ^= WWinUser.GetHashCode();
      hash ^= lUserScore_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WWinUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WWinUser);
      }
      lUserScore_.WriteTo(output, _repeated_lUserScore_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WWinUser != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WWinUser);
      }
      lUserScore_.WriteTo(ref output, _repeated_lUserScore_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WWinUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WWinUser);
      }
      size += lUserScore_.CalculateSize(_repeated_lUserScore_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEnd other) {
      if (other == null) {
        return;
      }
      if (other.WWinUser != 0) {
        WWinUser = other.WWinUser;
      }
      lUserScore_.Add(other.lUserScore_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WWinUser = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            lUserScore_.AddEntriesFrom(input, _repeated_lUserScore_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WWinUser = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            lUserScore_.AddEntriesFrom(ref input, _repeated_lUserScore_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Chess_Manual_Item : pb::IMessage<Chess_Manual_Item>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Chess_Manual_Item> _parser = new pb::MessageParser<Chess_Manual_Item>(() => new Chess_Manual_Item());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chess_Manual_Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChnChess.ChnChessReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual_Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual_Item(Chess_Manual_Item other) : this() {
      cbXSourceChessPos_ = other.cbXSourceChessPos_;
      cbYSourceChessPos_ = other.cbYSourceChessPos_;
      cbXTargetChessPos_ = other.cbXTargetChessPos_;
      cbYTargetChessPos_ = other.cbYTargetChessPos_;
      cbUniteChess_ = other.cbUniteChess_;
      cbSourceColor_ = other.cbSourceColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual_Item Clone() {
      return new Chess_Manual_Item(this);
    }

    /// <summary>Field number for the "cbXSourceChessPos" field.</summary>
    public const int CbXSourceChessPosFieldNumber = 1;
    private int cbXSourceChessPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXSourceChessPos {
      get { return cbXSourceChessPos_; }
      set {
        cbXSourceChessPos_ = value;
      }
    }

    /// <summary>Field number for the "cbYSourceChessPos" field.</summary>
    public const int CbYSourceChessPosFieldNumber = 2;
    private int cbYSourceChessPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYSourceChessPos {
      get { return cbYSourceChessPos_; }
      set {
        cbYSourceChessPos_ = value;
      }
    }

    /// <summary>Field number for the "cbXTargetChessPos" field.</summary>
    public const int CbXTargetChessPosFieldNumber = 3;
    private int cbXTargetChessPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbXTargetChessPos {
      get { return cbXTargetChessPos_; }
      set {
        cbXTargetChessPos_ = value;
      }
    }

    /// <summary>Field number for the "cbYTargetChessPos" field.</summary>
    public const int CbYTargetChessPosFieldNumber = 4;
    private int cbYTargetChessPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbYTargetChessPos {
      get { return cbYTargetChessPos_; }
      set {
        cbYTargetChessPos_ = value;
      }
    }

    /// <summary>Field number for the "cbUniteChess" field.</summary>
    public const int CbUniteChessFieldNumber = 5;
    private int cbUniteChess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbUniteChess {
      get { return cbUniteChess_; }
      set {
        cbUniteChess_ = value;
      }
    }

    /// <summary>Field number for the "cbSourceColor" field.</summary>
    public const int CbSourceColorFieldNumber = 6;
    private int cbSourceColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CbSourceColor {
      get { return cbSourceColor_; }
      set {
        cbSourceColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chess_Manual_Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chess_Manual_Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CbXSourceChessPos != other.CbXSourceChessPos) return false;
      if (CbYSourceChessPos != other.CbYSourceChessPos) return false;
      if (CbXTargetChessPos != other.CbXTargetChessPos) return false;
      if (CbYTargetChessPos != other.CbYTargetChessPos) return false;
      if (CbUniteChess != other.CbUniteChess) return false;
      if (CbSourceColor != other.CbSourceColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CbXSourceChessPos != 0) hash ^= CbXSourceChessPos.GetHashCode();
      if (CbYSourceChessPos != 0) hash ^= CbYSourceChessPos.GetHashCode();
      if (CbXTargetChessPos != 0) hash ^= CbXTargetChessPos.GetHashCode();
      if (CbYTargetChessPos != 0) hash ^= CbYTargetChessPos.GetHashCode();
      if (CbUniteChess != 0) hash ^= CbUniteChess.GetHashCode();
      if (CbSourceColor != 0) hash ^= CbSourceColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CbXSourceChessPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourceChessPos);
      }
      if (CbYSourceChessPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourceChessPos);
      }
      if (CbXTargetChessPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetChessPos);
      }
      if (CbYTargetChessPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetChessPos);
      }
      if (CbUniteChess != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CbUniteChess);
      }
      if (CbSourceColor != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CbSourceColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CbXSourceChessPos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CbXSourceChessPos);
      }
      if (CbYSourceChessPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CbYSourceChessPos);
      }
      if (CbXTargetChessPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CbXTargetChessPos);
      }
      if (CbYTargetChessPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CbYTargetChessPos);
      }
      if (CbUniteChess != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CbUniteChess);
      }
      if (CbSourceColor != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CbSourceColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CbXSourceChessPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXSourceChessPos);
      }
      if (CbYSourceChessPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYSourceChessPos);
      }
      if (CbXTargetChessPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbXTargetChessPos);
      }
      if (CbYTargetChessPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbYTargetChessPos);
      }
      if (CbUniteChess != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbUniteChess);
      }
      if (CbSourceColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CbSourceColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chess_Manual_Item other) {
      if (other == null) {
        return;
      }
      if (other.CbXSourceChessPos != 0) {
        CbXSourceChessPos = other.CbXSourceChessPos;
      }
      if (other.CbYSourceChessPos != 0) {
        CbYSourceChessPos = other.CbYSourceChessPos;
      }
      if (other.CbXTargetChessPos != 0) {
        CbXTargetChessPos = other.CbXTargetChessPos;
      }
      if (other.CbYTargetChessPos != 0) {
        CbYTargetChessPos = other.CbYTargetChessPos;
      }
      if (other.CbUniteChess != 0) {
        CbUniteChess = other.CbUniteChess;
      }
      if (other.CbSourceColor != 0) {
        CbSourceColor = other.CbSourceColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CbXSourceChessPos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourceChessPos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetChessPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetChessPos = input.ReadInt32();
            break;
          }
          case 40: {
            CbUniteChess = input.ReadInt32();
            break;
          }
          case 48: {
            CbSourceColor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CbXSourceChessPos = input.ReadInt32();
            break;
          }
          case 16: {
            CbYSourceChessPos = input.ReadInt32();
            break;
          }
          case 24: {
            CbXTargetChessPos = input.ReadInt32();
            break;
          }
          case 32: {
            CbYTargetChessPos = input.ReadInt32();
            break;
          }
          case 40: {
            CbUniteChess = input.ReadInt32();
            break;
          }
          case 48: {
            CbSourceColor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///棋谱信息，操作历史记录
  /// </summary>
  public sealed partial class Chess_Manual : pb::IMessage<Chess_Manual>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Chess_Manual> _parser = new pb::MessageParser<Chess_Manual>(() => new Chess_Manual());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chess_Manual> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChnChess.ChnChessReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual(Chess_Manual other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chess_Manual Clone() {
      return new Chess_Manual(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ChnChess.Chess_Manual_Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ChnChess.Chess_Manual_Item.Parser);
    private readonly pbc::RepeatedField<global::ChnChess.Chess_Manual_Item> items_ = new pbc::RepeatedField<global::ChnChess.Chess_Manual_Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ChnChess.Chess_Manual_Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chess_Manual);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chess_Manual other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      items_.WriteTo(ref output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chess_Manual other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            items_.AddEntriesFrom(ref input, _repeated_items_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Notify_Timer : pb::IMessage<Notify_Timer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Notify_Timer> _parser = new pb::MessageParser<Notify_Timer>(() => new Notify_Timer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_Timer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChnChess.ChnChessReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Timer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Timer(Notify_Timer other) : this() {
      waitTime_ = other.waitTime_;
      roomType_ = other.roomType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Timer Clone() {
      return new Notify_Timer(this);
    }

    /// <summary>Field number for the "waitTime" field.</summary>
    public const int WaitTimeFieldNumber = 1;
    private int waitTime_;
    /// <summary>
    ///等待时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitTime {
      get { return waitTime_; }
      set {
        waitTime_ = value;
      }
    }

    /// <summary>Field number for the "roomType" field.</summary>
    public const int RoomTypeFieldNumber = 2;
    private int roomType_;
    /// <summary>
    ///阶段,2:等待玩家加入,4:设置金额中,6:准备中,8:准备开始,9:时间到,10:结算中,11:求和中,12:悔棋中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_Timer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_Timer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WaitTime != other.WaitTime) return false;
      if (RoomType != other.RoomType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WaitTime != 0) hash ^= WaitTime.GetHashCode();
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WaitTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaitTime);
      }
      if (RoomType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WaitTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaitTime);
      }
      if (RoomType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTime);
      }
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_Timer other) {
      if (other == null) {
        return;
      }
      if (other.WaitTime != 0) {
        WaitTime = other.WaitTime;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WaitTime = input.ReadInt32();
            break;
          }
          case 16: {
            RoomType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            WaitTime = input.ReadInt32();
            break;
          }
          case 16: {
            RoomType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CMD_Make_Rule : pb::IMessage<CMD_Make_Rule>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CMD_Make_Rule> _parser = new pb::MessageParser<CMD_Make_Rule>(() => new CMD_Make_Rule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CMD_Make_Rule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ChnChess.ChnChessReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Make_Rule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Make_Rule(CMD_Make_Rule other) : this() {
      errorID_ = other.errorID_;
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CMD_Make_Rule Clone() {
      return new CMD_Make_Rule(this);
    }

    /// <summary>Field number for the "errorID" field.</summary>
    public const int ErrorIDFieldNumber = 1;
    private int errorID_;
    /// <summary>
    ///确认状态码，0成功，1设置金额小于最小下注，2设置金额大于最大下注，3红方金币不足，4黑方金币不足
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorID {
      get { return errorID_; }
      set {
        errorID_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private long score_;
    /// <summary>
    ///下注金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CMD_Make_Rule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CMD_Make_Rule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorID != other.ErrorID) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrorID != 0) hash ^= ErrorID.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ErrorID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorID);
      }
      if (Score != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ErrorID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorID);
      }
      if (Score != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrorID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorID);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CMD_Make_Rule other) {
      if (other == null) {
        return;
      }
      if (other.ErrorID != 0) {
        ErrorID = other.ErrorID;
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorID = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ErrorID = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
