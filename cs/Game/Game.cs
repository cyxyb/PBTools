// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/Game/Game.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Proto/Game/Game.proto</summary>
public static partial class GameReflection {

  #region Descriptor
  /// <summary>File descriptor for Proto/Game/Game.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GameReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChVQcm90by9HYW1lL0dhbWUucHJvdG8iNwoSTXNnR2FtZVBsYXllckxvZ2lu",
          "Eg8KB3VzZXJfaWQYASABKAUSEAoIcGFzc3dvcmQYAiABKAkitwEKEU1zZ0dh",
          "bWVQbGF5ZXJJbmZvEg8KB3VzZXJfaWQYASABKAUSFAoMYmVhdXRpZnVsX2lk",
          "GAIgASgFEhAKCG5pY2tuYW1lGAMgASgJEg4KBmF2YXRhchgEIAEoCRIMCgRj",
          "b2luGAUgASgEEhAKCHRhYmxlX2lkGAYgASgFEhAKCGNoYWlyX2lkGAcgASgF",
          "EhEKCXZpcF9sZXZlbBgIIAEoBRIUCgxhdmF0YXJfZnJhbWUYCSABKAUigQEK",
          "Fk1zZ0dhbWVQbGF5ZXJMb2dpblJlc3ASEAoIcmVzX2NvZGUYASABKAUSDwoH",
          "dXNlcl9pZBgCIAEoBRIUCgxiZWF1dGlmdWxfaWQYAyABKAUSEAoIbmlja25h",
          "bWUYBCABKAkSDgoGYXZhdGFyGAUgASgJEgwKBGNvaW4YBiABKAQiNQoTTXNn",
          "U3luY1BsYXllcnNTY29yZRIQCghjaGFpcl9pZBgBIAEoBRIMCgRjb2luGAIg",
          "ASgEIlUKDE1zZ1JvdW5kRGF0YRIMCgR0aW1lGAEgASgFEhMKC3dpbl91c2Vy",
          "X2lkGAIgASgFEhQKDGxvc2VfdXNlcl9pZBgDIAEoBRIMCgRnb2xkGAQgASgD",
          "IkkKEU1zZ1RvdGFsUm91bmREYXRhEhEKCXRvdGFsX251bRgBIAEoBRIhCgpy",
          "b3VuZF9kYXRhGAIgAygLMg0uTXNnUm91bmREYXRhIqoBCgpNc2dEYXlEYXRh",
          "EgwKBHRpbWUYASABKAkSGAoQdG90YWxfcGxheV9jb3VudBgCIAEoBRISCgps",
          "b3NlX2NvdW50GAMgASgFEhEKCWxvc2VfZ29sZBgEIAEoAxIRCgl3aW5fY291",
          "bnQYBSABKAUSEAoId2luX2dvbGQYBiABKAMSEgoKdG90YWxfZ29sZBgHIAEo",
          "AxIUCgxzdXJwbHVzX2dvbGQYCCABKAMiRQoPTXNnVG90YWxEYXlEYXRhEhEK",
          "CXRvdGFsX251bRgBIAEoBRIfCgpkYWlseV9kYXRhGAIgAygLMgsuTXNnRGF5",
          "RGF0YSI5Cg5Nc2dRdWVyeVJlY29yZBIMCgRwYWdlGAEgASgFEgsKA251bRgC",
          "IAEoBRIMCgR0eXBlGAMgASgFIjcKDk1zZ0phY2twb3RJbmZvEg8KB2phY2tw",
          "b3QYASABKAMSFAoMZmFrZV9qYWNrcG90GAIgASgDIqcCCg9Nc2dQdnBUYWJs",
          "ZUluZm8SEAoIdGFibGVfaWQYASABKAUSEgoKdGFibGVfbmFtZRgCIAEoCRIR",
          "CgljaGFpcl9udW0YAyABKAUSEQoJZW50ZXJfbnVtGAQgASgFEhIKCmlzX3By",
          "aXZhdGUYByABKAgSEAoIcGFzc3dvcmQYCCABKAkSEAoIb3duZXJfaWQYCSAB",
          "KAUSEAoIdGFibGVfbm8YCiABKAUSDgoGdmFsdWUxGAsgASgDEg4KBnZhbHVl",
          "MhgMIAEoAxIOCgZ2YWx1ZTMYDSABKAMSDgoGdmFsdWU0GA4gASgDEg4KBnZh",
          "bHVlNRgPIAEoAxIOCgZ2YWx1ZTYYECABKAMSDgoGdmFsdWU3GBEgASgDEg4K",
          "BnZhbHVlOBgSIAEoAyI4ChFNc2dQdnBSb29tQ2ZnSXRlbRIPCgdsYWdfa2V5",
          "GAEgASgFEhIKCnZhbHVlX2xpc3QYAiADKAUihQEKEE1zZ1B2cFJvb21Db25m",
          "aWcSGAoQY3JlYXRlX3ZpcF9saW1pdBgBIAEoBRIXCg9jaGFpcl9saW1pdF9t",
          "aW4YAiABKAUSFwoPY2hhaXJfbGltaXRfbWF4GAMgASgFEiUKCXBhcmFfbHNp",
          "dBgLIAMoCzISLk1zZ1B2cFJvb21DZmdJdGVtIjcKD01zZ1B2cFRhYmxlTGlz",
          "dBIkCgp0YWJsZV9saXN0GAEgAygLMhAuTXNnUHZwVGFibGVJbmZvInMKEU1z",
          "Z1B2cENyZWF0ZVRhYmxlEhIKCmlzX3ByaXZhdGUYASABKAgSEgoKdGFibGVf",
          "bmFtZRgCIAEoCRIRCgljaGFpcl9udW0YAyABKAUSEAoIcGFzc3dvcmQYBiAB",
          "KAkSEQoJcGFyYV9sc2l0GAcgAygFIk8KFU1zZ1B2cENyZWF0ZVRhYmxlUmVz",
          "cBIQCghyZXRfY29kZRgBIAEoBRIkCgp0YWJsZV9pbmZvGAIgASgLMhAuTXNn",
          "UHZwVGFibGVJbmZvIkcKD01zZ1B2cEpvaW5UYWJsZRIQCgh0YWJsZV9pZBgB",
          "IAEoBRIQCgh0YWJsZV9ubxgCIAEoBRIQCghwYXNzd29yZBgDIAEoCSJwChNN",
          "c2dQdnBKb2luVGFibGVSZXNwEhAKCHJldF9jb2RlGAEgASgFEhAKCHRhYmxl",
          "X2lkGAIgASgFEhAKCHRhYmxlX25vGAMgASgFEg8KB3VzZXJfaWQYBCABKAUS",
          "EgoKcGxheWVyX251bRgFIAEoBSJzChZNc2dQdnBTdGFuZFVwVGFibGVSZXNw",
          "EhAKCHJldF9jb2RlGAEgASgFEhAKCHRhYmxlX2lkGAIgASgFEhAKCHRhYmxl",
          "X25vGAMgASgFEg8KB3VzZXJfaWQYBCABKAUSEgoKcGxheWVyX251bRgFIAEo",
          "BSJOChZNc2dQdnBEZXN0cm95VGFibGVSZXNwEhAKCHJldF9jb2RlGAEgASgF",
          "EhAKCHRhYmxlX2lkGAIgASgFEhAKCHRhYmxlX25vGAMgASgFInAKEk1zZ1B2",
          "cEtpY2tVc2VyUmVzcBIQCghyZXRfY29kZRgBIAEoBRIQCghvd25lcl9pZBgC",
          "IAEoBRISCgpvd25lcl9uaWNrGAMgASgJEg8KB2tpY2tfaWQYBCABKAUSEQoJ",
          "a2lja19uaWNrGAUgASgJIlUKGk1zZ1B2cFRhYmxlQ2hhbmdlT3duZXJSZXNw",
          "EhAKCHRhYmxlX2lkGAEgASgFEhAKCG93bmVyX2lkGAIgASgFEhMKC2lzX2Fj",
          "dGl2YXRlGAMgASgIYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgGamePlayerLogin), global::MsgGamePlayerLogin.Parser, new[]{ "UserId", "Password" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgGamePlayerInfo), global::MsgGamePlayerInfo.Parser, new[]{ "UserId", "BeautifulId", "Nickname", "Avatar", "Coin", "TableId", "ChairId", "VipLevel", "AvatarFrame" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgGamePlayerLoginResp), global::MsgGamePlayerLoginResp.Parser, new[]{ "ResCode", "UserId", "BeautifulId", "Nickname", "Avatar", "Coin" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgSyncPlayersScore), global::MsgSyncPlayersScore.Parser, new[]{ "ChairId", "Coin" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgRoundData), global::MsgRoundData.Parser, new[]{ "Time", "WinUserId", "LoseUserId", "Gold" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgTotalRoundData), global::MsgTotalRoundData.Parser, new[]{ "TotalNum", "RoundData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgDayData), global::MsgDayData.Parser, new[]{ "Time", "TotalPlayCount", "LoseCount", "LoseGold", "WinCount", "WinGold", "TotalGold", "SurplusGold" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgTotalDayData), global::MsgTotalDayData.Parser, new[]{ "TotalNum", "DailyData" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgQueryRecord), global::MsgQueryRecord.Parser, new[]{ "Page", "Num", "Type" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgJackpotInfo), global::MsgJackpotInfo.Parser, new[]{ "Jackpot", "FakeJackpot" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpTableInfo), global::MsgPvpTableInfo.Parser, new[]{ "TableId", "TableName", "ChairNum", "EnterNum", "IsPrivate", "Password", "OwnerId", "TableNo", "Value1", "Value2", "Value3", "Value4", "Value5", "Value6", "Value7", "Value8" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpRoomCfgItem), global::MsgPvpRoomCfgItem.Parser, new[]{ "LagKey", "ValueList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpRoomConfig), global::MsgPvpRoomConfig.Parser, new[]{ "CreateVipLimit", "ChairLimitMin", "ChairLimitMax", "ParaLsit" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpTableList), global::MsgPvpTableList.Parser, new[]{ "TableList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpCreateTable), global::MsgPvpCreateTable.Parser, new[]{ "IsPrivate", "TableName", "ChairNum", "Password", "ParaLsit" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpCreateTableResp), global::MsgPvpCreateTableResp.Parser, new[]{ "RetCode", "TableInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpJoinTable), global::MsgPvpJoinTable.Parser, new[]{ "TableId", "TableNo", "Password" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpJoinTableResp), global::MsgPvpJoinTableResp.Parser, new[]{ "RetCode", "TableId", "TableNo", "UserId", "PlayerNum" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpStandUpTableResp), global::MsgPvpStandUpTableResp.Parser, new[]{ "RetCode", "TableId", "TableNo", "UserId", "PlayerNum" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpDestroyTableResp), global::MsgPvpDestroyTableResp.Parser, new[]{ "RetCode", "TableId", "TableNo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpKickUserResp), global::MsgPvpKickUserResp.Parser, new[]{ "RetCode", "OwnerId", "OwnerNick", "KickId", "KickNick" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgPvpTableChangeOwnerResp), global::MsgPvpTableChangeOwnerResp.Parser, new[]{ "TableId", "OwnerId", "IsActivate" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///游戏登录
/// </summary>
public sealed partial class MsgGamePlayerLogin : pb::IMessage<MsgGamePlayerLogin>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgGamePlayerLogin> _parser = new pb::MessageParser<MsgGamePlayerLogin>(() => new MsgGamePlayerLogin());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgGamePlayerLogin> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgGamePlayerLogin() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgGamePlayerLogin(MsgGamePlayerLogin other) : this() {
    userId_ = other.userId_;
    password_ = other.password_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgGamePlayerLogin Clone() {
    return new MsgGamePlayerLogin(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  /// <summary>
  ///玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  /// <summary>
  ///玩家密码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgGamePlayerLogin);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgGamePlayerLogin other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Password != other.Password) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgGamePlayerLogin other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///游戏玩家信息
/// </summary>
public sealed partial class MsgGamePlayerInfo : pb::IMessage<MsgGamePlayerInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgGamePlayerInfo> _parser = new pb::MessageParser<MsgGamePlayerInfo>(() => new MsgGamePlayerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgGamePlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgGamePlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgGamePlayerInfo(MsgGamePlayerInfo other) : this() {
    userId_ = other.userId_;
    beautifulId_ = other.beautifulId_;
    nickname_ = other.nickname_;
    avatar_ = other.avatar_;
    coin_ = other.coin_;
    tableId_ = other.tableId_;
    chairId_ = other.chairId_;
    vipLevel_ = other.vipLevel_;
    avatarFrame_ = other.avatarFrame_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgGamePlayerInfo Clone() {
    return new MsgGamePlayerInfo(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private int userId_;
  /// <summary>
  ///玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "beautiful_id" field.</summary>
  public const int BeautifulIdFieldNumber = 2;
  private int beautifulId_;
  /// <summary>
  ///玩家靓号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeautifulId {
    get { return beautifulId_; }
    set {
      beautifulId_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 3;
  private string nickname_ = "";
  /// <summary>
  ///玩家昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 4;
  private string avatar_ = "";
  /// <summary>
  ///头像
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Avatar {
    get { return avatar_; }
    set {
      avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "coin" field.</summary>
  public const int CoinFieldNumber = 5;
  private ulong coin_;
  /// <summary>
  ///玩家金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Coin {
    get { return coin_; }
    set {
      coin_ = value;
    }
  }

  /// <summary>Field number for the "table_id" field.</summary>
  public const int TableIdFieldNumber = 6;
  private int tableId_;
  /// <summary>
  ///玩家座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableId {
    get { return tableId_; }
    set {
      tableId_ = value;
    }
  }

  /// <summary>Field number for the "chair_id" field.</summary>
  public const int ChairIdFieldNumber = 7;
  private int chairId_;
  /// <summary>
  ///玩家椅子号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChairId {
    get { return chairId_; }
    set {
      chairId_ = value;
    }
  }

  /// <summary>Field number for the "vip_level" field.</summary>
  public const int VipLevelFieldNumber = 8;
  private int vipLevel_;
  /// <summary>
  ///VIP等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VipLevel {
    get { return vipLevel_; }
    set {
      vipLevel_ = value;
    }
  }

  /// <summary>Field number for the "avatar_frame" field.</summary>
  public const int AvatarFrameFieldNumber = 9;
  private int avatarFrame_;
  /// <summary>
  ///头像框
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AvatarFrame {
    get { return avatarFrame_; }
    set {
      avatarFrame_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgGamePlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgGamePlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (BeautifulId != other.BeautifulId) return false;
    if (Nickname != other.Nickname) return false;
    if (Avatar != other.Avatar) return false;
    if (Coin != other.Coin) return false;
    if (TableId != other.TableId) return false;
    if (ChairId != other.ChairId) return false;
    if (VipLevel != other.VipLevel) return false;
    if (AvatarFrame != other.AvatarFrame) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (BeautifulId != 0) hash ^= BeautifulId.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
    if (Coin != 0UL) hash ^= Coin.GetHashCode();
    if (TableId != 0) hash ^= TableId.GetHashCode();
    if (ChairId != 0) hash ^= ChairId.GetHashCode();
    if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
    if (AvatarFrame != 0) hash ^= AvatarFrame.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (BeautifulId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BeautifulId);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Nickname);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Avatar);
    }
    if (Coin != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(Coin);
    }
    if (TableId != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(TableId);
    }
    if (ChairId != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(ChairId);
    }
    if (VipLevel != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(VipLevel);
    }
    if (AvatarFrame != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(AvatarFrame);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UserId);
    }
    if (BeautifulId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BeautifulId);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Nickname);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Avatar);
    }
    if (Coin != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(Coin);
    }
    if (TableId != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(TableId);
    }
    if (ChairId != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(ChairId);
    }
    if (VipLevel != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(VipLevel);
    }
    if (AvatarFrame != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(AvatarFrame);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (BeautifulId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeautifulId);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Avatar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
    }
    if (Coin != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coin);
    }
    if (TableId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
    }
    if (ChairId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
    }
    if (VipLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
    }
    if (AvatarFrame != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvatarFrame);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgGamePlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.BeautifulId != 0) {
      BeautifulId = other.BeautifulId;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Avatar.Length != 0) {
      Avatar = other.Avatar;
    }
    if (other.Coin != 0UL) {
      Coin = other.Coin;
    }
    if (other.TableId != 0) {
      TableId = other.TableId;
    }
    if (other.ChairId != 0) {
      ChairId = other.ChairId;
    }
    if (other.VipLevel != 0) {
      VipLevel = other.VipLevel;
    }
    if (other.AvatarFrame != 0) {
      AvatarFrame = other.AvatarFrame;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          BeautifulId = input.ReadInt32();
          break;
        }
        case 26: {
          Nickname = input.ReadString();
          break;
        }
        case 34: {
          Avatar = input.ReadString();
          break;
        }
        case 40: {
          Coin = input.ReadUInt64();
          break;
        }
        case 48: {
          TableId = input.ReadInt32();
          break;
        }
        case 56: {
          ChairId = input.ReadInt32();
          break;
        }
        case 64: {
          VipLevel = input.ReadInt32();
          break;
        }
        case 72: {
          AvatarFrame = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          UserId = input.ReadInt32();
          break;
        }
        case 16: {
          BeautifulId = input.ReadInt32();
          break;
        }
        case 26: {
          Nickname = input.ReadString();
          break;
        }
        case 34: {
          Avatar = input.ReadString();
          break;
        }
        case 40: {
          Coin = input.ReadUInt64();
          break;
        }
        case 48: {
          TableId = input.ReadInt32();
          break;
        }
        case 56: {
          ChairId = input.ReadInt32();
          break;
        }
        case 64: {
          VipLevel = input.ReadInt32();
          break;
        }
        case 72: {
          AvatarFrame = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///游戏登录返回
/// </summary>
public sealed partial class MsgGamePlayerLoginResp : pb::IMessage<MsgGamePlayerLoginResp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgGamePlayerLoginResp> _parser = new pb::MessageParser<MsgGamePlayerLoginResp>(() => new MsgGamePlayerLoginResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgGamePlayerLoginResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgGamePlayerLoginResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgGamePlayerLoginResp(MsgGamePlayerLoginResp other) : this() {
    resCode_ = other.resCode_;
    userId_ = other.userId_;
    beautifulId_ = other.beautifulId_;
    nickname_ = other.nickname_;
    avatar_ = other.avatar_;
    coin_ = other.coin_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgGamePlayerLoginResp Clone() {
    return new MsgGamePlayerLoginResp(this);
  }

  /// <summary>Field number for the "res_code" field.</summary>
  public const int ResCodeFieldNumber = 1;
  private int resCode_;
  /// <summary>
  ///登录返回码(0:成功 非0:失败)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResCode {
    get { return resCode_; }
    set {
      resCode_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 2;
  private int userId_;
  /// <summary>
  ///玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "beautiful_id" field.</summary>
  public const int BeautifulIdFieldNumber = 3;
  private int beautifulId_;
  /// <summary>
  ///玩家靓号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BeautifulId {
    get { return beautifulId_; }
    set {
      beautifulId_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 4;
  private string nickname_ = "";
  /// <summary>
  ///玩家昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 5;
  private string avatar_ = "";
  /// <summary>
  ///头像
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Avatar {
    get { return avatar_; }
    set {
      avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "coin" field.</summary>
  public const int CoinFieldNumber = 6;
  private ulong coin_;
  /// <summary>
  ///玩家金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Coin {
    get { return coin_; }
    set {
      coin_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgGamePlayerLoginResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgGamePlayerLoginResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ResCode != other.ResCode) return false;
    if (UserId != other.UserId) return false;
    if (BeautifulId != other.BeautifulId) return false;
    if (Nickname != other.Nickname) return false;
    if (Avatar != other.Avatar) return false;
    if (Coin != other.Coin) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResCode != 0) hash ^= ResCode.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (BeautifulId != 0) hash ^= BeautifulId.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
    if (Coin != 0UL) hash ^= Coin.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (ResCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ResCode);
    }
    if (UserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserId);
    }
    if (BeautifulId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BeautifulId);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Nickname);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Avatar);
    }
    if (Coin != 0UL) {
      output.WriteRawTag(48);
      output.WriteUInt64(Coin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (ResCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ResCode);
    }
    if (UserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserId);
    }
    if (BeautifulId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BeautifulId);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Nickname);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Avatar);
    }
    if (Coin != 0UL) {
      output.WriteRawTag(48);
      output.WriteUInt64(Coin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResCode);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (BeautifulId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeautifulId);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (Avatar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
    }
    if (Coin != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coin);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgGamePlayerLoginResp other) {
    if (other == null) {
      return;
    }
    if (other.ResCode != 0) {
      ResCode = other.ResCode;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.BeautifulId != 0) {
      BeautifulId = other.BeautifulId;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.Avatar.Length != 0) {
      Avatar = other.Avatar;
    }
    if (other.Coin != 0UL) {
      Coin = other.Coin;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ResCode = input.ReadInt32();
          break;
        }
        case 16: {
          UserId = input.ReadInt32();
          break;
        }
        case 24: {
          BeautifulId = input.ReadInt32();
          break;
        }
        case 34: {
          Nickname = input.ReadString();
          break;
        }
        case 42: {
          Avatar = input.ReadString();
          break;
        }
        case 48: {
          Coin = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ResCode = input.ReadInt32();
          break;
        }
        case 16: {
          UserId = input.ReadInt32();
          break;
        }
        case 24: {
          BeautifulId = input.ReadInt32();
          break;
        }
        case 34: {
          Nickname = input.ReadString();
          break;
        }
        case 42: {
          Avatar = input.ReadString();
          break;
        }
        case 48: {
          Coin = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///同步桌子所有玩家分数
/// </summary>
public sealed partial class MsgSyncPlayersScore : pb::IMessage<MsgSyncPlayersScore>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgSyncPlayersScore> _parser = new pb::MessageParser<MsgSyncPlayersScore>(() => new MsgSyncPlayersScore());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgSyncPlayersScore> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgSyncPlayersScore() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgSyncPlayersScore(MsgSyncPlayersScore other) : this() {
    chairId_ = other.chairId_;
    coin_ = other.coin_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgSyncPlayersScore Clone() {
    return new MsgSyncPlayersScore(this);
  }

  /// <summary>Field number for the "chair_id" field.</summary>
  public const int ChairIdFieldNumber = 1;
  private int chairId_;
  /// <summary>
  ///椅子号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChairId {
    get { return chairId_; }
    set {
      chairId_ = value;
    }
  }

  /// <summary>Field number for the "coin" field.</summary>
  public const int CoinFieldNumber = 2;
  private ulong coin_;
  /// <summary>
  ///玩家金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Coin {
    get { return coin_; }
    set {
      coin_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgSyncPlayersScore);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgSyncPlayersScore other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChairId != other.ChairId) return false;
    if (Coin != other.Coin) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ChairId != 0) hash ^= ChairId.GetHashCode();
    if (Coin != 0UL) hash ^= Coin.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (ChairId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ChairId);
    }
    if (Coin != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Coin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (ChairId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ChairId);
    }
    if (Coin != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Coin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ChairId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
    }
    if (Coin != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coin);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgSyncPlayersScore other) {
    if (other == null) {
      return;
    }
    if (other.ChairId != 0) {
      ChairId = other.ChairId;
    }
    if (other.Coin != 0UL) {
      Coin = other.Coin;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ChairId = input.ReadInt32();
          break;
        }
        case 16: {
          Coin = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ChairId = input.ReadInt32();
          break;
        }
        case 16: {
          Coin = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///每局数据
/// </summary>
public sealed partial class MsgRoundData : pb::IMessage<MsgRoundData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgRoundData> _parser = new pb::MessageParser<MsgRoundData>(() => new MsgRoundData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgRoundData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgRoundData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgRoundData(MsgRoundData other) : this() {
    time_ = other.time_;
    winUserId_ = other.winUserId_;
    loseUserId_ = other.loseUserId_;
    gold_ = other.gold_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgRoundData Clone() {
    return new MsgRoundData(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private int time_;
  /// <summary>
  ///时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "win_user_id" field.</summary>
  public const int WinUserIdFieldNumber = 2;
  private int winUserId_;
  /// <summary>
  ///胜利玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WinUserId {
    get { return winUserId_; }
    set {
      winUserId_ = value;
    }
  }

  /// <summary>Field number for the "lose_user_id" field.</summary>
  public const int LoseUserIdFieldNumber = 3;
  private int loseUserId_;
  /// <summary>
  ///失败玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LoseUserId {
    get { return loseUserId_; }
    set {
      loseUserId_ = value;
    }
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 4;
  private long gold_;
  /// <summary>
  ///金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Gold {
    get { return gold_; }
    set {
      gold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgRoundData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgRoundData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (WinUserId != other.WinUserId) return false;
    if (LoseUserId != other.LoseUserId) return false;
    if (Gold != other.Gold) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0) hash ^= Time.GetHashCode();
    if (WinUserId != 0) hash ^= WinUserId.GetHashCode();
    if (LoseUserId != 0) hash ^= LoseUserId.GetHashCode();
    if (Gold != 0L) hash ^= Gold.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Time != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Time);
    }
    if (WinUserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(WinUserId);
    }
    if (LoseUserId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LoseUserId);
    }
    if (Gold != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Gold);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Time != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Time);
    }
    if (WinUserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(WinUserId);
    }
    if (LoseUserId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LoseUserId);
    }
    if (Gold != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Gold);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
    }
    if (WinUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinUserId);
    }
    if (LoseUserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoseUserId);
    }
    if (Gold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgRoundData other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0) {
      Time = other.Time;
    }
    if (other.WinUserId != 0) {
      WinUserId = other.WinUserId;
    }
    if (other.LoseUserId != 0) {
      LoseUserId = other.LoseUserId;
    }
    if (other.Gold != 0L) {
      Gold = other.Gold;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Time = input.ReadInt32();
          break;
        }
        case 16: {
          WinUserId = input.ReadInt32();
          break;
        }
        case 24: {
          LoseUserId = input.ReadInt32();
          break;
        }
        case 32: {
          Gold = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Time = input.ReadInt32();
          break;
        }
        case 16: {
          WinUserId = input.ReadInt32();
          break;
        }
        case 24: {
          LoseUserId = input.ReadInt32();
          break;
        }
        case 32: {
          Gold = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///总的每局数据
/// </summary>
public sealed partial class MsgTotalRoundData : pb::IMessage<MsgTotalRoundData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgTotalRoundData> _parser = new pb::MessageParser<MsgTotalRoundData>(() => new MsgTotalRoundData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgTotalRoundData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgTotalRoundData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgTotalRoundData(MsgTotalRoundData other) : this() {
    totalNum_ = other.totalNum_;
    roundData_ = other.roundData_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgTotalRoundData Clone() {
    return new MsgTotalRoundData(this);
  }

  /// <summary>Field number for the "total_num" field.</summary>
  public const int TotalNumFieldNumber = 1;
  private int totalNum_;
  /// <summary>
  ///总条数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalNum {
    get { return totalNum_; }
    set {
      totalNum_ = value;
    }
  }

  /// <summary>Field number for the "round_data" field.</summary>
  public const int RoundDataFieldNumber = 2;
  private static readonly pb::FieldCodec<global::MsgRoundData> _repeated_roundData_codec
      = pb::FieldCodec.ForMessage(18, global::MsgRoundData.Parser);
  private readonly pbc::RepeatedField<global::MsgRoundData> roundData_ = new pbc::RepeatedField<global::MsgRoundData>();
  /// <summary>
  ///每局数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MsgRoundData> RoundData {
    get { return roundData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgTotalRoundData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgTotalRoundData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TotalNum != other.TotalNum) return false;
    if(!roundData_.Equals(other.roundData_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
    hash ^= roundData_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (TotalNum != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TotalNum);
    }
    roundData_.WriteTo(output, _repeated_roundData_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (TotalNum != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TotalNum);
    }
    roundData_.WriteTo(ref output, _repeated_roundData_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TotalNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
    }
    size += roundData_.CalculateSize(_repeated_roundData_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgTotalRoundData other) {
    if (other == null) {
      return;
    }
    if (other.TotalNum != 0) {
      TotalNum = other.TotalNum;
    }
    roundData_.Add(other.roundData_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TotalNum = input.ReadInt32();
          break;
        }
        case 18: {
          roundData_.AddEntriesFrom(input, _repeated_roundData_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TotalNum = input.ReadInt32();
          break;
        }
        case 18: {
          roundData_.AddEntriesFrom(ref input, _repeated_roundData_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///每日数据
/// </summary>
public sealed partial class MsgDayData : pb::IMessage<MsgDayData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgDayData> _parser = new pb::MessageParser<MsgDayData>(() => new MsgDayData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgDayData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgDayData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgDayData(MsgDayData other) : this() {
    time_ = other.time_;
    totalPlayCount_ = other.totalPlayCount_;
    loseCount_ = other.loseCount_;
    loseGold_ = other.loseGold_;
    winCount_ = other.winCount_;
    winGold_ = other.winGold_;
    totalGold_ = other.totalGold_;
    surplusGold_ = other.surplusGold_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgDayData Clone() {
    return new MsgDayData(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private string time_ = "";
  /// <summary>
  ///日期
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Time {
    get { return time_; }
    set {
      time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "total_play_count" field.</summary>
  public const int TotalPlayCountFieldNumber = 2;
  private int totalPlayCount_;
  /// <summary>
  ///总游玩次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalPlayCount {
    get { return totalPlayCount_; }
    set {
      totalPlayCount_ = value;
    }
  }

  /// <summary>Field number for the "lose_count" field.</summary>
  public const int LoseCountFieldNumber = 3;
  private int loseCount_;
  /// <summary>
  ///输次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LoseCount {
    get { return loseCount_; }
    set {
      loseCount_ = value;
    }
  }

  /// <summary>Field number for the "lose_gold" field.</summary>
  public const int LoseGoldFieldNumber = 4;
  private long loseGold_;
  /// <summary>
  ///输金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LoseGold {
    get { return loseGold_; }
    set {
      loseGold_ = value;
    }
  }

  /// <summary>Field number for the "win_count" field.</summary>
  public const int WinCountFieldNumber = 5;
  private int winCount_;
  /// <summary>
  ///赢次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WinCount {
    get { return winCount_; }
    set {
      winCount_ = value;
    }
  }

  /// <summary>Field number for the "win_gold" field.</summary>
  public const int WinGoldFieldNumber = 6;
  private long winGold_;
  /// <summary>
  ///赢金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long WinGold {
    get { return winGold_; }
    set {
      winGold_ = value;
    }
  }

  /// <summary>Field number for the "total_gold" field.</summary>
  public const int TotalGoldFieldNumber = 7;
  private long totalGold_;
  /// <summary>
  ///总输赢
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TotalGold {
    get { return totalGold_; }
    set {
      totalGold_ = value;
    }
  }

  /// <summary>Field number for the "surplus_gold" field.</summary>
  public const int SurplusGoldFieldNumber = 8;
  private long surplusGold_;
  /// <summary>
  ///当日剩余金额
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SurplusGold {
    get { return surplusGold_; }
    set {
      surplusGold_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgDayData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgDayData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (TotalPlayCount != other.TotalPlayCount) return false;
    if (LoseCount != other.LoseCount) return false;
    if (LoseGold != other.LoseGold) return false;
    if (WinCount != other.WinCount) return false;
    if (WinGold != other.WinGold) return false;
    if (TotalGold != other.TotalGold) return false;
    if (SurplusGold != other.SurplusGold) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time.Length != 0) hash ^= Time.GetHashCode();
    if (TotalPlayCount != 0) hash ^= TotalPlayCount.GetHashCode();
    if (LoseCount != 0) hash ^= LoseCount.GetHashCode();
    if (LoseGold != 0L) hash ^= LoseGold.GetHashCode();
    if (WinCount != 0) hash ^= WinCount.GetHashCode();
    if (WinGold != 0L) hash ^= WinGold.GetHashCode();
    if (TotalGold != 0L) hash ^= TotalGold.GetHashCode();
    if (SurplusGold != 0L) hash ^= SurplusGold.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Time.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Time);
    }
    if (TotalPlayCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TotalPlayCount);
    }
    if (LoseCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LoseCount);
    }
    if (LoseGold != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(LoseGold);
    }
    if (WinCount != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(WinCount);
    }
    if (WinGold != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(WinGold);
    }
    if (TotalGold != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(TotalGold);
    }
    if (SurplusGold != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(SurplusGold);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Time.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Time);
    }
    if (TotalPlayCount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TotalPlayCount);
    }
    if (LoseCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LoseCount);
    }
    if (LoseGold != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(LoseGold);
    }
    if (WinCount != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(WinCount);
    }
    if (WinGold != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(WinGold);
    }
    if (TotalGold != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(TotalGold);
    }
    if (SurplusGold != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(SurplusGold);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
    }
    if (TotalPlayCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPlayCount);
    }
    if (LoseCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoseCount);
    }
    if (LoseGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LoseGold);
    }
    if (WinCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinCount);
    }
    if (WinGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinGold);
    }
    if (TotalGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalGold);
    }
    if (SurplusGold != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SurplusGold);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgDayData other) {
    if (other == null) {
      return;
    }
    if (other.Time.Length != 0) {
      Time = other.Time;
    }
    if (other.TotalPlayCount != 0) {
      TotalPlayCount = other.TotalPlayCount;
    }
    if (other.LoseCount != 0) {
      LoseCount = other.LoseCount;
    }
    if (other.LoseGold != 0L) {
      LoseGold = other.LoseGold;
    }
    if (other.WinCount != 0) {
      WinCount = other.WinCount;
    }
    if (other.WinGold != 0L) {
      WinGold = other.WinGold;
    }
    if (other.TotalGold != 0L) {
      TotalGold = other.TotalGold;
    }
    if (other.SurplusGold != 0L) {
      SurplusGold = other.SurplusGold;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Time = input.ReadString();
          break;
        }
        case 16: {
          TotalPlayCount = input.ReadInt32();
          break;
        }
        case 24: {
          LoseCount = input.ReadInt32();
          break;
        }
        case 32: {
          LoseGold = input.ReadInt64();
          break;
        }
        case 40: {
          WinCount = input.ReadInt32();
          break;
        }
        case 48: {
          WinGold = input.ReadInt64();
          break;
        }
        case 56: {
          TotalGold = input.ReadInt64();
          break;
        }
        case 64: {
          SurplusGold = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Time = input.ReadString();
          break;
        }
        case 16: {
          TotalPlayCount = input.ReadInt32();
          break;
        }
        case 24: {
          LoseCount = input.ReadInt32();
          break;
        }
        case 32: {
          LoseGold = input.ReadInt64();
          break;
        }
        case 40: {
          WinCount = input.ReadInt32();
          break;
        }
        case 48: {
          WinGold = input.ReadInt64();
          break;
        }
        case 56: {
          TotalGold = input.ReadInt64();
          break;
        }
        case 64: {
          SurplusGold = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///总的每局数据
/// </summary>
public sealed partial class MsgTotalDayData : pb::IMessage<MsgTotalDayData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgTotalDayData> _parser = new pb::MessageParser<MsgTotalDayData>(() => new MsgTotalDayData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgTotalDayData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgTotalDayData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgTotalDayData(MsgTotalDayData other) : this() {
    totalNum_ = other.totalNum_;
    dailyData_ = other.dailyData_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgTotalDayData Clone() {
    return new MsgTotalDayData(this);
  }

  /// <summary>Field number for the "total_num" field.</summary>
  public const int TotalNumFieldNumber = 1;
  private int totalNum_;
  /// <summary>
  ///总条数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalNum {
    get { return totalNum_; }
    set {
      totalNum_ = value;
    }
  }

  /// <summary>Field number for the "daily_data" field.</summary>
  public const int DailyDataFieldNumber = 2;
  private static readonly pb::FieldCodec<global::MsgDayData> _repeated_dailyData_codec
      = pb::FieldCodec.ForMessage(18, global::MsgDayData.Parser);
  private readonly pbc::RepeatedField<global::MsgDayData> dailyData_ = new pbc::RepeatedField<global::MsgDayData>();
  /// <summary>
  ///每日数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MsgDayData> DailyData {
    get { return dailyData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgTotalDayData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgTotalDayData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TotalNum != other.TotalNum) return false;
    if(!dailyData_.Equals(other.dailyData_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
    hash ^= dailyData_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (TotalNum != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TotalNum);
    }
    dailyData_.WriteTo(output, _repeated_dailyData_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (TotalNum != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TotalNum);
    }
    dailyData_.WriteTo(ref output, _repeated_dailyData_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TotalNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
    }
    size += dailyData_.CalculateSize(_repeated_dailyData_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgTotalDayData other) {
    if (other == null) {
      return;
    }
    if (other.TotalNum != 0) {
      TotalNum = other.TotalNum;
    }
    dailyData_.Add(other.dailyData_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TotalNum = input.ReadInt32();
          break;
        }
        case 18: {
          dailyData_.AddEntriesFrom(input, _repeated_dailyData_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TotalNum = input.ReadInt32();
          break;
        }
        case 18: {
          dailyData_.AddEntriesFrom(ref input, _repeated_dailyData_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///查询数据记录
/// </summary>
public sealed partial class MsgQueryRecord : pb::IMessage<MsgQueryRecord>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgQueryRecord> _parser = new pb::MessageParser<MsgQueryRecord>(() => new MsgQueryRecord());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgQueryRecord> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgQueryRecord() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgQueryRecord(MsgQueryRecord other) : this() {
    page_ = other.page_;
    num_ = other.num_;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgQueryRecord Clone() {
    return new MsgQueryRecord(this);
  }

  /// <summary>Field number for the "page" field.</summary>
  public const int PageFieldNumber = 1;
  private int page_;
  /// <summary>
  ///当前页(从0开始)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Page {
    get { return page_; }
    set {
      page_ = value;
    }
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 2;
  private int num_;
  /// <summary>
  ///每页条数(最大每页50条)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private int type_;
  /// <summary>
  ///1:每局数据 2:每日数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgQueryRecord);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgQueryRecord other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Page != other.Page) return false;
    if (Num != other.Num) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Page != 0) hash ^= Page.GetHashCode();
    if (Num != 0) hash ^= Num.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Page != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Page);
    }
    if (Num != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Num);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Page != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Page);
    }
    if (Num != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Num);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Page != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
    }
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgQueryRecord other) {
    if (other == null) {
      return;
    }
    if (other.Page != 0) {
      Page = other.Page;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Page = input.ReadInt32();
          break;
        }
        case 16: {
          Num = input.ReadInt32();
          break;
        }
        case 24: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Page = input.ReadInt32();
          break;
        }
        case 16: {
          Num = input.ReadInt32();
          break;
        }
        case 24: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///奖池信息
/// </summary>
public sealed partial class MsgJackpotInfo : pb::IMessage<MsgJackpotInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgJackpotInfo> _parser = new pb::MessageParser<MsgJackpotInfo>(() => new MsgJackpotInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgJackpotInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgJackpotInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgJackpotInfo(MsgJackpotInfo other) : this() {
    jackpot_ = other.jackpot_;
    fakeJackpot_ = other.fakeJackpot_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgJackpotInfo Clone() {
    return new MsgJackpotInfo(this);
  }

  /// <summary>Field number for the "jackpot" field.</summary>
  public const int JackpotFieldNumber = 1;
  private long jackpot_;
  /// <summary>
  ///奖池分数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Jackpot {
    get { return jackpot_; }
    set {
      jackpot_ = value;
    }
  }

  /// <summary>Field number for the "fake_jackpot" field.</summary>
  public const int FakeJackpotFieldNumber = 2;
  private long fakeJackpot_;
  /// <summary>
  ///假奖池分数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FakeJackpot {
    get { return fakeJackpot_; }
    set {
      fakeJackpot_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgJackpotInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgJackpotInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Jackpot != other.Jackpot) return false;
    if (FakeJackpot != other.FakeJackpot) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Jackpot != 0L) hash ^= Jackpot.GetHashCode();
    if (FakeJackpot != 0L) hash ^= FakeJackpot.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Jackpot != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Jackpot);
    }
    if (FakeJackpot != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(FakeJackpot);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Jackpot != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Jackpot);
    }
    if (FakeJackpot != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(FakeJackpot);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Jackpot != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Jackpot);
    }
    if (FakeJackpot != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FakeJackpot);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgJackpotInfo other) {
    if (other == null) {
      return;
    }
    if (other.Jackpot != 0L) {
      Jackpot = other.Jackpot;
    }
    if (other.FakeJackpot != 0L) {
      FakeJackpot = other.FakeJackpot;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Jackpot = input.ReadInt64();
          break;
        }
        case 16: {
          FakeJackpot = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Jackpot = input.ReadInt64();
          break;
        }
        case 16: {
          FakeJackpot = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///////////////////////////////////////////////////PVP//////////////////////////////////////////////
///pvp桌子信息
/// </summary>
public sealed partial class MsgPvpTableInfo : pb::IMessage<MsgPvpTableInfo>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpTableInfo> _parser = new pb::MessageParser<MsgPvpTableInfo>(() => new MsgPvpTableInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpTableInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpTableInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpTableInfo(MsgPvpTableInfo other) : this() {
    tableId_ = other.tableId_;
    tableName_ = other.tableName_;
    chairNum_ = other.chairNum_;
    enterNum_ = other.enterNum_;
    isPrivate_ = other.isPrivate_;
    password_ = other.password_;
    ownerId_ = other.ownerId_;
    tableNo_ = other.tableNo_;
    value1_ = other.value1_;
    value2_ = other.value2_;
    value3_ = other.value3_;
    value4_ = other.value4_;
    value5_ = other.value5_;
    value6_ = other.value6_;
    value7_ = other.value7_;
    value8_ = other.value8_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpTableInfo Clone() {
    return new MsgPvpTableInfo(this);
  }

  /// <summary>Field number for the "table_id" field.</summary>
  public const int TableIdFieldNumber = 1;
  private int tableId_;
  /// <summary>
  ///桌子id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableId {
    get { return tableId_; }
    set {
      tableId_ = value;
    }
  }

  /// <summary>Field number for the "table_name" field.</summary>
  public const int TableNameFieldNumber = 2;
  private string tableName_ = "";
  /// <summary>
  ///桌子名称						
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TableName {
    get { return tableName_; }
    set {
      tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chair_num" field.</summary>
  public const int ChairNumFieldNumber = 3;
  private int chairNum_;
  /// <summary>
  ///人数限制						
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChairNum {
    get { return chairNum_; }
    set {
      chairNum_ = value;
    }
  }

  /// <summary>Field number for the "enter_num" field.</summary>
  public const int EnterNumFieldNumber = 4;
  private int enterNum_;
  /// <summary>
  ///已经进入数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EnterNum {
    get { return enterNum_; }
    set {
      enterNum_ = value;
    }
  }

  /// <summary>Field number for the "is_private" field.</summary>
  public const int IsPrivateFieldNumber = 7;
  private bool isPrivate_;
  /// <summary>
  ///int64	join_limit_min	= 5;	//进入房间金币下限				
  ///int64	join_limit_max	= 6;	//进入房间金币上限				
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsPrivate {
    get { return isPrivate_; }
    set {
      isPrivate_ = value;
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 8;
  private string password_ = "";
  /// <summary>
  ///密码							
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "owner_id" field.</summary>
  public const int OwnerIdFieldNumber = 9;
  private int ownerId_;
  /// <summary>
  ///房主id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OwnerId {
    get { return ownerId_; }
    set {
      ownerId_ = value;
    }
  }

  /// <summary>Field number for the "table_no" field.</summary>
  public const int TableNoFieldNumber = 10;
  private int tableNo_;
  /// <summary>
  ///桌子编号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableNo {
    get { return tableNo_; }
    set {
      tableNo_ = value;
    }
  }

  /// <summary>Field number for the "value1" field.</summary>
  public const int Value1FieldNumber = 11;
  private long value1_;
  /// <summary>
  ///桌子特性						//进入房间金币下限				放在para_lsit的第一位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Value1 {
    get { return value1_; }
    set {
      value1_ = value;
    }
  }

  /// <summary>Field number for the "value2" field.</summary>
  public const int Value2FieldNumber = 12;
  private long value2_;
  /// <summary>
  ///桌子特性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Value2 {
    get { return value2_; }
    set {
      value2_ = value;
    }
  }

  /// <summary>Field number for the "value3" field.</summary>
  public const int Value3FieldNumber = 13;
  private long value3_;
  /// <summary>
  ///桌子特性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Value3 {
    get { return value3_; }
    set {
      value3_ = value;
    }
  }

  /// <summary>Field number for the "value4" field.</summary>
  public const int Value4FieldNumber = 14;
  private long value4_;
  /// <summary>
  ///桌子特性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Value4 {
    get { return value4_; }
    set {
      value4_ = value;
    }
  }

  /// <summary>Field number for the "value5" field.</summary>
  public const int Value5FieldNumber = 15;
  private long value5_;
  /// <summary>
  ///桌子特性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Value5 {
    get { return value5_; }
    set {
      value5_ = value;
    }
  }

  /// <summary>Field number for the "value6" field.</summary>
  public const int Value6FieldNumber = 16;
  private long value6_;
  /// <summary>
  ///桌子特性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Value6 {
    get { return value6_; }
    set {
      value6_ = value;
    }
  }

  /// <summary>Field number for the "value7" field.</summary>
  public const int Value7FieldNumber = 17;
  private long value7_;
  /// <summary>
  ///桌子特性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Value7 {
    get { return value7_; }
    set {
      value7_ = value;
    }
  }

  /// <summary>Field number for the "value8" field.</summary>
  public const int Value8FieldNumber = 18;
  private long value8_;
  /// <summary>
  ///桌子特性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Value8 {
    get { return value8_; }
    set {
      value8_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpTableInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpTableInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TableId != other.TableId) return false;
    if (TableName != other.TableName) return false;
    if (ChairNum != other.ChairNum) return false;
    if (EnterNum != other.EnterNum) return false;
    if (IsPrivate != other.IsPrivate) return false;
    if (Password != other.Password) return false;
    if (OwnerId != other.OwnerId) return false;
    if (TableNo != other.TableNo) return false;
    if (Value1 != other.Value1) return false;
    if (Value2 != other.Value2) return false;
    if (Value3 != other.Value3) return false;
    if (Value4 != other.Value4) return false;
    if (Value5 != other.Value5) return false;
    if (Value6 != other.Value6) return false;
    if (Value7 != other.Value7) return false;
    if (Value8 != other.Value8) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TableId != 0) hash ^= TableId.GetHashCode();
    if (TableName.Length != 0) hash ^= TableName.GetHashCode();
    if (ChairNum != 0) hash ^= ChairNum.GetHashCode();
    if (EnterNum != 0) hash ^= EnterNum.GetHashCode();
    if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (OwnerId != 0) hash ^= OwnerId.GetHashCode();
    if (TableNo != 0) hash ^= TableNo.GetHashCode();
    if (Value1 != 0L) hash ^= Value1.GetHashCode();
    if (Value2 != 0L) hash ^= Value2.GetHashCode();
    if (Value3 != 0L) hash ^= Value3.GetHashCode();
    if (Value4 != 0L) hash ^= Value4.GetHashCode();
    if (Value5 != 0L) hash ^= Value5.GetHashCode();
    if (Value6 != 0L) hash ^= Value6.GetHashCode();
    if (Value7 != 0L) hash ^= Value7.GetHashCode();
    if (Value8 != 0L) hash ^= Value8.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (TableId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TableId);
    }
    if (TableName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TableName);
    }
    if (ChairNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ChairNum);
    }
    if (EnterNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(EnterNum);
    }
    if (IsPrivate != false) {
      output.WriteRawTag(56);
      output.WriteBool(IsPrivate);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Password);
    }
    if (OwnerId != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(OwnerId);
    }
    if (TableNo != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(TableNo);
    }
    if (Value1 != 0L) {
      output.WriteRawTag(88);
      output.WriteInt64(Value1);
    }
    if (Value2 != 0L) {
      output.WriteRawTag(96);
      output.WriteInt64(Value2);
    }
    if (Value3 != 0L) {
      output.WriteRawTag(104);
      output.WriteInt64(Value3);
    }
    if (Value4 != 0L) {
      output.WriteRawTag(112);
      output.WriteInt64(Value4);
    }
    if (Value5 != 0L) {
      output.WriteRawTag(120);
      output.WriteInt64(Value5);
    }
    if (Value6 != 0L) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(Value6);
    }
    if (Value7 != 0L) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(Value7);
    }
    if (Value8 != 0L) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(Value8);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (TableId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TableId);
    }
    if (TableName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TableName);
    }
    if (ChairNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ChairNum);
    }
    if (EnterNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(EnterNum);
    }
    if (IsPrivate != false) {
      output.WriteRawTag(56);
      output.WriteBool(IsPrivate);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Password);
    }
    if (OwnerId != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(OwnerId);
    }
    if (TableNo != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(TableNo);
    }
    if (Value1 != 0L) {
      output.WriteRawTag(88);
      output.WriteInt64(Value1);
    }
    if (Value2 != 0L) {
      output.WriteRawTag(96);
      output.WriteInt64(Value2);
    }
    if (Value3 != 0L) {
      output.WriteRawTag(104);
      output.WriteInt64(Value3);
    }
    if (Value4 != 0L) {
      output.WriteRawTag(112);
      output.WriteInt64(Value4);
    }
    if (Value5 != 0L) {
      output.WriteRawTag(120);
      output.WriteInt64(Value5);
    }
    if (Value6 != 0L) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(Value6);
    }
    if (Value7 != 0L) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(Value7);
    }
    if (Value8 != 0L) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(Value8);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TableId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
    }
    if (TableName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
    }
    if (ChairNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairNum);
    }
    if (EnterNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnterNum);
    }
    if (IsPrivate != false) {
      size += 1 + 1;
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (OwnerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerId);
    }
    if (TableNo != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNo);
    }
    if (Value1 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value1);
    }
    if (Value2 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value2);
    }
    if (Value3 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value3);
    }
    if (Value4 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value4);
    }
    if (Value5 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value5);
    }
    if (Value6 != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Value6);
    }
    if (Value7 != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Value7);
    }
    if (Value8 != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Value8);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpTableInfo other) {
    if (other == null) {
      return;
    }
    if (other.TableId != 0) {
      TableId = other.TableId;
    }
    if (other.TableName.Length != 0) {
      TableName = other.TableName;
    }
    if (other.ChairNum != 0) {
      ChairNum = other.ChairNum;
    }
    if (other.EnterNum != 0) {
      EnterNum = other.EnterNum;
    }
    if (other.IsPrivate != false) {
      IsPrivate = other.IsPrivate;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    if (other.OwnerId != 0) {
      OwnerId = other.OwnerId;
    }
    if (other.TableNo != 0) {
      TableNo = other.TableNo;
    }
    if (other.Value1 != 0L) {
      Value1 = other.Value1;
    }
    if (other.Value2 != 0L) {
      Value2 = other.Value2;
    }
    if (other.Value3 != 0L) {
      Value3 = other.Value3;
    }
    if (other.Value4 != 0L) {
      Value4 = other.Value4;
    }
    if (other.Value5 != 0L) {
      Value5 = other.Value5;
    }
    if (other.Value6 != 0L) {
      Value6 = other.Value6;
    }
    if (other.Value7 != 0L) {
      Value7 = other.Value7;
    }
    if (other.Value8 != 0L) {
      Value8 = other.Value8;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TableId = input.ReadInt32();
          break;
        }
        case 18: {
          TableName = input.ReadString();
          break;
        }
        case 24: {
          ChairNum = input.ReadInt32();
          break;
        }
        case 32: {
          EnterNum = input.ReadInt32();
          break;
        }
        case 56: {
          IsPrivate = input.ReadBool();
          break;
        }
        case 66: {
          Password = input.ReadString();
          break;
        }
        case 72: {
          OwnerId = input.ReadInt32();
          break;
        }
        case 80: {
          TableNo = input.ReadInt32();
          break;
        }
        case 88: {
          Value1 = input.ReadInt64();
          break;
        }
        case 96: {
          Value2 = input.ReadInt64();
          break;
        }
        case 104: {
          Value3 = input.ReadInt64();
          break;
        }
        case 112: {
          Value4 = input.ReadInt64();
          break;
        }
        case 120: {
          Value5 = input.ReadInt64();
          break;
        }
        case 128: {
          Value6 = input.ReadInt64();
          break;
        }
        case 136: {
          Value7 = input.ReadInt64();
          break;
        }
        case 144: {
          Value8 = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TableId = input.ReadInt32();
          break;
        }
        case 18: {
          TableName = input.ReadString();
          break;
        }
        case 24: {
          ChairNum = input.ReadInt32();
          break;
        }
        case 32: {
          EnterNum = input.ReadInt32();
          break;
        }
        case 56: {
          IsPrivate = input.ReadBool();
          break;
        }
        case 66: {
          Password = input.ReadString();
          break;
        }
        case 72: {
          OwnerId = input.ReadInt32();
          break;
        }
        case 80: {
          TableNo = input.ReadInt32();
          break;
        }
        case 88: {
          Value1 = input.ReadInt64();
          break;
        }
        case 96: {
          Value2 = input.ReadInt64();
          break;
        }
        case 104: {
          Value3 = input.ReadInt64();
          break;
        }
        case 112: {
          Value4 = input.ReadInt64();
          break;
        }
        case 120: {
          Value5 = input.ReadInt64();
          break;
        }
        case 128: {
          Value6 = input.ReadInt64();
          break;
        }
        case 136: {
          Value7 = input.ReadInt64();
          break;
        }
        case 144: {
          Value8 = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class MsgPvpRoomCfgItem : pb::IMessage<MsgPvpRoomCfgItem>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpRoomCfgItem> _parser = new pb::MessageParser<MsgPvpRoomCfgItem>(() => new MsgPvpRoomCfgItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpRoomCfgItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpRoomCfgItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpRoomCfgItem(MsgPvpRoomCfgItem other) : this() {
    lagKey_ = other.lagKey_;
    valueList_ = other.valueList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpRoomCfgItem Clone() {
    return new MsgPvpRoomCfgItem(this);
  }

  /// <summary>Field number for the "lag_key" field.</summary>
  public const int LagKeyFieldNumber = 1;
  private int lagKey_;
  /// <summary>
  ///前端查找多语言key
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LagKey {
    get { return lagKey_; }
    set {
      lagKey_ = value;
    }
  }

  /// <summary>Field number for the "value_list" field.</summary>
  public const int ValueListFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_valueList_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> valueList_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///特性区间 数组
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> ValueList {
    get { return valueList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpRoomCfgItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpRoomCfgItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LagKey != other.LagKey) return false;
    if(!valueList_.Equals(other.valueList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LagKey != 0) hash ^= LagKey.GetHashCode();
    hash ^= valueList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (LagKey != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(LagKey);
    }
    valueList_.WriteTo(output, _repeated_valueList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (LagKey != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(LagKey);
    }
    valueList_.WriteTo(ref output, _repeated_valueList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LagKey != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LagKey);
    }
    size += valueList_.CalculateSize(_repeated_valueList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpRoomCfgItem other) {
    if (other == null) {
      return;
    }
    if (other.LagKey != 0) {
      LagKey = other.LagKey;
    }
    valueList_.Add(other.valueList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LagKey = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          valueList_.AddEntriesFrom(input, _repeated_valueList_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          LagKey = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          valueList_.AddEntriesFrom(ref input, _repeated_valueList_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///pvp房间配置
/// </summary>
public sealed partial class MsgPvpRoomConfig : pb::IMessage<MsgPvpRoomConfig>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpRoomConfig> _parser = new pb::MessageParser<MsgPvpRoomConfig>(() => new MsgPvpRoomConfig());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpRoomConfig> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpRoomConfig() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpRoomConfig(MsgPvpRoomConfig other) : this() {
    createVipLimit_ = other.createVipLimit_;
    chairLimitMin_ = other.chairLimitMin_;
    chairLimitMax_ = other.chairLimitMax_;
    paraLsit_ = other.paraLsit_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpRoomConfig Clone() {
    return new MsgPvpRoomConfig(this);
  }

  /// <summary>Field number for the "create_vip_limit" field.</summary>
  public const int CreateVipLimitFieldNumber = 1;
  private int createVipLimit_;
  /// <summary>
  ///创建桌子vip限制
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CreateVipLimit {
    get { return createVipLimit_; }
    set {
      createVipLimit_ = value;
    }
  }

  /// <summary>Field number for the "chair_limit_min" field.</summary>
  public const int ChairLimitMinFieldNumber = 2;
  private int chairLimitMin_;
  /// <summary>
  ///创建桌子最小人数				
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChairLimitMin {
    get { return chairLimitMin_; }
    set {
      chairLimitMin_ = value;
    }
  }

  /// <summary>Field number for the "chair_limit_max" field.</summary>
  public const int ChairLimitMaxFieldNumber = 3;
  private int chairLimitMax_;
  /// <summary>
  ///创建桌子最大人数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChairLimitMax {
    get { return chairLimitMax_; }
    set {
      chairLimitMax_ = value;
    }
  }

  /// <summary>Field number for the "para_lsit" field.</summary>
  public const int ParaLsitFieldNumber = 11;
  private static readonly pb::FieldCodec<global::MsgPvpRoomCfgItem> _repeated_paraLsit_codec
      = pb::FieldCodec.ForMessage(90, global::MsgPvpRoomCfgItem.Parser);
  private readonly pbc::RepeatedField<global::MsgPvpRoomCfgItem> paraLsit_ = new pbc::RepeatedField<global::MsgPvpRoomCfgItem>();
  /// <summary>
  ///桌子特性列表  		//进入房间金币下限				放在para_lsit的第一位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MsgPvpRoomCfgItem> ParaLsit {
    get { return paraLsit_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpRoomConfig);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpRoomConfig other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CreateVipLimit != other.CreateVipLimit) return false;
    if (ChairLimitMin != other.ChairLimitMin) return false;
    if (ChairLimitMax != other.ChairLimitMax) return false;
    if(!paraLsit_.Equals(other.paraLsit_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CreateVipLimit != 0) hash ^= CreateVipLimit.GetHashCode();
    if (ChairLimitMin != 0) hash ^= ChairLimitMin.GetHashCode();
    if (ChairLimitMax != 0) hash ^= ChairLimitMax.GetHashCode();
    hash ^= paraLsit_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (CreateVipLimit != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CreateVipLimit);
    }
    if (ChairLimitMin != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ChairLimitMin);
    }
    if (ChairLimitMax != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ChairLimitMax);
    }
    paraLsit_.WriteTo(output, _repeated_paraLsit_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (CreateVipLimit != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CreateVipLimit);
    }
    if (ChairLimitMin != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ChairLimitMin);
    }
    if (ChairLimitMax != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ChairLimitMax);
    }
    paraLsit_.WriteTo(ref output, _repeated_paraLsit_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CreateVipLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateVipLimit);
    }
    if (ChairLimitMin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairLimitMin);
    }
    if (ChairLimitMax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairLimitMax);
    }
    size += paraLsit_.CalculateSize(_repeated_paraLsit_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpRoomConfig other) {
    if (other == null) {
      return;
    }
    if (other.CreateVipLimit != 0) {
      CreateVipLimit = other.CreateVipLimit;
    }
    if (other.ChairLimitMin != 0) {
      ChairLimitMin = other.ChairLimitMin;
    }
    if (other.ChairLimitMax != 0) {
      ChairLimitMax = other.ChairLimitMax;
    }
    paraLsit_.Add(other.paraLsit_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CreateVipLimit = input.ReadInt32();
          break;
        }
        case 16: {
          ChairLimitMin = input.ReadInt32();
          break;
        }
        case 24: {
          ChairLimitMax = input.ReadInt32();
          break;
        }
        case 90: {
          paraLsit_.AddEntriesFrom(input, _repeated_paraLsit_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          CreateVipLimit = input.ReadInt32();
          break;
        }
        case 16: {
          ChairLimitMin = input.ReadInt32();
          break;
        }
        case 24: {
          ChairLimitMax = input.ReadInt32();
          break;
        }
        case 90: {
          paraLsit_.AddEntriesFrom(ref input, _repeated_paraLsit_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///pvp桌子列表
/// </summary>
public sealed partial class MsgPvpTableList : pb::IMessage<MsgPvpTableList>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpTableList> _parser = new pb::MessageParser<MsgPvpTableList>(() => new MsgPvpTableList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpTableList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpTableList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpTableList(MsgPvpTableList other) : this() {
    tableList_ = other.tableList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpTableList Clone() {
    return new MsgPvpTableList(this);
  }

  /// <summary>Field number for the "table_list" field.</summary>
  public const int TableListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::MsgPvpTableInfo> _repeated_tableList_codec
      = pb::FieldCodec.ForMessage(10, global::MsgPvpTableInfo.Parser);
  private readonly pbc::RepeatedField<global::MsgPvpTableInfo> tableList_ = new pbc::RepeatedField<global::MsgPvpTableInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MsgPvpTableInfo> TableList {
    get { return tableList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpTableList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpTableList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!tableList_.Equals(other.tableList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= tableList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    tableList_.WriteTo(output, _repeated_tableList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    tableList_.WriteTo(ref output, _repeated_tableList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += tableList_.CalculateSize(_repeated_tableList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpTableList other) {
    if (other == null) {
      return;
    }
    tableList_.Add(other.tableList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          tableList_.AddEntriesFrom(input, _repeated_tableList_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          tableList_.AddEntriesFrom(ref input, _repeated_tableList_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///pvp创建桌子配置
/// </summary>
public sealed partial class MsgPvpCreateTable : pb::IMessage<MsgPvpCreateTable>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpCreateTable> _parser = new pb::MessageParser<MsgPvpCreateTable>(() => new MsgPvpCreateTable());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpCreateTable> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpCreateTable() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpCreateTable(MsgPvpCreateTable other) : this() {
    isPrivate_ = other.isPrivate_;
    tableName_ = other.tableName_;
    chairNum_ = other.chairNum_;
    password_ = other.password_;
    paraLsit_ = other.paraLsit_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpCreateTable Clone() {
    return new MsgPvpCreateTable(this);
  }

  /// <summary>Field number for the "is_private" field.</summary>
  public const int IsPrivateFieldNumber = 1;
  private bool isPrivate_;
  /// <summary>
  ///是否私人桌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsPrivate {
    get { return isPrivate_; }
    set {
      isPrivate_ = value;
    }
  }

  /// <summary>Field number for the "table_name" field.</summary>
  public const int TableNameFieldNumber = 2;
  private string tableName_ = "";
  /// <summary>
  ///桌子名称						
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TableName {
    get { return tableName_; }
    set {
      tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chair_num" field.</summary>
  public const int ChairNumFieldNumber = 3;
  private int chairNum_;
  /// <summary>
  ///人数限制						
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChairNum {
    get { return chairNum_; }
    set {
      chairNum_ = value;
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 6;
  private string password_ = "";
  /// <summary>
  ///int64	join_limit_min						= 4;	//进入房间金币下限				放在para_lsit的第一位
  ///int64	join_limit_max						= 5;	//进入房间金币上限				
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "para_lsit" field.</summary>
  public const int ParaLsitFieldNumber = 7;
  private static readonly pb::FieldCodec<int> _repeated_paraLsit_codec
      = pb::FieldCodec.ForInt32(58);
  private readonly pbc::RepeatedField<int> paraLsit_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///选定桌子特性列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> ParaLsit {
    get { return paraLsit_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpCreateTable);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpCreateTable other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsPrivate != other.IsPrivate) return false;
    if (TableName != other.TableName) return false;
    if (ChairNum != other.ChairNum) return false;
    if (Password != other.Password) return false;
    if(!paraLsit_.Equals(other.paraLsit_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
    if (TableName.Length != 0) hash ^= TableName.GetHashCode();
    if (ChairNum != 0) hash ^= ChairNum.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    hash ^= paraLsit_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (IsPrivate != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsPrivate);
    }
    if (TableName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TableName);
    }
    if (ChairNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ChairNum);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Password);
    }
    paraLsit_.WriteTo(output, _repeated_paraLsit_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (IsPrivate != false) {
      output.WriteRawTag(8);
      output.WriteBool(IsPrivate);
    }
    if (TableName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TableName);
    }
    if (ChairNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ChairNum);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Password);
    }
    paraLsit_.WriteTo(ref output, _repeated_paraLsit_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsPrivate != false) {
      size += 1 + 1;
    }
    if (TableName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
    }
    if (ChairNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairNum);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    size += paraLsit_.CalculateSize(_repeated_paraLsit_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpCreateTable other) {
    if (other == null) {
      return;
    }
    if (other.IsPrivate != false) {
      IsPrivate = other.IsPrivate;
    }
    if (other.TableName.Length != 0) {
      TableName = other.TableName;
    }
    if (other.ChairNum != 0) {
      ChairNum = other.ChairNum;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    paraLsit_.Add(other.paraLsit_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          IsPrivate = input.ReadBool();
          break;
        }
        case 18: {
          TableName = input.ReadString();
          break;
        }
        case 24: {
          ChairNum = input.ReadInt32();
          break;
        }
        case 50: {
          Password = input.ReadString();
          break;
        }
        case 58:
        case 56: {
          paraLsit_.AddEntriesFrom(input, _repeated_paraLsit_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          IsPrivate = input.ReadBool();
          break;
        }
        case 18: {
          TableName = input.ReadString();
          break;
        }
        case 24: {
          ChairNum = input.ReadInt32();
          break;
        }
        case 50: {
          Password = input.ReadString();
          break;
        }
        case 58:
        case 56: {
          paraLsit_.AddEntriesFrom(ref input, _repeated_paraLsit_codec);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///pvp创建桌子
/// </summary>
public sealed partial class MsgPvpCreateTableResp : pb::IMessage<MsgPvpCreateTableResp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpCreateTableResp> _parser = new pb::MessageParser<MsgPvpCreateTableResp>(() => new MsgPvpCreateTableResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpCreateTableResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpCreateTableResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpCreateTableResp(MsgPvpCreateTableResp other) : this() {
    retCode_ = other.retCode_;
    tableInfo_ = other.tableInfo_ != null ? other.tableInfo_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpCreateTableResp Clone() {
    return new MsgPvpCreateTableResp(this);
  }

  /// <summary>Field number for the "ret_code" field.</summary>
  public const int RetCodeFieldNumber = 1;
  private int retCode_;
  /// <summary>
  ///返回码	非零失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RetCode {
    get { return retCode_; }
    set {
      retCode_ = value;
    }
  }

  /// <summary>Field number for the "table_info" field.</summary>
  public const int TableInfoFieldNumber = 2;
  private global::MsgPvpTableInfo tableInfo_;
  /// <summary>
  ///桌子信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MsgPvpTableInfo TableInfo {
    get { return tableInfo_; }
    set {
      tableInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpCreateTableResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpCreateTableResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RetCode != other.RetCode) return false;
    if (!object.Equals(TableInfo, other.TableInfo)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RetCode != 0) hash ^= RetCode.GetHashCode();
    if (tableInfo_ != null) hash ^= TableInfo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (RetCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RetCode);
    }
    if (tableInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TableInfo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (RetCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RetCode);
    }
    if (tableInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TableInfo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RetCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
    }
    if (tableInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableInfo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpCreateTableResp other) {
    if (other == null) {
      return;
    }
    if (other.RetCode != 0) {
      RetCode = other.RetCode;
    }
    if (other.tableInfo_ != null) {
      if (tableInfo_ == null) {
        TableInfo = new global::MsgPvpTableInfo();
      }
      TableInfo.MergeFrom(other.TableInfo);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RetCode = input.ReadInt32();
          break;
        }
        case 18: {
          if (tableInfo_ == null) {
            TableInfo = new global::MsgPvpTableInfo();
          }
          input.ReadMessage(TableInfo);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          RetCode = input.ReadInt32();
          break;
        }
        case 18: {
          if (tableInfo_ == null) {
            TableInfo = new global::MsgPvpTableInfo();
          }
          input.ReadMessage(TableInfo);
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///pvp加入桌子
/// </summary>
public sealed partial class MsgPvpJoinTable : pb::IMessage<MsgPvpJoinTable>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpJoinTable> _parser = new pb::MessageParser<MsgPvpJoinTable>(() => new MsgPvpJoinTable());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpJoinTable> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpJoinTable() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpJoinTable(MsgPvpJoinTable other) : this() {
    tableId_ = other.tableId_;
    tableNo_ = other.tableNo_;
    password_ = other.password_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpJoinTable Clone() {
    return new MsgPvpJoinTable(this);
  }

  /// <summary>Field number for the "table_id" field.</summary>
  public const int TableIdFieldNumber = 1;
  private int tableId_;
  /// <summary>
  ///桌子id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableId {
    get { return tableId_; }
    set {
      tableId_ = value;
    }
  }

  /// <summary>Field number for the "table_no" field.</summary>
  public const int TableNoFieldNumber = 2;
  private int tableNo_;
  /// <summary>
  ///桌子编号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableNo {
    get { return tableNo_; }
    set {
      tableNo_ = value;
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 3;
  private string password_ = "";
  /// <summary>
  ///密码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpJoinTable);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpJoinTable other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TableId != other.TableId) return false;
    if (TableNo != other.TableNo) return false;
    if (Password != other.Password) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TableId != 0) hash ^= TableId.GetHashCode();
    if (TableNo != 0) hash ^= TableNo.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (TableId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TableId);
    }
    if (TableNo != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableNo);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Password);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (TableId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TableId);
    }
    if (TableNo != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableNo);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Password);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TableId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
    }
    if (TableNo != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNo);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpJoinTable other) {
    if (other == null) {
      return;
    }
    if (other.TableId != 0) {
      TableId = other.TableId;
    }
    if (other.TableNo != 0) {
      TableNo = other.TableNo;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TableId = input.ReadInt32();
          break;
        }
        case 16: {
          TableNo = input.ReadInt32();
          break;
        }
        case 26: {
          Password = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TableId = input.ReadInt32();
          break;
        }
        case 16: {
          TableNo = input.ReadInt32();
          break;
        }
        case 26: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///pvp加入桌子
/// </summary>
public sealed partial class MsgPvpJoinTableResp : pb::IMessage<MsgPvpJoinTableResp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpJoinTableResp> _parser = new pb::MessageParser<MsgPvpJoinTableResp>(() => new MsgPvpJoinTableResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpJoinTableResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpJoinTableResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpJoinTableResp(MsgPvpJoinTableResp other) : this() {
    retCode_ = other.retCode_;
    tableId_ = other.tableId_;
    tableNo_ = other.tableNo_;
    userId_ = other.userId_;
    playerNum_ = other.playerNum_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpJoinTableResp Clone() {
    return new MsgPvpJoinTableResp(this);
  }

  /// <summary>Field number for the "ret_code" field.</summary>
  public const int RetCodeFieldNumber = 1;
  private int retCode_;
  /// <summary>
  ///返回码	非零失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RetCode {
    get { return retCode_; }
    set {
      retCode_ = value;
    }
  }

  /// <summary>Field number for the "table_id" field.</summary>
  public const int TableIdFieldNumber = 2;
  private int tableId_;
  /// <summary>
  ///桌子id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableId {
    get { return tableId_; }
    set {
      tableId_ = value;
    }
  }

  /// <summary>Field number for the "table_no" field.</summary>
  public const int TableNoFieldNumber = 3;
  private int tableNo_;
  /// <summary>
  ///桌子编号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableNo {
    get { return tableNo_; }
    set {
      tableNo_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 4;
  private int userId_;
  /// <summary>
  ///用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "player_num" field.</summary>
  public const int PlayerNumFieldNumber = 5;
  private int playerNum_;
  /// <summary>
  ///剩余数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerNum {
    get { return playerNum_; }
    set {
      playerNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpJoinTableResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpJoinTableResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RetCode != other.RetCode) return false;
    if (TableId != other.TableId) return false;
    if (TableNo != other.TableNo) return false;
    if (UserId != other.UserId) return false;
    if (PlayerNum != other.PlayerNum) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RetCode != 0) hash ^= RetCode.GetHashCode();
    if (TableId != 0) hash ^= TableId.GetHashCode();
    if (TableNo != 0) hash ^= TableNo.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (PlayerNum != 0) hash ^= PlayerNum.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (RetCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RetCode);
    }
    if (TableId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableId);
    }
    if (TableNo != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TableNo);
    }
    if (UserId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(UserId);
    }
    if (PlayerNum != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(PlayerNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (RetCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RetCode);
    }
    if (TableId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableId);
    }
    if (TableNo != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TableNo);
    }
    if (UserId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(UserId);
    }
    if (PlayerNum != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(PlayerNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RetCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
    }
    if (TableId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
    }
    if (TableNo != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNo);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (PlayerNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerNum);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpJoinTableResp other) {
    if (other == null) {
      return;
    }
    if (other.RetCode != 0) {
      RetCode = other.RetCode;
    }
    if (other.TableId != 0) {
      TableId = other.TableId;
    }
    if (other.TableNo != 0) {
      TableNo = other.TableNo;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.PlayerNum != 0) {
      PlayerNum = other.PlayerNum;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RetCode = input.ReadInt32();
          break;
        }
        case 16: {
          TableId = input.ReadInt32();
          break;
        }
        case 24: {
          TableNo = input.ReadInt32();
          break;
        }
        case 32: {
          UserId = input.ReadInt32();
          break;
        }
        case 40: {
          PlayerNum = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          RetCode = input.ReadInt32();
          break;
        }
        case 16: {
          TableId = input.ReadInt32();
          break;
        }
        case 24: {
          TableNo = input.ReadInt32();
          break;
        }
        case 32: {
          UserId = input.ReadInt32();
          break;
        }
        case 40: {
          PlayerNum = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///pvp离开桌子
/// </summary>
public sealed partial class MsgPvpStandUpTableResp : pb::IMessage<MsgPvpStandUpTableResp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpStandUpTableResp> _parser = new pb::MessageParser<MsgPvpStandUpTableResp>(() => new MsgPvpStandUpTableResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpStandUpTableResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpStandUpTableResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpStandUpTableResp(MsgPvpStandUpTableResp other) : this() {
    retCode_ = other.retCode_;
    tableId_ = other.tableId_;
    tableNo_ = other.tableNo_;
    userId_ = other.userId_;
    playerNum_ = other.playerNum_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpStandUpTableResp Clone() {
    return new MsgPvpStandUpTableResp(this);
  }

  /// <summary>Field number for the "ret_code" field.</summary>
  public const int RetCodeFieldNumber = 1;
  private int retCode_;
  /// <summary>
  ///返回码	非零失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RetCode {
    get { return retCode_; }
    set {
      retCode_ = value;
    }
  }

  /// <summary>Field number for the "table_id" field.</summary>
  public const int TableIdFieldNumber = 2;
  private int tableId_;
  /// <summary>
  ///桌子id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableId {
    get { return tableId_; }
    set {
      tableId_ = value;
    }
  }

  /// <summary>Field number for the "table_no" field.</summary>
  public const int TableNoFieldNumber = 3;
  private int tableNo_;
  /// <summary>
  ///桌子编号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableNo {
    get { return tableNo_; }
    set {
      tableNo_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 4;
  private int userId_;
  /// <summary>
  ///用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "player_num" field.</summary>
  public const int PlayerNumFieldNumber = 5;
  private int playerNum_;
  /// <summary>
  ///剩余数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerNum {
    get { return playerNum_; }
    set {
      playerNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpStandUpTableResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpStandUpTableResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RetCode != other.RetCode) return false;
    if (TableId != other.TableId) return false;
    if (TableNo != other.TableNo) return false;
    if (UserId != other.UserId) return false;
    if (PlayerNum != other.PlayerNum) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RetCode != 0) hash ^= RetCode.GetHashCode();
    if (TableId != 0) hash ^= TableId.GetHashCode();
    if (TableNo != 0) hash ^= TableNo.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (PlayerNum != 0) hash ^= PlayerNum.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (RetCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RetCode);
    }
    if (TableId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableId);
    }
    if (TableNo != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TableNo);
    }
    if (UserId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(UserId);
    }
    if (PlayerNum != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(PlayerNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (RetCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RetCode);
    }
    if (TableId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableId);
    }
    if (TableNo != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TableNo);
    }
    if (UserId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(UserId);
    }
    if (PlayerNum != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(PlayerNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RetCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
    }
    if (TableId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
    }
    if (TableNo != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNo);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    if (PlayerNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerNum);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpStandUpTableResp other) {
    if (other == null) {
      return;
    }
    if (other.RetCode != 0) {
      RetCode = other.RetCode;
    }
    if (other.TableId != 0) {
      TableId = other.TableId;
    }
    if (other.TableNo != 0) {
      TableNo = other.TableNo;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.PlayerNum != 0) {
      PlayerNum = other.PlayerNum;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RetCode = input.ReadInt32();
          break;
        }
        case 16: {
          TableId = input.ReadInt32();
          break;
        }
        case 24: {
          TableNo = input.ReadInt32();
          break;
        }
        case 32: {
          UserId = input.ReadInt32();
          break;
        }
        case 40: {
          PlayerNum = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          RetCode = input.ReadInt32();
          break;
        }
        case 16: {
          TableId = input.ReadInt32();
          break;
        }
        case 24: {
          TableNo = input.ReadInt32();
          break;
        }
        case 32: {
          UserId = input.ReadInt32();
          break;
        }
        case 40: {
          PlayerNum = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///pvp解放桌子
/// </summary>
public sealed partial class MsgPvpDestroyTableResp : pb::IMessage<MsgPvpDestroyTableResp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpDestroyTableResp> _parser = new pb::MessageParser<MsgPvpDestroyTableResp>(() => new MsgPvpDestroyTableResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpDestroyTableResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpDestroyTableResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpDestroyTableResp(MsgPvpDestroyTableResp other) : this() {
    retCode_ = other.retCode_;
    tableId_ = other.tableId_;
    tableNo_ = other.tableNo_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpDestroyTableResp Clone() {
    return new MsgPvpDestroyTableResp(this);
  }

  /// <summary>Field number for the "ret_code" field.</summary>
  public const int RetCodeFieldNumber = 1;
  private int retCode_;
  /// <summary>
  ///返回码	非零失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RetCode {
    get { return retCode_; }
    set {
      retCode_ = value;
    }
  }

  /// <summary>Field number for the "table_id" field.</summary>
  public const int TableIdFieldNumber = 2;
  private int tableId_;
  /// <summary>
  ///桌子id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableId {
    get { return tableId_; }
    set {
      tableId_ = value;
    }
  }

  /// <summary>Field number for the "table_no" field.</summary>
  public const int TableNoFieldNumber = 3;
  private int tableNo_;
  /// <summary>
  ///桌子编号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableNo {
    get { return tableNo_; }
    set {
      tableNo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpDestroyTableResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpDestroyTableResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RetCode != other.RetCode) return false;
    if (TableId != other.TableId) return false;
    if (TableNo != other.TableNo) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RetCode != 0) hash ^= RetCode.GetHashCode();
    if (TableId != 0) hash ^= TableId.GetHashCode();
    if (TableNo != 0) hash ^= TableNo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (RetCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RetCode);
    }
    if (TableId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableId);
    }
    if (TableNo != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TableNo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (RetCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RetCode);
    }
    if (TableId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TableId);
    }
    if (TableNo != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TableNo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RetCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
    }
    if (TableId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
    }
    if (TableNo != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableNo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpDestroyTableResp other) {
    if (other == null) {
      return;
    }
    if (other.RetCode != 0) {
      RetCode = other.RetCode;
    }
    if (other.TableId != 0) {
      TableId = other.TableId;
    }
    if (other.TableNo != 0) {
      TableNo = other.TableNo;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RetCode = input.ReadInt32();
          break;
        }
        case 16: {
          TableId = input.ReadInt32();
          break;
        }
        case 24: {
          TableNo = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          RetCode = input.ReadInt32();
          break;
        }
        case 16: {
          TableId = input.ReadInt32();
          break;
        }
        case 24: {
          TableNo = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///pvp桌子踢人
/// </summary>
public sealed partial class MsgPvpKickUserResp : pb::IMessage<MsgPvpKickUserResp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpKickUserResp> _parser = new pb::MessageParser<MsgPvpKickUserResp>(() => new MsgPvpKickUserResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpKickUserResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpKickUserResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpKickUserResp(MsgPvpKickUserResp other) : this() {
    retCode_ = other.retCode_;
    ownerId_ = other.ownerId_;
    ownerNick_ = other.ownerNick_;
    kickId_ = other.kickId_;
    kickNick_ = other.kickNick_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpKickUserResp Clone() {
    return new MsgPvpKickUserResp(this);
  }

  /// <summary>Field number for the "ret_code" field.</summary>
  public const int RetCodeFieldNumber = 1;
  private int retCode_;
  /// <summary>
  ///返回码	非零失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RetCode {
    get { return retCode_; }
    set {
      retCode_ = value;
    }
  }

  /// <summary>Field number for the "owner_id" field.</summary>
  public const int OwnerIdFieldNumber = 2;
  private int ownerId_;
  /// <summary>
  ///房主ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OwnerId {
    get { return ownerId_; }
    set {
      ownerId_ = value;
    }
  }

  /// <summary>Field number for the "owner_nick" field.</summary>
  public const int OwnerNickFieldNumber = 3;
  private string ownerNick_ = "";
  /// <summary>
  ///房主昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OwnerNick {
    get { return ownerNick_; }
    set {
      ownerNick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "kick_id" field.</summary>
  public const int KickIdFieldNumber = 4;
  private int kickId_;
  /// <summary>
  ///被踢ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KickId {
    get { return kickId_; }
    set {
      kickId_ = value;
    }
  }

  /// <summary>Field number for the "kick_nick" field.</summary>
  public const int KickNickFieldNumber = 5;
  private string kickNick_ = "";
  /// <summary>
  ///被踢昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string KickNick {
    get { return kickNick_; }
    set {
      kickNick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpKickUserResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpKickUserResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RetCode != other.RetCode) return false;
    if (OwnerId != other.OwnerId) return false;
    if (OwnerNick != other.OwnerNick) return false;
    if (KickId != other.KickId) return false;
    if (KickNick != other.KickNick) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RetCode != 0) hash ^= RetCode.GetHashCode();
    if (OwnerId != 0) hash ^= OwnerId.GetHashCode();
    if (OwnerNick.Length != 0) hash ^= OwnerNick.GetHashCode();
    if (KickId != 0) hash ^= KickId.GetHashCode();
    if (KickNick.Length != 0) hash ^= KickNick.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (RetCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RetCode);
    }
    if (OwnerId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OwnerId);
    }
    if (OwnerNick.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(OwnerNick);
    }
    if (KickId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(KickId);
    }
    if (KickNick.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(KickNick);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (RetCode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RetCode);
    }
    if (OwnerId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OwnerId);
    }
    if (OwnerNick.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(OwnerNick);
    }
    if (KickId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(KickId);
    }
    if (KickNick.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(KickNick);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RetCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
    }
    if (OwnerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerId);
    }
    if (OwnerNick.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerNick);
    }
    if (KickId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KickId);
    }
    if (KickNick.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(KickNick);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpKickUserResp other) {
    if (other == null) {
      return;
    }
    if (other.RetCode != 0) {
      RetCode = other.RetCode;
    }
    if (other.OwnerId != 0) {
      OwnerId = other.OwnerId;
    }
    if (other.OwnerNick.Length != 0) {
      OwnerNick = other.OwnerNick;
    }
    if (other.KickId != 0) {
      KickId = other.KickId;
    }
    if (other.KickNick.Length != 0) {
      KickNick = other.KickNick;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RetCode = input.ReadInt32();
          break;
        }
        case 16: {
          OwnerId = input.ReadInt32();
          break;
        }
        case 26: {
          OwnerNick = input.ReadString();
          break;
        }
        case 32: {
          KickId = input.ReadInt32();
          break;
        }
        case 42: {
          KickNick = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          RetCode = input.ReadInt32();
          break;
        }
        case 16: {
          OwnerId = input.ReadInt32();
          break;
        }
        case 26: {
          OwnerNick = input.ReadString();
          break;
        }
        case 32: {
          KickId = input.ReadInt32();
          break;
        }
        case 42: {
          KickNick = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///pvp房主变更
/// </summary>
public sealed partial class MsgPvpTableChangeOwnerResp : pb::IMessage<MsgPvpTableChangeOwnerResp>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MsgPvpTableChangeOwnerResp> _parser = new pb::MessageParser<MsgPvpTableChangeOwnerResp>(() => new MsgPvpTableChangeOwnerResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgPvpTableChangeOwnerResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GameReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpTableChangeOwnerResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpTableChangeOwnerResp(MsgPvpTableChangeOwnerResp other) : this() {
    tableId_ = other.tableId_;
    ownerId_ = other.ownerId_;
    isActivate_ = other.isActivate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgPvpTableChangeOwnerResp Clone() {
    return new MsgPvpTableChangeOwnerResp(this);
  }

  /// <summary>Field number for the "table_id" field.</summary>
  public const int TableIdFieldNumber = 1;
  private int tableId_;
  /// <summary>
  ///桌子ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TableId {
    get { return tableId_; }
    set {
      tableId_ = value;
    }
  }

  /// <summary>Field number for the "owner_id" field.</summary>
  public const int OwnerIdFieldNumber = 2;
  private int ownerId_;
  /// <summary>
  ///房主ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OwnerId {
    get { return ownerId_; }
    set {
      ownerId_ = value;
    }
  }

  /// <summary>Field number for the "is_activate" field.</summary>
  public const int IsActivateFieldNumber = 3;
  private bool isActivate_;
  /// <summary>
  ///是否激活
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsActivate {
    get { return isActivate_; }
    set {
      isActivate_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgPvpTableChangeOwnerResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgPvpTableChangeOwnerResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TableId != other.TableId) return false;
    if (OwnerId != other.OwnerId) return false;
    if (IsActivate != other.IsActivate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TableId != 0) hash ^= TableId.GetHashCode();
    if (OwnerId != 0) hash ^= OwnerId.GetHashCode();
    if (IsActivate != false) hash ^= IsActivate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (TableId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TableId);
    }
    if (OwnerId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OwnerId);
    }
    if (IsActivate != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsActivate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (TableId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(TableId);
    }
    if (OwnerId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OwnerId);
    }
    if (IsActivate != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsActivate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TableId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TableId);
    }
    if (OwnerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerId);
    }
    if (IsActivate != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgPvpTableChangeOwnerResp other) {
    if (other == null) {
      return;
    }
    if (other.TableId != 0) {
      TableId = other.TableId;
    }
    if (other.OwnerId != 0) {
      OwnerId = other.OwnerId;
    }
    if (other.IsActivate != false) {
      IsActivate = other.IsActivate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TableId = input.ReadInt32();
          break;
        }
        case 16: {
          OwnerId = input.ReadInt32();
          break;
        }
        case 24: {
          IsActivate = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          TableId = input.ReadInt32();
          break;
        }
        case 16: {
          OwnerId = input.ReadInt32();
          break;
        }
        case 24: {
          IsActivate = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
